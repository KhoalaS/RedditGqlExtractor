type AwardReportData {
	awardId: String
	username: String
	blockUserId: String
}
type DevplatformRuntimeTraceInfo {
	target: String
	intent: Unknown
	eventCount: Int
}
type Comment {
	id: String
}
type NavViewRecapMenu {
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type SubredditClickRecap {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type UpdatePhoneNumberClickRemoveCurrentPhoneNumber {
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type DevplatformTraceClient {
	devplatform: DevPlatform
	devplatformBaseTrace: DevplatformBaseTrace
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type UserSubreddit {
	isFavorite: Boolean
	isMod: Boolean
	isSubscriber: Boolean
	recentlyVisited: Boolean
}
type Parsed {
	value: RoomSyncEphemeral
}
type ContentGate {
	action: String
	noun: String
	correlationId: String
	oauth: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type PickerPresentationModel {
	id: Unknown
	title: String
	iconRes: [Unknown]
	currentOptionIndex: Boolean
}
type SectionHeaderUiModel {
	id: String
	title: String
}
type ExposedExperimentPresentationModel {
	id: String
	title: String
	value: String
	timestamp: Int
}
type DescriptionRadioButtonPresentationModel {
	id: String
	title: String
	description: String
	isEnabled: Boolean
	isOn: Boolean
	onChanged: Unknown
}
type SubredditNotifLevelPresentationModel {
	id: String
	displayName: String
	icon: Unknown
	level: Unknown
	isEnabled: Boolean
	onChanged: Unknown
	isMuted: Boolean
}
type InlineSliderPresentationModel {
	id: String
	title: String
	subtitle: String
	stepLabels: [Unknown]
	descriptiveStepLabels: [Unknown]
	currentStep: Boolean
	onChanged: Unknown
}
type SliderPresentationModel {
	id: Unknown
	title: String
	iconRes: String
	isEnabled: Boolean
	onChanged: Unknown
}
type LinkOptionSelectorPresentationModel {
	id: Unknown
	title: String
	description: Unknown
	iconRes: Unknown
	option: String
	onClick: Unknown
}
type UserCommentElementUiState {
	pageStartTime: Int
	userCommentViewState: UserComment
}
type TogglePresentationModel {
	id: String
	title: String
	iconRes: Int
	isEnabled: Boolean
	isOn: Boolean
	onChanged: Unknown
}
type ListHeaderUiModel {
	id: String
	title: String
	asHtml: Boolean
}
type GroupHeaderUiModel {
	id: Unknown
	title: String
	showDivider: Boolean
}
type DescriptionUiModel {
	id: String
	description: String
}
type TwoLineTogglePresentationModel {
	id: String
	title: String
	subtitle: String
	isOn: Boolean
	onChanged: Unknown
}
type IconListHeaderUiModel {
	id: Unknown
	title: String
	text: String
}
type DescriptionTogglePresentationModel {
	id: String
	title: String
	description: String
	iconRes: Int
	iconTintOverrideRes: Int
	isEnabled: Boolean
	isOn: Boolean
	onChanged: Unknown
}
type SummaryPickerPresentationModel {
	id: String
	title: String
	summary: String
	icon: Unknown
	isEnabled: Boolean
	onClicked: Unknown
}
type LinkSubtitlePresentationModel {
	id: String
	title: String
	subtitle: String
	iconRes: Int
	autoTint: Boolean
	showIndicator: Boolean
	actionButtonText: String
	iconTintOverrideRes: Int
	iconTintOverrideIsAttr: Boolean
	isEnabled: Boolean
	onClicked: Unknown
	onActionButtonClicked: Unknown
}
type FlairChipState {
	text: String
	richtext: [Unknown]
	backgroundColor: String
}
type PremiumSettingsScreenDependencies {
	view: Unknown
}
type RemovalReasonsClick {
	noun: String
	post: Post
	comment: Comment
	subreddit: Subreddit
	actionInfo: ActionInfo
	modAction: ModAction
	poll: Unknown
	filter: Filter
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type PostViewPost {
	action: String
	correlationId: String
	post: Post
	listing: Listing
	comment: Unknown
	userPreferences: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	media: Media
	profile: Unknown
	experiment: Experiment
	userSubreddit: Unknown
	search: Search
	goldPurchase: Unknown
	visibility: Visibility
	relevanceModel: Unknown
	metaSearch: Unknown
	customFeed: Unknown
	targetPost: Post
	mlModel: MlModel
	topicMetadata: TopicMetadata
	poll: Poll
	playback: Unknown
	feed: Feed
	predictions: Unknown
	navigationSession: NavigationSession
	theaterMode: Unknown
	adMetadata: Unknown
	newAward: NewAward
	translationMetrics: TranslationMetrics
	snacks: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type Input {
	builderConstants: ConstantBuilderModel
	currentSnoovatar: SnoovatarModel
	canVaultBeSecured: Boolean
}
type TabData {
	sectionIds: String
	isPremiumSection: Boolean
}
type StoreModel {
	outfitLists: [Unknown]
}
type FactoryData {
	currentSnoovatar: SnoovatarModel
	defaultAssets: DefaultAssets
}
type LinkPresentationModel {
	id: String
	title: String
	iconRes: Int
	actionButtonText: String
	currentValue: String
	autoTint: Boolean
	isEnabled: Boolean
	onClicked: Unknown
	onActionButtonClicked: Unknown
	textColorResId: Int
	showEndDrawable: Boolean
}
type AdPostUnitProps {
	sections: Unknown
	uniqueLinkId: String
}
type CreatorKitScreenDependencies {
	navigator: Unknown
}
type PostCarouselSection {
	postCarouselElement: PostCarouselElement
	onPostClick: Unknown
	onAttributionClick: Unknown
	onCtaClick: Unknown
	onCarouselVisible: Unknown
	onIndexVisible: Unknown
}
type ImageParams {
	editImageUrl: String
}
type VideoParams {
	reactVideoUrl: String
	reactUsername: String
	trimVideoUrl: String
	trimVideoDurationMaxLimit: Int
}
type AdPostUnitViewState {
	sections: Unknown
	analyticsInfo: AdAnalyticsInfo
	eventDispatch: PostDetailContext
	onAdVisibilityChange: Unknown
}
type UserCommentProps {
	index: Int
	commentKindWithId: String
}
type AndroidMemoryEventInfo {
	eventType: String
	trimLevel: String
}
type GlobalMemoryApp {
	action: Unknown
	androidMemoryEvent: AndroidMemoryEventInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PostDetailScreenArguments {
	analyticsScreenData: ScreenPageData
	analyticsScreenReferrer: Unknown
	commentContext: Unknown
	correlationId: String
	deeplink: String
	deepLinkAnalytics: Unknown
	galleryItemSelectedIndex: Int
	isFromPager: Boolean
	isFromTrendingPushNotification: Boolean
	isImmediateView: Boolean
	isNsfwFeed: Boolean
	navigationSession: Unknown
	link: Unknown
	linkId: String
	linkKindWithId: String
	linkListingActionType: Unknown
	scrollPastPostBody: Boolean
	speedReadPositionProvidedByParent: Boolean
	subredditId: String
	subredditName: String
	isContinuation: Boolean
	uniqueId: String
	promoted: Boolean
}
type Link {
	model: Unknown
}
type Comment {
	model: Unknown
	editPosition: Unknown
}
type FactoryData {
	currentSnoovatar: SnoovatarModel
	defaultAssets: DefaultAssets
}
type CommunityInviteReminderClickAcceptModInvite {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type BannerView {
	noun: String
	userPreferences: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	metaSearch: Unknown
	banner: Unknown
	topicMetadata: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type UsernameChangedSuccess {
	username: String
}
type RichTextFormatting {
	formatList: [Unknown]
}
type KindWithArity {
	kind: Unknown
}
type RichTextOptions {
	underlineLinks: Boolean
	boldLinks: Boolean
	autoTintLinks: Boolean
	textPaddingTop: Int
}
type SelectUsername {
	initUsername: String
}
type EditUsernameFlowPresentationModel {
	fullSizeScreen: Unknown
	bottomDialogPresentationModel: BottomDialogPresentationModel
}
type FeedExperienceConsumeSubreddit {
	subreddit: Subreddit
	actionInfo: ActionInfo
	communityRecommendationUnit: CommunityRecommendationUnit
	feed: Feed
	topicTag: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ModeratorSelectTypeModlog {
	correlationId: String
	subreddit: Subreddit
	actionInfo: ActionInfo
	modAction: ModAction
	modnote: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type AvatarElementProps {
	authorId: String
	isNftIcon: Boolean
	authorIcon: String
	isSnoovatarIcon: Boolean
	onAvatarClick: Unknown
}
type AvatarElementUiState {
	authorId: String
	isNftIcon: Boolean
	authorIcon: String
	status: Unknown
	onAvatarClick: Unknown
	avatarContent: Unknown
}
type PhoneAuthEnterPhoneSubmitEnterNumber {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PostModActionMenuClick {
	noun: String
	post: Post
	subreddit: Subreddit
	actionInfo: ActionInfo
	profile: Unknown
	userSubreddit: UserSubreddit
	setting: Setting
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type AvatarBackgroundColor {
	colorLabel: String
}
type CommentThreadIndentDecoration {
	backgroundAlpha: Unknown
	threadLineColor: Unknown
}
type TemplateIconItem {
	url: String
	tintColor: Unknown
	iconDescription: String
}
type Preview {
	domain: String
	imageUrl: String
}
type OnboardingHorizontalScrollCategory {
	actionInfo: ActionInfo
	onboarding: Onboarding
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ModToolsView {
	noun: String
	actionInfo: ActionInfo
	subreddit: Subreddit
	topicTag: Unknown
	setting: Setting
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ChannelInput {
	teamOwner: Unknown
	category: Unknown
	subredditID: Unknown
	postID: Unknown
	userID: Unknown
	modmailConversationID: Unknown
	tag: Unknown
}
type SubscribeInput {
	channel: ChannelInput
}
type ModmailSwipeArchiveThread {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ProfileSettingsClick {
	noun: String
	userPreferences: Unknown
	actionInfo: ActionInfo
	profile: Unknown
	socialLink: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type ClientEmitMetric {
	metric: MetricsContext
}
type MetricsContext {
	name: String
	value: Float
	labelValues: [Unknown]
	sensitiveLabelValues: [Unknown]
}
type CommentToastEvent {
	action: String
	noun: String
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type OnboardingSelectCategory {
	listing: Unknown
	userPreferences: Unknown
	actionInfo: ActionInfo
	onboarding: Onboarding
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type JavaTypeAttributes {
	howThisTypeIsUsed: Unknown
	flexibility: Unknown
	isRaw: Boolean
	isForAnnotationParameter: Boolean
	visitedTypeParameters: Unknown
	defaultType: Unknown
}
type UpdatePhoneNumberClickEnterPhoneNumber {
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ChannelManagementReceivedError {
	subreddit: Subreddit
	channelManagement: ChannelManagement
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type MapPostFeedParams {
	listingType: Unknown
	isClassicMode: Boolean
	isNsfwFeed: Boolean
	showTimePostedLabel: Boolean
	showIndicators: Boolean
	showOverflowMenu: Boolean
	showSubscribeButton: Boolean
	category: Unknown
	animateGivenAward: Boolean
}
type FeedExperienceRemoveDuplicatedSubreddit {
	subreddit: Subreddit
	actionInfo: ActionInfo
	communityRecommendationUnit: CommunityRecommendationUnit
	feed: Feed
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type Gallery {
	text: String
	images: [Unknown]
}
type PostSubmitParams {
	subredditName: String
	title: String
	isNsfw: Boolean
	isSpoiler: Boolean
	isBrand: Boolean
	isSendReplies: Boolean
	flairId: String
	flairText: String
	content: Unknown
	postSet: PostSetContent
	targetLanguage: String
	amaEventInfo: Unknown
	correlationId: String
	isClubContent: Boolean
}
type Image {
	mediaId: String
	caption: String
	url: String
}
type MediaPostCreating {
	websocketUrl: String
	postId: String
	title: String
	languageCode: String
	isNsfw: Boolean
	domain: String
	createdAt: Int
	url: String
	authorId: String
	subredditId: String
	subredditName: String
}
type CreatePostSetParams {
	postIds: [Unknown]
}
type PostCreated {
	postId: String
	title: String
	languageCode: String
	isNsfw: Boolean
	domain: String
	createdAt: Int
	url: String
	authorId: String
	subredditId: String
	subredditName: String
}
type UpdatePostSetParams {
	postSetId: String
	postsToAdd: [Unknown]
}
type PostSetContent {
	id: String
	defaultPostId: String
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type Data {
	search: Search
}
type OnRedditor {
	icon: Icon
}
type Image {
	text: String
	url: String
}
type ValidationError {
	postSubmitValidationErrors: Unknown
	rawError: String
}
type Data {
	allV3: AllV3
}
type CommunitySetFrequencyEvent {
	noun: String
	userPreferences: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type PageInfo {
	hasNextPage: Boolean
	hasPreviousPage: Boolean
	startCursor: String
	endCursor: String
}
type Image {
}
type SearchModmailConversations {
	pageInfo: PageInfo
	edges: [Unknown]
}
type Data {
	identity: Identity
}
type Dimensions {
}
type SubmitError {
	error: String
	code: String
}
type PostsAdEligibility {
	adEligibility: PostAdEligibilityStatus
	expiresAt: Unknown
}
type Edge {
	cursor: String
	node: Node
}
type ErrorInputArg {
	value: String
	variableName: String
}
type Edge {
	node: Node
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type RedditorInfoByName {
	__typename: String
	onRedditor: OnRedditor
}
type OnAutomationBlockOutcome {
	__typename: String
	automation: Automation
	contentMessages: [Unknown]
}
type GetGoldBalancesQuery {
	environment: Present
}
type Identity {
	redditor: Redditor
}
type Trophies {
	edges: [Unknown]
}
type EconSpecialEvents {
	__typename: String
	avatarMarketingEvents: [Unknown]
}
type MediaPack {
	id: String
	name: String
	emotes: [Unknown]
}
type GetMutedMembersByUsernameQuery {
	subredditId: String
	redditorUsername: String
}
type MyAuthoredMultiredditsQuery {
	withSubreddits: Present
	after: Unknown
}
type ScheduledPostsForSubredditQuery {
	subredditId: String
	includeMediaAuth: Unknown
	includeExtendedVideoAsset: Unknown
}
type Identity {
	paymentSubscriptions: [Unknown]
}
type Edge {
	__typename: String
	node: Node
}
type Identity {
	allowlistedRedditorsInfo: AllowlistedRedditorsInfo
}
type Subreddit {
	id: String
	name: String
	prefixedName: String
	styles: Unknown
}
type RemovalReason {
	__typename: String
	removalReason: RemovalReason
}
type EconEducationalUnitQuery {
	id: String
}
type PageInfo {
	hasNextPage: Boolean
	hasPreviousPage: Boolean
	startCursor: String
	endCursor: String
}
type CommentById {
	__typename: String
	onComment: OnComment
}
type AllowlistedRedditorsInfo {
	edges: [Unknown]
}
type TaxonomyInfo {
	topics: [Unknown]
}
type QueryTagSubredditsQuery {
	searchTerms: [Unknown]
	channelId: String
}
type Node {
	__typename: String
	onAchievementTrophyCategory: OnAchievementTrophyCategory
}
type Data {
	rtjsonFromMarkdown: Unknown
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type OnSubreddit {
	name: String
	moderatorMembers: ModeratorMembers
}
type PostBody {
	markdown: String
}
type PageInfo {
	__typename: String
	fullPageInfoFragment: FullPageInfoFragment
}
type Node {
	__typename: String
	onSubredditChatChannel: Unknown
	onSubredditPostChannel: Unknown
}
type General {
	communities: Communities
}
type Media {
	still: Still
}
type Subreddit {
	__typename: String
	onSubreddit: OnSubreddit
}
type AchievementTrophyByIdQuery {
	id: String
	includeAvatarReward: Boolean
	pastContributionsFirst: Unknown
	currentProgressFirst: Unknown
	includeLeaderboard: Boolean
}
type CustomFeedV3 {
	elements: Elements
}
type OnExplainerButton {
	deeplink: String
	size: ExplainerButtonSize
	style: ExplainerButtonStyle
	title: String
}
type Data {
	identity: Identity
}
type OnPostInfo {
	id: String
}
type Targeting {
	endsAt: Unknown
	startsAt: Unknown
}
type ForYou {
	__typename: String
	recChatChannelsFragment: RecChatChannelsFragment
}
type PostInfo {
	__typename: String
	isHighlighted: Boolean
	commentCount: Unknown
	onDeletedSubredditPost: OnDeletedSubredditPost
	postFragment: PostFragment
}
type Profile {
	__typename: String
	onProfile: OnProfile
}
type OnSubreddit {
	modPermissions: ModPermissions
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type Node {
	id: String
}
type GetDiscoverPageTopicQuery {
	schemeName: String
	topic: String
}
type Moderation {
	isModeratorInvitePending: Boolean
}
type Comments {
	isEnabled: Boolean
	confidence: ReputationFilterConfidence
}
type Automation1 {
	id: String
}
type Data {
	navBarEventCommunityPicker: NavBarEventCommunityPicker
}
type PageInfo {
	endCursor: String
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type SubscribedSubreddits {
	edges: [Unknown]
	pageInfo: PageInfo
}
type Accessory {
	__typename: String
	avatarAccessoryFragment: AvatarAccessoryFragment
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type GetChatChannelBannedUsersQuery {
	channelId: String
	after: Unknown
}
type GlobalModifiers {
	__typename: String
	searchModifiersFragment: SearchModifiersFragment
}
type AdditionalAction {
	__typename: String
	onAchievementActionNotificationToggle: OnAchievementActionNotificationToggle
}
type MultiContentSearchResults {
	general: General
}
type OnAdPost {
	id: String
	impressionId: String
	adEvents: [Unknown]
	encryptedTrackingPayload: String
	additionalEventMetadata: [Unknown]
	isBlank: Boolean
	thumbnail: Thumbnail1
	media: Media
	excludedExperiments: [Unknown]
}
type Data {
	econSpecialEvents: EconSpecialEvents
	identity: Identity
}
type ModeratorEvaluatePostAutomationsQuery {
	subredditId: String
	input: ModeratorEvaluatePostAutomationsInput
}
type Edge {
	node: Node
}
type Content1 {
	markdown: String
}
type OnRedditor {
	id: String
	name: String
	icon: Icon
}
type PageInfo {
	endCursor: String
}
type Data {
	subredditInfoById: SubredditInfoById
}
type TrophyCase {
	achievementTrophyById: AchievementTrophyById
}
type Image1 {
}
type PageInfo {
	endCursor: String
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type Layout {
	layoutJson: Unknown
}
type TranslatedContent {
	__typename: String
	translatedPostContentFragment: TranslatedPostContentFragment
}
type Edge {
	node: Node
}
type PostInfoById {
	__typename: String
	onProfilePost: OnProfilePost
}
type OnPost {
	__typename: String
	translatedContent: TranslatedContent
	gallery: Gallery
	translatedPostImageFragment: TranslatedPostImageFragment
}
type OnMedia1 {
	packagedMedia: PackagedMedia1
	streaming: Streaming1
}
type Node {
	subredditMemberInfo: SubredditMemberInfo
	redditor: Redditor
	isActive: Boolean
	isEditable: Boolean
	isReorderable: Boolean
	becameModeratorAt: Unknown
	modPermissions: ModPermissions
}
type Moderation1 {
	actions: Actions1
}
type MyMultiredditsQuery {
	withSubreddits: Present
	after: Unknown
}
type RecentComment {
	__typename: String
	id: String
	postInfo: PostInfo
	isRemoved: Boolean
	onComment: OnComment
}
type Data {
	chatPageNavigation: ChatPageNavigation
}
type TypeaheadByType {
	subreddits: [Unknown]
}
type OnPost {
	__typename: String
	translatedContent: TranslatedContent
	gallery: Gallery
	translatedPostImageFragment: TranslatedPostImageFragment
}
type GetCommentAwardsQuery {
	commentId: String
	iconSize: Boolean
}
type Data {
	postInfoById: PostInfoById
}
type Data {
	identity: Identity
}
type OnNotificationSettingsLayoutAdminNotificationRow {
	description: String
}
type Preferences {
	isTopKarmaSubredditsShown: Boolean
}
type Dynamic {
	modifiers: Modifiers
}
type Node {
	id: String
	title: String
	downsized: Downsized
	fixed_height: Fixed_height
	fixed_width: Fixed_width
}
type Node1 {
	__typename: String
	trophyFragment: TrophyFragment
}
type PaymentSubscription {
	productType: SubscriptionProductType
	status: SubscriptionStatus
	expiresAt: Unknown
	nextPaymentAt: Unknown
}
type Node1 {
	__typename: String
	postInfoFragment: PostInfoFragment
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type OnComment {
	content: Content
}
type GetAvatarStorefrontDynamicLayoutQuery {
	screen: Present
}
type Icon {
}
type OnSubreddit {
	scheduledPosts: ScheduledPosts
}
type Data {
	modmailFullConversation: ModmailFullConversation
}
type GetShowcaseOfRedditorQuery {
	redditorId: String
}
type Media {
	__typename: String
	onMedia: OnMedia
}
type SearchChatGifsQuery {
	query: String
	first: Present
	after: Present
}
type CommunityPickerSearchQuery {
	query: String
	isNsfwIncluded: Boolean
}
type Node {
	id: String
}
type TemplateValidation {
	ok: Boolean
	errorMessage: String
	unsupportedMacros: [Unknown]
}
type Data {
	withName: [Unknown]
}
type OnDeletedComment {
	id: String
	postInfo: PostInfo1
}
type OnSubredditContribution {
	subreddit: Subreddit2
	contributedAt: Unknown
}
type Products {
	devvit: [Unknown]
}
type OnRedditor {
	name: String
}
type ValidateCreateSubredditQuery {
	input: CreateSubredditValidationInput
}
type PreviewCommentAutomation {
	ok: Boolean
	errors: [Unknown]
	result: Result
}
type Edge {
	node: Node
}
type Preferences {
	isFirstPartyAdPersonalizationPreferenceShown: Boolean
	isAdPersonalizationAllowed: Boolean
	isThirdPartyInfoAdPersonalizationAllowed: Boolean
}
type Node {
	__typename: String
	postFragment: PostFragment
}
type AllFeedSduiQuery {
	adContextInput: Unknown
	feedContextInput: Unknown
	sort: Unknown
	time: Unknown
	after: Unknown
	includeViewCount: Unknown
	includePackagedMedia: Unknown
	includeCarouselRecommendations: Unknown
	includeListStyleRecommendations: Unknown
	includeCompactPostStyleRecommendations: Unknown
	includeCardPostStyleRecommendations: Unknown
	includeTaxonomyTopicsFeedElement: Unknown
	includeExploreFeaturedItemsFeedElement: Unknown
	includeTopicGroupFeedElement: Unknown
	includeRankedCommunityFeedElement: Unknown
	includeChatChannelFeedUnit: Unknown
	includeGoldInfo: Unknown
	includeEconPromos: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includeNewInCommunitiesCarousel: Unknown
}
type PayoutVerificationStatus {
	tipping: Tipping
}
type Options {
	description: String
	messageType: Unknown
	title: String
	rows: [Unknown]
}
type Data {
	rtjsonFromMarkdown: Unknown
}
type Edge {
	node: Node
	cursor: String
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type Edge {
	node: Node
}
type Elements {
	dist: Int
	pageInfo: PageInfo
	edges: [Unknown]
}
type TranslatedStringQuery {
	string: String
	targetLanguage: String
}
type GetSubredditListByIdsQuery {
	subredditIds: [Unknown]
}
type TemporaryEventLabelOption {
	displayName: String
	id: String
	value: String
}
type LocalModifiers {
	__typename: String
	searchModifiersFragment: SearchModifiersFragment
}
type Subreddit {
	name: String
}
type Redditor {
	trophyCase: TrophyCase
}
type NftTransfers {
	history: [Unknown]
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type Error {
	code: String
	message: String
	errorInputArgs: [Unknown]
}
type OnSubreddit {
	mutedMembers: MutedMembers
}
type ModeratorsInfo {
	edges: [Unknown]
}
type OnSubreddit {
	id: String
	name: String
	styles: Styles
	communityGold: CommunityGold
}
type OnRedditor {
	activeSubreddits: [Unknown]
	icon: Icon
}
type Data {
	identity: Identity
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type OnSubreddit {
	prefixedName: String
	styles: Styles
	communityGold: CommunityGold
	awardsSheet: AwardsSheet
}
type PageInfo {
	__typename: String
	pageInfoFragment: PageInfoFragment
}
type PostSetSettings {
	maxPostsPerPostSet: Int
}
type CommunityGold {
	modFeed: ModFeed
}
type Data {
	privateMessagesThread: PrivateMessagesThread
}
type TrophyCase {
	achievementCategoryById: AchievementCategoryById
}
type Redditor {
	__typename: String
	onUnavailableRedditor: OnUnavailableRedditor
	onRedditor: OnRedditor
}
type Moderation {
	modActivitySummary: ModActivitySummary
}
type Identity {
	id: String
}
type Summary {
}
type Statistics {
	rarity: AchievementTrophyRarity
	userRank: Int
	usersUnlockedCount: Int
}
type LegacyIcon {
}
type QuerySubredditIdByNameQuery {
	subredditName: String
}
type Data {
	channelModerationSettings: ChannelModerationSettings
}
type Error {
	message: String
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type Dynamic {
	components: Components
}
type Data {
	identity: Identity
}
type Duration {
	__typename: String
	durationFragment: DurationFragment
}
type Earned {
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type Comments1 {
	isEnabled: Boolean
}
type Recommended {
}
type OnSubredditPost {
	id: String
	title: String
	authorInfo: AuthorInfo
	content: Content
}
type Data {
	languagesList: [Unknown]
}
type TopAwarders {
	edges: [Unknown]
}
type LinkedIdentity {
	issuer: IdentityProviderIssuer
}
type TranslationsPostsQuery {
	postIds: [Unknown]
	includeStillMediaAltText: Unknown
	includeNewPixelTrackingFields: Unknown
	includeMediaAuth: Unknown
	includeExtendedVideoAsset: Unknown
}
type Edge {
	node: Node
	cursor: String
}
type Subreddit1 {
	id: String
}
type Condition {
	__typename: String
	onAutomationRegexCondition: OnAutomationRegexCondition
	onAutomationStringCondition: OnAutomationStringCondition
	onAutomationNotCondition: OnAutomationNotCondition
}
type Identity {
	redditor: Redditor
}
type OnPost1 {
	media: Media
}
type Edge {
	node: Node
}
type GetAllVaultsQuery {
	provider: Unknown
	includeInactive: Unknown
}
type SubredditTypeahead {
	subreddits: Subreddits
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type PreRenderImage {
}
type OnSubredditPost {
	thumbnail: Thumbnail
}
type OnTipReceivedTransaction {
	gold: Unknown
	tipper: Tipper
	icon: Unknown
}
type Data {
	identity: Identity
}
type Elements {
	pageInfo: PageInfo
	edges: [Unknown]
}
type Recommendation {
	trendingQueries: TrendingQueries
}
type OnComment {
	awardingsInfo: AwardingsInfo
}
type OnExplainerSpace {
	numSpaces: String
}
type OnPost {
	crosspostRoot: CrosspostRoot
	media: Media1
	content: Content
}
type BasePrice {
	amount: Currency
}
type PendingCommunityInvitation {
	senderInfo: SenderInfo
	subredditInfo: SubredditInfo
	chatMessageId: String
	type: InvitationType
	isContributor: Boolean
}
type Data {
	postInfoById: PostInfoById
}
type RedditorInfoByName {
	__typename: String
	onRedditor: OnRedditor
}
type FreeNftClaimDrop {
	__typename: String
	freeNftClaimDropFragment: FreeNftClaimDropFragment
}
type VerdictByRedditorInfo {
	__typename: String
	redditorNameFragment: RedditorNameFragment
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type Data {
	identity: Identity
}
type GetTopAwardersOnCommentQuery {
	thingId: String
}
type Flair {
	text: String
}
type Elements {
	edges: [Unknown]
}
type Preferences {
	spokenLanguages: [Unknown]
}
type Data {
	identity: Identity
}
type GlobalProductOffersQuery {
	productTypes: Present
}
type Node {
	subredditMemberInfo: SubredditMemberInfo
	redditor: Redditor
	isActive: Boolean
	isEditable: Boolean
	isReorderable: Boolean
	becameModeratorAt: Unknown
	modPermissions: ModPermissions
}
type GetContributorsQuery {
	name: String
	username: Unknown
	before: Unknown
	after: Unknown
	first: Unknown
	last: Unknown
}
type AllMultireddits {
	edges: [Unknown]
	pageInfo: PageInfo
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type OnSubreddit {
	id: String
	bannedMembers: BannedMembers
}
type SubredditMemberInfo {
	flair: Flair
	subredditKarma: SubredditKarma
}
type PageTree {
	__typename: String
	subredditWikiPageNodeFragment: SubredditWikiPageNodeFragment
}
type SuggestedSubreddit {
	__typename: String
	onSubreddit: OnSubreddit
}
type GetInventoryItemIdsByOrderIdsQuery {
	orderIds: [Unknown]
}
type Data {
	isUsernameAvailable: Boolean
}
type AchievementTrophyById {
	__typename: String
	onAchievementRepeatableTrophy: OnAchievementRepeatableTrophy
}
type Content {
	preview: String
}
type GetSavedResponsesQuery {
	subredditId: String
}
type GetModeratorMembersQuery {
	subredditName: String
	username: Unknown
	includeIsActive: Boolean
	before: Unknown
	after: Unknown
	first: Unknown
	last: Unknown
}
type Description {
	preview: String
}
type Styles {
}
type Data {
	search: Search
}
type PageInfo {
	hasNextPage: Boolean
	endCursor: String
}
type OriginalPostsQuery {
	postIds: [Unknown]
	includeStillMediaAltText: Unknown
	includeNewPixelTrackingFields: Unknown
	includeMediaAuth: Unknown
	includeExtendedVideoAsset: Unknown
}
type Moderation {
	modActivitySummary: ModActivitySummary
}
type Data {
	identity: Identity
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type OnSubreddit {
	moderation: Moderation
}
type Data {
	postInfoById: PostInfoById
}
type Data {
	subredditYearInReview: SubredditYearInReview
}
type ModFeed {
	pageInfo: PageInfo
	edges: [Unknown]
}
type LegacyIcon {
}
type LegacyIcon {
}
type PageInfo {
	endCursor: String
	hasNextPage: Boolean
	hasPreviousPage: Boolean
	startCursor: String
}
type Edge1 {
	node: Node1
}
type Image {
}
type TopAwarders {
	edges: [Unknown]
}
type OnAchievementTextIconPill {
	icon: Icon
	text: String
}
type SubredditTypeahead {
	subreddits: Subreddits
}
type GetModSafetySettingsQuery {
	subredditId: String
}
type Data {
	subredditInfoById: SubredditInfoById
}
type Data {
	redditorInfoByName: RedditorInfoByName
}
type PageInfo {
	endCursor: String
}
type Row1 {
	__typename: String
	onModPnSettingsLayoutRowPage: OnModPnSettingsLayoutRowPage1
	modPnSettingsRowFragment: ModPnSettingsRowFragment
}
type Data {
	globalTags: GlobalTags
}
type Data {
	yourCommunities: YourCommunities
	forYou: ForYou
}
type Edge {
	node: Node
}
type SubredditInfoByName {
	id: String
}
type PostsInfoById {
	__typename: String
	id: String
	onPost: OnPost
}
type ContributorPublicProfile {
	tier: ContributorTier
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type DestinationExplainer {
	id: String
}
type WatchFeed {
	elements: Elements
}
type Search {
	typeaheadByType: TypeaheadByType
}
type Data {
	identity: Identity
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type Progress {
	done: AchievementTrophyProgressUnit
}
type SocialLink {
	__typename: String
	socialLinkFragment: Unknown
}
type Rule {
	__typename: String
	rule: Rule
}
type TrophyCase {
	categories: Categories
}
type Subscription {
	id: String
	externalId: String
	environment: Environment
	basePrice: BasePrice
}
type Button {
	__typename: String
	onCommunityProgressUrlButton: Unknown
	onCommunityProgressShareButton: OnCommunityProgressShareButton
	onCommunityProgressMakePostButton: OnCommunityProgressMakePostButton
}
type Icon {
}
type OnRedditor {
	trophyCase: TrophyCase
}
type CountrySiteSettings {
	countryCode: String
	languageCode: String
	isCountrySiteEditable: Boolean
	modMigrationAt: Unknown
}
type Node {
	__typename: String
	onBannedMember: OnBannedMember
}
type SavedV3 {
	elements: Elements
}
type OnAchievementRepeatableImageTrophy {
	image: Image1
}
type GetModActionPostQuery {
	id: String
}
type Styles {
}
type Settings {
	postSetSettings: PostSetSettings
}
type StickerIcon {
	url: String
}
type Data {
	commentById: CommentById
}
type Data {
	postsInfoByIds: [Unknown]
}
type Node {
	id: String
	createdAt: Unknown
	action: ModActionType
	actionCategory: ModActionCategory
	actionNotes: String
	details: String
	deletedContent: DeletedContent
	moderatorInfo: ModeratorInfo
	takedownContentPreview: TakedownContentPreview
	subredditName: String
	target: Target
}
type Tipping {
	taxAndBankStatus: TaxAndBankStatus
}
type Edge {
	__typename: String
	node: Node
}
type Data {
	postSetsByIds: [Unknown]
	identity: Identity
}
type Harassment {
	comments: Comments
}
type Achievement {
	id: String
	name: String
	description: String
	isEnabled: Boolean
}
type UserIsModerator {
	pageInfo: PageInfo
}
type PostInfo {
	__typename: String
	isHighlighted: Boolean
	postFragment: PostFragment
}
type Downsized {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnSubreddit {
	modSafetyFilterSettings: ModSafetyFilterSettings
}
type ChatChannelBannedUsers {
	edges: [Unknown]
	pageInfo: PageInfo
}
type Elements {
	dist: Int
	pageInfo: PageInfo
	edges: [Unknown]
}
type PageInfo {
	endCursor: String
	hasNextPage: Boolean
}
type OnPostSubredditInboxNotificationContext {
	post: Post1
	subreddit: Subreddit
	isBodyHidden: Boolean
	isPostHidden: Boolean
}
type AvatarBuilderCatalog {
	distributionCampaigns: [Unknown]
}
type ContentControlSettings {
	textFilters: [Unknown]
}
type Subreddit1 {
	customResponseMaxChars: Int
}
type OnSubreddit {
	communityLeaderboard: CommunityLeaderboard
}
type ChatChannelHostModeMessagesQuery {
	channelId: String
	cursor: Unknown
}
type TranslatedContent {
	__typename: String
	translatedPostContentFragment: TranslatedPostContentFragment
}
type UserBanned {
	__typename: String
	pageInfo: PageInfo1
	bannedMemberEndsAtFragment: BannedMemberEndsAtFragment
}
type Media {
	still: Still
}
type GetModeratorsQuery {
	subredditId: String
	first: Present
}
type Data {
	identity: Identity
}
type BanEvasion {
	isEnabled: Boolean
}
type Node {
	moderator: Moderator
	lastModAction: LastModAction
}
type PageInfo1 {
	__typename: String
	pagination: Pagination
}
type BatchListing {
	sectionId: String
	listings: Listings
}
type PageInfo {
	__typename: String
	pageInfoFragment: PageInfoFragment
}
type Styles {
}
type Address {
	provider: String
	address: String
	createdAt: Unknown
	isActive: Boolean
}
type CommunityGold {
	userSettings: UserSettings
	settings: Settings
}
type Node {
	__typename: String
	postFragment: PostFragment
}
type AllV3 {
	elements: Elements
}
type UserMuted {
	__typename: String
	pageInfo: PageInfo
	mutedMemberEndsAtFragment: MutedMemberEndsAtFragment
}
type Action {
	__typename: String
	onAutomationInformAction: OnAutomationInformAction
	onAutomationReportAction: OnAutomationReportAction
	onAutomationBlockAction: OnAutomationBlockAction
}
type Data {
	subredditInfoById: SubredditInfoById
}
type CommunityLeaderboardPageQuery {
	subredditName: String
	categoryId: Unknown
	after: String
}
type OnRedditor {
	id: String
	displayName: String
	icon: Icon
}
type Data {
	chatChannelsRecommendationsV2: ChatChannelsRecommendationsV2
}
type PostInfo1 {
	id: String
	title: String
}
type SearchCommentsQuery {
	query: String
	sort: Unknown
	afterCursor: Unknown
	filters: Unknown
	productSurface: Unknown
	pageSize: Unknown
	searchInput: Unknown
	includeSubredditInPosts: Unknown
	includeAwards: Unknown
	includeEconPromos: Unknown
	includePostStats: Unknown
	includeCurrentUserAwards: Unknown
	includeStillMediaAltText: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
}
type Data {
	commentById: CommentById
}
type Node {
	id: String
	type: TagType
	text: String
	isRecommended: Boolean
}
type Data {
	identity: Identity
}
type OnSubreddit {
	recentNote: RecentNote
	allCount: AllCount
}
type Data {
	subredditInfoById: SubredditInfoById
}
type PageInfo {
	hasNextPage: Boolean
	hasPreviousPage: Boolean
	startCursor: String
	endCursor: String
}
type OnDeletedSubredditPost1 {
	id: String
	subreddit: Subreddit1
}
type AwardingTotalsForCommentQuery {
	id: String
}
type Edge {
	cursor: String
	node: Node
}
type OnNFTAvatarOutfit {
	tokenId: String
	contractAddress: String
	walletAddress: String
	rarity: String
}
type Node {
	id: String
	position: String
	parentThread: ParentThread
}
type InterestTopicsByIdsQuery {
	schemeName: String
	maxSubreddits: [Unknown]
	onboardingFlow: Unknown
}
type FollowedByRedditorsInfo {
	edges: [Unknown]
	pageInfo: PageInfo
}
type Elements {
	dist: Int
	pageInfo: PageInfo
	edges: [Unknown]
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type SubredditInfoById {
	__typename: String
	id: String
	onSubreddit: OnSubreddit
}
type Dimensions {
}
type AutomationRecommendationsQuery {
	subredditId: String
	statuses: Present
}
type Awarding {
	__typename: String
	redditAwardDetailsFragment: RedditAwardDetailsFragment
}
type FeedMetadata {
	treatment: TreatmentProtocol
	appliedSort: String
	appliedFilters: AppliedFilters
	queryTags: [Unknown]
	suggestedQueries: [Unknown]
}
type Icon {
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type OnModQueueItemPost {
	postInfo: PostInfo
}
type ModQueueItems {
	pageInfo: PageInfo
	edges: [Unknown]
}
type Products {
	goldpack: [Unknown]
}
type GetIsSubredditChannelsEnabledQuery {
	subredditName: String
}
type GeneratedPostsQuery {
	ids: [Unknown]
}
type Body {
	text: String
	richtext: Unknown
}
type OnSubreddit {
	devPlatformMetadata: String
}
type ModSavedResponses {
	general: [Unknown]
	removals: [Unknown]
	bans: [Unknown]
	modmail: [Unknown]
	reports: [Unknown]
	comments: [Unknown]
	chat: [Unknown]
}
type Data {
	avatarStorefront: AvatarStorefront
}
type PostInfo {
	id: String
	title: String
}
type WeeklySummaries {
	__typename: String
	insightsSummariesFragment: InsightsSummariesFragment
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type Listings {
	edges: [Unknown]
}
type NftTransfers {
}
type Trophy {
	__typename: String
	achievementTrophyFragment: AchievementTrophyFragment
}
type GetUserProfilePostIdsQuery {
	username: String
}
type IsSubredditMutedQuery {
	subredditId: String
}
type Data {
	identity: Identity
}
type OnRedditor {
	comments: Comments
}
type Search {
	dynamic: Dynamic
	general: General
}
type CommentsPageAd {
	__typename: String
	profile: Profile
	postContentFragment: Unknown
	promotedCommunityPostFragment: PromotedCommunityPostFragment
}
type ModeratorMembers {
	edges: [Unknown]
}
type SavedCommentsQuery {
	after: Unknown
	includeCurrentUserAwards: Unknown
	includeCommentsHtmlField: Unknown
	includeIsGildable: Unknown
	includeMediaAuth: Unknown
	includeExtendedVideoAsset: Unknown
}
type GetYearInReviewPageByIdQuery {
	pageId: String
}
type Identity {
	redditor: Redditor
}
type Data {
	channelModerationSettings: ChannelModerationSettings
}
type OnSubreddit {
	communityProgressModule: CommunityProgressModule
}
type Edge {
	node: Node
}
type Data {
	econMarketing: EconMarketing
}
type Entity {
	__typename: String
	onSubreddit: OnSubreddit
}
type NearbySubreddits {
	edges: [Unknown]
}
type AIModPredictionsQuery {
	input: AIModPredictionsForPostInput
	subredditId: String
}
type Item {
	__typename: String
	inventoryItemFragment: InventoryItemFragment
}
type Edge {
	node: Node
}
type Emojis {
	edges: [Unknown]
}
type ChatChannelsRecommendationsV2 {
	__typename: String
	recChatChannelsFragment: RecChatChannelsFragment
}
type OnSubreddit {
	id: String
	name: String
	activeTemporaryEventRun: ActiveTemporaryEventRun
}
type OrderedTopbarWidget {
	__typename: String
	widgetFragment: WidgetFragment
}
type Edge {
	node: Node
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type Header {
	__typename: String
	onAchievementTimelineCategoryHeader: OnAchievementTimelineCategoryHeader
}
type GetTextFiltersQuery {
	id: String
}
type Topic {
	displayName: String
	id: String
	icon: String
	sensitivity: TopicSensitivity
	children: [Unknown]
}
type Identity {
	redditor: Redditor
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type OnSubreddit {
	userFlairTemplates: UserFlairTemplates
	flairPromptSettings: FlairPromptSettings
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type WelcomePage {
	__typename: String
	welcomePageFragment: WelcomePageFragment
}
type Item {
	id: String
}
type LegacyIcon {
}
type Node {
	item: Item
}
type AwardingsById {
	id: String
	award: Award
	target: Target
	awarderInfo: AwarderInfo
	isAnonymous: Boolean
}
type PageInfo3 {
	startCursor: String
}
type Edge {
	node: Node
}
type AchievementTrophyById {
	__typename: String
	id: String
	name: String
	shortDescription: String
	longDescription: String
	unlockedAt: Unknown
	progress: Progress
	isNew: Boolean
	isPinned: Boolean
	cta: Cta
	additionalAction: AdditionalAction
	shareInfo: Unknown
	statistics: Statistics
	pastContributions: PastContributions
	contributions: [Unknown]
	onAchievementImageTrophy: OnAchievementImageTrophy
	onAchievementRepeatableImageTrophy: OnAchievementRepeatableImageTrophy
	onAchievementRepeatableTrophy: OnAchievementRepeatableTrophy
	achievementRewardFragment: AchievementRewardFragment
}
type ImageProvider {
	gallery: Gallery
	media: Media1
	thumbnail: Thumbnail2
}
type OnSubreddit {
	isMuted: Boolean
}
type SnoovatarIcon {
}
type OnComment {
	id: String
	createdAt: Unknown
	score: Unknown
	isSaved: Boolean
	isLocked: Boolean
	isArchived: Boolean
	isScoreHidden: Boolean
	isStickied: Boolean
	isGildable: Boolean
	gildingTotals: [Unknown]
	permalink: String
	voteState: VoteState
	content: Content
	authorInfo: AuthorInfo
	authorFlair: AuthorFlair
	awardings: [Unknown]
	moderationInfo: ModerationInfo
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type LocalModifiers {
	__typename: String
	searchModifiersFragment: SearchModifiersFragment
}
type Node {
	__typename: String
	modmailConversationFragment: ModmailConversationFragment
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type Data {
	econMarketing: EconMarketing
}
type Settings {
	postSetSettings: PostSetSettings
}
type Taxonomy {
	generatedDescription: String
}
type Data {
	taxonomyInfo: TaxonomyInfo
}
type ComposeSearchSubredditsQuery {
	query: String
	isNsfwIncluded: Boolean
}
type OnSubreddit {
	id: String
	type: SubredditType
	name: String
	publicDescriptionText: String
	isContributor: Boolean
	isContributorRequestsDisabled: Boolean
	isCommentingRestricted: Boolean
	isPostingRestricted: Boolean
	lastContributorRequestTimeAt: Unknown
	styles: Unknown
}
type Node {
	id: String
	topic: Topic
}
type Reason {
	preview: String
	markdown: String
}
type Data {
	subredditInfoById: SubredditInfoById
}
type OnSubreddit {
	postFlairTemplates: [Unknown]
}
type SavedFeedSduiQuery {
	feedContextInput: Unknown
	after: Unknown
	includeViewCount: Unknown
	includePackagedMedia: Unknown
	includeCarouselRecommendations: Unknown
	includeListStyleRecommendations: Unknown
	includeCompactPostStyleRecommendations: Unknown
	includeCardPostStyleRecommendations: Unknown
	includeTaxonomyTopicsFeedElement: Unknown
	includeExploreFeaturedItemsFeedElement: Unknown
	includeTopicGroupFeedElement: Unknown
	includeRankedCommunityFeedElement: Unknown
	includeChatChannelFeedUnit: Unknown
	includeGoldInfo: Unknown
	includeEconPromos: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includeNewInCommunitiesCarousel: Unknown
}
type Data {
	subredditInfoById: SubredditInfoById
}
type Identity {
	payoutVerificationStatus: PayoutVerificationStatus
}
type OnUnavailableRedditor {
	id: String
	displayName: String
}
type Edge {
	node: Node
}
type ChatPageRecommendations {
	pageName: String
	recommendedChannels: RecommendedChannels
}
type PersonalizedYearInReview {
	cardsV2: [Unknown]
}
type Content {
	richtext: Unknown
	html: String
	preview: String
	markdown: String
}
type OnStreakExtendedNotification {
	length: StreakExtendedNotificationPresentation
}
type Section3 {
	__typename: String
	rows: [Unknown]
	modPnSettingSectionFragment: ModPnSettingSectionFragment
}
type ContentMessage1 {
	message: String
	rtjsonText: Unknown
}
type Data {
	subredditTypeahead: SubredditTypeahead
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type Subscription {
	id: String
	basePrice: BasePrice
	billingPeriod: BillingPeriod
	description: String
	environment: Environment
	externalId: String
	images: [Unknown]
	isRenewable: Boolean
	name: String
	tier: TrialPeriod
}
type Mute {
	totalCount: Int
}
type OnSubreddit {
	communityGold: CommunityGold
}
type RedditorInfoByName {
	__typename: String
	onRedditor: OnRedditor
}
type PostInfoById {
	__typename: String
	onSubredditPost: OnSubredditPost
}
type Karma {
}
type PostInfoById {
	__typename: String
	commentForest: CommentForest
	commentCount: Unknown
	pdsBasicPostInfoFragment: PdsBasicPostInfoFragment
}
type Data {
	identity: Identity
}
type RedditorInfoById {
	__typename: String
	onRedditor: OnRedditor
}
type SiteRule {
	ruleText: String
}
type Data {
	products: Products
}
type Edge {
	node: Node
}
type SubredditsInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type AuthorInfo {
	__typename: String
	id: String
	displayName: String
	onRedditor: OnRedditor
}
type Edge {
	node: Node
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type Modifiers {
	appliedState: AppliedState
	globalModifiers: GlobalModifiers
	localModifiers: LocalModifiers
}
type Reputation {
	comments: Comments1
	posts: Posts
}
type GetBanEvasionFilterSettingsQuery {
	subredditId: String
}
type OnRedditor {
	trophies: [Unknown]
}
type ModSafetyFilterSettings {
	reputation: Reputation
}
type CurrentProgress {
	edges: [Unknown]
	pageInfo: PageInfo
}
type Data {
	subredditV3: SubredditV3
}
type Profile {
	stickyPosts: [Unknown]
}
type OnTrophyUnlockedNotification {
	trophy: Trophy2
}
type GetSiteRulesQuery {
	subredditId: String
}
type RedditorInfoByName {
	__typename: String
	onRedditor: OnRedditor
}
type LatestFeedSduiQuery {
	adContextInput: Unknown
	feedContextInput: Unknown
	filterPosts: Unknown
	sort: Unknown
	time: Unknown
	after: Unknown
	crossPlatformContext: Unknown
	includeViewCount: Unknown
	includePackagedMedia: Unknown
	includeCarouselRecommendations: Unknown
	includeListStyleRecommendations: Unknown
	includeCompactPostStyleRecommendations: Unknown
	includeCardPostStyleRecommendations: Unknown
	includeTaxonomyTopicsFeedElement: Unknown
	includeExploreFeaturedItemsFeedElement: Unknown
	includeTopicGroupFeedElement: Unknown
	includeRankedCommunityFeedElement: Unknown
	includeChatChannelFeedUnit: Unknown
	includeGoldInfo: Unknown
	includeEconPromos: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includeNewInCommunitiesCarousel: Unknown
}
type Thumbnail {
	__typename: String
	mediaSourceFragment: Unknown
}
type Note {
	totalCount: Int
}
type Styles {
	__typename: String
	subredditStylesFragment: SubredditStylesFragment
}
type Edge {
	__typename: String
	feedElementEdgeFragment: FeedElementEdgeFragment
}
type DisplayedCollectibleItems {
	__typename: String
	displayedCollectibleItemsFragment: DisplayedCollectibleItemsFragment
}
type RemovedComments {
	__typename: String
	onSubreddit: OnSubreddit1
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type Award {
	__typename: String
	awardsSheetAwardFragment: AwardsSheetAwardFragment
}
type UserSettings {
	paidSubscriberBadgeVisibility: PaidSubscriberStatusVisibility
}
type OnAutomationRegexCondition {
	features: [Unknown]
	value: String
	isCaseSensitive: Boolean
}
type GetUsernameByUserIdQuery {
	kindWithId: String
}
type Listings {
	__typename: String
	gqlStorefrontListings: GqlStorefrontListings
}
type Data {
	updateRedditorAllowlistState: UpdateRedditorAllowlistState
}
type Translation {
	translatedString: String
}
type Redditor {
	trophyCase: TrophyCase
}
type OnSubreddit {
	banEvasionFilterSettings: BanEvasionFilterSettings
	modSafetyFilterSettings: ModSafetyFilterSettings
}
type UnreadConversationCounts {
	appeals: Int
	archived: Int
	filtered: Int
	highlighted: Int
	inProgress: Int
	joinRequests: Int
	modDiscussions: Int
	new: Int
	notifications: Int
}
type Summary {
}
type AdditionalContent {
	selectMax: Int
}
type ModmailParticipantConversations {
	pageInfo: PageInfo
	edges: [Unknown]
}
type OnRedditor {
	isBlocked: Boolean
}
type UnreadConversationCountsQuery {
	subredditIds: Present
}
type Edge {
	__typename: String
	feedElementEdgeFragment: FeedElementEdgeFragment
}
type Identity {
	settings: Settings
}
type OrderedSidebarWidget {
	__typename: String
	widgetFragment: WidgetFragment
}
type Data {
	identity: Identity
}
type MediaAuthInfoQuery {
	id: String
}
type GetSubredditSettingsQuery {
	id: String
	includeFlairPrompt: Boolean
}
type Data {
	vault: Vault
}
type DisplayedCollectibleItems {
	__typename: String
	displayedCollectibleItemsFragment: DisplayedCollectibleItemsFragment
}
type Image1 {
}
type Node {
	__typename: String
	postComposerCommunityFragment: PostComposerCommunityFragment
}
type MomentsFeatures {
	flairPrompt: MomentsFeatureFlag
}
type AwardingTotalsForPostQuery {
	id: String
}
type Config {
	additionalContent: AdditionalContent
	banEvasion: BanEvasion
	freeText: FreeText
	subreddit: Subreddit1
}
type ModeratedSubredditsQuery {
	limit: Unknown
}
type HiddenPosts {
	pageInfo: PageInfo
	edges: [Unknown]
}
type Data {
	modmailConversationsV2: ModmailConversationsV2
}
type BanEvasionFilterSettings {
	isEnabled: Boolean
	recency: BanEvasionRecency
	postLevel: BanEvasionConfidenceLevel
	commentLevel: BanEvasionConfidenceLevel
}
type Comments {
	pageInfo: PageInfo
	edges: [Unknown]
}
type Redditor {
	__typename: String
	onUnavailableRedditor: OnUnavailableRedditor
	onRedditor: OnRedditor
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type ArenaFeedSduiQuery {
	adContextInput: Unknown
	feedContextInput: Unknown
	sort: Unknown
	time: Unknown
	after: Unknown
	id: Unknown
	includeViewCount: Unknown
	includePackagedMedia: Unknown
	includeCarouselRecommendations: Unknown
	includeListStyleRecommendations: Unknown
	includeCompactPostStyleRecommendations: Unknown
	includeCardPostStyleRecommendations: Unknown
	includeTaxonomyTopicsFeedElement: Unknown
	includeExploreFeaturedItemsFeedElement: Unknown
	includeTopicGroupFeedElement: Unknown
	includeRankedCommunityFeedElement: Unknown
	includeChatChannelFeedUnit: Unknown
	includeGoldInfo: Unknown
	includeEconPromos: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includeNewInCommunitiesCarousel: Unknown
}
type Data {
	translation: Translation
}
type Data {
	identity: Identity
}
type Data {
	subredditInfoById: SubredditInfoById
}
type OnModPnSettingsLayoutRowPage1 {
	sections: [Unknown]
}
type Data {
	redditorInfoByName: RedditorInfoByName
}
type UserSubmittedPostSetsQuery {
	username: String
	sort: Unknown
	range: Unknown
	after: Unknown
	pageSize: Unknown
	filter: ProfileElementsQueryType
	includeSubredditInPosts: Unknown
	includeAwards: Unknown
	includeEconPromos: Unknown
	includePostStats: Unknown
	includeCurrentUserAwards: Unknown
	includeStillMediaAltText: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeAuthorCommunityBadge: Unknown
	includeExtendedVideoAsset: Unknown
	includePaidSubscriberBadge: Unknown
}
type OnPostInboxNotificationContext {
	post: Post
	isBodyHidden: Boolean
	isPostHidden: Boolean
}
type PageInfo {
	__typename: String
	pageInfoFragment: PageInfoFragment
}
type Earnings {
	currency: Currency
}
type Data {
	postsInfoByIds: [Unknown]
}
type Identity {
	tippingProfile: TippingProfile
}
type GetInboxNotificationFeedQuery {
	pageSize: Unknown
	subredditIconMaxWidth: Int
	includeAnnouncement: Boolean
}
type Data {
	isUserBannedFromChatChannel: IsUserBannedFromChatChannel
}
type CommentById {
	__typename: String
	postInfo: PostInfo
	onComment: OnComment
}
type Edge {
	node: Node
}
type PageInfo {
	endCursor: String
}
type Data {
	badgeIndicators: BadgeIndicators
}
type OnSubreddit {
	previewCommentAutomation: PreviewCommentAutomation
}
type SubredditFeedSduiQuery {
	subredditName: String
	adContextInput: Unknown
	feedContextInput: Unknown
	sort: Unknown
	time: Unknown
	after: Unknown
	includeViewCount: Unknown
	includePackagedMedia: Unknown
	includeCarouselRecommendations: Unknown
	includeListStyleRecommendations: Unknown
	includeCompactPostStyleRecommendations: Unknown
	includeCardPostStyleRecommendations: Unknown
	includeTaxonomyTopicsFeedElement: Unknown
	includeExploreFeaturedItemsFeedElement: Unknown
	includeTopicGroupFeedElement: Unknown
	includeRankedCommunityFeedElement: Unknown
	includeChatChannelFeedUnit: Unknown
	includeGoldInfo: Unknown
	includeEconPromos: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includeNewInCommunitiesCarousel: Unknown
}
type Edge {
	node: Node
}
type OnRedditor {
	id: String
	displayName: String
	snoovatarIcon: SnoovatarIcon
}
type ModMail {
	unreadConversationCounts: UnreadConversationCounts
}
type OnSubreddit {
	id: String
	mutedMembers: MutedMembers
}
type UserPublicTrophiesQuery {
	username: String
}
type Edge {
	node: Node
	cursor: String
}
type Moderation {
	isShowCommentRemovalReasonPrompt: Boolean
}
type ModSafetyFilterSettings {
	harassment: Harassment
	reputation: Reputation
	banEvasion: BanEvasion
	matureContent: MatureContent
}
type RedditorInfoByName {
	__typename: String
	onRedditor: OnRedditor
}
type PostSetPostQuery {
	id: String
}
type Goldpack {
	id: String
	goldAmount: Environment
	basePrice: BasePrice
	externalId: String
	images: [Unknown]
}
type SubscribedSubreddits {
	edges: [Unknown]
	pageInfo: PageInfo
}
type Child {
	displayName: String
	id: String
	sensitivity: TopicSensitivity
}
type SearchCommunitiesQuery {
	query: String
	productSurface: Unknown
	pageSize: Unknown
	afterCursor: Present
	filters: Present
	searchInput: Present
}
type PostFlairSettings {
	isEnabled: Boolean
	isSelfAssignable: Boolean
}
type GetArtistsPaginatedQuery {
	count: Unknown
	sort: Unknown
	afterCursor: Unknown
}
type PageInfo {
	hasNextPage: Boolean
	endCursor: String
}
type Metadatum {
	key: Unknown
	value: Unknown
}
type Feature {
	feature: SubscriptionFeature
	entity: Entity
}
type Edge {
	node: Node
}
type AppliedFilters {
	edges: [Unknown]
}
type NearbySubredditsQuery {
}
type SubredditStructuredStyleQuery {
	subredditName: String
	includeWidgets: Unknown
	includeMediaAuth: Unknown
	includeExtendedVideoAsset: Unknown
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type Data {
	identity: Identity
	experimentVariants: [Unknown]
}
type OnDeletedComment {
	id: String
	postInfo: PostInfo1
}
type Comment {
	__typename: String
	id: String
	createdAt: Unknown
	postInfo: PostInfo
	onComment: OnComment
	onDeletedComment: OnDeletedComment
}
type Node3 {
	target: Target1
	action: ModActionType
	id: String
	details: String
}
type PostInfo {
	__typename: String
	onSubredditPost: OnSubredditPost
	pdsBasicPostInfoFragment: PdsBasicPostInfoFragment
}
type AvatarOutfit {
	id: String
	preRenderImage: PreRenderImage
	backgroundImage: BackgroundImage
}
type OnUnavailableSubreddit {
	id: String
	forbiddenReason: SubredditForbiddenReason
	publicDescriptionText: String
	isContributorRequestsDisabled: Boolean
	lastContributorRequestTimeAt: Unknown
}
type Icon {
}
type Data {
	chatChannelHostModeMessages: ChatChannelHostModeMessages
}
type OnAutomationReportAction {
	message: String
}
type Awarding {
	__typename: String
	redditAwardDetailsFragment: RedditAwardDetailsFragment
}
type ModmailConversationsV2 {
	pageInfo: PageInfo
	edges: [Unknown]
}
type TranslatedPostQuery {
	postID: String
	targetLanguage: String
	language: String
}
type Settings {
	isSubscriptionsEnabled: Boolean
	subscriptionBenefitsSettings: SubscriptionBenefitsSettings
}
type Dimensions {
}
type OnDeletedProfilePost {
	id: String
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type Data {
	recommendedMediaFeed: RecommendedMediaFeed
}
type Elements {
	__typename: String
	pageInfo: PageInfo
	dist: Int
	edges: [Unknown]
}
type MultiContentReportingSearchQuery {
	isModerator: Present
	query: Unknown
	subredditNames: String
	authorNames: String
	first: Present
	subredditName: String
	authorId: String
}
type Data {
	search: Search
}
type PostInfo {
	__typename: String
	onPost: OnPost1
}
type BannedMembers {
	edges: [Unknown]
	pageInfo: PageInfo
}
type Data {
	inboxAnnouncementsByIds: InboxAnnouncementsByIds
}
type OnAutomationInformAction {
	message: String
}
type OnAutomationReportAction {
	message: String
}
type Icon1 {
}
type SnoovatarIcon {
}
type OnSubreddit {
	achievementsSettings: AchievementsSettings
}
type All {
	totalCount: Int
}
type Data {
	nearbySubreddits: NearbySubreddits
}
type Subreddit {
	id: String
	name: String
	prefixedName: String
	isQuarantined: Boolean
	tippingStatus: TippingStatus
}
type Parent {
	id: String
}
type OnSubreddit {
	isSubredditChannelsEnabled: IsSubredditChannelsEnabled
}
type Edge {
	node: Node
}
type OnPostInfo {
	permalink: String
	title: String
}
type SubredditInfoByName {
	__typename: String
	id: String
	onSubreddit: OnSubreddit
}
type Node {
	__typename: String
	awarderRankFragment: AwarderRankFragment
}
type Data {
	identity: Identity
}
type AwarderInfo {
	__typename: String
	id: String
	onRedditor: OnRedditor
}
type Data {
	subredditInfoById: SubredditInfoById
}
type Node {
	__typename: String
	trophyFragment: TrophyFragment
}
type Listings {
	__typename: String
	pageInfo: PageInfo
	gqlStorefrontListings: GqlStorefrontListings
}
type Redditor {
	__typename: String
	onRedditor: OnRedditor
	onUnavailableRedditor: OnUnavailableRedditor
	onDeletedRedditor: OnDeletedRedditor
}
type TippingProfile {
	contributorStatus: ContributorStatus
}
type OnSubreddit {
	id: String
	name: String
	moderation: Moderation
}
type Edge {
	node: Node
}
type OnSubreddit {
	siteRules: [Unknown]
}
type Modifiers {
	appliedState: AppliedState
	globalModifiers: GlobalModifiers
	localModifiers: LocalModifiers
}
type ContentControlSettings {
	blockedContentRegex: String
	allowedDomains: String
	blockedDomains: String
	domainFilterType: Unknown
	forbiddenContentTypes: [Unknown]
}
type CreatorStatsQuery {
	postId: String
}
type SocialLink {
	__typename: String
	socialLinkFragment: Unknown
}
type Data {
	profilesByNames: [Unknown]
}
type Data {
	subredditInfoById: SubredditInfoById
}
type HatefulContentFilter {
	minimumThresholdToFilter: HatefulContentThreshold
}
type Result {
	outcomes: [Unknown]
}
type Notification {
	__typename: String
	id: String
	onTrophiesUnlockedNotification: OnTrophiesUnlockedNotification
	onTrophyProgressedNotification: OnTrophyProgressedNotification
	onTrophyUnlockedNotification: OnTrophyUnlockedNotification
	onStreakExtendedNotification: OnStreakExtendedNotification
}
type SnapFeedSduiQuery {
	feedContextInput: Unknown
	sort: Unknown
	time: Unknown
	after: Unknown
	includeEconPromos: Unknown
	includeGoldInfo: Unknown
	includeViewCount: Unknown
	includeMediaAuth: Unknown
	includeExtendedVideoAsset: Unknown
	includePackagedMedia: Unknown
	includeHqSnoovatars: Boolean
	includeRichtTextCommentContent: Unknown
}
type Node {
	becameModeratorAt: Unknown
	redditor: Redditor
	isActive: Boolean
	isReorderable: Boolean
	modPermissions: ModPermissions
}
type Post {
	__typename: String
	onPost: OnPost
}
type TippingProfile {
	summary: Summary
	contributorStatus: ContributorStatus
	tipsReceived: TipsReceived
	payoutsReceived: PayoutsReceived
	transactions: Transactions
}
type OnSubreddit {
	moderation: Moderation
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type ModPermissions {
	isAllAllowed: Boolean
	isPostEditingAllowed: Boolean
}
type CommunityProgressModule {
	id: String
	displayText: String
	description: String
	isLastAvailable: Boolean
	progress: Progress
	cards: [Unknown]
}
type Elements {
	dist: Int
	pageInfo: PageInfo
	edges: [Unknown]
}
type PageInfo1 {
	__typename: String
	pageInfoFragment: PageInfoFragment
}
type GetAutomationsQuery {
	id: String
	trigger: AutomationTrigger
}
type RecentNote {
	edges: [Unknown]
}
type OnAchievementCTADestinationSurface {
	surface: DestinationSurface
}
type Data {
	reportFormData: ReportFormData
}
type Artists {
	__typename: String
	gqlStorefrontArtistsWithListings: GqlStorefrontArtistsWithListings
}
type Node {
	__typename: String
	searchCommentFragment: SearchCommentFragment
}
type Node {
	__typename: String
	createdAt: Unknown
	onAwardingFeedElement: OnAwardingFeedElement
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type Styles {
}
type Data {
	redditorInfoByName: RedditorInfoByName
}
type Elements {
	dist: Int
	pageInfo: PageInfo
	edges: [Unknown]
}
type Data {
	redditorInfoByName: RedditorInfoByName
}
type Dimensions {
}
type Data {
	avatarStorefront: AvatarStorefront
}
type OnSubreddit {
	modPermissions: ModPermissions
	moderation: Moderation
}
type Data {
	savedV3: SavedV3
}
type OnAutomationBlockAction {
	message: String
}
type Vault {
	contact: Contact
}
type TaggedSubreddits {
	edges: [Unknown]
}
type SavedComments {
	pageInfo: PageInfo
	edges: [Unknown]
}
type Data {
	postInfoById: PostInfoById
}
type Data {
	postsInfoByIds: [Unknown]
}
type ContentLanguagesQuery {
	listKey: String
}
type AmaSettings {
	postPermissions: SubredditPostPermissions
}
type Children {
	__typename: String
	id: String
	onSubredditPost: OnSubredditPost
}
type Subreddit1 {
	id: String
	name: String
}
type Data {
	redditorInfoByName: RedditorInfoByName
}
type PageInfo {
	__typename: String
	pagination: Pagination
}
type SiteRule {
	__typename: String
	onSiteRule: OnSiteRule
}
type CommunityGold {
	spendableGoldBalance: TransactionsSummary
}
type Edge {
	node: Node
}
type ActiveSubreddit {
	id: String
	name: String
	prefixedName: String
	isNsfw: Boolean
	description: Description
	subscribersCount: Boolean
	styles: Styles
}
type ContentAuthor {
	displayName: String
	id: String
}
type OnDeletedRedditor {
	id: String
	displayName: String
}
type Content {
	richtextMedia: [Unknown]
}
type Data {
	identity: Identity
}
type OnSubredditPost {
	otherDiscussions: OtherDiscussions
}
type Data {
	postInfoById: PostInfoById
}
type Fixed_height {
	__typename: String
	mediaSourceFragment: Unknown
}
type Node {
	__typename: String
	unlockedCommunity: UnlockedCommunity
}
type OnAchievementTrophyCategory {
	id: String
	name: String
	unlocked: Int
	accessibilityLabel: String
	header: Header
	shareInfo: Unknown
	trophies: Trophies
}
type Subreddits {
	edges: [Unknown]
}
type ModeratedSubredditsByUserIdQuery {
	userId: String
	before: Unknown
	after: Unknown
	first: Unknown
	last: Unknown
	includeRecapFields: Boolean
	includeWelcomePage: Boolean
	includeCommunityGold: Boolean
	includeCommunityLeaderboard: Boolean
	includeMomentFeatures: Boolean
}
type Sku {
	__typename: String
	name: String
	description: String
	kind: String
	onPremiumSku: OnPremiumSku
}
type EditableModeratorMembers {
	pageInfo: PageInfo
	edges: [Unknown]
}
type ReportForm {
	form: String
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type OnSubreddit {
	momentsFeatures: MomentsFeatures
}
type OnProfilePost {
	otherDiscussions: OtherDiscussions1
}
type ModmailParticipantConversationsQuery {
	subredditId: String
	participantId: String
	before: Unknown
	after: Unknown
	first: Unknown
	last: Unknown
}
type ChannelModerationSettings {
	contentControlSettings: ContentControlSettings
}
type Data {
	homeV3: HomeV3
}
type AvailableLevel {
	rank: CommunityChatPermissionRank
	description: String
	name: String
	warning: Warning
}
type Icon {
}
type Edge {
	node: Node
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type Data {
	subredditInfoById: SubredditInfoById
}
type CurrentProgress {
	edges: [Unknown]
	pageInfo: PageInfo1
}
type Identity {
	tippingProfile: TippingProfile
}
type Removal {
	totalCount: Int
}
type ParentThread {
	id: String
}
type OnSubreddit {
	awardsSheet: AwardsSheet
	communityGold: CommunityGold
}
type OnSubreddit {
	id: String
	wiki: Wiki
}
type Node {
	__typename: String
	onPostCarousel: OnPostCarousel
}
type Outcome {
	__typename: String
	onAutomationBlockOutcome: OnAutomationBlockOutcome
	onAutomationInformOutcome: OnAutomationInformOutcome
	onAutomationReportOutcome: OnAutomationReportOutcome
}
type Section {
	__typename: String
	onExplainerScroller: OnExplainerScroller
	econEducationalUnitSectionsFragment: EconEducationalUnitSectionsFragment
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type SearchUsersForBlockQuery {
	query: String
	filters: Present
	productSurface: Unknown
	searchInput: Present
	limit: Present
}
type TrophyCase {
	achievementTrophyById: AchievementTrophyById
}
type AllTimeEarnings {
	currency: Currency
}
type Data {
	profileByName: ProfileByName
}
type Page {
	id: String
	sections: [Unknown]
}
type Node {
	redditor: Redditor
}
type Redditor {
	trophyCase: TrophyCase
}
type GetAvatarStorefrontAuthorsOfListingsQuery {
	filter: Unknown
}
type ErrorInputArg {
	value: String
	variableName: String
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type Data {
	identity: Identity
}
type LegacyIcon {
}
type Transactions {
	edges: [Unknown]
}
type Image1 {
}
type Data {
	channelModerationSettings: ChannelModerationSettings
}
type FreeText {
	maxChars: Int
}
type Data {
	notificationSettingsLayoutByChannel: NotificationSettingsLayoutByChannel
}
type CurrentUserRank {
	__typename: String
	leaderboardCurrentUserFragment: LeaderboardCurrentUserFragment
}
type ActiveTemporaryEventRun {
	__typename: String
	temporaryEventRunFull: TemporaryEventRunFull
}
type GlobalTags {
	pageInfo: PageInfo
	edges: [Unknown]
}
type OnComment {
	permalink: String
}
type PricePackage {
	externalProductId: String
	id: String
	price: String
	quantity: String
	currency: Currency
	requiredPaymentProviders: [Unknown]
	skus: [Unknown]
}
type OnSubreddit {
	moderation: Moderation
}
type ModeratedSubreddits {
	edges: [Unknown]
	pageInfo: PageInfo2
}
type OnDeletedSubredditPost {
	id: String
	subreddit: Subreddit
}
type IsSubredditChannelsEnabled {
	isChatEnabled: Boolean
	isPostEnabled: Boolean
}
type EconMarketing {
	uiUnit: UiUnit
}
type Data {
	commentsByIds: [Unknown]
}
type StaticIcon {
}
type Sender {
	id: String
	displayName: String
}
type Styles {
}
type OnStringDynamicConfig {
	stringVal: String
	name: String
}
type Outcome {
	__typename: String
	automationOutcomeFragment: AutomationOutcomeFragment
}
type RichTextFromMarkdownQuery {
	markdown: String
}
type Invite {
	totalCount: Int
}
type Flair {
	__typename: String
	postFlairFragment: PostFlairFragment
}
type Profile {
	isNsfw: Boolean
}
type OnRedditor {
	snoovatarIcon: SnoovatarIcon
	icon: Unknown
}
type SubredditWikiIndexQuery {
	subredditName: String
}
type Node {
	__typename: String
	userCommentFragment: UserCommentFragment
}
type Profile {
	id: String
	createdAt: Unknown
	isUserBanned: Boolean
	isDefaultBanner: Boolean
	path: String
	socialLinks: [Unknown]
	isSubscribed: Boolean
	isTopListingAllowed: Boolean
	allowedPostTypes: [Unknown]
	description: Description
	isNsfw: Boolean
	title: String
	subscribersCount: Boolean
	isContributor: Boolean
	publicDescriptionText: String
	moderatorsInfo: ModeratorsInfo
	styles: Unknown
}
type Node {
	id: String
}
type Identity {
	displayedCollectibleItemsState: DisplayedCollectibleItemsState
	redditor: Redditor
}
type Node {
	reason: String
	mutedAt: Unknown
	mutedByRedditor: MutedByRedditor
	redditor: Redditor
}
type GoldBalances {
	earned: Earned
	spendable: Spendable
}
type OnTrophyProgressedNotification {
	trophy: Trophy1
}
type Dimensions {
}
type OnSubreddit {
	isTopListingAllowed: Boolean
	isDiscoveryAllowed: Boolean
	language: String
	allAllowedPostTypes: [Unknown]
	postFlairSettings: PostFlairSettings
	authorFlairSettings: AuthorFlairSettings
	isArchivePostsEnabled: Boolean
	countrySiteSettings: CountrySiteSettings
	momentsFeatures: MomentsFeatures
	commentContributionSettings: CommentContributionSettings
	isSubredditChannelsEnabled: IsSubredditChannelsEnabled
	amaSettings: AmaSettings
}
type Data {
	search: Search
}
type Awarding {
	__typename: String
	award: Award
	awardingTotalFragment: AwardingTotalFragment
}
type ModPermissions {
	isAllAllowed: Boolean
	isAccessEnabled: Boolean
	isChatOperator: Boolean
	isChatConfigEditingAllowed: Boolean
	isChannelsEditingAllowed: Boolean
	isCommunityChatEditingAllowed: Boolean
	isConfigEditingAllowed: Boolean
	isFlairEditingAllowed: Boolean
	isMailEditingAllowed: Boolean
	isPostEditingAllowed: Boolean
	isWikiEditingAllowed: Boolean
}
type RecommendationCountQuery {
	recentlyVisited: Unknown
	correlationId: Unknown
	contextSubredditId: Unknown
	postTitle: Unknown
	postBody: Present
}
type Data {
	subredditInfoById: SubredditInfoById
}
type TippingProfile {
	summary: Summary
}
type ReportFormData {
	contentAuthor: ContentAuthor
	reporter: Reporter
	subreddit: Subreddit
	config: Config
	siteRules: [Unknown]
}
type Dimensions {
}
type OnPost {
	content: Content
	isMediaOnly: Boolean
	isNsfw: Boolean
	isSpoiler: Boolean
	thumbnail: Unknown
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type PostSetSharedToQuery {
	postSetId: String
}
type OnSubreddit {
	id: String
	name: String
	moderation: Moderation
}
type OnModQueueItemChatComment {
	commentInfo: CommentInfo1
}
type Data {
	channelModerationSettings: ChannelModerationSettings
}
type Data {
	moderationActionCategories: [Unknown]
}
type OnComment {
	awardings: [Unknown]
}
type OnSubreddit {
	styles: Styles
	rules: [Unknown]
}
type PageInfo {
	__typename: String
	pageInfoFragment: PageInfoFragment
}
type SubredditWikiPageQuery {
	subredditName: String
	pageName: Present
}
type Icon {
}
type Edge {
	node: Node
}
type CommunityLeaderboard {
	categories: [Unknown]
	ranking: Ranking
}
type Edge {
	__typename: String
	feedElementEdgeFragment: FeedElementEdgeFragment
}
type AchievementCategoryById {
	__typename: String
	name: String
	onAchievementTrophyCategory: OnAchievementTrophyCategory
}
type Data {
	identity: Identity
}
type AvatarById {
	accountId: String
	backgroundInventoryItem: BackgroundInventoryItem
	styles: [Unknown]
	accessories: [Unknown]
}
type GetFlexibleReportFormDataQuery {
	input: ReportFormDataInput
}
type Data {
	redditorInfoByName: RedditorInfoByName
}
type Karma {
}
type OnRedditor {
	trophyCase: TrophyCase
}
type ActiveSubreddit {
	id: String
	name: String
	prefixedName: String
	isNsfw: Boolean
	subscribersCount: Boolean
	karma: Karma
	styles: Unknown
}
type GetShowcaseOfCurrentUserQuery {
}
type Index {
	status: SubredditWikiPageStatus
	pageTree: [Unknown]
}
type OnCommunityProgressShareButton {
	buttonText: String
}
type Image {
}
type RatingReason {
	contentRatingReasonText: String
	contentRatingTag: ContentRatingTag
}
type Target {
	__typename: String
	id: String
	onComment: OnComment
	onSubredditPost: OnSubredditPost
}
type LanguagesList {
	translatedDisplayName: String
	isoCode: String
}
type AvatarStorefront {
	listings: Listings
}
type InterestTopicsQuery {
	schemeName: String
	maxDepth: Unknown
	onboardingFlow: Unknown
}
type GetModCardInfoQuery {
	subredditId: String
	redditorId: String
	redditorUsername: String
	includeToolboxHistory: Boolean
}
type ModQueueItemPostQuery {
	postId: String
	includeSubredditInPosts: Unknown
	includeAwards: Unknown
	includeEconPromos: Unknown
	includePostStats: Unknown
	includeCurrentUserAwards: Unknown
	includeStillMediaAltText: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includePaidSubscriberBadge: Unknown
}
type Data {
	subredditInfoById: SubredditInfoById
}
type AllCount {
	totalCount: Int
}
type GetWelcomeMessageForSubredditQuery {
	subredditId: String
}
type OnProfile {
	__typename: String
	typeaheadForBlockingFragment: TypeaheadForBlockingFragment
}
type OnRedditor {
	profile: Profile
}
type PageInfo {
	__typename: String
	pagination: Pagination
}
type Awarding {
	__typename: String
	awardingByCurrentUser: [Unknown]
	awardingTotalFragment: AwardingTotalFragment
}
type ThumbnailV2 {
	isObfuscatedDefault: Boolean
	obfuscatedImage: Unknown
	image: Unknown
}
type CrosspostRoot {
	__typename: String
	onCrosspostSource: OnCrosspostSource
}
type Data {
	withID: [Unknown]
}
type Gallery {
	items: [Unknown]
}
type GetModPermissionsQuery {
	subredditName: String
}
type Error {
	code: String
	message: String
	errorInputArgs: [Unknown]
}
type CommentRemovalInfoQuery {
	subredditId: String
}
type Profile {
	__typename: String
	profileDetailsFragment: ProfileDetailsFragment
}
type ModPermissions {
	isAllAllowed: Boolean
	isAccessEnabled: Boolean
	isConfigEditingAllowed: Boolean
	isFlairEditingAllowed: Boolean
	isMailEditingAllowed: Boolean
	isPostEditingAllowed: Boolean
	isWikiEditingAllowed: Boolean
	isChatConfigEditingAllowed: Boolean
	isChatOperator: Boolean
	isChannelsEditingAllowed: Boolean
	isCommunityChatEditingAllowed: Boolean
}
type ModPermissions {
	isAccessEnabled: Boolean
}
type ChannelModerationSettings {
	contentControlSettings: ContentControlSettings
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type AppliedState {
	__typename: String
	searchAppliedStateFragment: SearchAppliedStateFragment
}
type RtjsonFromMarkdownQuery {
	markdown: String
}
type OnSubredditPost {
	recommendedChatChannels: RecommendedChatChannels
}
type HomeV3 {
	elements: Elements
}
type Icon {
}
type FeedMetadata {
	appliedFilters: AppliedFilters
	queryTags: [Unknown]
}
type DownvotedPostsQuery {
	after: Unknown
	pageSize: Unknown
	includeSubredditInPosts: Unknown
	includeAwards: Unknown
	includeEconPromos: Unknown
	includePostStats: Unknown
	includeCurrentUserAwards: Unknown
	includeStillMediaAltText: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includePaidSubscriberBadge: Unknown
}
type DynamicSearchQuery {
	query: String
	queryId: String
	filters: [Unknown]
	options: [Unknown]
	includeMediaAuth: Unknown
	includeCurrentUserAwards: Unknown
	includeAwards: Unknown
	includeEconPromos: Unknown
	includeStillMediaAltText: Unknown
	includeSubredditInPosts: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includePostStats: Unknown
	includeSubredditUnit: Unknown
	includeExtendedVideoAsset: Unknown
	includePaidSubscriberBadge: Unknown
}
type Data {
	postInfoById: PostInfoById
}
type GetCommunitySummaryQuery {
	subredditId: String
	iconSize: Present
}
type UpvotedPostsQuery {
	after: Unknown
	pageSize: Unknown
	includeSubredditInPosts: Unknown
	includeAwards: Unknown
	includeEconPromos: Unknown
	includePostStats: Unknown
	includeCurrentUserAwards: Unknown
	includeStillMediaAltText: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includePaidSubscriberBadge: Unknown
}
type Data {
	commentById: CommentById
}
type Subreddit {
	__typename: String
	id: String
	name: String
	onSubreddit: OnSubreddit
}
type PageInfo {
	hasNextPage: Boolean
	hasPreviousPage: Boolean
	startCursor: String
	endCursor: String
}
type Moderator {
	__typename: String
	redditorInfoFragment: RedditorInfoFragment
}
type Listing {
	id: String
	totalQuantity: Int
	soldQuantity: Int
	status: StorefrontListingStatus
	item: Item
}
type ModPnSettingsLayout {
	id: String
	page: Page
}
type OnSubreddit {
	id: String
	wiki: Wiki
}
type Node1 {
	__typename: String
	eligibleCommunity: EligibleCommunity
}
type OnEarnedGoldTransaction {
	createdAt: Unknown
	gold: GoldSender
}
type GlobalModifiers {
	__typename: String
	searchModifiersFragment: SearchModifiersFragment
}
type PreviewCommentAutomationQuery {
	subredditId: String
	input: PreviewCommentAutomationInput
}
type Target {
	__typename: String
	multiContentPostFragment: Unknown
}
type PageInfo {
	__typename: String
	pageInfoFragment: PageInfoFragment
}
type AvatarStorefront {
	listings: Listings
}
type UpdateRedditorAllowlistState {
	errors: [Unknown]
	ok: Boolean
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type Node {
	__typename: String
	customFeedMultiredditFragment: Unknown
}
type GetNavBarEventCommunityPickerQuery {
	eventKey: String
}
type OnTrophiesUnlockedNotification {
	message: String
	trophies: [Unknown]
}
type Data {
	subredditInfoById: SubredditInfoById
	redditorInfoById: RedditorInfoById
}
type Data {
	identity: Identity
}
type Automation {
	id: String
}
type GetStorefrontPaginatedQuery {
	filter: Unknown
	before: Unknown
	after: Unknown
	first: Unknown
	sort: Unknown
}
type GetModPermissionsByIdQuery {
	id: String
}
type Styles {
}
type OnSubreddit {
	authorFlair: AuthorFlair
	modPermissions: ModPermissions
	authorFlairSettings: AuthorFlairSettings
	userMuted: UserMuted
	userBanned: UserBanned
	userIsModerator: UserIsModerator
	userIsApproved: UserIsApproved
}
type Edge {
	node: Node
}
type ValidateUserNameQuery {
	username: String
}
type OtherDiscussions1 {
	edges: [Unknown]
}
type SearchDynamicTypeaheadQuery {
	query: String
	queryId: String
	filters: [Unknown]
	options: [Unknown]
}
type OnPayoutReceivedTransaction1 {
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type Data {
	generatedUsernames: [Unknown]
}
type Redditor {
	moderatedSubreddits: ModeratedSubreddits
}
type OnComment {
	content: Content
}
type ReportForm {
	form: String
}
type SubscribedSubredditsCountQuery {
	before: Unknown
	after: Unknown
	first: Unknown
	last: Unknown
}
type OnPost {
	translatedLanguage: String
	isTranslated: Boolean
	title: String
	content: Content
	thumbnail: Thumbnail
	media: Media
	gallery: Gallery
}
type OnRedditor {
	isBlocked: Boolean
	icon: Icon
}
type Data {
	commentsByIds: [Unknown]
}
type Edge {
	node: Node
}
type SubredditYearInReview {
	cardsV2: [Unknown]
}
type Node {
	key: String
	value: Unknown
}
type GetModUserLogsQuery {
	subredditId: String
	userId: String
	filter: ModNoteFilter
	before: Unknown
	last: Unknown
	includeSubredditInPosts: Unknown
	includeAwards: Unknown
	includeEconPromos: Unknown
	includePostStats: Unknown
	includeCurrentUserAwards: Unknown
	includeCommentsHtmlField: Unknown
	includeStillMediaAltText: Unknown
	includeMediaAuth: Unknown
	includeIsGildable: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includePaidSubscriberBadge: Unknown
}
type RedditorInfo {
	__typename: String
	id: String
	redditorNameFragment: RedditorNameFragment
}
type OnSubredditPost {
	subreddit: Subreddit
}
type ContributionStats {
}
type Identity {
	preferences: Preferences
}
type Pill {
	__typename: String
	onAchievementTextIconPill: OnAchievementTextIconPill
}
type Edge1 {
	node: Node1
}
type SubredditYearInReviewQuery {
	subredditName: String
	modPreview: Boolean
	maxWidth: Int
	translationContext: Unknown
}
type GetRemovalReasonsQuery {
	subredditId: String
}
type OnRedditor {
	icon: Icon
}
type Image {
}
type Awarding {
	__typename: String
	award: Award
	awardingTotalFragment: AwardingTotalFragment
}
type SearchChatMessageReactionIconsQuery {
	query: Unknown
	first: Unknown
}
type OnSubreddit {
	moderation: Moderation
}
type OnAchievementImageTrophy {
	image: Image
}
type AuthorFlairSettings {
	isEnabled: Boolean
	isSelfAssignable: Boolean
}
type ProfileByName {
	__typename: String
	profileDetailsFragment: ProfileDetailsFragment
}
type EmojiIcon {
	url: String
}
type MutedSubredditsQuery {
	before: Unknown
	after: Unknown
	first: Unknown
	last: Unknown
}
type Row {
	__typename: String
	displayName: String
	icon: String
	onNotificationSettingsLayoutMessageTypeRow: OnNotificationSettingsLayoutMessageTypeRow
	onNotificationSettingsLayoutMessageTypeOptionsRow: OnNotificationSettingsLayoutMessageTypeOptionsRow
	onNotificationSettingsLayoutAdminNotificationRow: OnNotificationSettingsLayoutAdminNotificationRow
}
type AuthoredMultireddits {
	edges: [Unknown]
	pageInfo: PageInfo
}
type OnCommunityProgressMakePostButton {
	buttonText: String
	postTitle: String
	postBody: PostBody
	postRepeatFrequency: Frequency
}
type Data {
	redditorInfoById: RedditorInfoById
}
type Profile {
	__typename: String
	profileFragment: ProfileFragment
}
type Data {
	subredditInfoById: SubredditInfoById
}
type PageInfo {
	__typename: String
	pageInfoFragment: PageInfoFragment
}
type GetInvitedModeratorsQuery {
	subredditName: String
	before: Unknown
	after: Unknown
	first: Unknown
	last: Unknown
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type GetSubredditChannelsQuery {
	subredditName: String
	after: Unknown
	pageSize: Unknown
	includePostChannels: Unknown
}
type Node {
	__typename: String
	modmailMessageFragment: ModmailMessageFragment
	modmailActionFragment: ModmailActionFragment
}
type WhereToPostSuggestions {
	edges: [Unknown]
}
type PreviewPostAutomation {
	ok: Boolean
	errors: [Unknown]
	result: Result
}
type Data {
	subredditInfoById: SubredditInfoById
}
type AuthorInfo {
	__typename: String
	id: String
	displayName: String
	onRedditor: OnRedditor
}
type ModeratedSubreddits {
	edges: [Unknown]
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type Edge {
	node: Node
}
type OnProfile {
	__typename: String
	typeaheadProfileFragment: TypeaheadProfileFragment
}
type OnSubreddit {
	all: All
	note: Note
	approval: Approval
	removal: Removal
	ban: Ban
	mute: Mute
	invite: Invite
	spam: Spam
	contentChange: ContentChange
	modAction: ModAction
}
type OnSubreddit {
	moderation: Moderation
}
type Still1 {
	__typename: String
	trendingStillMediaFragment: TrendingStillMediaFragment
}
type Data {
	countryCodesNames: [Unknown]
}
type Node {
	__typename: String
	subredditListItemFragment: SubredditListItemFragment
}
type OnDeletedSubredditPost {
	id: String
	title: String
}
type Icon {
}
type OnAchievementTrophyCategory {
	trophies: Trophies
}
type MessagesAndActions {
	pageInfo: PageInfo
	edges: [Unknown]
}
type LegacyIcon {
}
type OnSubreddit {
	moderation: Moderation
}
type ModInsights {
	dailySummaries: DailySummaries
	weeklySummaries: WeeklySummaries
	monthlySummaries: MonthlySummaries
	yearlySummaries: YearlySummaries
}
type OnExplainerScroller {
	pages: [Unknown]
}
type SnoovatarIcon {
}
type Result {
	outcomes: [Unknown]
}
type Edge {
	node: Node
}
type Data {
	postsInfoByIds: [Unknown]
}
type Vault {
	addresses: [Unknown]
}
type Node {
	__typename: String
	postFragment: PostFragment
}
type Image1 {
	__typename: String
	mediaSourceFragment: Unknown
}
type Item {
	__typename: String
	postGalleryItemFragment: Unknown
}
type Offer {
	id: String
	type: Unknown
	name: String
	description: String
	version: Unknown
	pricePackages: [Unknown]
}
type OnSubredditPost {
	subreddit: Subreddit
	media: Media
}
type ModActivitySummary {
	lastModAction: LastModAction
}
type SubredditInfoByName {
	__typename: String
	onUnavailableSubreddit: OnUnavailableSubreddit
	onSubreddit: OnSubreddit
}
type Edge {
	__typename: String
	feedElementEdgeFragment: FeedElementEdgeFragment
}
type BlockedUsersQuery {
	after: Unknown
	pageSize: Present
}
type Data {
	subredditInfoByName: SubredditInfoByName
	identity: Identity
}
type Category {
	__typename: String
	leaderboardCategoryFragment: LeaderboardCategoryFragment
}
type Subreddit {
	id: String
	name: String
}
type GetFlairsQuery {
	subredditName: String
}
type GetCustomEmojisStatusQuery {
	subredditName: String
}
type Content {
	html: String
	preview: String
	markdown: String
	richtext: Unknown
}
type OnFloatDynamicConfig {
	floatVal: Unknown
	name: String
}
type Dynamic {
	components: Components
}
type PayoutVerificationStatus {
	tipping: Unknown
}
type OnAchievementCTADestinationURL {
}
type Identity {
	blockedRedditorsInfo: BlockedRedditorsInfo
}
type AchievementTrophyById {
	pastContributions: PastContributions
}
type PostInfoById {
	awardings: [Unknown]
}
type ArenaEvent {
	__typename: String
	arenaEventFragment: ArenaEventFragment
}
type PageInfo {
	__typename: String
	pageInfoFragment: PageInfoFragment
}
type OnRedditor {
	id: String
	displayName: String
	icon: Icon
}
type Node {
	approvedAt: Unknown
	redditor: Redditor
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type ShareUrl {
}
type AuthorFlair {
	text: String
	richtext: Unknown
	template: Unknown
	textColor: FlairTextColor
}
type Node {
	id: String
	subject: String
}
type Identity {
	settings: Settings
}
type Redditor {
	__typename: String
	id: String
	displayName: String
	onRedditor: OnRedditor
}
type Data {
	recommendation: Recommendation
}
type DefaultPost {
	__typename: String
	postSetPostFragment: Unknown
}
type Node {
	__typename: String
	postInfoFragment: PostInfoFragment
}
type Identity {
	preferences: Preferences
}
type Recipient {
	id: String
	displayName: String
}
type Error {
	code: String
}
type ActiveModerators {
	edges: [Unknown]
}
type Card {
	id: String
	name: String
	title: String
	bodyText: String
	iconIdentifier: String
	colorIdentifier: String
	buttons: [Unknown]
}
type AdEvent {
	__typename: String
	adEventFragment: AdEventFragment
}
type Item {
	__typename: String
	translatedGalleryItemFragment: TranslatedGalleryItemFragment
}
type PageInfo {
	startCursor: String
}
type Redditor {
	__typename: String
	onUnavailableRedditor: OnUnavailableRedditor
	onRedditor: OnRedditor
}
type ModPermissions {
	isAccessEnabled: Boolean
	isAllAllowed: Boolean
	isChannelsEditingAllowed: Boolean
	isChatConfigEditingAllowed: Boolean
	isChatOperator: Boolean
	isCommunityChatEditingAllowed: Boolean
	isConfigEditingAllowed: Boolean
	isFlairEditingAllowed: Boolean
	isMailEditingAllowed: Boolean
	isPostEditingAllowed: Boolean
	isWikiEditingAllowed: Boolean
}
type Section {
	id: String
	title: String
	rows: [Unknown]
}
type Node {
	__typename: String
	searchPersonFragment: SearchPersonFragment
}
type Node1 {
	__typename: String
	onPayoutTransaction: OnPayoutTransaction
}
type PageInfo {
	hasNextPage: Boolean
	hasPreviousPage: Boolean
	startCursor: String
	endCursor: String
}
type Section1 {
	__typename: String
	econEducationalUnitSectionsFragment: EconEducationalUnitSectionsFragment
}
type BlockedRedditorsInfo {
	pageInfo: PageInfo
	edges: [Unknown]
}
type Node {
	__typename: String
	modmailConversationFragment: ModmailConversationFragment
}
type AwardingInfosByIdsQuery {
	ids: [Unknown]
}
type CommentTreeAd {
	__typename: String
	id: String
	associatedComment: AssociatedComment
	profile: Profile
	postContentFragment: Unknown
	subredditDetailFragment: SubredditDetailFragment
	postFragment: PostFragment
}
type Styles {
}
type Data {
	subredditInfoById: SubredditInfoById
}
type OnRedditor {
	id: String
	displayName: String
}
type TrophiesBySubredditId {
	__typename: String
	id: String
	name: String
	onAchievementImageTrophy: OnAchievementImageTrophy
	onAchievementRepeatableImageTrophy: OnAchievementRepeatableImageTrophy
}
type OnComment {
	id: String
	permalink: String
	authorInfo: AuthorInfo
	isLocked: Boolean
	isStickied: Boolean
	isSaved: Boolean
	moderationInfo: ModerationInfo
	distinguishedAs: DistinguishedAs
}
type EconMarketing {
	nudges: [Unknown]
}
type ContentMessage {
	message: String
	rtjsonText: Unknown
}
type OnUnavailableRedditor {
	id: String
	displayName: String
}
type Subreddit1 {
	moderation: Moderation1
}
type Edge {
	cursor: String
	node: Node
}
type GetMatureContentSettingsQuery {
	subredditId: String
}
type PageInfo {
	hasNextPage: Boolean
	endCursor: String
}
type SubredditInfo {
	__typename: String
	onSubreddit: OnSubreddit
	subredditFragment: SubredditFragment
}
type LegacyIcon {
}
type Avatar {
	__typename: String
	avatarFragment: AvatarFragment
}
type FeedMetadata {
	treatment: TreatmentProtocol
}
type GetUsernamesByUserIdsQuery {
	ids: Unknown
}
type ModeratorInfo {
	__typename: String
	redditorInfoFragment: RedditorInfoFragment
}
type TranslatedCommentQuery {
	commentId: String
	targetLanguage: String
}
type OnAutomationReportOutcome {
	__typename: String
	automation: Automation2
	contentMessages: [Unknown]
}
type Comment {
	__typename: String
	onComment: OnComment
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type AvatarMarketingEvent {
	id: String
	startsAt: Unknown
	endsAt: Unknown
	name: String
	text: String
	mobileAssetUrls: [Unknown]
	tags: [Unknown]
	nudge: Unknown
}
type TippingProfile {
	summary: Summary
}
type CommunityGold {
}
type MonthlySummaries {
	__typename: String
	insightsSummariesFragment: InsightsSummariesFragment
}
type Data {
	identity: Identity
}
type SubscribedSubredditsQuery {
	before: Unknown
	after: Unknown
	first: Unknown
	last: Unknown
	afterFollowing: Unknown
	includeRecapFields: Boolean
	includeEligibleMoment: Unknown
	includeWelcomePage: Boolean
	includeCommunityGold: Boolean
	includeCommunityLeaderboard: Boolean
	includeMomentFeatures: Boolean
}
type CommunityGold {
	isActivePaidSubscriber: Boolean
	settings: Settings
}
type Data {
	subredditInfoById: SubredditInfoById
}
type YearInReviewCategoryById {
	subredditDetails: SubredditDetails
}
type Data {
	identity: Identity
}
type RelatedSubredditsQuery {
	id: String
}
type OnAutomationNotCondition {
	regexCondition: RegexCondition
	stringCondition: StringCondition
}
type GetDevPlatformMetadataQuery {
	subredditId: String
}
type OnSubreddit1 {
	id: String
	name: String
}
type Data {
	subredditInfoById: SubredditInfoById
}
type FollowedRedditorsInfo {
	edges: [Unknown]
	pageInfo: PageInfo1
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type LegacyIcon {
}
type ModSafetyFilterSettings {
	banEvasion: BanEvasion
}
type OnPost {
	title: String
	content: Content
	thumbnail: Thumbnail
	media: Media
	gallery: Gallery
}
type SubredditInfoByName {
	__typename: String
	id: String
	onSubreddit: OnSubreddit
}
type SnoovatarIcon {
}
type GetSafetyFilterEvaluationsAsModeratorQuery {
	subredditId: String
	textContent: String
}
type RecommendedVideoPostsQuery {
	videoFeedContext: Unknown
	after: Unknown
	pageSize: Unknown
	includeSubredditInPosts: Unknown
	forceAds: Unknown
	includeAwards: Unknown
	includeEconPromos: Unknown
	adContext: Unknown
	includePostStats: Unknown
	sort: Unknown
	time: Unknown
	includeCurrentUserAwards: Unknown
	includeStillMediaAltText: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includePaidSubscriberBadge: Unknown
}
type Fixed_width {
	__typename: String
	mediaSourceFragment: Unknown
}
type AwardingsInfo {
	topAwarders: TopAwarders
}
type Data {
	identity: Identity
}
type DistributionCampaignChoice {
	__typename: String
	distributionCampaignChoiceFragment: DistributionCampaignChoiceFragment
}
type GetAdBusinessQuery {
	postId: String
}
type Edge {
	cursor: String
	node: Node
}
type OnSubreddit {
	aiModPredictionsForPost: AiModPredictionsForPost
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type AwardingsInfo {
	topAwarders: TopAwarders
}
type Moderation {
	actions: Actions
}
type Edge {
	cursor: String
}
type Data {
	avatarBuilderCatalog: AvatarBuilderCatalog
}
type Data {
	subredditInfoById: SubredditInfoById
}
type Node1 {
	__typename: String
	onRedditor: OnRedditor
}
type Timeline {
	__typename: String
	onAchievementStreakTimelineItem: OnAchievementStreakTimelineItem
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type OnDefaultEligibleExperience {
	variantId: String
}
type OnComment {
	__typename: String
	modAwardedCommentInfo: ModAwardedCommentInfo
}
type Moderation {
	temporaryEventRuns: TemporaryEventRuns
}
type Profile {
	redditorInfo: RedditorInfo
}
type Moderation {
	isShowCommentRemovalReasonPrompt: Boolean
}
type ChannelModerationSettings {
	contentControlSettings: ContentControlSettings
}
type GetUserVaultQuery {
	provider: Unknown
	userId: String
}
type Products {
	subscriptions: [Unknown]
}
type RichtextMedium {
	__typename: String
	onVideoAsset: Unknown
}
type Data {
	adEligibility: AdEligibility
}
type AiModPredictionsForPost {
	mentalHealthOutcome: AIModMentalHealthOutcome
	rulePredictions: [Unknown]
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type PageInfo {
	__typename: String
	pageInfoFragment: PageInfoFragment
}
type PopularFeedSduiQuery {
	adContextInput: Unknown
	feedContextInput: Unknown
	filterPosts: Unknown
	sort: Unknown
	time: Unknown
	after: Unknown
	includeViewCount: Unknown
	includePackagedMedia: Unknown
	includeCarouselRecommendations: Unknown
	includeListStyleRecommendations: Unknown
	includeCompactPostStyleRecommendations: Unknown
	includeCardPostStyleRecommendations: Unknown
	includeTaxonomyTopicsFeedElement: Unknown
	includeExploreFeaturedItemsFeedElement: Unknown
	includeTopicGroupFeedElement: Unknown
	includeRankedCommunityFeedElement: Unknown
	includeChatChannelFeedUnit: Unknown
	includeGoldInfo: Unknown
	includeEconPromos: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includeNewInCommunitiesCarousel: Unknown
}
type Karma {
}
type GetCommentByIdQuery {
	id: String
	includeAwards: Unknown
	includeCommentsHtmlField: Unknown
	includeIsGildable: Unknown
	includeMediaAuth: Unknown
	includeExtendedVideoAsset: Unknown
	includePaidSubscriberBadge: Unknown
}
type Identity {
	isEmailPermissionRequired: Boolean
}
type Identity {
	blockedRedditorsInfo: BlockedRedditorsInfo
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type OnSubredditPost {
	subreddit: Subreddit
}
type TrendingQueries {
	edges: [Unknown]
}
type Data {
	topicFeedV1: TopicFeedV1
}
type PageInfo2 {
	__typename: String
	pageInfoFragment: PageInfoFragment
}
type AchievementUnlockedNotificationsQuery {
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type TrendingSearchesQuery {
	searchInput: Present
	productSurface: Unknown
	includeNewPixelTrackingFields: Boolean
	subplacement: Present
	includeExcludedExperimentsField: Boolean
}
type ModQueueNewItemCountQuery {
	lastseen: Unknown
}
type OnUnavailableRedditor {
	id: String
	displayName: String
}
type Data {
	userLocation: UserLocation
}
type Row2 {
	__typename: String
	onModPnSettingsLayoutRowPage: OnModPnSettingsLayoutRowPage2
	modPnSettingsRowFragment: ModPnSettingsRowFragment
}
type AwardsSheet {
	groups: [Unknown]
}
type Thumbnail1 {
}
type PostInfoById {
	awardings: [Unknown]
}
type Node {
	__typename: String
	postFragment: PostFragment
}
type OnSubreddit {
	automations: [Unknown]
}
type Earned {
}
type GetSubredditRulesQuery {
	name: String
}
type Edge {
	node: Node
}
type ProfilesByName {
	__typename: String
	profileDetailsFragment: ProfileDetailsFragment
}
type Redditor {
	name: String
}
type Identity {
	id: String
	createdAt: Unknown
	email: String
	isEmailPermissionRequired: Boolean
	isSuspended: Boolean
	isModerator: Boolean
	suspensionExpiresAt: Unknown
	isEmailVerified: Boolean
	isPasswordSet: Boolean
	isForcePasswordReset: Boolean
	coins: Int
	isNameEditable: Boolean
	isSubredditCreationAllowed: Boolean
	preferences: Preferences
	econSubscriptions: [Unknown]
	paymentSubscriptions: [Unknown]
	linkedIdentities: [Unknown]
	phoneNumber: PhoneNumber
	inbox: Inbox
	modMail: ModMail
	redditor: Redditor
}
type Edge1 {
	node: Node1
}
type Award {
	__typename: String
	awardFragment: AwardFragment
}
type BatchArtist {
	sectionId: String
	artists: Artists
}
type OnRedditor {
	trophyCase: TrophyCase
}
type PageInfo {
	hasNextPage: Boolean
	startCursor: String
	endCursor: String
}
type Karma {
}
type GetModPnSettingsLayoutQuery {
	subredditId: String
}
type Data {
	commentById: CommentById
}
type OnAutomationInformOutcome {
	__typename: String
	automation: Automation1
	contentMessages: [Unknown]
}
type Page {
	__typename: String
	sections: [Unknown]
	modPnSettingsRowFragment: ModPnSettingsRowFragment
}
type Item {
	__typename: String
	trendingGalleryItemFragment: TrendingGalleryItemFragment
}
type MutedByRedditor {
	displayName: String
}
type Ranking {
	__typename: String
	currentUserRank: CurrentUserRank
	leaderboardRankingPageFragment: LeaderboardRankingPageFragment
}
type OnAchievementImageTrophy {
	image: Image
}
type Data {
	identity: Identity
}
type Approval {
	totalCount: Int
}
type Dimensions {
}
type AppliedState {
	__typename: String
	searchAppliedStateFragment: SearchAppliedStateFragment
}
type Data {
	subredditInfoById: SubredditInfoById
}
type Spendable {
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type Node {
	artist: Artist
}
type OnSubreddit {
	postFlairTemplates: [Unknown]
}
type Identity {
	followedByRedditorsInfo: FollowedByRedditorsInfo
}
type Data {
	identity: Identity
}
type GetLastModActionQuery {
	subredditName: String
}
type Moderation1 {
	isShowCommentRemovalReasonPrompt: Boolean
}
type PrefetchContext {
}
type Edge {
	node: Node
}
type GetInventoryItemsByIdsQuery {
	ids: Present
}
type Subreddit1 {
	moderation: Moderation1
}
type Data {
	searchChatGifs: SearchChatGifs
}
type Actions1 {
	edges: [Unknown]
}
type ContentControlSettings {
	blockedContent: String
	textFiltersAllowList: [Unknown]
}
type Edge {
	cursor: String
	node: Node
}
type Data {
	avatarStorefront: AvatarStorefront
}
type Redditor {
	trophyCase: TrophyCase
}
type PostsByIdsQuery {
	ids: [Unknown]
	includeAwards: Unknown
	includeEconPromos: Unknown
	includeSubredditInPosts: Unknown
	includePostStats: Unknown
	includeDeletedPosts: Unknown
	includeCurrentUserAwards: Unknown
	includeStillMediaAltText: Unknown
	includeMediaAuth: Unknown
	includeAuthorCommunityBadge: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includePaidSubscriberBadge: Unknown
	includeNamedEntitiesInComments: Unknown
}
type OnSubreddit {
	name: String
	communityStatus: CommunityStatus
	modPermissions: ModPermissions
}
type Dimensions1 {
}
type Progress1 {
}
type OnAchievementRepeatableTrophy {
	currentProgress: CurrentProgress
}
type Trophies {
	edges: [Unknown]
}
type GetMutedMembersQuery {
	name: String
	username: Unknown
	before: Unknown
	after: Unknown
	first: Unknown
	last: Unknown
}
type AvatarStorefront {
	artists: Artists
}
type Edge1 {
	node: Node1
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type General {
	__typename: String
	savedResponseFragment: SavedResponseFragment
}
type Data {
	chatChannelBannedUsers: ChatChannelBannedUsers
}
type PageInfo {
	__typename: String
	pageInfoFragment: PageInfoFragment
}
type CommentById {
	__typename: String
	commentFragmentWithPost: CommentFragmentWithPost
}
type Identity {
	adminDecisions: [Unknown]
}
type GetCustomFiltersQuery {
	id: String
}
type SubredditMemberInfo {
	flair: Flair
	subredditKarma: SubredditKarma
}
type Node {
	__typename: String
	subredditInfo: SubredditInfo
	onModQueueItemPost: OnModQueueItemPost
	onModQueueItemComment: OnModQueueItemComment
	onModQueueItemChatComment: OnModQueueItemChatComment
	onModQueueItemAwardOnContent: OnModQueueItemAwardOnContent
}
type OnDeletedSubredditPost {
	title: String
	createdAt: Unknown
	subreddit: Subreddit
}
type PageInfo {
	endCursor: String
}
type Redditor {
	snoovatarIcon: SnoovatarIcon
}
type CommentInfo {
	__typename: String
	commentFragmentWithPost: CommentFragmentWithPost
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type Data {
	avatarBuilderCatalog: AvatarBuilderCatalog
}
type Data {
	redditorsInfoByIds: [Unknown]
}
type Target {
	__typename: String
	onPostInfo: OnPostInfo
	onComment: OnComment
}
type Identity {
	authoredMultireddits: AuthoredMultireddits
}
type Ban {
	__typename: String
	savedResponseFragment: SavedResponseFragment
}
type GlobalModifiers {
	__typename: String
	searchModifiersFragment: SearchModifiersFragment
}
type Data {
	commentById: CommentById
}
type Subreddit {
	id: String
	name: String
	publicDescriptionText: String
	isSubscribed: Boolean
	styles: Unknown
}
type MutedMembers {
	edges: [Unknown]
}
type History {
	transactionHash: Unknown
	transferId: String
	status: TransferStatus
}
type OnRedditor {
	profile: Profile
}
type OnSubredditPost {
	belowCommentRecommendations: BelowCommentRecommendations
}
type Explainer {
	id: String
	sections: [Unknown]
	footer: Footer
}
type Data {
	subredditsInfoByNames: [Unknown]
}
type Profile {
	__typename: String
	profileFragment: ProfileFragment
}
type AutomationRecommendations {
	edges: [Unknown]
}
type SavedProperty {
	name: String
	value: Value
}
type FetchSubredditEmojisQuery {
	subredditName: String
	itemsPerPage: Present
}
type Search {
	dynamic: Dynamic
	general: General
}
type RedditorInfoByName {
	__typename: String
	onRedditor: OnRedditor
}
type PostInfoById {
	__typename: String
	onSubredditPost: OnSubredditPost
}
type CommunityTopicsQuery {
	pageSize: Unknown
	after: Unknown
	isOnlyRecommendedIncluded: Present
}
type CommentById {
	postInfo: PostInfo
	children: Children
}
type Flair {
	text: String
}
type OnSubreddit {
	modPnSettingsLayout: ModPnSettingsLayout
}
type Node {
	__typename: String
	replies: [Unknown]
	privateMessageFragment: PrivateMessageFragment
}
type PrefetchContext {
}
type SubredditKarma {
}
type Data {
	search: Search
}
type BodyContent {
	preview: String
}
type GetPrivateMessagesQuery {
	where: PrivateMessagesSource
	after: Unknown
	first: Present
}
type OnRedditor {
	id: String
	name: String
	icon: Icon
	snoovatarIcon: SnoovatarIcon
}
type Topic {
	name: String
	title: String
	parents: [Unknown]
}
type Edge {
	node: Node
}
type FieldError {
	field: String
	message: String
	code: String
}
type Data {
	searchModmailConversations: SearchModmailConversations
}
type Dynamic {
	modifiers: Modifiers
}
type Value {
	__typename: String
	onBoolDynamicConfig: OnBoolDynamicConfig
	onIntDynamicConfig: OnIntDynamicConfig
	onFloatDynamicConfig: OnFloatDynamicConfig
	onStringDynamicConfig: OnStringDynamicConfig
	onMapDynamicConfig: OnMapDynamicConfig
}
type Comment {
	__typename: String
	savedResponseFragment: SavedResponseFragment
}
type IsUserBannedFromChatChannel {
	isBanned: Boolean
}
type PageInfo {
	__typename: String
	pageInfoFragment: PageInfoFragment
}
type Node {
	__typename: String
	onSubreddit: OnSubreddit
}
type Data {
	shareUrl: ShareUrl
}
type GetSubredditPostChannelsQuery {
	subredditName: String
	sort: Unknown
	range: Unknown
}
type Edge {
	node: Node
}
type SnoovatarIcon {
}
type WhereToPostSuggestions {
	edges: [Unknown]
}
type Data {
	markdownFromRtjson: String
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type ChannelCrowdControlSettingsQuery {
	id: String
}
type OnSubreddit {
	customEmojisStatus: CustomEmojisStatus
}
type MatureContent {
	isEnabled: Boolean
	sexualCommentContentType: FilterContentType
	sexualPostContentType: FilterContentType
	violentCommentContentType: FilterContentType
	violentPostContentType: FilterContentType
}
type Rule {
	__typename: String
	onSubredditRule: OnSubredditRule
}
type Redditor {
	id: String
	name: String
	prefixedName: String
	accountType: AccountType
	isEmployee: Boolean
	isFriend: Boolean
	isPremiumMember: Boolean
	isProfileHiddenFromSearchEngines: Boolean
	isAcceptingChats: Boolean
	isAcceptingFollowers: Boolean
	cakeDayOn: Unknown
	snoovatarIcon: SnoovatarIcon
	profile: Profile
	profileExemptedExperiments: [Unknown]
	isProfileContentFiltered: Boolean
	karma: Karma
	contributionStats: ContributionStats
	trophyCase: TrophyCase
}
type ContentRatingTag {
	rating: Unknown
	weight: String
	description: String
	icon: Icon1
}
type ValidateCreateSubredditInput {
	fieldErrors: [Unknown]
}
type Node {
	__typename: String
	postFragment: PostFragment
}
type OnMedia {
	packagedMedia: PackagedMedia
	streaming: Streaming
}
type Edge {
	node: Node
}
type Data {
	postInfoById: PostInfoById
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type Content {
	richtext: Unknown
	preview: String
}
type Result {
	outcomes: [Unknown]
}
type SubscriptionBenefitsSettings {
	isSubscriberBadgeEnabled: Boolean
	isSubscriberAwardsEnabled: Boolean
	isSubscriberOnlyPostEnabled: Boolean
}
type Data {
	adEligibility: AdEligibility
}
type GetCommunityTypeSettingsQuery {
	subredditName: String
}
type ContributorStatus {
	karma: ContributorTier
	goldThreshold: [Unknown]
}
type Identity {
	isInvitePending: Boolean
	pendingCommunityInvitations: [Unknown]
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type Node {
	__typename: String
	id: String
	onRedditor: OnRedditor
}
type Gallery {
	items: [Unknown]
}
type SnoovatarIcon {
}
type Listings {
	edges: [Unknown]
}
type Data {
	subredditInfoById: SubredditInfoById
}
type Data {
	multireddit: Multireddit
}
type ModeratorMembers {
	pageInfo: PageInfo
	edges: [Unknown]
}
type OnSubreddit {
	isCommentGuidanceAvailable: Boolean
}
type Data {
	avatarStorefront: AvatarStorefront
}
type PhoneNumber {
	code: String
	number: String
}
type GetModeratorListQuery {
	name: String
	first: Unknown
}
type OnSubreddit {
	id: String
	name: String
	prefixedName: String
	styles: Styles
	communityGold: CommunityGold
}
type OriginalCommentsQuery {
	commentIds: [Unknown]
	includeCommentsHtmlField: Present
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type Edge {
	node: Node
}
type Edge {
	node: Node
}
type Data {
	chatUserSettings: ChatUserSettings
}
type Trophy2 {
	__typename: String
	achievementTrophyFragment: AchievementTrophyFragment
}
type Identity {
	goldBalances: GoldBalances
}
type GoldSender {
	redditorInfo: RedditorInfo
}
type YearlySummaries {
	__typename: String
	insightsSummariesFragment: InsightsSummariesFragment
}
type CommentContributionSettings {
	allowedMediaTypes: [Unknown]
}
type SnoovatarIcon {
}
type PrimaryButton {
	buttonText: String
}
type Data {
	identity: Identity
}
type AuthorFlairSettings {
	isEnabled: Boolean
	isSelfAssignable: Boolean
}
type Award {
	id: String
}
type SubredditInfoById {
	__typename: String
	name: String
	onSubreddit: OnSubreddit
}
type Data {
	exploreFeedV1: ExploreFeedV1
}
type Node {
	__typename: String
	commentFragmentWithPost: CommentFragmentWithPost
}
type ChatUserSettings {
	invitePolicy: InvitePolicy
}
type Node {
	__typename: String
	taggedSubredditFragment: TaggedSubredditFragment
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type OriginalCommentQuery {
	commentId: String
	includeCommentsHtmlField: Present
}
type Description {
	__typename: String
	reportOptionDescription: ReportOptionDescription
}
type ArenaFeedV3 {
	elements: Elements
}
type Content {
	__typename: String
	markdown: String
	html: String
	preview: String
	richtext: Unknown
	translationInfo: TranslationInfo
	richtextMediaFragment: RichtextMediaFragment
}
type OnAwardingFeedElement {
	awarding: Awarding
}
type Identity {
	displayedCollectibleItemsState: DisplayedCollectibleItemsState
	displayedCollectibleItems: DisplayedCollectibleItems
}
type Data {
	inventoryItems: InventoryItems
}
type Tree {
	depth: Int
	node: Node
}
type OnPostCarousel {
	__typename: String
	postCarouselFragment: PostCarouselFragment
}
type OnSubreddit {
	evaluateCommentAutomations: EvaluateCommentAutomations
}
type Edge {
	__typename: String
	feedElementEdgeFragment: FeedElementEdgeFragment
}
type Content {
	markdown: String
}
type NotificationInbox {
	elements: Elements
}
type ModReport {
	reason: String
}
type Still {
	content: Unknown
}
type OnComment {
	awardings: [Unknown]
}
type Node {
	id: String
	name: String
	modPermissions: ModPermissions
	styles: Unknown
}
type EconSubscription {
	id: String
	startedAt: Unknown
	expiresAt: Unknown
	ifCanceledExpiresAt: Unknown
	renewInterval: DurationUnit
	isCanceled: Boolean
	source: String
}
type Streaming1 {
	__typename: String
	streamingAuthFragment: Unknown
}
type UserReport {
	reason: String
}
type Node2 {
	target: Target
	action: ModActionType
	id: String
	details: String
}
type TranslatedStringsQuery {
	strings: [Unknown]
	targetLanguage: String
}
type SubscribedSubreddits {
	edges: [Unknown]
}
type Award1 {
	name: String
	awardType: AwardType
	tags: [Unknown]
	icon: Icon
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type Data {
	postInfoById: PostInfoById
}
type UserCommunityAchievementsQuery {
	username: String
	subredditId: String
}
type Styles {
}
type WhereToPostQuery {
	recentlyVisited: Unknown
	correlationId: Unknown
	contextSubredditId: Unknown
	postTitle: Unknown
	postBody: Present
}
type Node {
	prefixedName: String
	id: String
	publicDescriptionText: String
	subscribersCount: Unknown
}
type SubredditInfoById {
	__typename: String
	id: String
	name: String
	onSubreddit: OnSubreddit
}
type TrophyCase {
	categories: Categories
}
type OnSubreddit {
	id: String
	isModeratorInvitePending: Boolean
	invitedModeratorMembers: InvitedModeratorMembers
}
type Data {
	interestTopics: InterestTopics
}
type OnAutomationBlockAction {
	message: String
}
type Section2 {
	__typename: String
	rows: [Unknown]
	modPnSettingSectionFragment: ModPnSettingSectionFragment
}
type OnPostRecommendation {
	recommendationContext: RecommendationContext
	postInfo: PostInfo
}
type OnIntDynamicConfig {
	intVal: Int
	name: String
}
type CommunityLeaderboardQuery {
	subredditName: String
	categoryId: Unknown
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type Tipper {
	__typename: String
	onRedditor: OnRedditor
}
type CommunityProgressModule {
	id: String
	displayText: String
	cards: [Unknown]
}
type AuthorInfo {
	displayName: String
}
type GoldBalances {
	earned: Earned
}
type Media1 {
	__typename: String
	onMedia: OnMedia1
}
type OnSubreddit {
	name: String
	prefixedName: String
	styles: Unknown
	authorFlair: AuthorFlair
	authorFlairSettings: AuthorFlairSettings
	userIsModerator: UserIsModerator
	welcomePage: WelcomePage
}
type RegexCondition {
	features: [Unknown]
	value: String
	isCaseSensitive: Boolean
}
type PageInfo {
	__typename: String
	pageInfoFragment: PageInfoFragment
}
type GetCommunityGoldDetailsQuery {
	subredditId: String
	iconSize: Present
}
type Edge {
	__typename: String
	feedElementEdgeFragment: FeedElementEdgeFragment
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type Components {
	__typename: String
	dynamicTypeaheadLayout: DynamicTypeaheadLayout
}
type UpdatePaidSubscriberStatusVisibility {
	ok: Boolean
}
type OnCommentInboxNotificationContext {
	comment: Comment
}
type Media {
	__typename: String
	mediaFragment: MediaFragment
}
type ModerationInfo {
	__typename: String
	verdict: ModerationVerdict
	verdictAt: Unknown
	verdictByRedditorInfo: VerdictByRedditorInfo
	modReports: [Unknown]
	userReports: [Unknown]
	isReportingIgnored: Boolean
	modQueueReasonsFragment: ModQueueReasonsFragment
}
type NamedEntity {
	__typename: String
	id: String
	displayName: String
}
type PostInfo {
	__typename: String
	onDeletedSubredditPost: OnDeletedSubredditPost1
	subredditPost: SubredditPost
	profilePost: ProfilePost
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type Image {
}
type Image {
	name: String
}
type NewsFeedSduiQuery {
	adContextInput: Unknown
	feedContextInput: Unknown
	subtopicIds: Unknown
	filterPosts: Unknown
	navigationSessionId: Unknown
	sort: Unknown
	time: Unknown
	after: Unknown
	includeViewCount: Unknown
	includePackagedMedia: Unknown
	includeCarouselRecommendations: Unknown
	includeListStyleRecommendations: Unknown
	includeCompactPostStyleRecommendations: Unknown
	includeCardPostStyleRecommendations: Unknown
	includeTaxonomyTopicsFeedElement: Unknown
	includeExploreFeaturedItemsFeedElement: Unknown
	includeTopicGroupFeedElement: Unknown
	includeRankedCommunityFeedElement: Unknown
	includeChatChannelFeedUnit: Unknown
	includeGoldInfo: Unknown
	includeEconPromos: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includeNewInCommunitiesCarousel: Unknown
}
type Node {
	__typename: String
	id: String
	onPostRecommendation: OnPostRecommendation
}
type TrophyCase {
	totalUnlocked: [Unknown]
}
type Products {
	subscriptions: [Unknown]
}
type OnPost {
	__typename: String
	isHighlighted: Boolean
	postFragment: PostFragment
}
type Edge {
	node: Unknown
}
type Moderation {
	modActions: ModActions
}
type Data {
	commentById: CommentById
}
type Edge {
	node: Node
}
type DistributionCampaign {
	distributionCampaignId: String
	name: String
	listings: [Unknown]
}
type Karma {
}
type Summary {
	currentBalance: Currency
}
type TrendingChatGifs {
	version: Int
	provider: ChatGifsProvider
	pageInfo: PageInfo
	edges: [Unknown]
}
type Node {
	__typename: String
	subredditDataDetailsFragment: SubredditDataDetailsFragment
	subredditRecapFieldsFragment: SubredditRecapFieldsFragment
	subredditEligibleMomentFragment: SubredditEligibleMomentFragment
	subredditCommunityLeaderboardFragment: SubredditCommunityLeaderboardFragment
	subredditMomentFeaturesFragment: SubredditMomentFeaturesFragment
}
type Gallery {
	items: [Unknown]
}
type TextFilter {
	filterType: String
	isEnabled: Boolean
	label: String
}
type ProfileTrophiesQuery {
	profileName: String
}
type Edge {
	node: Node
	cursor: String
}
type PostsInfoById {
	__typename: String
	id: String
	onPost: OnPost
}
type Downsized {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnRedditor {
	elements: Elements
	profile: Profile
}
type ModPermissions {
	isAllAllowed: Boolean
	isAccessEnabled: Boolean
	isConfigEditingAllowed: Boolean
	isFlairEditingAllowed: Boolean
	isMailEditingAllowed: Boolean
	isPostEditingAllowed: Boolean
	isWikiEditingAllowed: Boolean
	isChatConfigEditingAllowed: Boolean
	isChatOperator: Boolean
	isChannelsEditingAllowed: Boolean
	isCommunityChatEditingAllowed: Boolean
}
type WithName {
	__typename: String
	arenaEventFragment: ArenaEventFragment
}
type Section {
	__typename: String
	rows: [Unknown]
	modPnSettingSectionFragment: ModPnSettingSectionFragment
}
type Target {
	__typename: String
	onSubreddit: OnSubreddit1
	onRedditor: OnRedditor
	onDeletedRedditor: OnDeletedRedditor
	onUnavailableRedditor: OnUnavailableRedditor
	onSubredditPost: OnSubredditPost
	onDeletedSubredditPost: OnDeletedSubredditPost
	onComment: OnComment
	onDeletedComment: OnDeletedComment
	onChatEvent: OnChatEvent
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type Still {
	content: Content
}
type PageInfo {
	endCursor: String
}
type CommentById {
	__typename: String
	onComment: OnComment
}
type TrophyCase {
}
type Warning {
	title: String
	message: String
}
type Search {
	dynamic: Dynamic
}
type PostInfoById {
	__typename: String
	onSubredditPost: OnSubredditPost
	onProfilePost: OnProfilePost
	postInfoFragment: PostInfoFragment
}
type Row1 {
	description: String
	option: NotificationSettingsOption
	displayName: String
	isSelected: Boolean
}
type Data {
	redditorInfoByName: RedditorInfoByName
}
type ModQueueCount {
	count: Int
}
type Type {
	id: String
	displayName: String
}
type CountryCodesName {
	isoCode: String
	name: String
}
type ModAction {
	totalCount: Int
}
type PostCommentsQuery {
	id: String
	sortType: Unknown
	after: Unknown
	maxDepth: Unknown
	count: Unknown
	includeAwards: Unknown
	translationContext: Unknown
	includeCommentsHtmlField: Unknown
	truncate: Unknown
	filter: Unknown
	includeIsGildable: Unknown
	includeMediaAuth: Unknown
	includeAdEligibility: Unknown
	includeAuthorCommunityBadge: Unknown
	isUserMod: Unknown
	includeExtendedVideoAsset: Unknown
	includePaidSubscriberBadge: Unknown
}
type Channel {
	__typename: String
	chatChannelUCCFragment: Unknown
	chatChannelSCCv2Fragment: Unknown
}
type ModPermissions {
	isAllAllowed: Boolean
	isAccessEnabled: Boolean
	isMailEditingAllowed: Boolean
	isFlairEditingAllowed: Boolean
}
type RemovedPosts {
	__typename: String
	onSubreddit: OnSubreddit
}
type AchievementsSettings {
	isEnabled: Boolean
	isEligible: Boolean
	achievements: [Unknown]
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type TransactionsSummary {
	thisMonthPendingSubscriptionsCount: [Unknown]
}
type Data {
	identity: Identity
}
type StickyPost {
	__typename: String
	postFragment: PostFragment
}
type Cta {
	icon: String
	label: String
	destination: Destination
}
type Edge {
	node: Node
}
type Data {
	identity: Identity
}
type Node {
	invitedAt: Unknown
	redditor: Redditor
	modPermissions: ModPermissions
}
type Redditor {
	displayName: String
	id: String
}
type AvatarBuilderCatalog {
	userCapabilities: [Unknown]
	categories: [Unknown]
	closet: Closet
	runways: [Unknown]
	outfits: [Unknown]
	accessories: [Unknown]
	pastAvatars: [Unknown]
}
type Node1 {
	__typename: String
	multiContentCommentFragment: MultiContentCommentFragment
}
type General {
	communities: Communities
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type FlairPromptSettings {
	eligibleFlairs: [Unknown]
}
type ModPermissions {
	isAllAllowed: Boolean
	isAccessEnabled: Boolean
	isConfigEditingAllowed: Boolean
	isFlairEditingAllowed: Boolean
	isMailEditingAllowed: Boolean
	isPostEditingAllowed: Boolean
	isWikiEditingAllowed: Boolean
	isChatConfigEditingAllowed: Boolean
	isChatOperator: Boolean
	isChannelsEditingAllowed: Boolean
	isCommunityChatEditingAllowed: Boolean
}
type Edge1 {
	node: Node1
}
type FollowedRedditorsInfo {
	edges: [Unknown]
	pageInfo: PageInfo1
}
type Node2 {
	__typename: String
	subredditListItemFragment: SubredditListItemFragment
}
type Elements {
	dist: Int
	pageInfo: PageInfo
	edges: [Unknown]
}
type TrialPeriod {
	amount: DurationUnit
}
type Edge2 {
	node: Node2
}
type OnPremiumSku {
	subscriptionType: String
	duration: Duration
}
type Edge {
	node: Node
}
type SubredditsInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type PageInfo {
	__typename: String
	pageInfoFragment: PageInfoFragment
}
type OnSubreddit {
	id: String
	contributorMembers: ContributorMembers
}
type MomentsFeatures {
	flairPrompt: MomentsFeatureFlag
}
type GetChatTabDynamicRecommendationsQuery {
	pageTag: String
}
type Posts {
	pageInfo: PageInfo
	dist: Int
	edges: [Unknown]
	feedMetadata: FeedMetadata
}
type Data {
	identity: Identity
}
type OnRedditor {
	activeSubreddits: [Unknown]
}
type SiteRule {
	__typename: String
	onReportReason: OnReportReason
}
type PageInfo {
	__typename: String
	pageInfoFragment: PageInfoFragment
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type PostInfo {
	__typename: String
	title: String
	id: String
	isNsfw: Boolean
	onSubredditPost: OnSubredditPost
	onProfilePost: OnProfilePost
}
type Award {
	award: Award1
}
type Edge {
	node: Node
}
type Node1 {
	__typename: String
	onPayoutReceivedTransaction: OnPayoutReceivedTransaction
}
type Data {
	commentById: CommentById
}
type Reputation {
	posts: Posts
	comments: Comments
}
type UserLocation {
	countryCode: String
	regionCode: String
	cityCode: String
	cityUtf8: String
}
type RecommendedMediaFeed {
	elements: Elements
}
type Node {
	__typename: String
	postFragment: PostFragment
}
type Data {
	modmailParticipantConversations: ModmailParticipantConversations
}
type Edge {
	node: Node
}
type OnRedditor {
	moderatedSubreddits: ModeratedSubreddits
}
type ModeratorInfo {
	id: String
	displayName: String
}
type Image1 {
}
type Node {
	__typename: String
	id: String
	activeUsersCount: Int
	onUserChatChannel: OnUserChatChannel
}
type Subreddit {
	id: String
	name: String
}
type PageInfo {
	hasNextPage: Boolean
	hasPreviousPage: Boolean
	startCursor: String
	endCursor: String
}
type Rating {
	rating: Unknown
	weight: String
	description: String
	icon: Icon
}
type Multireddit {
	__typename: String
	customFeedMultiredditFragment: Unknown
}
type Transactions1 {
	edges: [Unknown]
}
type OnSubreddit {
	modPermissions: ModPermissions
}
type TrophyCase {
	notifications: [Unknown]
}
type Rule {
	id: String
	name: String
}
type Content1 {
	preview: String
	richtext: Unknown
}
type Data {
	search: Search
}
type RenderSavedResponseTemplate {
	response: Response
	templateValidation: TemplateValidation
}
type Data {
	dynamicConfigs: DynamicConfigs
}
type Fixed_width {
	__typename: String
	mediaSourceFragment: Unknown
}
type RecentPost {
	__typename: String
	id: String
	title: String
	removedByCategory: RemovedByCategory
	onPost: OnPost
}
type Data {
	comment: Comment
}
type Parent {
	nodeId: String
}
type Edge {
	node: Node
}
type Identity {
	inboxAnnouncementOptOuts: InboxAnnouncementOptOuts
}
type PageInfo {
	hasNextPage: Boolean
	hasPreviousPage: Boolean
}
type Data {
	postInfoById: PostInfoById
}
type Redditor {
	name: String
}
type Section {
	id: String
	name: String
	accessoryIds: [Unknown]
	colorPickerCustomizableClass: String
}
type ContentRatingSurvey {
	version: String
	questions: [Unknown]
	isEligible: Boolean
	response: Response
}
type CommunityLeaderboard {
	ranking: Ranking
}
type Edge {
	node: Node
}
type Content {
	__typename: String
	onContent: OnContent
}
type ModeratorEvaluatePostAutomations {
	ok: Boolean
	errors: [Unknown]
	result: Result
}
type Trophy1 {
	__typename: String
	id: String
	name: String
	onAchievementImageTrophy: OnAchievementImageTrophy
}
type PricePackage {
	id: String
	price: String
	currency: Currency
	quantity: String
	externalProductId: String
	requiredPaymentProviders: [Unknown]
}
type DeletedContent {
	markdown: String
}
type Data {
	identity: Identity
}
type PageInfo {
	hasNextPage: Boolean
	startCursor: String
	endCursor: String
}
type Moderation {
	modInsights: ModInsights
}
type StickyPost {
	__typename: String
	onPostInfo: OnPostInfo
}
type OnRedditor {
	id: String
	displayName: String
	icon: Unknown
}
type TakedownContentPreview {
	title: String
	body: String
	violatedContentPolicyRule: ContentPolicyRule
}
type PageInfo {
	endCursor: String
}
type Edge {
	node: Node
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type InterestTopics {
	pageInfo: PageInfo
	schemeName: String
	edges: [Unknown]
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type OnAchievementStreakTimelineItem {
	label: String
	isReached: Boolean
	isCurrent: Boolean
	trophy: Trophy
}
type Content {
	html: String
	preview: String
	markdown: String
	richtext: Unknown
	translationInfo: TranslationInfo
}
type Data {
	globalProductOffers: GlobalProductOffers
}
type AuthorInfo {
	id: String
	displayName: String
}
type Payouts {
	allTimeEarnings: AllTimeEarnings
	currentEarnings: CurrentEarnings
	transactions: Transactions1
}
type Media {
	__typename: String
	mediaFragment: MediaFragment
}
type Node {
	__typename: String
}
type PostsInfoById {
	__typename: String
	authorCommunityBadgeFragment: AuthorCommunityBadgeFragment
	postContentFragment: Unknown
	postFragment: PostFragment
	deletedPostFragment: DeletedPostFragment
}
type PostsInfoById {
	__typename: String
	id: String
	onPost: OnPost
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type StringCondition {
	features: [Unknown]
	values: [Unknown]
}
type PageInfo {
	hasNextPage: Boolean
	hasPreviousPage: Boolean
	startCursor: String
	endCursor: String
}
type GetTransferStatusQuery {
	transferId: String
}
type Edge {
	node: Node
}
type Data {
	children: Children
}
type FollowedByRedditorsQuery {
	limit: Present
	from: Unknown
	searchQuery: Unknown
}
type Node {
	__typename: String
	awarderRankFragment: AwarderRankFragment
}
type OnAchievementImageTrophy {
	lockedImage: LockedImage
	progress: Progress
}
type Node {
	__typename: String
	mutedSubredditFragment: MutedSubredditFragment
}
type SimilarRecommendedPostsFeed {
	elements: Elements
}
type Data {
	redditorInfoById: RedditorInfoById
}
type Icon {
}
type Reply {
	__typename: String
	privateMessageFragment: PrivateMessageFragment
}
type Edge {
	node: Node
}
type ModActions {
	pageInfo: PageInfo
	edges: [Unknown]
}
type OnSubreddit {
	__typename: String
	welcomeMessageFragment: WelcomeMessageFragment
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type Harassment {
	comments: Comments
}
type Item {
	__typename: String
	onChatPageNavigationQuery: OnChatPageNavigationQuery
	onChatPageNavigationTopic: OnChatPageNavigationTopic
}
type TranslationInfo {
	isTranslated: Boolean
}
type SubredditV3 {
	elements: Elements
}
type Trophy {
	__typename: String
	onAchievementImageTrophy: OnAchievementImageTrophy
}
type RelatedSubreddit {
	difficultyScore: Unknown
	similarityScore: Unknown
	subreddit: Subreddit
}
type Node {
	__typename: String
	onRedditor: OnRedditor
}
type OnRedditor {
	id: String
	displayName: String
	icon: Icon
}
type OnSubredditRule {
	name: String
	id: String
	kind: SubredditRuleKind
}
type Data {
	postInfoById: PostInfoById
}
type Data {
	search: Search
}
type Data {
	notificationInbox: NotificationInbox
}
type Dynamic {
	modifiers: Modifiers
}
type PostInfo {
	__typename: String
	onSubredditPost: OnSubredditPost
	onDeletedSubredditPost: OnDeletedSubredditPost
}
type Edge {
	node: Node
}
type Node {
	__typename: String
	subredditDataDetailsFragment: SubredditDataDetailsFragment
	subredditRecapFieldsFragment: SubredditRecapFieldsFragment
	subredditCommunityLeaderboardFragment: SubredditCommunityLeaderboardFragment
	subredditMomentFeaturesFragment: SubredditMomentFeaturesFragment
}
type OnSubredditPost {
	awardingsInfo: AwardingsInfo
}
type TrophyCase {
	achievementTrophyById: AchievementTrophyById
}
type Transactions {
	edges: [Unknown]
}
type Data {
	subredditInfoById: SubredditInfoById
}
type CommentById {
	__typename: String
	onComment: OnComment
}
type OnAchievementImageTrophy {
	image: Image
}
type OnSubreddit {
	__typename: String
	typeaheadSubredditFragment: TypeaheadSubredditFragment
}
type Data {
	vault: Vault
}
type Data {
	yearInReviewPage: YearInReviewPage
}
type ContextPostInfo {
	__typename: String
	title: String
	onSubredditPost: OnSubredditPost
	onAdPost: OnAdPost
}
type PageInfo1 {
	startCursor: String
}
type OnRedditor {
	moderatedSubreddits: ModeratedSubreddits
}
type OnAchievementTimelineCategoryHeader {
	title: String
	accessibilityLabel: String
	timeline: [Unknown]
}
type Actions {
	edges: [Unknown]
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type Closet {
	accessoryIds: [Unknown]
}
type PageInfo2 {
	startCursor: String
}
type Data {
	subredditInfoById: SubredditInfoById
}
type ContentChange {
	totalCount: Int
}
type Communities {
	edges: [Unknown]
}
type ProductOffer {
	pricePackages: [Unknown]
}
type GetEarnedGoldBalanceQuery {
	environment: Present
}
type Benefits {
	avatarOutfit: AvatarOutfit
}
type Edge {
	node: Node
	cursor: String
}
type ModQueueItemCommentQuery {
	commentId: String
	includeCommentsHtmlField: Unknown
	includeAwards: Unknown
	includeEconPromos: Unknown
	includeCurrentUserAwards: Unknown
	includePostStats: Unknown
	includeSubredditInPosts: Unknown
	includeCommentContextAdditions: Unknown
	includeStillMediaAltText: Unknown
	includeMediaAuth: Unknown
	includeIsGildable: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	translationContext: Unknown
	includePaidSubscriberBadge: Unknown
}
type Edge {
	__typename: String
	feedElementEdgeFragment: FeedElementEdgeFragment
}
type RecommendationContext {
	typeIdentifier: String
}
type Data {
	piiIdentity: PiiIdentity
}
type OnSubreddit1 {
	moderation: Moderation1
}
type Data {
	subredditInfoById: SubredditInfoById
}
type OnProfilePost {
	adBusiness: AdBusiness
}
type StickyPostsForSubredditQuery {
	subredditName: String
	includeSubredditInPosts: Unknown
	includeAwards: Unknown
	includeEconPromos: Unknown
	includePostStats: Unknown
	includeCurrentUserAwards: Unknown
	includeStillMediaAltText: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	translationContext: Unknown
	includePaidSubscriberBadge: Unknown
}
type Awarding {
	id: String
	award: Award
	awarderInfo: AwarderInfo
	target: Target
}
type CommentById {
	moderationInfo: ModerationInfo
	postInfo: PostInfo
}
type OnModPnSettingsLayoutRowPage {
	sections: [Unknown]
}
type TiersInfo {
	tier: ContributorTier
}
type Identity {
	goldBalances: GoldBalances
}
type Data {
	identity: Identity
}
type Edge {
	node: Unknown
}
type PageInfo {
	__typename: String
	pageInfoFragment: PageInfoFragment
}
type ModeratedSubreddits {
	edges: [Unknown]
	pageInfo: PageInfo
}
type Icon1 {
}
type Reporter {
	id: String
	isModerator: Boolean
}
type Data {
	arenaFeedV3: ArenaFeedV3
}
type Thumbnail {
	__typename: String
	mediaSourceFragment: Unknown
}
type Comments {
	isEnabled: Boolean
}
type Subreddit {
	id: String
	name: String
}
type Wiki {
	page: Page
}
type General {
	posts: Posts
}
type CustomEmojis {
	mediaPacks: [Unknown]
}
type UserFlairTemplates {
	edges: [Unknown]
	pageInfo: PageInfo
}
type SubredditKarma {
}
type GetMatrixChatUsersByIdsQuery {
	userKindWithIds: [Unknown]
}
type Fields {
	__typename: String
	temporaryEventFieldsFull: TemporaryEventFieldsFull
}
type OptOutAuthor {
	__typename: String
	id: String
	displayName: String
	onRedditor: OnRedditor
}
type Subreddit {
	moderation: Moderation
}
type Content {
	richtext: Unknown
	html: String
	preview: String
	markdown: String
}
type GetModLogQuery {
	subredditId: String
	before: Unknown
	after: Unknown
	first: Unknown
	last: Unknown
	filterActions: Unknown
	filterActionCategories: Unknown
	filterModeratorNames: Unknown
}
type OnSubreddit {
	__typename: String
	taggedSubredditFragment: TaggedSubredditFragment
}
type Streaming {
	__typename: String
	streamingAuthFragment: Unknown
}
type Data {
	identity: Identity
}
type Edge {
	node: Node
}
type Data {
	watchFeed: WatchFeed
}
type Elements {
	dist: Int
	pageInfo: PageInfo
	edges: [Unknown]
}
type OnSubreddit {
	modSafetyFilterSettings: ModSafetyFilterSettings
	modQueueSettings: ModQueueSettings
}
type RedditorInfoByName {
	__typename: String
	onRedditor: OnRedditor
}
type Node {
	__typename: String
	taxonomy: Taxonomy
	subredditInfo: SubredditInfo
}
type Row4 {
	__typename: String
	modPnSettingsRowFragment: ModPnSettingsRowFragment
}
type SuggestedUsernamesQuery {
}
type Description {
	richtext: Unknown
}
type Node {
	__typename: String
	eligibleCommunity: EligibleCommunity
}
type OnAchievementImageTrophy {
	image: Image
}
type Comments {
	action: FilterAction
	isEnabled: Boolean
	permittedTerms: [Unknown]
	confidence: HarassmentFilterConfidence
}
type Edge1 {
	node: Node1
}
type Destination {
	__typename: String
	onAchievementCTADestinationURL: OnAchievementCTADestinationURL
	onAchievementCTADestinationSurface: OnAchievementCTADestinationSurface
}
type Comment {
	parent: Parent
}
type Node {
	__typename: String
	onTrendingSearchElement: OnTrendingSearchElement
}
type OnSubreddit {
	name: String
	styles: Unknown
}
type Data {
	identity: Identity
}
type Topic {
	title: String
	name: String
	subreddits: Subreddits
}
type StringCondition {
	features: [Unknown]
	values: [Unknown]
}
type AvatarCatalogQuery {
	audience: Unknown
}
type Icon {
}
type UserCommentsQuery {
	name: String
	sort: Present
	range: Unknown
	pageSize: Present
}
type Data {
	whereToPostSuggestions: WhereToPostSuggestions
}
type GetTopAwardersOnPostQuery {
	thingId: String
}
type OnAchievementRepeatableTrophy {
	currentProgress: CurrentProgress
}
type Identity {
	allMultireddits: AllMultireddits
}
type ChannelModerationSettings {
	subreddit: Subreddit
	currentLevel: CommunityChatPermissionRank
	availableLevels: [Unknown]
}
type OnSiteRule {
	ruleText: String
}
type ErrorInputArg {
	value: String
	variableName: String
}
type Moderation {
	renderSavedResponseTemplate: RenderSavedResponseTemplate
}
type OnRedditor {
	name: String
}
type Data {
	subredditInfoById: SubredditInfoById
}
type PostInfo {
	title: String
	isNsfw: Boolean
	isSpoiler: Boolean
	id: String
}
type Award {
	id: String
	staticIcon: StaticIcon
}
type RecommendedChannels {
	__typename: String
	recChatChannelsFragment: RecChatChannelsFragment
}
type SubredditMomentsFeaturesQuery {
	name: String
}
type Data {
	identity: Identity
}
type Card {
	id: String
	iconIdentifier: String
	title: String
	status: CommunityProgressCardStatus
	progress: Progress1
	bodyContent: BodyContent
	primaryButton: PrimaryButton
}
type Redditor {
	__typename: String
	onRedditor: OnRedditor
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type GetSubredditAccessInfoQuery {
	subredditName: String
}
type AppliedFilters {
	edges: [Unknown]
}
type OnRedditor {
	id: String
	prefixedName: String
	icon: Icon
}
type OnSubreddit {
	__typename: String
	id: String
	styles: Styles
	widgets: Widgets
	rules: [Unknown]
	moderatorsInfoFragment: ModeratorsInfoFragment
}
type PastContributions {
	edges: [Unknown]
	pageInfo: PageInfo
}
type UserUnlockedAchievementsQuery {
	username: String
}
type ModmailFullConversation {
	conversation: Conversation
	modmailRedditorParticipantInfo: ModmailRedditorParticipantInfo
	messagesAndActions: MessagesAndActions
}
type OnSubreddit {
	id: String
	name: String
	customEmojis: CustomEmojis
}
type Comments {
	pageInfo: PageInfo
	edges: [Unknown]
	feedMetadata: FeedMetadata
}
type SearchSubredditsForMuteQuery {
	query: String
	filters: Present
	productSurface: Unknown
	searchInput: Present
	limit: Present
}
type ModSafetyInsightsSummariesQuery {
	name: String
	startDayAt: Unknown
	startWeekAt: Unknown
	startMonthAt: Unknown
	startYearAt: Unknown
	endAt: Unknown
}
type TrophyCase {
	name: String
}
type AuthorInfo1 {
	id: String
	displayName: String
}
type PageInfo {
	hasNextPage: Boolean
	hasPreviousPage: Boolean
	startCursor: String
	endCursor: String
}
type Edge {
	node: Node
}
type TrophyCase {
	name: String
}
type GoldBalances {
	environment: Environment
	earned: Earned
	payouts: Payouts
}
type PageInfo {
	endCursor: String
}
type TranslatedContent {
	__typename: String
	translatedCommentContentFragment: TranslatedCommentContentFragment
}
type OnSubreddit {
	postRequirements: PostRequirements
}
type RedditorInfo {
	__typename: String
	id: String
	displayName: String
	onRedditor: OnRedditor
}
type Error {
	code: String
	message: String
	errorInputArgs: [Unknown]
}
type OnTrendingSearchElement {
	id: String
	queryString: String
	isPromoted: Boolean
	contextPostInfo: ContextPostInfo
	imageProvider: ImageProvider
}
type Edge1 {
	node: Node1
}
type StaticIcon {
}
type Edge {
	node: Unknown
}
type Report {
	__typename: String
	savedResponseFragment: SavedResponseFragment
}
type ModerationInfo {
	__typename: String
	verdict: ModerationVerdict
	verdictAt: Unknown
	verdictByRedditorInfo: VerdictByRedditorInfo
	modReports: [Unknown]
	userReports: [Unknown]
	isReportingIgnored: Boolean
	modQueueReasonsFragment: ModQueueReasonsFragment
}
type TypeaheadByType {
	feedMetadata: FeedMetadata
	subreddits: [Unknown]
	profiles: [Unknown]
}
type Data {
	subredditInfoById: SubredditInfoById
}
type OnSubreddit {
	automationRecommendations: AutomationRecommendations
}
type OnSubreddit {
	modNotes: ModNotes
}
type Content {
	html: String
	preview: String
	markdown: String
	richtext: Unknown
}
type Gallery {
	items: [Unknown]
}
type OnModPnSettingsLayoutRowPage2 {
	sections: [Unknown]
}
type Item {
	id: String
	name: String
	benefits: Benefits
}
type GetNotificationSettingsLayoutByChannelQuery {
	channel: Unknown
	includeAdminNotifications: Boolean
}
type UnlockedCommunitiesPageQuery {
	id: String
	pastContributionsFirst: Unknown
	pastContributionsAfter: String
	includeLeaderboard: Boolean
}
type Post {
	__typename: String
	createdAt: Unknown
	id: String
	title: String
	commentCount: Unknown
	score: Unknown
	onDeletedSubredditPost: OnDeletedSubredditPost
	onDeletedProfilePost: OnDeletedProfilePost
	subredditPost: SubredditPost
	profilePost: ProfilePost
}
type DisabledState {
	icon: String
	label: String
}
type Identity {
	hiddenPosts: HiddenPosts
}
type ContributorStatus {
	karma: ContributorTier
	goldThreshold: [Unknown]
}
type Authors {
	pageInfo: PageInfo
	edges: [Unknown]
	feedMetadata: FeedMetadata
}
type OnAutomationRegexCondition {
	features: [Unknown]
	value: String
	isCaseSensitive: Boolean
}
type OnAchievementRepeatableImageTrophy {
	image: Image
}
type CommentsById {
	__typename: String
	id: String
	isRemoved: Boolean
	isAdminTakedown: Boolean
	onComment: OnComment
}
type Posts {
	edges: [Unknown]
}
type PastContributions {
	edges: [Unknown]
	pageInfo: PageInfo
}
type Node {
	source: WhereToPostSuggestionSource
}
type OnSubreddit {
	__typename: String
	contentRatingSurvey: ContentRatingSurvey
	communityProgressModule: CommunityProgressModule
	answerableQuestionsFragment: AnswerableQuestionsFragment
}
type Edge {
	node: Node
}
type Outcome {
	__typename: String
	automationOutcomeFragment: AutomationOutcomeFragment
}
type YourCommunities {
	__typename: String
	recChatChannelsFragment: RecChatChannelsFragment
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type RecommendedSimilarPostsQuery {
	postSimilarityFeedContext: RecommendedPostSimilarityFeedContextInput
	includeSubredditInPosts: Unknown
	includeAwards: Unknown
	includeEconPromos: Unknown
	includePostStats: Unknown
	includeCurrentUserAwards: Unknown
	includeStillMediaAltText: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includePaidSubscriberBadge: Unknown
}
type ModSafetyFilterSettings {
	harassment: Harassment
}
type Data {
	subredditInfoById: SubredditInfoById
}
type ModerationInfo {
	__typename: String
	lastAuthorModNoteFragment: LastAuthorModNoteFragment
}
type PageInfo {
	hasNextPage: Boolean
	hasPreviousPage: Boolean
	startCursor: String
	endCursor: String
}
type OnPayoutTransaction {
	createdAt: Unknown
	gold: Earnings
	status: ContributorPayoutStatus
}
type PageInfo {
	startCursor: String
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type IsUsernameAvailableQuery {
	name: String
}
type Edge {
	node: Node
}
type GetPrivateMessagesThreadQuery {
	messageId: String
}
type Data {
	postInfoById: PostInfoById
}
type GetTemporaryEventRunsQuery {
	subredditId: String
	first: Unknown
	last: Unknown
	after: Unknown
	status: Unknown
	configIds: Unknown
	runId: Unknown
}
type Data {
	translations: [Unknown]
}
type Data {
	identity: Identity
}
type BasePrice {
	amount: Currency
}
type DisplayedCollectibleItems {
	__typename: String
	displayedCollectibleItemsFragment: DisplayedCollectibleItemsFragment
}
type Subreddits {
	edges: [Unknown]
}
type Data {
	redditorInfoByName: RedditorInfoByName
}
type Preferences {
	isAdPersonalizationAllowed: Boolean
	isClickTrackingEnabled: Boolean
	defaultCommentSort: CommentSort
	geopopular: String
	isProfileHiddenFromRobots: Boolean
	isSuggestedSortIgnored: Boolean
	mediaThumbnailVisibility: MediaVisibility
	isNsfwMediaBlocked: Boolean
	isNsfwContentShown: Boolean
	isNsfwSearchEnabled: Boolean
	isLocationBasedRecommendationEnabled: Boolean
	surveyLastSeenAt: Unknown
	isThirdPartyAdPersonalizationAllowed: Boolean
	isThirdPartySiteAdPersonalizationAllowed: Boolean
	isThirdPartyInfoAdPersonalizationAllowed: Boolean
	isThirdPartySiteDataPersonalizedContentAllowed: Boolean
	isTopKarmaSubredditsShown: Boolean
	acceptPrivateMessagesFrom: AcceptPrivateMessagesFrom
	isEmailOptedOut: Boolean
	isOnlinePresenceShown: Boolean
	isFeedRecommendationsEnabled: Boolean
	countryCode: CountryCode
	isFollowersEnabled: Boolean
	isEmailDigestEnabled: Boolean
	isShowFollowersCountEnabled: Boolean
	isSmsNotificationsEnabled: Boolean
	minCommentScore: Int
	isMachineTranslationImmersive: MachineTranslationImmersiveState
	hiddenSubredditIds: [Unknown]
	isHideAllContribution: Boolean
	isHideProfileNsfw: Boolean
}
type RedditorInfoById {
	__typename: String
	onRedditor: OnRedditor
}
type OnProfilePost {
	profile: Profile
}
type Icon {
}
type Search {
	general: General
}
type Identity {
	nftTransfers: NftTransfers
}
type Data {
	reportForm: ReportForm
}
type GetModActionCommentQuery {
	id: String
}
type Edge3 {
	node: Node3
}
type BackgroundImage {
}
type PostInfo1 {
	__typename: String
	isHighlighted: Boolean
	postFragment: PostFragment
}
type PackagedMedia1 {
	__typename: String
	packagedMediaAuthFragment: PackagedMediaAuthFragment
}
type OnDeletedSubredditPost {
	subreddit: Subreddit1
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type HomeFeedPostsByIdsQuery {
	ids: [Unknown]
	includeAwards: Unknown
	includeEconPromos: Unknown
	includeSubredditInPosts: Unknown
	includePostStats: Unknown
	includeDeletedPosts: Unknown
	includeCurrentUserAwards: Unknown
	includeStillMediaAltText: Unknown
	includeMediaAuth: Unknown
	includeAuthorCommunityBadge: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includePaidSubscriberBadge: Unknown
}
type PostSetsById {
	posts: Posts
	defaultPost: DefaultPost
}
type OnAutomationStringCondition {
	features: [Unknown]
	values: [Unknown]
}
type PageInfo {
	hasNextPage: Boolean
	endCursor: String
}
type ArenaEventByIdQuery {
	id: Present
}
type ModmailConversationsV2Query {
	subredditIds: [Unknown]
	mailboxCategory: ModmailMailboxCategory
	sort: Present
	before: Unknown
	after: Unknown
	first: Unknown
	last: Unknown
}
type Award {
	id: String
}
type PostInfo1 {
	__typename: String
	id: String
	subredditPost: SubredditPost
	profilePost: ProfilePost
}
type SearchPeopleQuery {
	query: String
	sort: Unknown
	afterCursor: Unknown
	filters: Unknown
	productSurface: Unknown
	pageSize: Unknown
	searchInput: Unknown
}
type DiscoverBar {
	recommendedChannels: RecommendedChannels
}
type CommentsPageAdPostQuery {
	id: String
	count: Unknown
	includeEconPromos: Unknown
	feedContext: Unknown
	adContextInput: Unknown
	includePostStats: Unknown
	includeCurrentUserAwards: Unknown
	includeStillMediaAltText: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	adEligibilityInput: Unknown
}
type MarketingNudgeExplainerQuery {
	nudgeId: String
}
type MutedSubreddits {
	edges: [Unknown]
	pageInfo: PageInfo
}
type Node1 {
	__typename: String
	onRedditor: OnRedditor
}
type Edge {
	node: Node
}
type GetModUserLogsCountsQuery {
	subredditId: String
	userId: String
}
type BackgroundInventoryItem {
	id: String
}
type Data {
	subredditInfoById: SubredditInfoById
}
type OnSubreddit {
	__typename: String
	postComposerCommunityFragment: PostComposerCommunityFragment
}
type Description {
	richtext: Unknown
}
type Data {
	postStatsById: PostStatsById
	postInfoById: PostInfoById
}
type Identity {
	tippingProfile: TippingProfile
	goldBalances: GoldBalances
}
type MultiredditByPathQuery {
	path: Unknown
	withSubreddits: Present
}
type Edge {
	node: Node
}
type Edge {
	node: Node
}
type Subreddit2 {
	__typename: String
	onSubreddit: OnSubreddit
}
type AchievementTrophyById {
	__typename: String
	id: String
	name: String
	longDescription: String
	onAchievementRepeatableImageTrophy: OnAchievementRepeatableImageTrophy
	onAchievementImageTrophy: OnAchievementImageTrophy
}
type OnMapDynamicConfig {
	mapVal: Unknown
	name: String
}
type BasePrice {
	amount: Currency
}
type DynamicConfigs {
	values: [Unknown]
	ok: Boolean
	errors: [Unknown]
}
type RichtextMedium {
	__typename: String
	onVideoAsset: Unknown
}
type ModerationInfo {
	__typename: String
	previousActionsModerationInfoFragment: PreviousActionsModerationInfoFragment
}
type CommentsById {
	__typename: String
	onComment: OnComment
}
type AssociatedComment {
	id: String
}
type Conversation {
	__typename: String
	modmailConversationFragment: ModmailConversationFragment
}
type Subreddits {
	edges: [Unknown]
}
type Data {
	products: Products
}
type Data {
	redditorInfoByName: RedditorInfoByName
}
type OnSubreddit {
	stickyPosts: [Unknown]
}
type Data {
	chatPageRecommendations: ChatPageRecommendations
}
type BelowCommentRecommendations {
	edges: [Unknown]
}
type Author {
	id: String
	displayName: String
}
type WithID {
	__typename: String
	arenaEventFragment: ArenaEventFragment
}
type SnoovatarIcon {
}
type Node {
	id: String
	isNsfw: Boolean
	name: String
	prefixedName: String
	subscribersCount: Boolean
	styles: Unknown
	allowedPostTypes: [Unknown]
}
type OnRedditor {
	name: String
	icon: Icon
	snoovatarIcon: SnoovatarIcon
	profile: Profile
	karma: Karma
	cakeDayOn: Unknown
	isBlocked: Boolean
	isAcceptingChats: Boolean
}
type Karma {
}
type GetAvatarStorefrontArtistWithListingsQuery {
	id: String
}
type OnSubreddit {
	id: String
	difficultyScore: Unknown
	name: String
	prefixedName: String
	isNsfw: Boolean
	subscribersCount: Unknown
	relatedSubreddits: [Unknown]
}
type OnSubreddit {
	moderatorEvaluatePostAutomations: ModeratorEvaluatePostAutomations
}
type EconSubscription {
	id: String
	startedAt: Unknown
	expiresAt: Unknown
}
type AdEligibilityForPostQuery {
	postId: String
}
type PopularV3 {
	elements: Elements
}
type OnPost {
	id: String
	title: String
	content: Content
	isSelfPost: Boolean
	permalink: String
	thumbnailV2: ThumbnailV2
	authorInfo: AuthorInfo
	isHighlighted: Boolean
	isLocked: Boolean
	isStickied: Boolean
	isSpoiler: Boolean
	isNsfw: Boolean
	isSaved: Boolean
	isHidden: Boolean
	flair: Flair
	moderationInfo: ModerationInfo
	distinguishedAs: DistinguishedAs
	crowdControlLevel: CrowdControlLevel
}
type Wiki {
	index: Index
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type Edge {
	cursor: String
	node: Node
}
type MuxedMp4s {
	recommended: Recommended
	medium: Medium
}
type Identity {
	paymentSubscriptions: [Unknown]
}
type Edge {
	__typename: String
	feedElementEdgeFragment: FeedElementEdgeFragment
}
type General {
	posts: Posts
	comments: Comments
}
type OtherDiscussions {
	edges: [Unknown]
}
type Data {
	eligibleUxExperiences: [Unknown]
}
type Data {
	identity: Identity
}
type OnUnavailableRedditor {
	id: String
	name: String
}
type Node {
	id: String
	totalQuantity: Int
	item: Item
	productOffer: ProductOffer
	status: StorefrontListingStatus
	tags: [Unknown]
}
type Data {
	subredditInfoById: SubredditInfoById
}
type Data {
	subredditInfoById: SubredditInfoById
}
type OnRedditor {
	id: String
	displayName: String
	snoovatarIcon: SnoovatarIcon
	profile: Profile
}
type Community {
	name: String
	description: String
	icon: Icon1
	subreddit: Subreddit
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type SubredditInfoByNameQuery {
	subredditName: String
	loggedOutIsOptedIn: Present
	filterGated: Present
	includeRecapFields: Boolean
	includeWelcomePage: Boolean
	includeCommunityGold: Boolean
	includeCommunityLeaderboard: Boolean
	includeMomentFeatures: Boolean
}
type GetActiveTemporaryEventRunQuery {
	subredditId: String
}
type ModerationInfo {
	__typename: String
	previousActionsModerationInfoFragment: PreviousActionsModerationInfoFragment
}
type TransactionGroup {
	type: CommunityTransactionType
	amount: Currency
}
type AvatarStorefront {
	artist: Artist
}
type Node {
	__typename: String
	customFeedMultiredditFragment: Unknown
}
type OnNotificationSettingsLayoutMessageTypeOptionsRow {
	messageType: Unknown
	options: Options
}
type Listings {
	__typename: String
	gqlStorefrontListings: GqlStorefrontListings
}
type Data {
	identity: Identity
}
type PageInfo {
	hasNextPage: Boolean
	hasPreviousPage: Boolean
	startCursor: String
	endCursor: String
}
type GetAccessEligibilityQuery {
	subredditName: String
}
type Search {
	typeaheadByType: TypeaheadByType
}
type Response {
	id: String
	version: String
	createdAt: Unknown
	isFromMod: Boolean
	status: ContentRatingSurveyResponseStatus
	rating: Rating
	ratingReasons: [Unknown]
}
type CommentGuidanceInfoQuery {
	subredditKindWithId: String
}
type GetChatTabRecommendationsQuery {
	recommendationsType: ChatRecommendationsType
}
type ScheduledPosts {
	__typename: String
	standaloneScheduledPostsFragment: StandaloneScheduledPostsFragment
	recurringScheduledPostsFragment: RecurringScheduledPostsFragment
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type OnSubredditRule {
	name: String
	description: String
}
type NavBarEventCommunityPicker {
	title: String
	subtitle: String
	icon: Icon
	communities: [Unknown]
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type Identity {
	email: String
	isEmailVerified: Boolean
}
type PageInfo {
	hasNextPage: Boolean
	hasPreviousPage: Boolean
	startCursor: String
	endCursor: String
}
type Data {
	interestTopicsByIds: InterestTopicsByIds
}
type OnSubreddit {
	siteRules: [Unknown]
	rules: [Unknown]
}
type Node {
	id: String
	name: String
	actions: [Unknown]
	condition: Condition
	description: String
	status: AutomationRecommendationStatus
	trigger: AutomationTrigger
}
type Redditor {
	trophyCase: TrophyCase
}
type SenderInfo {
	__typename: String
	id: String
	onRedditor: OnRedditor
}
type Thumbnail2 {
}
type OnDeletedRedditor {
	name: String
}
type Elements {
	dist: Int
	pageInfo: PageInfo
	edges: [Unknown]
}
type Post1 {
	__typename: String
	inboxFeedPostInfoFragment: InboxFeedPostInfoFragment
}
type PastAvatar {
	__typename: String
	avatarFragment: AvatarFragment
}
type CustomEmojisStatus {
	isEnabled: Boolean
}
type ContributorMembers {
	pageInfo: PageInfo
	edges: [Unknown]
}
type RedditorsInfoById {
	id: String
	displayName: String
}
type Node {
	source: WhereToPostSuggestionSource
	subredditInfo: SubredditInfo
}
type Data {
	avatarStorefront: AvatarStorefront
}
type Data {
	subredditInfoById: SubredditInfoById
}
type OnContent {
	richtextMedia: [Unknown]
}
type SubredditInfoByName {
	__typename: String
	id: String
	name: String
	onSubreddit: OnSubreddit
}
type Posts {
	isEnabled: Boolean
}
type SnapFeed {
	elements: Elements
	prefetchContext: PrefetchContext
}
type GlobalProductOffers {
	offers: [Unknown]
}
type Channels {
	pageInfo: PageInfo
	edges: [Unknown]
}
type OnRedditor {
	id: String
	displayName: String
	icon: Icon
}
type Modifiers {
	appliedState: AppliedState
	globalModifiers: GlobalModifiers
	localModifiers: LocalModifiers
}
type Data {
	search: Search
}
type SearchModmailConversationsQuery {
	subredditIds: [Unknown]
	query: String
	before: Unknown
	after: Unknown
	first: Unknown
	last: Unknown
}
type CommentById {
	__typename: String
	onComment: OnComment
}
type SubredditInfo {
	id: String
	name: String
}
type UsernameAndExperimentsQuery {
	inputs: Present
}
type BanInfo {
	bannedAt: Unknown
	endsAt: Unknown
}
type MarkdownFromRtjsonQuery {
	rtjson: String
}
type GetReputationFilterSettingsQuery {
	subredditId: String
}
type Icon {
}
type OnSubreddit {
	postFlairTemplates: [Unknown]
}
type CommentTreeAdsQuery {
	postId: String
	sortType: Unknown
	maxDepth: Unknown
	count: Unknown
	adContext: Unknown
	includeAwards: Unknown
	includeEconPromos: Unknown
	includeCurrentUserAwards: Unknown
	includeStillMediaAltText: Unknown
	includeMediaAuth: Unknown
	includePostStats: Unknown
	includeSubredditInPosts: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includePaidSubscriberBadge: Unknown
}
type CurrentEarnings {
	currency: Currency
}
type RedditorInfo {
	__typename: String
	modmailRedditorInfoFragment: ModmailRedditorInfoFragment
}
type Edge {
	node: Node
}
type PostInfoById {
	__typename: String
	onSubredditPost: OnSubredditPost
}
type Node1 {
	prefixedName: String
	id: String
	publicDescriptionText: String
	subscribersCount: String
	styles: Unknown
}
type Identity {
	downvotedPosts: DownvotedPosts
}
type GetModUserRecentNoteAndTotalCountQuery {
	subredditId: String
	userId: String
	includeSubredditInPosts: Unknown
	includeAwards: Unknown
	includeEconPromos: Unknown
	includePostStats: Unknown
	includeCurrentUserAwards: Unknown
	includeCommentsHtmlField: Unknown
	includeStillMediaAltText: Unknown
	includeMediaAuth: Unknown
	includeIsGildable: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includePaidSubscriberBadge: Unknown
}
type OnComment {
	score: Unknown
	content: Content
}
type GetAccountQuery {
	subscriptionType: Unknown
	isPremiumApiMigrationEnabled: Boolean
	paymentEnvironment: Unknown
	includeTrophyCase: Present
}
type CustomFeedSduiQuery {
	path: String
	adContextInput: Unknown
	feedContextInput: Unknown
	sort: Unknown
	time: Unknown
	after: Unknown
	includeTaxonomyTopicsFeedElement: Unknown
	includeExploreFeaturedItemsFeedElement: Unknown
	includeTopicGroupFeedElement: Unknown
	includeRankedCommunityFeedElement: Unknown
	includeViewCount: Unknown
	includePackagedMedia: Unknown
	includeCarouselRecommendations: Unknown
	includeListStyleRecommendations: Unknown
	includeCompactPostStyleRecommendations: Unknown
	includeCardPostStyleRecommendations: Unknown
	includeChatChannelFeedUnit: Unknown
	includeGoldInfo: Unknown
	includeEconPromos: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includeNewInCommunitiesCarousel: Unknown
}
type Data {
	subredditInfoById: SubredditInfoById
}
type GetDevvitProductsQuery {
	ids: Unknown
	environment: Unknown
	ownerId: Unknown
	metadata: Unknown
}
type CommentForest {
	__typename: String
	adEligibility: AdEligibility
	commentForestTreesFragment: CommentForestTreesFragment
}
type SearchSubredditInfoQuery {
	name: String
}
type Data {
	redditorsInfoByIds: [Unknown]
}
type Ranking {
	__typename: String
	leaderboardRankingPageFragment: LeaderboardRankingPageFragment
}
type Data {
	subredditsInfoByIds: [Unknown]
}
type OnRedditor {
	__typename: String
	id: String
	name: String
	displayName: String
	isFollowed: Boolean
	karma: Karma
	snoovatarIcon: SnoovatarIcon
	profile: Profile
	isAcceptingFollowers: Boolean
	redditorResizedIconsFragment: RedditorResizedIconsFragment
}
type MatureContent {
	isEnabled: Boolean
}
type OnChatPageNavigationQuery {
	displayName: String
	tag: String
}
type MutedMembers {
	pageInfo: PageInfo
	edges: [Unknown]
}
type RecommendedVideoFeed {
	posts: Posts
}
type Data {
	subredditInfoById: SubredditInfoById
}
type Section1 {
	__typename: String
	rows: [Unknown]
	modPnSettingSectionFragment: ModPnSettingSectionFragment
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type GetCustomEmojisQuery {
	subredditName: String
}
type UpvotedPosts {
	pageInfo: PageInfo
	edges: [Unknown]
}
type OnAchievementImageTrophy {
	image: Image1
}
type PrivateMessagesThread {
	pageInfo: PageInfo
	edges: [Unknown]
}
type Node {
	__typename: String
	postInfo: PostInfo
	onComment: OnComment
}
type Item {
	__typename: String
	translatedGalleryItemFragment: TranslatedGalleryItemFragment
}
type Data {
	discoverPageTopic: DiscoverPageTopic
}
type Profile {
	__typename: String
	onProfile: OnProfile
}
type AppliedState {
	__typename: String
	searchAppliedStateFragment: SearchAppliedStateFragment
}
type ModmailFullConversationQuery {
	conversationId: String
	before: Unknown
	after: Unknown
	first: Unknown
	last: Unknown
}
type ContributorInfo {
	approvedAt: Unknown
}
type Data {
	identity: Identity
}
type Redditor {
	trophyCase: TrophyCase
}
type Data {
	subredditInfoById: SubredditInfoById
}
type OnTipReceivedTransaction1 {
}
type Question {
	__typename: String
	questionFragment: QuestionFragment
}
type Preferences {
	sensitiveAdsPreferences: SensitiveAdsPreferences
}
type OnAutomationStringCondition {
	features: [Unknown]
	values: [Unknown]
}
type PostComposerCommunityQuery {
	name: String
	includeAllowedPostCapabilities: Unknown
	includePostingEligibilityCriteria: Unknown
	includeCommunityGold: Boolean
}
type Identity {
	matrixNotifications: MatrixNotifications
}
type Identity {
	upvotedPosts: UpvotedPosts
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type CardsV2 {
	__typename: String
	recapCardFragment: RecapCardFragment
}
type GetBannedUsersQuery {
	subreddit: String
	userName: Unknown
	before: Unknown
	after: Unknown
	first: Unknown
	last: Unknown
}
type GetAvatarStorefrontDynamicQuery {
	listingsQueries: Unknown
	artistsQueries: Unknown
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type PostInfo {
	__typename: String
	onSubredditPost: OnSubredditPost
	onDeletedSubredditPost: OnDeletedSubredditPost
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type CommunityGold {
}
type PendingCommunityInvitationsQuery {
	subredditId: Present
}
type DailySummaries {
	__typename: String
	insightsSummariesFragment: InsightsSummariesFragment
}
type Edge {
	node: Node
}
type Node {
	timestamp: Unknown
	optOutAuthor: OptOutAuthor
}
type OnCrosspostSource {
	postInfo: PostInfo
}
type Subreddit {
	id: String
	isNsfw: Boolean
	name: String
	prefixedName: String
	subscribersCount: Unknown
}
type Content {
}
type GetCommunityStatusQuery {
	id: String
}
type Data {
	privateMessages: PrivateMessages
}
type Node1 {
	__typename: String
	taggedSubredditFragment: TaggedSubredditFragment
}
type GetModSafetySettingsOverviewQuery {
	subredditId: String
}
type Node {
	__typename: String
	onEarnedGoldTransaction: OnEarnedGoldTransaction
}
type AchievementCategoryByIdQuery {
	id: String
	gridImageWidth: Boolean
}
type LegacyIcon {
}
type AuthInfo {
	__typename: String
	mediaAuthInfoFragment: MediaAuthInfoFragment
}
type AvatarBuilderCatalog {
	userCapabilities: [Unknown]
	avatar: Avatar
}
type SortedUsableAward {
	__typename: String
	awardsSheetAwardFragment: AwardsSheetAwardFragment
}
type CommentMediaDetailsQuery {
	ids: [Unknown]
}
type DiscoverPageTopic {
	id: String
	name: String
	subreddits: Subreddits
}
type UserProfileQuery {
	name: String
	includeTrophyCase: Present
}
type Data {
	subredditInfoById: SubredditInfoById
	products: Products
}
type PackagedMedia {
	muxedMp4s: MuxedMp4s
}
type Row {
	__typename: String
	onModPnSettingsLayoutRowPage: OnModPnSettingsLayoutRowPage
	modPnSettingsRowFragment: ModPnSettingsRowFragment
}
type OnSubredditInboxNotificationContext {
	subreddit: Subreddit1
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type EligibleUxExperience {
	__typename: String
	experience: UxTargetingExperience
	savedProperties: [Unknown]
	onDefaultEligibleExperience: OnDefaultEligibleExperience
}
type Modifiers {
	appliedState: AppliedState
	globalModifiers: GlobalModifiers
	localModifiers: LocalModifiers
}
type PageInfo {
	startCursor: String
	endCursor: String
	hasNextPage: Boolean
	hasPreviousPage: Boolean
}
type Categories {
	edges: [Unknown]
}
type Medium {
}
type Data {
	commentsByIds: [Unknown]
}
type OnBoolDynamicConfig {
	isTrue: Boolean
	name: String
}
type CommunityAchievementsSettingsQuery {
	subredditId: String
}
type Data {
	personalizedYearInReview: PersonalizedYearInReview
}
type RenderSavedResponseQuery {
	subredditId: String
	responseId: String
	templateVariables: Present
}
type OnSubreddit {
	isNsfw: Boolean
	type: SubredditType
	isCommentingRestricted: Boolean
	isPostingRestricted: Boolean
	isContributorRequestsDisabled: Boolean
}
type GetEligibleUxExperiencesQuery {
	experienceInputs: [Unknown]
	advancedConfiguration: UxTargetingAdvancedConfigurationInput
	clientContext: Unknown
	includeSavedProperties: Unknown
}
type Edge {
	node: Node
}
type AvatarStorefront {
	transactions: Transactions
}
type Data {
	safetyFilterEvaluations: SafetyFilterEvaluations
}
type PageInfo {
	hasNextPage: Boolean
	hasPreviousPage: Boolean
	startCursor: String
	endCursor: String
}
type Node {
	__typename: String
	temporaryEventRunFull: TemporaryEventRunFull
}
type Group {
	name: String
	style: AwardsSheetGroupStyle
	awards: [Unknown]
}
type ModSafetyFilterSettings {
	matureContent: MatureContent
}
type ModeratorMembers {
	edges: [Unknown]
}
type OnAchievementTrophyCategory {
	id: String
	name: String
	unlocked: Int
	accessibilityLabel: String
	trophies: Trophies
	pill: Pill
}
type Avatar {
	url: Boolean
}
type Edge1 {
	node: Node1
}
type Identity {
	nftTransfers: NftTransfers
}
type IsUserBannedFromChannelQuery {
	channelId: String
	userId: String
}
type PageInfo {
	endCursor: String
}
type SubredditQuestionsBySubredditNameQuery {
	subredditName: String
}
type Data {
	subredditInfoById: SubredditInfoById
}
type ModeratorsInfo {
	edges: [Unknown]
}
type Data {
	subredditInfoById: SubredditInfoById
}
type RedditorInfoByName {
	__typename: String
	onRedditor: OnRedditor
}
type AdminDecision {
	appealEligibility: DecisionAppealEligibility
	policyViolationText: String
}
type Settings {
	isSubscriptionsEnabled: Boolean
	subscriptionBenefitsSettings: SubscriptionBenefitsSettings
}
type Data {
	arenaEvent: ArenaEvent
}
type NamedEntitiesInCommentsCount {
	count: NamedEntity
}
type SubredditInfoByName {
	__typename: String
	subredditDataDetailsFragment: SubredditDataDetailsFragment
	subredditTaxonomyFieldsFragment: SubredditTaxonomyFieldsFragment
	subredditRecapFieldsFragment: SubredditRecapFieldsFragment
	unavailableSubredditFragment: UnavailableSubredditFragment
	subredditCommunityLeaderboardFragment: SubredditCommunityLeaderboardFragment
	subredditMomentFeaturesFragment: SubredditMomentFeaturesFragment
}
type Node {
	redditor: Redditor
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type Icon {
}
type GetUserFlairsQuery {
	subreddit: String
	before: Unknown
	after: Unknown
	first: Unknown
	last: Unknown
	includeFlairPrompt: Unknown
}
type OnSubreddit {
	styles: Styles
	communityGold: CommunityGold
}
type Elements {
	dist: Int
	pageInfo: PageInfo
	edges: [Unknown]
}
type PageInfo {
	__typename: String
	pageInfoFragment: PageInfoFragment
}
type PostInfoById {
	__typename: String
	onPost: OnPost
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type Identity {
	econSubscriptions: [Unknown]
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type Moderation {
	isShowCommentRemovalReasonPrompt: Boolean
}
type GetPaymentSubscriptionsQuery {
	environment: Present
}
type AdEligibility {
	postsAdEligibility: [Unknown]
}
type PageInfo {
	endCursor: String
	hasNextPage: Boolean
	hasPreviousPage: Boolean
	startCursor: String
}
type OnSubreddit {
	__typename: String
	postComposerCommunityFragment: PostComposerCommunityFragment
}
type OnSubreddit {
	sortedUsableAwards: [Unknown]
}
type Condition {
	__typename: String
	onAutomationRegexCondition: OnAutomationRegexCondition
	onAutomationStringCondition: OnAutomationStringCondition
	onAutomationNotCondition: OnAutomationNotCondition
}
type ModPermissions {
	isAllAllowed: Boolean
	isConfigEditingAllowed: Boolean
}
type Data {
	redditorInfoByName: RedditorInfoByName
}
type Content {
	markdown: String
	richtext: Unknown
}
type ContentMessage2 {
	message: String
	rtjsonText: Unknown
}
type Identity {
	preferences: Preferences
}
type GetPostRequirementsQuery {
	subredditId: String
}
type OnSubreddit {
	moderatorEvaluateCommentAutomations: ModeratorEvaluateCommentAutomations
}
type Edge {
	__typename: String
	feedElementEdgeFragment: FeedElementEdgeFragment
}
type HomeV3 {
	elements: Elements
	prefetchContext: PrefetchContext
}
type Icon {
}
type PostFlairTemplate {
	id: String
	text: String
	isModOnly: Boolean
	richtext: Unknown
}
type Edge {
	node: Node
}
type BannedByRedditor {
	id: String
	displayName: String
}
type AwardsSheet {
	groups: [Unknown]
}
type VerdictByRedditorInfo {
	__typename: String
	redditorNameFragment: RedditorNameFragment
}
type Node {
	__typename: String
	modNote: ModNote
}
type Edge {
	cursor: String
	node: Node
}
type RedditorsInfoById {
	__typename: String
	id: String
	onRedditor: OnRedditor
	onUnavailableRedditor: OnUnavailableRedditor
	onDeletedRedditor: OnDeletedRedditor
}
type AwardingByCurrentUser {
	id: String
}
type OnRedditor {
	__typename: String
	displayName: String
	prefixedName: String
	cakeDayOn: Unknown
	isBlocked: Boolean
	isAcceptingChats: Boolean
	icon: Icon
	karma: Karma
	contributorPublicProfile: ContributorPublicProfile
	historyFragment: HistoryFragment
}
type OnSubredditPost {
	__typename: String
	modAwardedSubredditPostInfo: ModAwardedSubredditPostInfo
}
type LiveArenaEventsBySubredditNameQuery {
	subredditName: Present
}
type Identity {
	subscribedSubreddits: SubscribedSubreddits
	followedRedditorsInfo: FollowedRedditorsInfo
	redditor: Redditor
}
type Edge {
	node: Node
}
type Footer {
	__typename: String
	explainerFooterFragment: ExplainerFooterFragment
}
type PageInfo {
	hasNextPage: Boolean
	hasPreviousPage: Boolean
	startCursor: String
	endCursor: String
}
type Identity {
	mutedSubreddits: MutedSubreddits
}
type Elements {
	dist: Int
	pageInfo: PageInfo
	edges: [Unknown]
}
type OnRedditor {
	trophyCase: TrophyCase
}
type AppealEligibilityQuery {
	decisionId: String
}
type OnSubredditPost {
	commentsPageAds: [Unknown]
}
type InterestTopicsByIds {
	edges: [Unknown]
}
type Redditor {
	displayedCollectibleItems: DisplayedCollectibleItems
}
type OnSubreddit {
	previewPostAutomation: PreviewPostAutomation
}
type MonthlyTransactionGroup {
	month: Month
	year: [Unknown]
}
type Profile {
	__typename: String
	profilePinnedPostsFragment: ProfilePinnedPostsFragment
}
type SubredditInfoById {
	__typename: String
	id: String
	onSubreddit: OnSubreddit
}
type Elements {
	dist: Int
	pageInfo: PageInfo
	edges: [Unknown]
}
type PostFeed {
	__typename: String
	onRedditor: OnRedditor
}
type PageInfo {
	hasNextPage: Boolean
	hasPreviousPage: Boolean
	startCursor: String
	endCursor: String
}
type GetCommentByIdWithChildrenQuery {
	id: String
	sortType: Unknown
	after: Unknown
	maxDepth: Unknown
	count: Unknown
	includeAwards: Unknown
	numParents: Unknown
	includeCommentsHtmlField: Unknown
	includeIsGildable: Unknown
	includeMediaAuth: Unknown
	translationContext: Unknown
	includeAuthorCommunityBadge: Unknown
	isUserMod: Unknown
	includeExtendedVideoAsset: Unknown
	includePostsBelowCommentsRecommendations: Unknown
	includePaidSubscriberBadge: Unknown
}
type OnComment {
	__typename: String
	postInfo: PostInfo
	children: Children
	commentFragmentWithPost: CommentFragmentWithPost
}
type BlockedRedditorsInfo {
	pageInfo: PageInfo
	edges: [Unknown]
}
type PageInfo1 {
	hasNextPage: Boolean
	hasPreviousPage: Boolean
	startCursor: String
	endCursor: String
}
type Data {
	avatarById: AvatarById
}
type Error {
	code: String
	message: String
	errorInputArgs: [Unknown]
}
type Data {
	reportForm: ReportForm
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type Data {
	awardingsByIds: [Unknown]
}
type TranslationInfo {
	isTranslated: Boolean
	translatedLanguage: String
}
type Data {
	updatePaidSubscriberStatusVisibility: UpdatePaidSubscriberStatusVisibility
}
type Redditor {
	__typename: String
	id: String
	displayName: String
	onRedditor: OnRedditor
}
type Elements {
	dist: Int
	pageInfo: PageInfo
	edges: [Unknown]
}
type Thumbnail {
}
type Target {
	id: String
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type Action {
	__typename: String
	onAutomationInformAction: OnAutomationInformAction
	onAutomationReportAction: OnAutomationReportAction
	onAutomationBlockAction: OnAutomationBlockAction
}
type AwarderInfo {
	id: String
	displayName: String
}
type OnComment {
	translatedContent: TranslatedContent
}
type Row3 {
	__typename: String
	onModPnSettingsLayoutRowPage: OnModPnSettingsLayoutRowPage3
	modPnSettingsRowFragment: ModPnSettingsRowFragment
}
type Profile {
	isNsfw: Boolean
}
type Award {
	__typename: String
	awardFragment: AwardFragment
}
type Rule {
	__typename: String
	ruleFragment: RuleFragment
}
type GetCommunitySubscriptionsListQuery {
	environment: Unknown
	iconSize: Present
	getDetails: Boolean
}
type PageInfo {
	endCursor: String
	hasNextPage: Boolean
}
type GetStorefrontListingItemByIdQuery {
	ids: Present
}
type Identity {
	redditor: Redditor
}
type Icon {
}
type Profile {
	isNsfw: Boolean
	styles: Styles
}
type Runway {
	id: String
	title: String
	items: [Unknown]
}
type AdEligibility {
	userAdEligibility: UserAdEligibilityStatus
}
type Data {
	identity: Identity
}
type Data {
	products: Products
}
type ForegroundImage {
}
type Awarding {
	id: String
	awarderInfo: AwarderInfo
	award: Award
	createdAt: Unknown
	target: Target
}
type OnSubredditPost {
	commentTreeAds: [Unknown]
}
type FeedMetadata {
	treatment: TreatmentProtocol
	appliedSort: String
}
type Identity {
	modMail: ModMail
}
type Edge {
	node: Node
}
type OnSubreddit {
	rules: [Unknown]
	modSavedResponses: ModSavedResponses
}
type OnNotificationSettingsLayoutMessageTypeRow {
	messageType: Unknown
	isEnabled: Boolean
}
type Edge1 {
	node: Node1
}
type Data {
	subredditInfoById: SubredditInfoById
}
type Data {
	popularV3: PopularV3
}
type ChatPageNavigation {
	items: [Unknown]
}
type Category {
	__typename: String
	categoryId: String
	subredditDetails: SubredditDetails
}
type ValidateCommentGuidanceRulesQuery {
	subredditId: String
	input: EvaluateCommentAutomationsInput
}
type Data {
	identity: Identity
}
type PublicTrophyWithDetailsQuery {
	redditor: String
	trophyId: String
}
type PostRequirements {
	__typename: String
	postRequirementsFragment: PostRequirementsFragment
}
type PaymentSubscription {
	productType: SubscriptionProductType
	status: SubscriptionStatus
	startedAt: Unknown
	expiresAt: Unknown
	nextPaymentAt: Unknown
}
type SearchPostsQuery {
	query: String
	productSurface: Unknown
	pageSize: Unknown
	afterCursor: Unknown
	sort: Unknown
	filters: Unknown
	searchInput: Unknown
	queryModifiers: Unknown
	includeSubredditInPosts: Unknown
	includeAwards: Unknown
	includeEconPromos: Unknown
	includePostStats: Unknown
	includeCurrentUserAwards: Unknown
	includeStillMediaAltText: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includePaidSubscriberBadge: Unknown
}
type CommentsById {
	__typename: String
	onComment: OnComment
}
type Data {
	subredditInfoById: SubredditInfoById
}
type HiddenPostsQuery {
	after: Unknown
	pageSize: Unknown
	includeSubredditInPosts: Unknown
	includeAwards: Unknown
	includeEconPromos: Unknown
	includePostStats: Unknown
	includeCurrentUserAwards: Unknown
	includeStillMediaAltText: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includePaidSubscriberBadge: Unknown
}
type Edge {
	node: Node
}
type Data {
	yearInReviewCategoryById: YearInReviewCategoryById
}
type GetPostAwardsQuery {
	postId: String
	iconSize: Boolean
}
type OnDeletedRedditor {
	id: String
	displayName: String
}
type Data {
	homeV3: HomeV3
}
type Identity {
	redditor: Redditor
}
type TipsReceived {
	edges: [Unknown]
}
type Page {
	__typename: String
	subredditWikiPageFragment: SubredditWikiPageFragment
}
type Rule {
	__typename: String
	violationReason: String
	onSubredditRule: OnSubredditRule
}
type Node {
	__typename: String
	id: String
	onInboxNotification: Unknown
	inboxBannerNotificationFragment: Unknown
	notificationAnnouncementFragment: Unknown
}
type Categories {
	edges: [Unknown]
}
type Edge {
	node: Node
}
type Moderation {
	temporaryEventLabelOptions: [Unknown]
	temporaryEventPresets: [Unknown]
}
type ExploreFeedSduiQuery {
	sort: Unknown
	time: Unknown
	after: Unknown
	includeViewCount: Unknown
	includePackagedMedia: Unknown
	includeCarouselRecommendations: Unknown
	includeListStyleRecommendations: Unknown
	includeCompactPostStyleRecommendations: Unknown
	includeCardPostStyleRecommendations: Unknown
	includeTaxonomyTopicsFeedElement: Unknown
	includeExploreFeaturedItemsFeedElement: Unknown
	includeTopicGroupFeedElement: Unknown
	includeRankedCommunityFeedElement: Unknown
	includeChatChannelFeedUnit: Unknown
	includeGoldInfo: Unknown
	includeEconPromos: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includeNewInCommunitiesCarousel: Unknown
}
type PageInfo {
	endCursor: String
	hasNextPage: Boolean
}
type RedditorInfoById {
	__typename: String
	onRedditor: OnRedditor
}
type ErrorInputArg {
	value: String
	variableName: String
}
type Posts {
	edges: [Unknown]
}
type Data {
	whereToPostSuggestions: WhereToPostSuggestions
}
type GetChatChannelsRecommendationsQuery {
	postId: String
}
type Search {
	dynamic: Dynamic
	general: General
}
type Data {
	modQueueItems: ModQueueItems
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type OnSubreddit {
	id: String
	name: String
	prefixedName: String
	styles: Unknown
	publicDescriptionText: String
	subscribersCount: Boolean
	isQuarantined: Boolean
	isSubscribed: Boolean
}
type Gallery {
	items: [Unknown]
}
type Progress {
	done: AchievementTrophyProgressUnit
}
type PageInfo {
	__typename: String
	pagination: Pagination
}
type Data {
	avatarStorefront: AvatarStorefront
}
type Profile {
	createdAt: Unknown
	subscribersCount: [Unknown]
	isUserBanned: Boolean
	isContributor: Boolean
	isDefaultIcon: Boolean
	isDefaultBanner: Boolean
	path: String
	isNsfw: Boolean
	title: String
	publicDescriptionText: String
	isSubscribed: Boolean
	moderatorsInfo: ModeratorsInfo
	description: Description
	socialLinks: [Unknown]
	styles: Unknown
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type BackgroundImage {
}
type OnCommentContribution {
	comment: Comment
}
type Comments {
	edges: [Unknown]
}
type GlobalModifiers {
	__typename: String
	searchModifiersFragment: SearchModifiersFragment
}
type UserIsApproved {
	pageInfo: PageInfo3
}
type PageInfo {
	__typename: String
	pageInfoFragment: PageInfoFragment
}
type TopicFeedSduiQuery {
	topicId: String
	schemeName: Unknown
	sort: Unknown
	time: Unknown
	after: Unknown
	includeViewCount: Unknown
	includePackagedMedia: Unknown
	includeCarouselRecommendations: Unknown
	includeListStyleRecommendations: Unknown
	includeCompactPostStyleRecommendations: Unknown
	includeCardPostStyleRecommendations: Unknown
	includeTaxonomyTopicsFeedElement: Unknown
	includeExploreFeaturedItemsFeedElement: Unknown
	includeTopicGroupFeedElement: Unknown
	includeRankedCommunityFeedElement: Unknown
	includeChatChannelFeedUnit: Unknown
	includeGoldInfo: Unknown
	includeEconPromos: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includeNewInCommunitiesCarousel: Unknown
}
type OnBannedMember {
	bannedAt: Unknown
	bannedByRedditor: BannedByRedditor
	reason: String
	message: String
	modNote: String
	endsAt: Unknown
	redditor: Redditor
}
type Identity {
	redditor: Redditor
}
type LastModAction {
	__typename: String
	id: String
	createdAt: Unknown
	action: ModActionType
	details: String
	actionNotes: String
	moderatorInfo: ModeratorInfo
	targetContentFragment: TargetContentFragment
}
type Post {
	__typename: String
	inboxFeedPostInfoFragment: InboxFeedPostInfoFragment
}
type OnChatEvent {
	id: String
	eventJSON: Unknown
	room: Room
	sender: Sender
}
type Node {
	id: String
	topic: Topic
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type RedditorInfoById {
	__typename: String
	onRedditor: OnRedditor
}
type NewsV3 {
	elements: Elements
}
type OnRedditor {
	profile: Profile
}
type GetAvatarByIdQuery {
	avatarId: String
}
type SubredditDetails {
	__typename: String
	subredditConnections: SubredditConnections
}
type SubredditInfo {
	__typename: String
	onSubreddit: OnSubreddit
}
type PostInfoById {
	__typename: String
	postSetPostFragment: Unknown
}
type OnRedditor {
	id: String
	displayName: String
	snoovatarIcon: SnoovatarIcon
	profile: Profile
}
type CommunityStatus {
	__typename: String
	communityStatusFragment: CommunityStatusFragment
}
type BanEvasion {
	modmail: Modmail
}
type OnSubreddit {
	moderatorMembers: ModeratorMembers
}
type Node {
	__typename: String
	gqlStorefrontArtist: GqlStorefrontArtist
}
type OnPostContribution {
	post: Post
}
type OnSubreddit {
	channels: Channels
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type Search {
	typeaheadByType: TypeaheadByType
}
type CommentInfo2 {
	__typename: String
	commentFragmentWithPost: CommentFragmentWithPost
}
type TranslatedPostsQuery {
	postIds: [Unknown]
	targetLanguage: String
	language: String
}
type Target1 {
	__typename: String
	multiContentCommentFragment: MultiContentCommentFragment
}
type MuteInfo {
	mutedAt: Unknown
	endsAt: Unknown
	count: Int
}
type General {
	authors: Authors
}
type PackagedMedia {
	__typename: String
	packagedMediaAuthFragment: PackagedMediaAuthFragment
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type SubredditDayZeroQuery {
	subredditName: String
}
type Modmail {
	isEnabled: Boolean
}
type Node {
	__typename: String
	onRedditor: OnRedditor
}
type Data {
	validateCreateSubredditInput: ValidateCreateSubredditInput
}
type Identity {
	preferences: Preferences
}
type OnSubreddit {
	rules: [Unknown]
}
type Data {
	similarRecommendedPostsFeed: SimilarRecommendedPostsFeed
}
type RedditorInfoById {
	__typename: String
	onRedditor: OnRedditor
}
type Children {
	__typename: String
	commentForestTreesFragment: CommentForestTreesFragment
}
type UserSubredditListItemsQuery {
	fetchSubscribed: Boolean
	subscribedAfter: Unknown
	fetchFollowed: Boolean
	followedAfter: Unknown
	fetchModerated: Boolean
	moderatedAfter: Unknown
	limit: Present
}
type Moderation {
	isShowCommentRemovalReasonPrompt: Boolean
}
type Identity {
	subscribedSubreddits: SubscribedSubreddits
}
type Still {
	content: Content
}
type Profile {
	isNsfw: Boolean
}
type BlockedRedditorsQuery {
	after: Present
}
type OnSubreddit {
	__typename: String
	typeaheadSubredditForMuteFragment: TypeaheadSubredditForMuteFragment
}
type Data {
	newsV3: NewsV3
}
type PiiIdentity {
	gender: Gender
}
type EvaluateCommentAutomations {
	result: Result
}
type ModmailRedditorParticipantInfo {
	contributorInfo: ContributorInfo
	banInfo: BanInfo
	muteInfo: MuteInfo
	recentPosts: [Unknown]
	recentComments: [Unknown]
	redditorInfo: RedditorInfo
}
type OnSubreddit {
	moderation: Moderation
}
type ChannelsByIds {
	edges: [Unknown]
}
type EligibleCommunitiesPageQuery {
	id: String
	currentProgressFirst: Unknown
	currentProgressAfter: String
	includeLeaderboard: Boolean
}
type Data {
	identity: Identity
}
type ExperimentVariant {
	name: String
	experimentName: String
	version: String
}
type Edge {
	node: Node
}
type CommentsById {
	__typename: String
	onComment: OnComment
}
type TiersInfo {
	tier: ContributorTier
}
type Node {
	__typename: String
	onTipReceivedTransaction: OnTipReceivedTransaction
}
type Outcome {
	__typename: String
	automationOutcomeFragment: AutomationOutcomeFragment
}
type UiUnit {
	id: String
	explainer: Explainer
}
type UserReport {
	reason: String
}
type LastModAction {
	__typename: String
	id: String
	createdAt: Unknown
	action: ModActionType
	details: String
	actionNotes: String
	targetContentFragment: TargetContentFragment
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type Result {
	outcomes: [Unknown]
}
type Edge {
	__typename: String
	feedElementEdgeFragment: FeedElementEdgeFragment
}
type Data {
	avatarStorefront: AvatarStorefront
}
type Data {
	subredditInfoById: SubredditInfoById
}
type OnComment {
	content: Content1
}
type Moderation {
	temporaryEventConfigs: TemporaryEventConfigs
}
type UserIsModerator {
	pageInfo: PageInfo2
}
type PageInfo {
	__typename: String
	pageInfoFragment: PageInfoFragment
}
type Data {
	trendingChatGifs: TrendingChatGifs
}
type ReportFormQuery {
	itemId: String
}
type Data {
	suggestedSubredditsForChatChannel: SuggestedSubredditsForChatChannel
}
type Data {
	avatarStorefront: AvatarStorefront
}
type Price {
	displayAmount: String
}
type Reply {
	__typename: String
	privateMessageFragment: PrivateMessageFragment
}
type GetTemporaryEventPresetsQuery {
	subredditId: String
}
type Widgets {
	orderedTopbarWidgets: [Unknown]
	orderedSidebarWidgets: [Unknown]
}
type BadgeIndicators {
	__typename: String
	badgeIndicatorsFragment: BadgeIndicatorsFragment
}
type OnRedditor {
	id: String
	name: String
	prefixedName: String
	isFriend: Boolean
	isEmployee: Boolean
	isAcceptingChats: Boolean
	isAcceptingFollowers: Boolean
	isAcceptingPMs: Boolean
	isVerified: Boolean
	accountType: AccountType
	profile: Profile
	profileExemptedExperiments: [Unknown]
	isProfileContentFiltered: Boolean
	karma: Karma
	contributionStats: ContributionStats
	snoovatarIcon: SnoovatarIcon
	trophyCase: TrophyCase
	contributorPublicProfile: ContributorPublicProfile
}
type Media1 {
	still: Still1
}
type InboxAnnouncementsByIds {
	edges: [Unknown]
}
type ShareUrlQuery {
}
type ContributionStats {
}
type FeedMetadata {
	treatment: TreatmentProtocol
}
type TemporaryEventConfigs {
	pageInfo: PageInfo
	edges: [Unknown]
}
type Modmail {
	__typename: String
	savedResponseFragment: SavedResponseFragment
}
type Data {
	subredditInfoById: SubredditInfoById
}
type Inbox {
	unreadCount: Int
}
type Elements {
	pageInfo: PageInfo
	dist: Int
	edges: [Unknown]
}
type WatchFeedSduiQuery {
	adContextInput: Unknown
	feedContextInput: Unknown
	filterPosts: Unknown
	sort: Unknown
	time: Unknown
	after: Unknown
	includeViewCount: Unknown
	includePackagedMedia: Unknown
	includeCarouselRecommendations: Unknown
	includeListStyleRecommendations: Unknown
	includeCompactPostStyleRecommendations: Unknown
	includeCardPostStyleRecommendations: Unknown
	includeTaxonomyTopicsFeedElement: Unknown
	includeExploreFeaturedItemsFeedElement: Unknown
	includeTopicGroupFeedElement: Unknown
	includeRankedCommunityFeedElement: Unknown
	includeChatChannelFeedUnit: Unknown
	includeGoldInfo: Unknown
	includeEconPromos: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includeNewInCommunitiesCarousel: Unknown
}
type BillingPeriod {
	amount: DurationUnit
}
type SubredditInfoById {
	__typename: String
	highlightedPostsModeratorsInfoFragment: HighlightedPostsModeratorsInfoFragment
	additionalInfoFragment: AdditionalInfoFragment
}
type OnSubreddit {
	modSafetyFilterSettings: ModSafetyFilterSettings
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type LocalModifiers {
	__typename: String
	searchModifiersFragment: SearchModifiersFragment
}
type Taxonomy {
	generatedDescription: String
}
type RecommendedMediaFeedQuery {
	mediaFeedContext: Unknown
	after: Unknown
	pageSize: Unknown
	forceAds: Unknown
	includeSubredditInPosts: Unknown
	includeAwards: Unknown
	includeEconPromos: Unknown
	includePostStats: Unknown
	sort: Unknown
	time: Unknown
	includeCurrentUserAwards: Unknown
	includeStillMediaAltText: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includePaidSubscriberBadge: Unknown
}
type SearchChatGifs {
	version: Int
	provider: ChatGifsProvider
	pageInfo: PageInfo
	edges: [Unknown]
}
type Data {
	commentsByIds: [Unknown]
}
type UpdateRedditorAllowlistStateMutation {
	input: UpdateRedditorAllowlistStateInput
}
type Section {
	__typename: String
	onExplainerButton: OnExplainerButton
	onExplainerText: OnExplainerText
	onExplainerImage: Unknown
	onExplainerSpace: OnExplainerSpace
}
type OnDeletedSubredditPost {
	subreddit: Subreddit1
}
type Identity {
	createdAt: Unknown
	redditor: Redditor
}
type Data {
	redditorInfoById: RedditorInfoById
}
type AuthorFlair {
	text: String
	richtext: Unknown
	template: Unknown
	textColor: FlairTextColor
}
type Search {
	dynamic: Dynamic
	general: General
}
type PageInfo {
	endCursor: String
	hasNextPage: Boolean
}
type TypeaheadByType {
	profiles: [Unknown]
}
type Data {
	identity: Identity
}
type PageInfo {
	endCursor: String
}
type Data {
	search: Search
}
type GetEditableModeratorsQuery {
	subredditName: String
	before: Unknown
	after: Unknown
	first: Unknown
	last: Unknown
}
type Contribution {
	__typename: String
	onPostContribution: OnPostContribution
	onCommentContribution: OnCommentContribution
	onSubredditContribution: OnSubredditContribution
}
type PageInfo {
	endCursor: String
}
type GetUccChannelTaggingInfoQuery {
	channelIds: [Unknown]
}
type AuthorFlairSettings {
	isEnabled: Boolean
	isSelfAssignable: Boolean
}
type OnComment {
	id: String
	authorInfo: AuthorInfo1
	postInfo: PostInfo
	content: Content1
}
type ContributorPublicProfile {
	tier: ContributorTier
}
type TemporaryEventPreset {
	id: String
	title: String
	subtitle: String
	description: String
	fields: Fields
	rplIcon: Unknown
}
type MatrixNotifications {
	unreadCount: Int
}
type OnAutomationInformAction {
	message: String
}
type Data {
	subredditInfoById: SubredditInfoById
}
type Nudge {
	destinationExplainer: DestinationExplainer
}
type GetRecentModActivitiesQuery {
	subredditName: String
}
type OnSubreddit {
	moderation: Moderation
}
type Room {
	id: String
	name: String
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type TrophyCategoriesQuery {
	carouselImageWidth: Boolean
	limit: Unknown
}
type LegacyIcon {
	__typename: String
	mediaSourceFragment: Unknown
}
type IsSubredditChannelsEnabled {
	isChatEnabled: Boolean
	isPostEnabled: Boolean
}
type OnRedditor {
	id: String
	prefixedName: String
	profile: Profile
	icon: Icon
}
type LegacyIcon {
}
type Data {
	customFeedV3: CustomFeedV3
}
type Content {
}
type AvatarStorefront {
	__typename: String
	storefrontStatus: StorefrontStatus
	batchArtists: [Unknown]
	batchListings: [Unknown]
	gqlStorefrontPriceBoundsRoot: GqlStorefrontPriceBoundsRoot
	gqlStorefrontUtilityTypesRoot: GqlStorefrontUtilityTypesRoot
}
type GetCommunityHighlightsQuery {
	subredditId: String
}
type Edge {
	cursor: String
	node: Node
}
type Edge2 {
	node: Node2
}
type Subreddit {
	moderation: Moderation
}
type Data {
	post: Post
}
type PageInfo {
	endCursor: String
	hasNextPage: Boolean
	hasPreviousPage: Boolean
	startCursor: String
}
type Data {
	commentById: CommentById
}
type Node {
	__typename: String
	inventoryItemFragment: InventoryItemFragment
}
type Subreddit {
	__typename: String
	onSubreddit: OnSubreddit
}
type Response {
	markdown: String
}
type OnAchievementRepeatableImageTrophy {
	image: Image1
}
type Data {
	subredditInfoById: SubredditInfoById
}
type OnSubreddit {
	isModmailHarassmentFilterEnabled: Boolean
	modSafetyFilterSettings: ModSafetyFilterSettings
}
type Data {
	recommendedVideoFeed: RecommendedVideoFeed
}
type Edge {
	node: Node
}
type Data {
	redditorInfoByName: RedditorInfoByName
}
type Edge {
	node: Node
}
type Data {
	identity: Identity
}
type OnChatPageNavigationTopic {
	displayName: String
	tag: String
}
type Data {
	identity: Identity
}
type RecommendedChannels {
	__typename: String
	recChatChannelsFragment: RecChatChannelsFragment
}
type ModActivitySummary {
	activeModerators: ActiveModerators
}
type Edge1 {
	node: Node1
}
type Section4 {
	__typename: String
	rows: [Unknown]
	modPnSettingSectionFragment: ModPnSettingSectionFragment
}
type PostInfoById {
	__typename: String
	onPost: OnPost
}
type ModQueueItemsWithSortQuery {
	subredditIds: Unknown
	queueType: ModQueueType
	sortType: Unknown
	itemTypes: Unknown
	after: Unknown
	includeSubredditInPosts: Unknown
	includeAwards: Unknown
	includeEconPromos: Unknown
	includePostStats: Unknown
	includeCurrentUserAwards: Unknown
	includeCommentsHtmlField: Unknown
	includeStillMediaAltText: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeIsGildable: Unknown
	includeExtendedVideoAsset: Unknown
	includePaidSubscriberBadge: Unknown
}
type UpdatePaidSubscriberStatusVisibilityMutation {
	input: UpdatePaidSubscriberStatusVisibilityInput
}
type Data {
	identity: Identity
}
type ModeratedSubreddits {
	edges: [Unknown]
	pageInfo: PageInfo
}
type ModeratorEvaluateCommentAutomations {
	ok: Boolean
	errors: [Unknown]
	result: Result
}
type PostInfoById {
	moderationInfo: ModerationInfo
}
type Data {
	subredditInfoById: SubredditInfoById
}
type RecommendedChatChannels {
	analyticsInfo: AnalyticsInfo
	recommendedChannels: [Unknown]
}
type AppliedState {
	__typename: String
	searchAppliedStateFragment: SearchAppliedStateFragment
}
type OnUnavailableRedditor {
	id: String
	displayName: String
}
type Icon {
}
type SuggestedSubredditsForChatChannel {
	suggestedSubreddits: [Unknown]
}
type GetTemporaryEventConfigsQuery {
	subredditId: String
	first: Unknown
	last: Unknown
	after: Unknown
	status: Unknown
}
type Identity {
	redditor: Redditor
}
type TopicFeedV1 {
	elements: Elements
}
type RedditorInfoByName {
	__typename: String
	onRedditor: OnRedditor
}
type Node {
	__typename: String
	temporaryEventConfigFull: TemporaryEventConfigFull
}
type Data {
	identity: Identity
}
type Posts {
	isEnabled: Boolean
	confidence: ReputationFilterConfidence
}
type GetModeratedSubredditsQuery {
	moderatorId: String
	before: Unknown
	after: Unknown
	first: Unknown
	last: Unknown
}
type RedditorInfoByName {
	__typename: String
	onRedditor: OnRedditor
}
type TranslationsCommentsQuery {
	commentIds: [Unknown]
	includeCommentsHtmlField: Present
}
type Value {
	asString: String
	asBool: Boolean
	asDouble: Unknown
	asInt: Int
}
type LocalModifiers {
	__typename: String
	searchModifiersFragment: SearchModifiersFragment
}
type Node {
	__typename: String
	onAchievementTrophyCategory: OnAchievementTrophyCategory
}
type OnRedditor {
	displayedCollectibleItems: DisplayedCollectibleItems
}
type PaymentSubscription {
	expiresAt: Unknown
	features: [Unknown]
	id: String
	isRenewable: Boolean
	nextPaymentAt: Unknown
	paymentProvider: PaymentProvider
	isInGracePeriod: Boolean
	price: Price
	productType: SubscriptionProductType
	startedAt: Unknown
	status: SubscriptionStatus
}
type ModReport {
	reason: String
}
type GetAwardsForSubredditQuery {
	subredditId: String
	thingId: String
	includeSectionFields: Boolean
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type PageInfo {
	__typename: String
	fullPageInfoFragment: FullPageInfoFragment
}
type CreatedByInfo {
	id: String
}
type ModeratorEvaluateCommentAutomationsQuery {
	subredditId: String
	input: ModeratorEvaluateCommentAutomationsInput
}
type Data {
	searchChatMessageReactionIcons: SearchChatMessageReactionIcons
}
type OnComment {
	authorInfo: AuthorInfo
	content: Content
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type Edge {
	__typename: String
	snapFeedElementEdgeFragment: SnapFeedElementEdgeFragment
}
type Node1 {
	__typename: String
	id: String
	name: String
	onAchievementImageTrophy: OnAchievementImageTrophy
	onAchievementRepeatableImageTrophy: OnAchievementRepeatableImageTrophy
}
type GetTrendingChatGifsQuery {
	first: Present
	after: Present
}
type Subreddits {
	edges: [Unknown]
}
type ProfileDetailsByNameQuery {
	profileName: String
}
type Identity {
	email: String
	isEmailVerified: Boolean
	payoutVerificationStatus: PayoutVerificationStatus
}
type Edge {
	node: Node
}
type Data {
	econMarketing: EconMarketing
}
type PayoutsReceived {
	edges: [Unknown]
}
type InventoryItems {
	edges: [Unknown]
}
type Edge2 {
	node: Node2
}
type Node {
	__typename: String
	listings: Listings
	gqlStorefrontArtist: GqlStorefrontArtist
}
type Trophies {
	edges: [Unknown]
}
type Progress {
}
type OnSubredditPost {
	namedEntitiesInCommentsCount: [Unknown]
}
type Earned {
	available: Transactions
}
type PrivateMessages {
	pageInfo: PageInfo
	edges: [Unknown]
}
type Node {
	__typename: String
	postFragment: PostFragment
	postSetFragment: PostSetFragment
	authorCommunityBadgeFragment: AuthorCommunityBadgeFragment
}
type Automation {
	name: String
	condition: Condition
	id: String
	status: AutomationStatus
	trigger: AutomationTrigger
	actions: [Unknown]
}
type Identity {
	freeNftClaimDrops: [Unknown]
}
type SnoovatarIcon {
}
type OnUnavailableRedditor {
	id: String
	displayName: String
}
type Translation {
	translatedString: String
}
type ChatChannelHostModeMessages {
	edges: [Unknown]
	pageInfo: PageInfo
}
type CommentInfo1 {
	__typename: String
	commentFragmentWithPost: CommentFragmentWithPost
}
type Redditor {
	__typename: String
	onUnavailableRedditor: OnUnavailableRedditor
	onRedditor: OnRedditor
}
type Edge {
	node: Node
}
type GildingTotal {
	type: Type
}
type Identity {
	redditor: Redditor
}
type Identity {
	savedComments: SavedComments
}
type Edge {
	cursor: String
	node: Node
}
type Data {
	postsInfoByIds: [Unknown]
}
type PreviewPostAutomationQuery {
	subredditId: String
	input: PreviewPostAutomationInput
}
type RulePrediction {
	ruleUUID: String
	ruleRank: String
	violationType: AIModRuleViolationType
	reason: Reason
}
type Edge {
	__typename: String
	feedElementEdgeFragment: FeedElementEdgeFragment
}
type Data {
	identity: Identity
}
type TemporaryEventRuns {
	pageInfo: PageInfo
	edges: [Unknown]
}
type GetTopKarmaSubredditsQuery {
	username: String
	inputContext: Unknown
}
type Data {
	postsInfoByIds: [Unknown]
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type RedditorInfoByName {
	__typename: String
	onRedditor: OnRedditor
}
type Outcome {
	__typename: String
	automationOutcomeFragment: AutomationOutcomeFragment
}
type Icon {
}
type Edge {
	node: Node
}
type DownvotedPosts {
	pageInfo: PageInfo
	edges: [Unknown]
}
type GetFreeNftClaimDropsQuery {
	input: DistributionCampaignChoiceFilter
}
type IsModeratorOfSubredditQuery {
	subredditName: String
}
type Data {
	search: Search
}
type ModMail {
	isUnread: Boolean
}
type Data {
	subredditInfoById: SubredditInfoById
}
type Posts {
	__typename: String
	pageInfo: PageInfo
	dist: Int
	edges: [Unknown]
}
type Item {
	__typename: String
	postGalleryItemFragment: Unknown
}
type Icon {
}
type OnSubreddit {
	id: String
	name: String
	title: String
	prefixedName: String
	publicDescriptionText: String
	subscribersCount: Taxonomy
	styles: Unknown
}
type Contact {
	address: String
	isActive: Boolean
	userId: String
}
type LockedImage {
}
type TranslatedCommentsQuery {
	commentIds: [Unknown]
	targetLanguage: String
}
type Node {
	id: String
	title: String
	downsized: Downsized
	fixed_height: Fixed_height
	fixed_width: Fixed_width
}
type Data {
	channelsByIds: ChannelsByIds
}
type ModerationActionCategory {
	actions: [Unknown]
	category: ModActionCategory
}
type Edge {
	node: Node
	cursor: String
}
type TrophyCase {
	achievementTrophyById: AchievementTrophyById
}
type GetRulesQuery {
	subredditId: String
}
type PreviousActionsCommentQuery {
	commentKindWithId: String
}
type InboxAnnouncementsByIdsQuery {
	ids: [Unknown]
}
type Edge {
	node: Node
	cursor: String
}
type Data {
	subredditInfoById: SubredditInfoById
}
type EnabledState {
	icon: String
	label: String
}
type InboxAnnouncementOptOuts {
	title: String
	description: String
	pageInfo: PageInfo
	edges: [Unknown]
}
type General {
	comments: Comments
}
type OnAwardReceivedInboxNotificationContext {
	awarding: Awarding
}
type GetVerificationStatusQuery {
}
type Data {
	redditorInfoByName: RedditorInfoByName
}
type Image {
	image: Image1
}
type Elements {
	dist: Int
	pageInfo: PageInfo
	edges: [Unknown]
}
type AdBusiness {
	__typename: String
	adBusinessFragment: AdBusinessFragment
}
type SearchChatMessageReactionIcons {
	edges: [Unknown]
}
type Ban {
	totalCount: Int
}
type Data {
	redditorInfoById: RedditorInfoById
}
type GetRedditGoldProfileFromPPQuery {
	environment: Present
}
type Data {
	snapFeed: SnapFeed
}
type OnSubreddit {
	id: String
	emojis: Emojis
}
type Devvit {
	id: String
	name: String
	description: String
	environment: Environment
	terms: String
	metadata: [Unknown]
	paymentProvider: PaymentProvider
	images: [Unknown]
	basePrice: BasePrice
}
type AuthorFlair {
	richtext: Unknown
	text: String
	template: Unknown
}
type PostStatsById {
	__typename: String
	postStatsFragment: PostStatsFragment
}
type OnReportReason {
	__typename: String
	description: [Unknown]
	reportReasonSelection: ReportReasonSelection
}
type Edge {
	node: Node
}
type ModPermissions {
	isAllAllowed: Boolean
	isAccessEnabled: Boolean
}
type Transactions {
	edges: [Unknown]
}
type GetPublicShowcaseOfCurrentUserQuery {
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type OnComment {
	translatedContent: TranslatedContent
}
type AvatarStorefront {
	listings: Listings
}
type Node {
	__typename: String
	modNote: ModNote
}
type AuthorInfo {
	__typename: String
	id: String
	redditorNameFragment: RedditorNameFragment
}
type Node2 {
	__typename: String
	createdAt: Unknown
	onTipReceivedTransaction: OnTipReceivedTransaction1
	onPayoutReceivedTransaction: OnPayoutReceivedTransaction1
}
type PageInfo {
	__typename: String
	pageInfoFragment: PageInfoFragment
}
type EconMarketing {
	nudges: [Unknown]
}
type PostsInfoById {
	__typename: String
	id: String
	title: String
	upvoteRatio: Unknown
	onSubredditPost: OnSubredditPost
}
type ReportFormFlowDataQuery {
	itemId: String
	formVersion: String
	modmailConversationId: Unknown
	flowType: Unknown
}
type SubscriptionBenefitsSettings {
	isSubscriberBadgeEnabled: Boolean
	isSubscriberAwardsEnabled: Boolean
	isSubscriberOnlyPostEnabled: Boolean
}
type Edge1 {
	node: Node1
}
type OnUnavailableRedditor {
	name: String
}
type DestinationExplainer {
	id: String
	sections: [Unknown]
}
type Data {
	subredditInfoById: SubredditInfoById
}
type Moderation {
	isModeratorInvitePending: Boolean
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type PostInfo {
	__typename: String
	postFragment: PostFragment
}
type Search {
	dynamic: Dynamic
}
type AwarderInfo {
	__typename: String
	redditorNameFragment: RedditorNameFragment
}
type Artists {
	pageInfo: PageInfo
	edges: [Unknown]
}
type Artist {
	__typename: String
	gqlStorefrontArtistReduced: GqlStorefrontArtistReduced
}
type Data {
	discoverBar: DiscoverBar
}
type OnModQueueItemComment {
	commentInfo: CommentInfo
}
type Data {
	subredditInfoById: SubredditInfoById
}
type OnSubreddit {
	type: SubredditType
	isContributor: Boolean
	isCommentingRestricted: Boolean
	isPostingRestricted: Boolean
	lastContributorRequestTimeAt: Unknown
	modPermissions: ModPermissions
}
type Identity {
	subscribedSubreddits: SubscribedSubreddits
	followedRedditorsInfo: FollowedRedditorsInfo
}
type OnSubreddit {
	removalReasons: [Unknown]
}
type Communities {
	pageInfo: PageInfo
	edges: [Unknown]
	feedMetadata: FeedMetadata
}
type GetUserInfoByUserNameQuery {
	username: String
}
type PageInfo {
	endCursor: String
}
type OnModQueueItemAwardOnContent {
	commentInfo: CommentInfo2
	award: Award
	postInfo: PostInfo1
}
type Data {
	modQueueCount: ModQueueCount
}
type Edge {
	node: Node
}
type CardsV2 {
	__typename: String
	recapCardFragment: RecapCardFragment
}
type OnAutomationNotCondition {
	regexCondition: RegexCondition
	stringCondition: StringCondition
}
type ModQueueSettings {
	isExcludeBannedModqueueEnabled: Boolean
}
type OnSubreddit {
	communityLeaderboard: CommunityLeaderboard
}
type SafetyFilterEvaluations {
	hatefulContentFilter: HatefulContentFilter
}
type GetWelcomePageContentQuery {
	id: String
	redditorUsername: String
}
type OnSubreddit {
	modPermissions: ModPermissions
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type PageInfo {
	__typename: String
	pageInfoFragment: PageInfoFragment
}
type Profile {
	isNsfw: Boolean
	styles: Styles
}
type Data {
	identity: Identity
}
type ModPermissions {
	isAccessEnabled: Boolean
	isAllAllowed: Boolean
	isChannelsEditingAllowed: Boolean
	isChatConfigEditingAllowed: Boolean
	isChatOperator: Boolean
	isCommunityChatEditingAllowed: Boolean
	isConfigEditingAllowed: Boolean
	isFlairEditingAllowed: Boolean
	isMailEditingAllowed: Boolean
	isPostEditingAllowed: Boolean
	isWikiEditingAllowed: Boolean
}
type Context {
	__typename: String
	messageType: Unknown
	onPostInboxNotificationContext: OnPostInboxNotificationContext
	onPostSubredditInboxNotificationContext: OnPostSubredditInboxNotificationContext
	onCommentInboxNotificationContext: OnCommentInboxNotificationContext
	onSubredditInboxNotificationContext: OnSubredditInboxNotificationContext
	onAwardReceivedInboxNotificationContext: OnAwardReceivedInboxNotificationContext
}
type Node {
	__typename: String
	onFlairTemplate: Unknown
}
type Edge1 {
	node: Node1
}
type Edge {
	node: Node
}
type SubredditInfoById {
	__typename: String
	onSubreddit: OnSubreddit
}
type Dynamic {
	modifiers: Modifiers
}
type RecommendedChannel {
	channel: Channel
}
type OnSubreddit {
	id: String
	moderation: Moderation
	moderatorMembers: ModeratorMembers
}
type PageInfo {
	endCursor: String
}
type Group {
	id: String
	name: String
	style: AwardsSheetGroupStyle
	tooltip: String
	awards: [Unknown]
}
type Gender {
	accountDefinedGender: String
	accountGenderCategory: AccountGenderCategory
}
type OnExplainerText {
	alignment: ExplainerTextAlignment
	content: String
	element: ExplainerTextElement
	sectionID: String
}
type Chat {
	__typename: String
	savedResponseFragment: SavedResponseFragment
}
type ModPermissions {
	isAllAllowed: Boolean
	isAccessEnabled: Boolean
	isConfigEditingAllowed: Boolean
	isFlairEditingAllowed: Boolean
	isMailEditingAllowed: Boolean
	isPostEditingAllowed: Boolean
	isWikiEditingAllowed: Boolean
	isChatConfigEditingAllowed: Boolean
	isChatOperator: Boolean
	isChannelsEditingAllowed: Boolean
	isCommunityChatEditingAllowed: Boolean
}
type OnModPnSettingsLayoutRowPage3 {
	sections: [Unknown]
}
type Node {
	__typename: String
	replies: [Unknown]
	privateMessageFragment: PrivateMessageFragment
}
type Automation2 {
	id: String
}
type Children {
	trees: [Unknown]
}
type ExploreFeedV1 {
	elements: Elements
}
type GetAwardsSheetForSubredditQuery {
	subredditId: String
	includeSectionFields: Present
	includeCommunityGoldBalance: Present
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type Spam {
	totalCount: Int
}
type GetActiveSubredditsQuery {
	username: String
	inputContext: Unknown
}
type OnAchievementActionNotificationToggle {
	messageType: Unknown
	isEnabled: Boolean
	enabledState: EnabledState
	disabledState: DisabledState
}
type OnComment {
	content: Content
}
type OnRedditor {
	isAcceptingChats: Boolean
}
type RegexCondition {
	features: [Unknown]
	value: String
	isCaseSensitive: Boolean
}
type Edge {
	node: Node
}
type PersonalizedYearInReviewQuery {
	maxWidth: Int
	translationContext: Unknown
}
type Edge {
	__typename: String
	feedElementEdgeFragment: FeedElementEdgeFragment
}
type Data {
	postFeed: PostFeed
	identity: Identity
}
type OnAchievementRepeatableImageTrophy {
	image: Image1
}
type Node1 {
	key: String
	value: Unknown
}
type Edge {
	node: Node
}
type Node {
	__typename: String
	multiContentPostFragment: Unknown
}
type OnSubredditPost {
	subreddit: Subreddit
}
type Result {
	outcomes: [Unknown]
}
type Data {
	postInfoById: PostInfoById
}
type Accessory {
	__typename: String
	avatarAccessoryFragment: AvatarAccessoryFragment
}
type Award {
	id: String
	name: String
	goldPrice: Int
	staticIcon: StaticIcon
}
type Artist {
	edges: [Unknown]
}
type Dimensions {
}
type HomeFeedSduiQuery {
	adContextInput: Unknown
	feedContextInput: Unknown
	filterPosts: Unknown
	sort: Unknown
	time: Unknown
	after: Unknown
	crossPlatformContext: Unknown
	includeViewCount: Unknown
	includePackagedMedia: Unknown
	includeCarouselRecommendations: Unknown
	includeListStyleRecommendations: Unknown
	includeCompactPostStyleRecommendations: Unknown
	includeCardPostStyleRecommendations: Unknown
	includeTaxonomyTopicsFeedElement: Unknown
	includeExploreFeaturedItemsFeedElement: Unknown
	includeTopicGroupFeedElement: Unknown
	includeRankedCommunityFeedElement: Unknown
	includeChatChannelFeedUnit: Unknown
	includeGoldInfo: Unknown
	includeEconPromos: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includeNewInCommunitiesCarousel: Unknown
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type Data {
	commentById: CommentById
}
type Image {
	name: String
	image: Unknown
}
type Category {
	id: String
	name: String
	sections: [Unknown]
}
type Moderation1 {
	isShowCommentRemovalReasonPrompt: Boolean
}
type PageInfo {
	hasNextPage: Boolean
	hasPreviousPage: Boolean
	startCursor: String
	endCursor: String
}
type OnSubreddit {
	id: String
	moderation: Moderation
	editableModeratorMembers: EditableModeratorMembers
}
type BanEvasion {
	maxSubreddits: Int
	maxUsers: Int
}
type Data {
	subredditTypeahead: SubredditTypeahead
}
type Edge {
	node: Node
}
type Edge {
	node: Node
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type Identity {
	tippingProfile: TippingProfile
}
type Profile {
	__typename: String
	profileListItemFragment: ProfileListItemFragment
}
type ProfileDetailsByNamesQuery {
	profileNames: [Unknown]
}
type BasePrice {
	currency: Currency
}
type Node {
	__typename: String
	unlockedCommunity: UnlockedCommunity
}
type PostInfoById {
	__typename: String
	onPost: OnPost
}
type Node {
	__typename: String
	postSetPostFragment: Unknown
}
type Removal {
	__typename: String
	savedResponseFragment: SavedResponseFragment
}
type SearchTypeaheadByTypeQuery {
	query: String
	filters: Present
	productSurface: Unknown
	searchInput: Present
	limit: Present
	includeUsers: Boolean
	includeEligibleMoment: Boolean
}
type RedditorInfoByName {
	__typename: String
	onRedditor: OnRedditor
}
type SearchTagSubredditsQuery {
	query: String
	first: Present
}
type PostsInfoById {
	__typename: String
	onSubredditPost: OnSubredditPost
	authorCommunityBadgeFragment: AuthorCommunityBadgeFragment
	postContentFragment: Unknown
	postFragment: PostFragment
	deletedPostFragment: DeletedPostFragment
}
type TippingStatus {
	isEnabled: Boolean
}
type Outfit {
	__typename: String
	id: String
	sectionId: String
	accessoryIds: [Unknown]
	state: AvatarOutfitState
	capabilityRequired: AvatarCapability
	customizableClasses: [Unknown]
	tags: [Unknown]
	title: String
	subtitle: String
	foregroundImage: ForegroundImage
	backgroundImage: BackgroundImage
	onNFTAvatarOutfit: OnNFTAvatarOutfit
	gqlCatalogInventoryItem: GqlCatalogInventoryItem
}
type AvatarStorefront {
	layout: Layout
}
type SnoovatarIcon {
}
type Node {
	__typename: String
	subredditPickerInfo: SubredditPickerInfo
}
type Edge {
	node: Node
}
type ModNotes {
	pageInfo: PageInfo
	edges: [Unknown]
	totalCount: Int
}
type InvitedModeratorMembers {
	pageInfo: PageInfo
	edges: [Unknown]
}
type SensitiveAdsPreferences {
	isAlcoholAllowed: Boolean
	isDatingAllowed: Boolean
	isGamblingAllowed: Boolean
	isPoliticsAllowed: Boolean
	isPregnancyAndParentingAllowed: Boolean
	isReligionAllowed: Boolean
	isWeightLossAllowed: Boolean
}
type TranslatedContent {
	__typename: String
	translatedCommentContentFragment: TranslatedCommentContentFragment
}
type GetAdvancedSettingsQuery {
	id: String
}
type AnalyticsInfo {
	recommendationAlgorithm: String
}
type NotificationSettingsLayoutByChannel {
	sections: [Unknown]
}
type OnUserChatChannel {
	id: String
	discoveryPhrase: String
	taggedSubreddits: TaggedSubreddits
}
type PreviousActionsPostQuery {
	postKindWithId: String
}
type Data {
	subredditInfoById: SubredditInfoById
}
type Components {
	__typename: String
	appliedStateFragment: AppliedStateFragment
	mainLayoutFragment: MainLayoutFragment
	topFragment: TopFragment
}
type AdEligibility {
	adEligibility: PostAdEligibilityStatus
	expiresAt: Unknown
}
type Data {
	multiContentSearchResults: MultiContentSearchResults
	removedPosts: RemovedPosts
	removedComments: RemovedComments
}
type Emote {
	name: String
	emojiIcon: EmojiIcon
	stickerIcon: StickerIcon
}
type Edge {
	node: Node
}
type Redditor {
	moderatedSubreddits: ModeratedSubreddits
}
type PostSetSettings {
	maxPostsPerPostSet: Int
}
type GetCommunitySubscriptionInfoQuery {
	subredditId: String
	theSameSubredditId: String
	iconSize: Present
}
type YearInReviewPage {
	categories: [Unknown]
}
type Data {
	avatarBuilderCatalog: AvatarBuilderCatalog
}
type SubredditDetails {
	__typename: String
	subredditConnections: SubredditConnections
}
type Fixed_height {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnPayoutReceivedTransaction {
	earnings: Unknown
	gold: Currency
	status: ContributorPayoutStatus
}
type RecapMenuClickOverflow {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type Link {
	text: String
	url: String
}
type CommentById {
	__typename: String
	onComment: OnComment
}
type Crosspost {
	sourceId: String
}
type Text {
	text: String
}
type SocialLinksViewState {
	isLegacy: Boolean
	legacySocialLinks: LegacySocialLinksUiModel
	socialLinks: Unknown
}
type AccountUiModel {
	userId: String
	iconUrl: String
	totalKarma: Boolean
	username: String
	createdUtc: Int
	hasPremium: Boolean
	isEmployee: Boolean
	hasSnoovatar: Boolean
	acceptsChats: Boolean
	snoovatarImg: String
	legacyShowEditButton: Boolean
	legacyEditButtonText: String
	formattedUsername: String
	acceptsFollowers: Boolean
	showSnoovatarCtaIcon: Boolean
	acceptsPrivateMessages: Boolean
	showFollowersListButton: Boolean
	userSubredditUiModel: UserSubredditUiModel
	socialLinksViewState: SocialLinksViewState
	nftCardUiState: Unknown
	accountType: Unknown
	userContributorTier: String
	userGoldBalance: String
	achievementsUIModel: AchievementsUiModel
}
type AchievementsUiModel {
}
type LegacySocialLinksUiModel {
	collapsed: Boolean
	items: Unknown
}
type OneSocialLink {
	socialLink: SocialLink
}
type ManySocialLinks {
	firstSocialLink: SocialLink
}
type ProfileLoadEventInput {
	displayedUserKindWithId: String
	displayedUsername: String
	displayedUserHasAvatar: Boolean
}
type DataToEraseUpperBound {
	typeParameter: Unknown
	typeAttr: JavaTypeAttributes
}
type UserSubredditUiModel {
	id: String
	isMod: Boolean
	isNsfw: Boolean
	iconImg: String
	subscribers: Int
	displayName: String
	title: String
	iconSize: MediaSize
	bannerImage: String
	isSubscribed: Boolean
	bannerSize: MediaSize
	keyColorString: String
	verified: Boolean
	description: String
}
type OnboardingClick {
	noun: String
	correlationId: String
	post: Post
	listing: Unknown
	oauth: Unknown
	userPreferences: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	profile: Unknown
	onboarding: Onboarding
	userSubreddit: Unknown
	search: Unknown
	setting: Setting
	metaSearch: Unknown
	popup: Unknown
	targetUser: User
	topicMetadata: Unknown
	snoovatar: Unknown
	experiment: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type BannedClick {
	noun: String
	post: Post
	comment: Comment
	userPreferences: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	userSubreddit: UserSubreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type EnterNewPasswordClickBack {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type AddUsersComponentProperties {
	searchUserHint: String
	addUserButtonLabel: String
}
type SearchUserResult {
	id: String
	prefixedName: String
	iconUrl: String
}
type Initial {
	userIds: [Unknown]
}
type ValueInterpolator {
}
type Processor {
}
type MultiContentReportingItem {
	type: Unknown
	id: String
	postTitle: String
	commentText: String
	avatarUrl: String
	thumbnailUrl: String
	thumbnailCommentUrl: String
	prefixedItemName: String
	age: String
	commentsCount: String
	votesCount: String
	isNsfw: Boolean
	shouldBlurNsfw: Boolean
	isSpoiler: Boolean
	flairText: String
	flairTextColor: String
	flairBackground: String
	videoUrl: String
	videoDuration: String
	galleryItemsCount: String
	isPollPost: Boolean
	isSelfPost: Boolean
	domain: String
	crossPostDomain: String
	isModRemoved: Boolean
	isAdminTakedown: Boolean
	createdAt: Int
}
type PopupCloseEmailCollection {
	userPreferences: Unknown
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type PlaceHomeScreenShortcutCommunity {
	source: String
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PostStatusUI {
	data: PostStatus
	canModeratePost: Boolean
	promoted: Boolean
	onEvent: Unknown
}
type UserPreferencesDeselect {
	noun: String
	userPreferences: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type Initial {
	selectedMultiContentReportingList: Unknown
	subredditName: String
	authorName: String
	authorId: String
	selectLimit: Float
	reporterIsModerator: Boolean
	reportedThingId: String
	errorLoadingContentTitle: String
	errorLoadingContentDescription: String
}
type AndroidStorage {
	appBytes: Int
	cacheBytes: Int
	dataBytes: Int
	externalCacheBytes: Int
}
type GlobalStorageApp {
	androidStorage: AndroidStorage
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type Failure {
}
type PostDetailEventContext {
	publishEvent: Unknown
}
type Downloading {
	current: Int
	total: Int
	indeterminate: Boolean
}
type PostCarouselElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	postCarouselComponent: PostCarouselComponent
	feedElements: Unknown
}
type Snoovatar {
	asset: Unknown
	direction: Unknown
	appearance: Unknown
}
type CommunityImage {
	uri: String
	communityPrimaryColor: Unknown
	fallback: Unknown
}
type UserImage {
	uri: String
	preferredDirection: Unknown
}
type RightFacingFullBody {
	uri: String
	isNft: Boolean
}
type GeneratedDefault {
	uri: String
}
type Data {
	distributionCampaignChoices: [Unknown]
	identity: Identity
}
type PhoneAuthVerifyPasswordClickCheckPassword {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ImageState {
	filePath: String
	originalFilePath: String
	caption: String
	link: String
	imageInfo: Unknown
}
type ImageItemViewState {
	filePath: String
	link: String
	caption: String
	originalFilePath: String
}
type Post {
	id: String
}
type Subreddit {
	id: String
}
type Comment {
	id: String
}
type MarketplaceGoldPurchase {
	action: String
	noun: String
	subreddit: Subreddit
	post: Post
	comment: Comment
	newAward: NewAward
	payment: Payment
	marketplace: Marketplace
	actionInfo: ActionInfo
	correlationId: String
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PhoneAuthEnterPhoneSelectCountryCode {
	actionInfo: ActionInfo
	setting: Setting
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type AchievementsView {
	noun: String
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type SubredditSelectorViewCommunityRecommendations {
	correlationId: String
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PhoneAuthVerifyPasswordClickForgotPassword {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type SettingsPrivacySaveReceiveChatInvites {
	actionInfo: Unknown
	setting: Setting
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type PopupCloseVerification {
	userPreferences: Unknown
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type ModmanagementClick {
	noun: String
	subreddit: Subreddit
	actionInfo: ActionInfo
	chat: Unknown
	userSubreddit: UserSubreddit
	setting: Setting
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type CommentsAdMutations {
	isVideoExpanded: Boolean
	thumbnailHeight: Unknown
}
type PinnedPostsSection {
	element: PinnedPostsElement
	pinnedPostsGroupUiModel: PinnedPostsGroupUiModel
}
type PollProps {
	linkIdWithKind: String
}
type CommunityHighlightsSection {
	element: Unknown
}
type User {
	id: String
	createdTimestamp: Int
	loggedIn: Boolean
	cookieCreatedTimestamp: Int
	hasPremium: Boolean
	isPremiumSubscriber: Boolean
	previousId: String
	isEmployee: Boolean
	name: String
	suspect: Boolean
	disenfranchised: Boolean
	inTimeout: Boolean
	neutered: Boolean
	loggedInId: String
	isAdminModeEnabled: Boolean
	email: String
}
type TranslateButtonEvent {
	source: String
	action: String
	noun: String
	actionInfo: ActionInfo
	subreddit: Subreddit
	post: Post
	comment: Comment
	correlationId: String
	survey: Survey
	setting: Setting
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type TopCommentPreview {
	authorIconUrl: String
	authorDisplayName: String
	createdAtRelativeString: String
	commentContentPreview: String
	voteCountLabel: String
	permalink: String
}
type PostSetPostAuthor {
	id: String
	name: String
	icon: MediaSource
	prefixedName: String
}
type PostSetCardData {
	sharedInText: String
	shareIconStatus: Unknown
	communitiesData: [Unknown]
	sharedInButtonOnClickAction: Unknown
	shareButtonOnClickAction: Unknown
	communitiesButtonOnClickAction: Unknown
}
type Video {
	url: String
}
type Error {
	throwable: Unknown
}
type ImportantReminderItemState {
	visible: Boolean
}
type PostSetPostContent {
	html: String
	markdown: String
}
type KarmaUIModel {
	kindWithId: String
	iconUrl: String
	bannerUrl: String
	subreddit: String
	subredditPrefixed: String
	keyColor: String
	linkKarma: Boolean
	userIsSubscriber: Boolean
	postKarmaFormattedText: String
	commentKarmaFormattedText: String
}
type SelectAllCommunitiesState {
	totalCommunities: Boolean
	visible: Boolean
}
type CommunitiesListState {
	visible: Boolean
	listOfFilteredCommunities: [Unknown]
	hiddenCommunitiesId: Unknown
	loading: Boolean
}
type ActiveInToggleState {
	enabled: Boolean
	isChecked: Boolean
}
type CreatorStatTrendData {
	value: String
}
type Error {
	throwable: Unknown
}
type MediaSource {
	url: String
}
type Subreddit {
	subredditId: String
	prefixedName: String
	icon: String
	permalink: String
}
type SearchItemState {
	inSearchMode: Boolean
	searchText: String
	visible: Boolean
}
type CreatorStatsPost {
	id: String
	title: String
	thumbnailUrl: String
	communityId: String
	communityName: String
	communityIconUrl: String
	age: Int
	permalink: String
	isOwnPost: Boolean
	createdAtRelativeString: String
	score: Int
	commentCount: Boolean
	isNsfw: Boolean
	isSpoiler: Boolean
}
type Animated {
	mediaSource: MediaSource
}
type Clear {
	mediaSource: MediaSource
}
type FollowersToggleState {
	enabled: Boolean
	isChecked: Boolean
}
type PostSet {
	id: String
	posts: [Unknown]
	defaultPost: PostSetPost
}
type HiddenCommunitiesState {
	resourceId: Boolean
}
type ShowAllContributionsToggleState {
	checked: Boolean
	visible: Boolean
}
type CreatorStats {
	id: String
	trends: CreatorStatsTrends
	postInfo: CreatorStatsPost
	viewTotals: CreatorStatsTotals
	crossPostInfo: Unknown
	shareAllTotals: CreatorStatsTotals
	shareCopyTotals: CreatorStatsTotals
	awardUrls: Unknown
	topComment: TopCommentPreview
	lowEngagement: Boolean
}
type PostSetPost {
	id: String
	title: String
	age: Int
	url: String
	shareCount: String
	commentsCount: Boolean
	textBody: String
	createdAt: String
	permalink: String
	isOwnPost: Boolean
	isSpoiler: Boolean
	type: Unknown
	isQuarantined: Boolean
	isScoreHidden: Boolean
	author: PostSetPostAuthor
	content: PostSetPostContent
	postLocation: Unknown
	media: [Unknown]
	voteState: Unknown
}
type CreatorStatsTotals {
	total: CreatorStatsAvailability
}
type Success {
	stats: CreatorStats
}
type UpdateDataError {
	updateError: Unknown
}
type Profile {
	id: String
	name: String
	prefixedName: String
	icon: MediaSource
}
type Success {
	postId: String
	voteState: Unknown
}
type ProfileVisibilityPresentationModel {
	numberOfVisibleCommunities: Boolean
	allContributionHidden: Boolean
	profileVisibilityLocation: Unknown
}
type CreatorStatsTrends {
	availability: CreatorStatsAvailability
	data: Unknown
}
type PostDetailAmaCommentPillViewState {
	state: Unknown
}
type ToggleChange {
	toggle: Unknown
	checked: Boolean
}
type ModViewState {
	modModeEnabled: Boolean
	userIsModerator: Boolean
}
type VisibleCommunitiesViewState {
	communitiesListState: CommunitiesListState
	searchItemState: SearchItemState
	showAllContributionsToggleState: ShowAllContributionsToggleState
	selectAllCommunitiesState: SelectAllCommunitiesState
	importantReminderItemState: ImportantReminderItemState
}
type PostDetailScrollTarget {
	target: Unknown
	animate: Boolean
}
type PostDetailTopAppBarViewState {
	isSearchModeEnabled: Boolean
	isSearchFocused: Boolean
	searchQuery: String
	title: String
	isSubredditName: Boolean
	isPresenceVisible: Boolean
	presenceText: String
	modViewState: ModViewState
	showTranslationSettings: Boolean
	subredditBackgroundColor: String
	isOverflowMenuCoachmarkVisible: Boolean
}
type ProfileEmptyFeedPresentationModel {
	targetFeed: Unknown
	profileName: String
	isFiltered: Boolean
}
type Floating {
}
type Obfuscated {
	mediaSource: MediaSource
}
type PostSetCommunityData {
	id: String
	name: String
	icon: String
	upvoteCount: String
	commentCount: String
}
type CreatorStatsAvailability {
	isAvailable: Boolean
	availableAt: String
}
type Subreddit {
	id: String
	name: String
	prefixedName: String
	icon: MediaSource
}
type NSFWToggleState {
	enabled: Boolean
	isChecked: Boolean
}
type Success {
	postSet: PostSet
}
type Profile {
	profileId: String
	prefixedName: String
	icon: String
	permalink: String
}
type ProfileVisibilityViewState {
	nsfwToggleState: NSFWToggleState
	activeInToggleState: ActiveInToggleState
	followersToggleState: FollowersToggleState
	hideAllCommunitiesState: HiddenCommunitiesState
}
type Cta {
	__typename: String
	searchAdjustNsfwSettingsBehaviorFragment: SearchAdjustNsfwSettingsBehaviorFragment
	searchExternalNavigationBehaviorFragment: Unknown
	searchActivateModifierBehaviorFragment: SearchActivateModifierBehaviorFragment
}
type Telemetry1 {
	__typename: String
	searchComponentTelemetryFragment: SearchComponentTelemetryFragment
}
type Telemetry3 {
	__typename: String
	searchComponentTelemetryFragment: SearchComponentTelemetryFragment
}
type OnSearchBannerDefaultPresentation {
	ctaText: String
	primaryText: String
	secondaryText: String
}
type TrackingContext {
	__typename: String
	searchTrackingContextFragment: SearchTrackingContextFragment
}
type Presentation {
	__typename: String
	onSearchErrorMessageDefaultPresentation: OnSearchErrorMessageDefaultPresentation
}
type RootCommunity {
	__typename: String
	searchCrosspostBehaviorFragment: SearchCrosspostBehaviorFragment
}
type OnSearchPDPNavigationBehavior {
	id: String
	telemetry: Telemetry
}
type DynamicSearchErrorFragment {
	presentation: Presentation
	behaviors: Behaviors
	telemetry: Telemetry
}
type SearchAdjustNsfwSettingsBehaviorFragment {
	telemetry: Telemetry
}
type DynamicSearchSpellcheckFragment {
	behaviors: Behaviors
	presentation: Presentation
}
type Telemetry {
	__typename: String
	searchComponentTelemetryFragment: SearchComponentTelemetryFragment
}
type Post {
	__typename: String
	postFragment: PostFragment
}
type OnSubredditPost {
	id: String
	title: String
	content: Content
	authorInfo: AuthorInfo
}
type SearchCommunityFragment {
	community: Community
	behaviors: Behaviors
	presentation: Presentation
	telemetry: Telemetry1
}
type PackagedMediaAuthFragment {
	authInfo: AuthInfo
	muxedMp4s: MuxedMp4s
}
type Telemetry {
	__typename: String
	searchComponentTelemetryFragment: SearchComponentTelemetryFragment
}
type Telemetry {
	__typename: String
	searchComponentTelemetryFragment: SearchComponentTelemetryFragment
}
type Cta {
	__typename: String
	searchFocusBehaviorFragment: SearchFocusBehaviorFragment
	searchRetryBehaviorFragment: SearchRetryBehaviorFragment
}
type SearchCrosspostFragment {
	post: Post
	behaviors: Behaviors
	telemetry: Telemetry
}
type TopFragment {
	top: Top
}
type Expand {
	__typename: String
	searchTypeaheadListBehavior: SearchTypeaheadListBehavior
}
type OnSearchCommunityDefaultPresentation {
	name: String
}
type SearchElementTelemetry {
	events: [Unknown]
	trackingContext: TrackingContext
}
type ModeratorsInfo {
	edges: [Unknown]
}
type SearchPostBehaviorFragment {
	__typename: String
	onSearchPDPNavigationBehavior: OnSearchPDPNavigationBehavior
	onSearchMediaNavigationBehavior: OnSearchMediaNavigationBehavior
	onSearchProfileNavigationBehavior: OnSearchProfileNavigationBehavior
	onSearchCommunityNavigationBehavior: OnSearchCommunityNavigationBehavior
}
type Suggestion {
	__typename: String
	onSearchQueryReformulationBehavior: OnSearchQueryReformulationBehavior
}
type AchievementTrophyFragment {
	__typename: String
	id: String
	name: String
	unlockedAt: Unknown
	onAchievementImageTrophy: OnAchievementImageTrophy
	onAchievementRepeatableImageTrophy: OnAchievementRepeatableImageTrophy
}
type LockedImage {
}
type OnSearchQueryReformulationBehavior {
	query: String
	telemetry: Telemetry
}
type Behaviors {
	cta: Cta
}
type Revision {
	authorInfo: AuthorInfo
	revisedAt: Unknown
}
type Content {
	richtext: Unknown
}
type RedditorInfo {
	__typename: String
	id: String
	displayName: String
	onRedditor: OnRedditor
}
type AppliedState {
	__typename: String
	searchAppliedStateFragment: SearchAppliedStateFragment
}
type Telemetry {
	__typename: String
	searchComponentTelemetryFragment: SearchComponentTelemetryFragment
}
type Top {
	filterBar: [Unknown]
	navigation: Navigation
}
type Main {
	__typename: String
	searchTypeaheadListFragment: SearchTypeaheadListFragment
	dynamicSearchBannerFragment: DynamicSearchBannerFragment
}
type ProfilePost {
	id: String
	title: String
	profile: Profile
}
type OnAchievementRepeatableImageTrophy {
	lockedImage: LockedImage1
	image: Image1
}
type RootThumbnail {
	__typename: String
	searchCrosspostBehaviorFragment: SearchCrosspostBehaviorFragment
}
type Telemetry {
	__typename: String
	searchComponentTelemetryFragment: SearchComponentTelemetryFragment
}
type SearchTypeaheadListChildComponentFragment {
	__typename: String
	onQueryAutocomplete: OnQueryAutocomplete
	onTypeaheadSuggestion: OnTypeaheadSuggestion
}
type OnSearchQueryReformulationBehavior {
	query: String
	telemetry: Telemetry
}
type Community {
	__typename: String
	searchPostBehaviorFragment: SearchPostBehaviorFragment
}
type SubredditStylesFragment {
	null: String
	icon: ImagePosition
}
type Presentation {
	__typename: String
	onQueryAutocompleteDefaultPresentation: OnQueryAutocompleteDefaultPresentation
}
type SearchFocusBehaviorFragment {
	telemetry: Telemetry
}
type Collapse {
	__typename: String
	searchTypeaheadListBehavior: SearchTypeaheadListBehavior
}
type RedditorInfoFragment {
	id: String
	displayName: String
	iconSmall: IconSmall
	snoovatarIcon: SnoovatarIcon
}
type Behaviors {
	default: Default
}
type RootDefault {
	__typename: String
	searchCrosspostBehaviorFragment: SearchCrosspostBehaviorFragment
}
type Subreddit {
	id: String
	name: String
	styles: Unknown
}
type Profile {
	title: String
	isNsfw: Boolean
}
type Node {
	id: String
}
type LockedImage1 {
}
type MainLayoutFragment {
	main: Main
}
type OnSearchMediaNavigationBehavior {
	id: String
	telemetry: Telemetry1
}
type Dismiss {
	telemetry: Telemetry
}
type SearchCrosspostBehaviorFragment {
	__typename: String
	onSearchPDPNavigationBehavior: OnSearchPDPNavigationBehavior
	onSearchMediaNavigationBehavior: OnSearchMediaNavigationBehavior
	onSearchProfileNavigationBehavior: OnSearchProfileNavigationBehavior
	onSearchCommunityNavigationBehavior: OnSearchCommunityNavigationBehavior
}
type GqlCatalogInventoryItem {
	inventoryItem: InventoryItem
}
type Presentation {
	__typename: String
	onSearchTypeaheadListCollapsiblePresentation: OnSearchTypeaheadListCollapsiblePresentation
	onSearchTypeaheadListDefaultPresentation: OnSearchTypeaheadListDefaultPresentation
}
type Presentation1 {
	__typename: String
	onTypeaheadSuggestionDefaultPresentation: Unknown
}
type Image {
}
type Telemetry2 {
	__typename: String
	searchElementTelemetry: SearchElementTelemetry
}
type LegacyIcon {
}
type Post {
	__typename: String
	postFragment: PostFragment
}
type Behaviors {
	header: Header
}
type Telemetry2 {
	__typename: String
	searchComponentTelemetryFragment: SearchComponentTelemetryFragment
}
type Image1 {
}
type SubredditWikiPageNodeFragment {
	name: String
	path: String
	depth: Boolean
	parent: String
}
type OnSearchMediaNavigationBehavior {
	id: String
	telemetry: Telemetry1
}
type SearchRetryBehaviorFragment {
	telemetry: Telemetry
}
type OnSearchTypeaheadListCollapsiblePresentation {
	collapsibleTitle: String
}
type OnSearchCommunityNavigationBehavior {
	id: String
	name: String
	telemetry: Telemetry3
}
type Default {
	__typename: String
	onSearchQueryReformulationBehavior: OnSearchQueryReformulationBehavior
}
type OnSearchListComponentDefaultPresentation {
	isDefaultPresentation: Boolean
}
type FilterBar {
	__typename: String
	searchModifierFragment: SearchModifierFragment
}
type OnQueryAutocomplete {
	behaviors: Behaviors
	presentation: Presentation
	telemetry: Telemetry1
}
type Telemetry1 {
	__typename: String
	searchComponentTelemetryFragment: SearchComponentTelemetryFragment
}
type Telemetry2 {
	__typename: String
	searchComponentTelemetryFragment: SearchComponentTelemetryFragment
}
type Behaviors {
	community: Community
	default: Default
	profile: Profile
	rootCommunity: RootCommunity
	rootDefault: RootDefault
	rootProfile: RootProfile
	rootThumbnail: RootThumbnail
}
type ModeratorsInfoFragment {
	moderatorsInfo: ModeratorsInfo
}
type Content {
	__typename: String
	subredditRuleContentFragment: SubredditRuleContentFragment
}
type OnRedditor {
	profile: Profile
}
type Default {
	__typename: String
	searchCrosspostBehaviorFragment: SearchCrosspostBehaviorFragment
}
type Telemetry {
	__typename: String
	searchComponentTelemetryFragment: SearchComponentTelemetryFragment
}
type SubredditWikiPageFragment {
	name: String
	status: SubredditWikiPageStatus
	content: Content
	revision: Revision
}
type SnoovatarIcon {
}
type Telemetry {
	__typename: String
	searchComponentTelemetryFragment: SearchComponentTelemetryFragment
}
type IconSmall {
	__typename: String
	mediaSourceFragment: Unknown
}
type TrackingContext {
	__typename: String
	searchTrackingContextFragment: SearchTrackingContextFragment
}
type AuthorInfo1 {
	displayName: String
}
type Community {
	__typename: String
	searchPostBehaviorFragment: SearchPostBehaviorFragment
}
type Edge {
	node: Node
}
type Telemetry {
	__typename: String
	searchComponentTelemetryFragment: SearchComponentTelemetryFragment
}
type Telemetry {
	__typename: String
	searchComponentTelemetryFragment: SearchComponentTelemetryFragment
}
type MuxedMp4s {
	recommended: Recommended
}
type Behaviors {
	collapse: Collapse
	expand: Expand
}
type Telemetry1 {
	__typename: String
	searchElementTelemetry: SearchElementTelemetry
}
type Behaviors {
	cta: Cta
	dismiss: Dismiss
}
type OnSearchErrorMessageDefaultPresentation {
	ctaButtonText: String
	explanation: String
	icon: SearchErrorIcon
	message: String
}
type Telemetry {
	__typename: String
	searchComponentTelemetryFragment: SearchComponentTelemetryFragment
}
type Thumbnail {
	__typename: String
	searchPostBehaviorFragment: SearchPostBehaviorFragment
}
type OnSearchExpandSectionBehavior {
	telemetry: Telemetry
}
type AppliedStateFragment {
	appliedState: AppliedState
}
type Presentation {
	__typename: String
	onSearchBannerDefaultPresentation: OnSearchBannerDefaultPresentation
}
type OnSubreddit {
	id: String
	name: String
	prefixedName: String
	styles: Unknown
	publicDescriptionText: String
	subscribersCount: Boolean
	isQuarantined: Boolean
	isSubscribed: Boolean
}
type SearchPostFragment {
	post: Post
	behaviors: Behaviors
	telemetry: Telemetry
}
type Profile {
	title: String
}
type Default1 {
	__typename: String
	onSearchCommunityNavigationBehavior: Unknown
	onSearchProfileNavigationBehavior: Unknown
}
type Default {
	__typename: String
	searchPostBehaviorFragment: SearchPostBehaviorFragment
}
type Child {
	__typename: String
	searchPostFragment: SearchPostFragment
	searchCommunityFragment: SearchCommunityFragment
	searchCrosspostFragment: SearchCrosspostFragment
	trendingPostComponentFragment: TrendingPostComponentFragment
}
type OnRedditor {
	profile: Profile
	icon: Icon
	snoovatarIcon: SnoovatarIcon
}
type Presentation {
	__typename: String
	onSearchCommunityDefaultPresentation: OnSearchCommunityDefaultPresentation
	onSearchCommunityCompactPresentation: OnSearchCommunityCompactPresentation
}
type DynamicSearchBannerFragment {
	id: String
	presentation: Presentation
	behaviors: Behaviors
	telemetry: Telemetry1
}
type Telemetry {
	__typename: String
	searchComponentTelemetryFragment: SearchComponentTelemetryFragment
}
type Profile {
	__typename: String
	searchPostBehaviorFragment: SearchPostBehaviorFragment
}
type Presentation {
	ctaTextFormatted: String
	suggestion: String
}
type SearchComponentTelemetryFragment {
	events: [Unknown]
	trackingContext: TrackingContext
}
type PageInfo {
	startCursor: String
	hasNextPage: Boolean
	hasPreviousPage: Boolean
	endCursor: String
}
type OnSearchPDPNavigationBehavior {
	id: String
	telemetry: Telemetry
}
type PostFlairFragment {
	type: String
	text: String
	richtext: Unknown
	textColor: FlairTextColor
	template: Unknown
}
type LegacyIcon {
}
type RuleFragment {
	id: String
	name: String
	violationReason: String
	priority: Content
}
type Telemetry4 {
	__typename: String
	searchElementTelemetry: SearchElementTelemetry
}
type PostInfo {
	id: String
	title: String
}
type Navigation {
	__typename: String
	searchNavigationListModifierFragment: SearchNavigationListModifierFragment
}
type OnQueryAutocompleteDefaultPresentation {
	query: String
	suggestion: String
}
type SnoovatarIcon {
	__typename: String
	mediaSourceFragment: Unknown
}
type Telemetry3 {
	__typename: String
	searchComponentTelemetryFragment: SearchComponentTelemetryFragment
}
type Telemetry {
	__typename: String
	searchComponentTelemetryFragment: SearchComponentTelemetryFragment
}
type Event {
	source: String
	action: String
	noun: String
	trigger: SearchTelemetryEventTrigger
}
type Profile {
	__typename: String
	searchCrosspostBehaviorFragment: SearchCrosspostBehaviorFragment
}
type OnSearchCommunityNavigationBehavior {
	id: String
	name: String
	telemetry: Telemetry3
}
type OnTypeaheadSuggestion {
	behaviors: Behaviors1
	presentation: Presentation1
	telemetry: Telemetry4
}
type OnSearchListComponentHeaderPresentation {
	ctaText: String
	headerText: String
}
type Telemetry {
	__typename: String
	searchElementTelemetry: SearchElementTelemetry
}
type Icon {
}
type Artist {
	redditorInfo: RedditorInfo
}
type Telemetry1 {
	__typename: String
	searchComponentTelemetryFragment: SearchComponentTelemetryFragment
}
type Main {
	edges: [Unknown]
	pageInfo: PageInfo
}
type Default {
	__typename: String
	searchPostBehaviorFragment: SearchPostBehaviorFragment
}
type RootProfile {
	__typename: String
	searchCrosspostBehaviorFragment: SearchCrosspostBehaviorFragment
}
type Telemetry {
	__typename: String
	searchComponentTelemetryFragment: SearchComponentTelemetryFragment
}
type Behaviors {
	community: Community
	default: Default
	profile: Profile
	thumbnail: Thumbnail
}
type Behaviors {
	community: Community
	default: Default
}
type Recommended {
}
type LegacyIcon {
}
type DynamicSearchListFragment {
	presentation: Presentation
	behaviors: Behaviors
	children: [Unknown]
}
type Profile {
	name: String
	prefixedName: String
	styles: Unknown
}
type Telemetry {
	__typename: String
	searchElementTelemetry: SearchElementTelemetry
}
type RedditorInfo {
	__typename: String
	id: String
	displayName: String
	onRedditor: OnRedditor
}
type Behaviors1 {
	default: Default1
}
type AuthInfo {
	__typename: String
	mediaAuthInfoFragment: MediaAuthInfoFragment
}
type TargetContentFragment {
	target: Target
}
type SubredditPost {
	id: String
	subreddit: Subreddit
}
type Telemetry1 {
	__typename: String
	searchComponentTelemetryFragment: SearchComponentTelemetryFragment
}
type Edge {
	cursor: String
	node: Node
}
type OnSearchCommunityNavigationBehavior {
	id: String
	name: String
	telemetry: Telemetry
}
type Behaviors {
	suggestion: Suggestion
}
type Presentation {
	__typename: String
	onSearchListComponentDefaultPresentation: OnSearchListComponentDefaultPresentation
	onSearchListComponentHeaderPresentation: OnSearchListComponentHeaderPresentation
}
type Community {
	__typename: String
	onSubreddit: OnSubreddit
}
type DynamicTypeaheadLayout {
	main: [Unknown]
}
type OnComment {
	id: String
	postInfo: PostInfo
	content: Content1
	authorInfo: AuthorInfo1
}
type OnSearchProfileNavigationBehavior {
	id: String
	name: String
	telemetry: Telemetry2
}
type OnSearchProfileNavigationBehavior {
	id: String
	name: String
	telemetry: Telemetry2
}
type RichtextMedium {
	__typename: String
	mediaAssetFragment: MediaAssetFragment
}
type TrendingPostComponentFragment {
	post: Post
	behaviors: Behaviors
	telemetry: Telemetry
}
type Default {
	__typename: String
	onSearchCommunityNavigationBehavior: OnSearchCommunityNavigationBehavior
}
type Node {
	__typename: String
	dynamicSearchListFragment: DynamicSearchListFragment
	dynamicSearchBannerFragment: DynamicSearchBannerFragment
	dynamicSearchErrorFragment: DynamicSearchErrorFragment
	dynamicSearchSpellcheckFragment: DynamicSearchSpellcheckFragment
}
type Event {
	source: String
	action: String
	noun: String
	trigger: SearchTelemetryEventTrigger
}
type AuthorInfo {
	__typename: String
	redditorNameFragment: RedditorNameFragment
}
type Post {
	__typename: String
	postFragment: PostFragment
}
type Target {
	__typename: String
	onSubredditPost: OnSubredditPost
	onComment: OnComment
}
type SubredditRuleContentFragment {
	richtext: Unknown
	richtextMedia: [Unknown]
	typeHint: ContentType
	html: String
	markdown: String
}
type AuthInfo {
	__typename: String
	mediaAuthInfoFragment: MediaAuthInfoFragment
}
type Child {
	__typename: String
	searchTypeaheadListChildComponentFragment: SearchTypeaheadListChildComponentFragment
}
type Content1 {
	markdown: String
	preview: String
}
type SearchTypeaheadListBehavior {
	__typename: String
	onSearchExpandSectionBehavior: OnSearchExpandSectionBehavior
	onSearchCollapseSectionBehavior: OnSearchCollapseSectionBehavior
}
type OnAchievementImageTrophy {
	lockedImage: LockedImage
	image: Image
}
type ApproximationBounds {
	lower: Unknown
	upper: Unknown
}
type OnSearchTypeaheadListDefaultPresentation {
	title: String
}
type InventoryItem {
	id: String
	name: String
	artist: Artist
}
type Telemetry {
	__typename: String
	searchComponentTelemetryFragment: SearchComponentTelemetryFragment
}
type Community {
	__typename: String
	searchCrosspostBehaviorFragment: SearchCrosspostBehaviorFragment
}
type SearchActivateModifierBehaviorFragment {
	telemetry: Telemetry
	modifierID: String
}
type SubredditArenaEvent {
	action: String
	actionInfo: ActionInfo
	arenaInfo: ArenaInfo
	subreddit: Subreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type Content {
	markdown: String
	preview: String
}
type Header {
	__typename: String
	searchFilterBehaviorFragment: SearchFilterBehaviorFragment
}
type GqlStorefrontArtistReduced {
	redditorInfo: RedditorInfo
}
type CheckInboxView {
	noun: String
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type AuthorInfo {
	displayName: String
}
type OnSearchCommunityCompactPresentation {
	name: String
}
type Telemetry3 {
	__typename: String
	searchElementTelemetry: SearchElementTelemetry
}
type Telemetry1 {
	__typename: String
	searchElementTelemetry: SearchElementTelemetry
}
type SearchTypeaheadListFragment {
	id: String
	presentation: Presentation
	behaviors: Behaviors
	children: [Unknown]
}
type Behaviors {
	default: Default
}
type FeedExperienceClick {
	noun: String
	subreddit: Subreddit
	actionInfo: ActionInfo
	communityRecommendationUnit: CommunityRecommendationUnit
	feed: Feed
	topicTag: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type OnSearchCollapseSectionBehavior {
	telemetry: Telemetry1
}
type SessionParams {
	credentials: Credentials
	homeServerConnectionConfig: HomeServerConnectionConfig
	isTokenValid: Boolean
}
type EconExplainer {
	action: String
	noun: String
	actionInfo: ActionInfo
	correlationId: String
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ModmanagementSubmitEventInviteModerator {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type SearchResult {
	nextBatch: String
	highlights: [Unknown]
	results: [Unknown]
}
type EventAndSender {
	event: Event
	sender: UserItem
}
type RecapMenuClickSubredditRecap {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type MessageInboxClick {
	noun: String
	subreddit: Subreddit
	actionInfo: ActionInfo
	chat: Chat
	discoveryUnit: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type SearchFilterBottomSheetDependencies {
	view: Unknown
}
type SearchFilterBottomSheetState {
	title: String
	filterValues: FilterValues
	filterType: String
}
type TranslateButtonToggleSubmit {
	noun: String
	post: Post
	comment: Comment
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type EnterNewPasswordClickContinue {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type PhoneAuthEnterPhoneClickDismiss {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type MachineTranslationsRequestContent {
	actionInfo: ActionInfo
	translationMetrics: TranslationMetrics
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type MethodSignatureData {
	returnType: Unknown
	receiverType: Unknown
	valueParameters: [Unknown]
	typeParameters: [Unknown]
	hasStableParameterNames: Unknown
	errors: [Unknown]
}
type CommunityInviteComposerClickAddModToggle {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userSubreddit: UserSubreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ValueTimeMark {
	reading: Int
}
type UserItem {
	id: String
	displayName: String
	avatarUrl: String
}
type TimedValue {
	value: [Unknown]
	duration: Int
}
type Optional {
	value: RoomAliasDescription
}
type PhoneAuthCreatePasswordSetSetPassword {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type InboxClick {
	noun: String
	post: Unknown
	comment: Unknown
	notification: Notification
	userPreferences: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	message: Unknown
	outbound: Unknown
	metaSearch: Unknown
	banner: Unknown
	topicMetadata: Unknown
	inbox: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type PhoneAuthOtpClickBack {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type RoomTag {
	name: String
	order: Unknown
}
type ChannelManagement {
	channelId: String
	channelName: String
	error: String
	numChannels: Int
	privacyType: String
}
type ActionInfo {
	pageType: String
	paneName: String
	position: Int
	reason: String
	settingValue: String
	sourceName: String
	type: String
}
type Subreddit {
	accessType: String
	categoryName: String
	id: String
	name: String
	nsfw: Boolean
	numberCoins: Int
	quarantined: Boolean
	whitelistStatus: String
}
type JsonConfiguration {
	encodeDefaults: Boolean
	ignoreUnknownKeys: Boolean
	isLenient: Boolean
	allowStructuredMapKeys: Boolean
	prettyPrint: Boolean
	explicitNulls: Boolean
	prettyPrintIndent: String
	coerceInputValues: Boolean
	useArrayPolymorphism: Boolean
	classDiscriminator: String
	allowSpecialFloatingPointValues: Boolean
	useAlternativeNames: Boolean
	namingStrategy: Unknown
	decodeEnumsCaseInsensitive: Boolean
	allowTrailingComma: Boolean
	classDiscriminatorMode: Unknown
}
type Subreddit {
	accessType: String
	categoryName: String
	id: String
	name: String
	nsfw: Boolean
	numberCoins: Int
	quarantined: Boolean
	whitelistStatus: String
}
type Chat {
	blockedUserId: String
	channelName: String
	eventId: String
	existingChannel: Boolean
	id: String
	invitationId: String
	invitationPreviewType: String
	invitationTimestamp: Int
	invitationType: String
	latestMessageTimestamp: Int
	members: Unknown
	messageBody: String
	messageId: Int
	messageLength: Int
	messageType: String
	mxcId: String
	numberBlockedUsers: Int
	numberChannels: Int
	numberMembers: Int
	numberPendingInvites: Int
	numberReplies: Int
	numberRooms: Int
	numberUnreads: Int
	onlineUserCount: Int
	parentEventId: String
	publicChannelName: String
	publicMessageBody: String
	recipientUserId: String
	reportReason: String
	reportedUserId: String
	senderUserId: String
	shownHistory: Boolean
	type: String
	unreadMessages: Boolean
	userAddedMethod: String
	description: String
	discoveryPhrase: String
	taggedSubredditIds: Unknown
	ids: Unknown
	channelId: String
	notifyReason: String
	userIsMod: Boolean
	imageUploadMethod: String
	isMember: Boolean
	requestName: String
	channelIds: Unknown
	messageState: String
	isInHostmode: Boolean
	chatIsFullscreen: Boolean
	isConvertedMarkdown: Boolean
	recipientType: String
	messageLink: String
	linkPreview: String
	unfurledTitle: String
	unfurledImage: String
}
type ActionInfo {
	pageType: String
	reason: String
	type: String
}
type LeaderboardClick {
	noun: String
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ModmodeClick {
	noun: String
	post: Post
	comment: Comment
	userPreferences: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	poll: Unknown
	filter: Filter
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ModmailSwipeUnarchiveThread {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ProfileSettingsSaveProfileViz {
	actionInfo: ActionInfo
	setting: Setting
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PhoneAuthOtpLoginLoginComplete {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PostComposerClickSubredditChoice {
	correlationId: String
	actionInfo: ActionInfo
	subreddit: Subreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type MarketplaceGoldClickStartContributorProgramVerification {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type DevplatformBaseTrace {
	spanName: String
	durationMs: Int
	timeStart: String
	timeEnd: String
	traceId: String
	spanId: String
	parentSpanId: String
	attributes: Unknown
}
type DevPlatformCustomPostInfo {
	postId: String
	blockType: String
	presentationContext: String
	feedType: String
	subredditId: String
	watermark: String
}
type Subreddit {
	id: String
	name: String
	nsfw: Boolean
	quarantined: Boolean
}
type DevPlatform {
	actorId: String
	actorMethod: String
	actorType: String
	appAccountId: String
	appId: String
	appIdea: String
	appName: String
	appSlug: String
	appVersionAbout: String
	appVersionBuildStatus: String
	appVersionId: String
	appVersionNumber: String
	appVersionVisibility: String
	installationId: String
	installationLocation: String
	installationType: String
	isDeveloper: Boolean
	isMod: Boolean
	runtime: String
	cliCommand: String
	cliNewAppTemplate: String
	cliUploadIsInitial: Boolean
	cliUploadIsNsfw: Boolean
	cliUploadIsSuccessful: Boolean
	cliUploadFailureReason: String
	cliRawCommandLine: String
	cliIsValidCommand: Boolean
	cliErrorMessage: String
	cliErrorStack: String
	subredditId: String
}
type ActionInfo {
	pageType: String
	paneName: String
	paneSection: String
	position: Int
	reason: String
	relativePosition: Int
	settingValue: String
	sourceName: String
	success: Boolean
	type: String
}
type TopicTag {
	content: String
}
type ScreenTrace {
	totalFrames: Int
	slowFrames: Int
	frozenFrames: Int
	fpsFramesAbove54: Int
	fpsFrames2854: Int
	fpsFrames128: Int
	fpsFramesBelow1: Int
	totalScrollingFrames: Int
	slowScrollingFrames: Int
	frozenScrollingFrames: Int
	timeToFirstDraw: Int
	timeToFullyInteractive: Int
	cpuUtilization: Int
	cpuTimeMs: Int
}
type DiscoverSubscribeSubredditCard {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ActionInfo {
	pageType: String
	position: Int
}
type Visibility {
	onScreenTimestamp: Int
}
type FeedExperienceImpression {
	noun: String
	subreddit: Subreddit
	actionInfo: ActionInfo
	visibility: Visibility
	communityRecommendationUnit: CommunityRecommendationUnit
	feed: Feed
	topicTag: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ModLogClickModActionDropdown {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userSubreddit: UserSubreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type Media {
	type: String
}
type Post {
	id: String
	type: String
}
type Subreddit {
	name: String
}
type CommunityInviteComposerClickDismiss {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userSubreddit: UserSubreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PerformanceTraceScreen {
	post: Post
	subreddit: Subreddit
	actionInfo: ActionInfo
	media: Media
	experiment: Unknown
	screenTrace: ScreenTrace
	devicePerformance: DevicePerformance
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ActionInfo {
	pageType: String
	reason: String
	sourceName: String
	success: Boolean
	type: String
	entityType: String
	count: Int
	settingValue: String
}
type Subreddit {
	accessType: String
	categoryName: String
	id: String
	name: String
	nsfw: Boolean
	numberCoins: Int
	quarantined: Boolean
	whitelistStatus: String
}
type TaskDescription {
	id: String
	title: String
}
type Subreddit {
	id: String
	name: String
	nsfw: Boolean
}
type SectionDescription {
	id: String
	title: String
}
type CommunityOnboarding {
	action: String
	noun: String
	subreddit: Subreddit
	taskDescription: TaskDescription
	sectionDescription: SectionDescription
	sectionCompletion: Unknown
	moduleStatus: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type DiscoverClick {
	noun: String
	post: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	topicTag: TopicTag
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PostStatsEvent {
	action: String
	noun: String
	post: Post
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type PhoneAuthCreatePasswordSkipSkipSetPassword {
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type UserPreferencesSelect {
	noun: String
	userPreferences: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type DevplatformViewCustomPost {
	action: String
	devplatform: DevPlatform
	devplatformCustomPostInfo: DevPlatformCustomPostInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type GlobalAppLaunch {
	noun: String
	timer: Timer
	appSession: AppSession
	devicePerformance: DevicePerformance
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type GlobalViewScreen {
	correlationId: String
	screenviewId: String
	post: Unknown
	listing: Unknown
	comment: Unknown
	oauth: Unknown
	postFlair: Unknown
	userPreferences: Unknown
	subreddit: Unknown
	actionInfo: ActionInfo
	chat: Unknown
	postComposer: Unknown
	profile: Unknown
	timer: Unknown
	share: Unknown
	userSubreddit: Unknown
	search: Unknown
	postDraft: Unknown
	metaSearch: Unknown
	postEvent: Unknown
	postCollection: Unknown
	brand: Unknown
	topicTag: Unknown
	customFeed: Unknown
	seo: Unknown
	topicMetadata: Unknown
	poll: Unknown
	snoovatar: Unknown
	feed: Unknown
	predictions: Unknown
	navigationSession: Unknown
	modmailConversation: Unknown
	shareUrl: Unknown
	liveAudioRoom: Unknown
	liveAudioUser: Unknown
	media: Unknown
	metaflair: Unknown
	playback: Unknown
	pwa: Unknown
	mlModel: Unknown
	newAward: Unknown
	inbox: Unknown
	experiment: Unknown
	translationMetrics: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type OnboardingView {
	noun: String
	correlationId: String
	post: Post
	listing: Unknown
	oauth: Unknown
	userPreferences: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	profile: Unknown
	onboarding: Onboarding
	userSubreddit: Unknown
	search: Unknown
	adblock: Unknown
	metaSearch: Unknown
	customFeed: Unknown
	topicMetadata: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type Comment {
	authorId: String
	bodyText: String
	contentType: String
	createdTimestamp: Int
	depth: Int
	id: String
	lastEditedTimestamp: Int
	numberGildings: Int
	parentId: String
	postId: String
	score: Int
	type: String
}
type Marketplace {
	choiceId: String
	claimSelectionCount: Int
	configShopHeader: String
	configShopId: String
	discoverCategoryName: String
	error: String
	expressionId: String
	filters: String
	groupId: String
	hasCollectibleCollection: Boolean
	isExpressionEligible: Boolean
	itemId: String
	itemName: String
	itemRarity: String
	itemTokenContractAddress: String
	itemTokenId: String
	linkType: String
	linkUrl: String
	listingCurrency: String
	listingId: String
	listingPrice: Int
	listingQuantity: Int
	nftStatus: String
	nftSubmissionId: String
	nftSubmissionType: String
	nftSubmissionVersionId: String
	offerContext: String
	pageIndex: Int
	previewType: String
	productType: String
	referralSurface: String
	reviewerType: String
	shopBadgeName: String
	sort: Unknown
	userHasSecuredVault: Boolean
	userHasVault: Boolean
	walletAddress: String
	walletAddressTargetOwner: String
}
type ActionInfo {
	count: Int
	pageType: String
	paneName: String
	paneSection: String
	position: Int
	reason: String
	settingValue: String
	type: String
}
type Subreddit {
	accessType: String
	categoryName: String
	id: String
	name: String
	nsfw: Boolean
	numberCoins: Int
	quarantined: Boolean
	whitelistStatus: String
}
type OnboardingDeselectCategory {
	listing: Unknown
	userPreferences: Unknown
	actionInfo: ActionInfo
	onboarding: Onboarding
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type GenderAppSettingsSelectGender {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type Profile {
	id: String
	name: String
	nsfw: Boolean
	type: String
}
type Post {
	age: Int
	archived: Boolean
	authorId: String
	bodyText: String
	commentType: String
	createdTimestamp: Int
	crosspostRootId: String
	domain: String
	flair: String
	id: String
	isAutomated: Boolean
	isEvent: Boolean
	isScheduled: Boolean
	language: String
	nsfw: Boolean
	numberComments: Int
	numberGildings: Int
	numberPostsFromAd: Int
	originalContent: Boolean
	promoted: Boolean
	recommendationSource: String
	recommendationSourceSubredditId: String
	recommendationSourceSubredditName: String
	score: Int
	spoiler: Boolean
	subredditId: String
	subredditName: String
	title: String
	topAwardedType: String
	type: String
	upvoteRatio: Unknown
	url: String
}
type Payment {
	amountInSmallestDenom: Int
	currency: String
	defaultOption: String
	error: String
	localAmountInSmallestDenom: Int
	localCurrency: String
	method: String
	newStatus: String
	oldStatus: String
	paymentId: Int
	productOptions: Unknown
}
type NewAward {
	id: String
	listingPrice: Int
	recipientId: String
	isContentEligible: Boolean
	isAnonymous: Boolean
	hasMessage: Boolean
	animatedAwardsIds: Unknown
	topAwardIconUrl: String
	uxtsExperience: String
	uxtsVariant: String
	groupId: String
}
type CommunityInviteReminderViewCommunityInviteReminder {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type SheetClickWelcomeMessage {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type RichTextMediaDetailsState {
	items: Unknown
}
type MediaDetail {
	status: Unknown
	videoUrl: String
	thumbnail: String
}
type RichTextMediaState {
	props: MediaVanillaProps
}
type AccountSelectorClickContinue {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type ClassRequest {
	classId: Unknown
	typeParametersCount: [Unknown]
}
type MultiFieldValueClassRepresentation {
	underlyingPropertyNamesToTypes: [Unknown]
}
type SubscribeCallbackParams {
	request: Unknown
	response: Unknown
	mode: Unknown
}
type AndroidEvent {
	event: Unknown
}
type FlexGap {
	gutter: Unknown
}
type NodeState {
	node: Unknown
	isContainer: Boolean
	child: Boolean
	synced: Boolean
	constraints: Int
	remeasureState: Unknown
}
type FlexEdges {
	left: Unknown
	top: Unknown
	right: Unknown
	bottom: Unknown
	start: Unknown
	end: Unknown
	horizontal: Unknown
	vertical: Unknown
	all: Unknown
}
type FlexNodeData {
	style: FlexboxStyle
	debugTag: String
	debugDumpFlags: Unknown
	debugLogTag: String
	intrinsicMax: Unknown
	nodeState: NodeState
	depthLayout: Boolean
	multimeasureRequired: Boolean
}
type FlexboxStyle {
	flexDirection: Unknown
	flex: Unknown
	flexGrow: Unknown
	flexShrink: Unknown
	flexBasis: Unknown
	flexWrap: Unknown
	alignItems: Unknown
	alignContent: Unknown
	alignSelf: Unknown
	justifyContent: Unknown
	display: Unknown
	overflow: Unknown
	positionType: Unknown
	aspectRatio: Unknown
	margin: FlexEdges
	padding: FlexEdges
	border: FlexEdges
	position: FlexEdges
	gap: FlexGap
	width: Unknown
	height: Unknown
	minWidth: Unknown
	minHeight: Unknown
	maxWidth: Unknown
	maxHeight: Unknown
}
type Callback {
	success: Unknown
	failure: Unknown
}
type AndroidResponse {
	uiResponse: Unknown
}
type InlineClassRepresentation {
	underlyingPropertyName: Unknown
	underlyingType: Unknown
}
type SnoovatarProps {
	size: Unknown
	onClick: Unknown
	onLongClick: Unknown
}
type Ready {
	content: Unknown
	username: String
	status: Unknown
	size: Unknown
	onClick: Unknown
	onLongClick: Unknown
}
type ModmanagementSubmitEventEditSave {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type CommunityInviteReminderClickJoinCommunity {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type OnMediaUnprocessed {
	ownerId: String
	mediaId: String
}
type SenderInfo {
	userId: String
	displayName: String
	avatarUrl: String
}
type ChannelNavigation {
	action: String
	subreddit: Subreddit
	channelNav: ChannelNav
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type AccountSelectorSkipRecoveryFlow {
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type FooterViewState {
	upvoteCount: String
	commentCount: String
	isScoreHidden: Boolean
	showCreatorStats: Boolean
	expiredCreatorStats: Boolean
	upvoteState: Unknown
}
type UserDrawerClick {
	noun: String
	correlationId: String
	post: Post
	userPreferences: Unknown
	actionInfo: ActionInfo
	profile: Profile
	goldPurchase: Unknown
	snoovatar: Unknown
	marketplace: Marketplace
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type PopupDismiss {
	noun: String
	post: Unknown
	listing: Unknown
	userPreferences: Unknown
	subreddit: Unknown
	actionInfo: ActionInfo
	userSubreddit: Unknown
	popup: Popup
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type PopupClick {
	noun: String
	correlationId: String
	post: Unknown
	listing: Unknown
	comment: Unknown
	userPreferences: Unknown
	subreddit: Unknown
	actionInfo: ActionInfo
	profile: Unknown
	onboarding: Unknown
	userSubreddit: Unknown
	search: Unknown
	outbound: Unknown
	popup: Popup
	socialLink: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type CommunityCreateHomeScreenShortcutCommunity {
	userPreferences: Unknown
	subreddit: Subreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type AchievementsClick {
	noun: String
	actionInfo: ActionInfo
	subreddit: Subreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type ActionInfo {
	foregroundingAction: Boolean
	pageType: String
	paneName: String
	position: Int
	reason: String
	settingValue: String
	success: Boolean
	type: String
}
type SocialLink {
	id: String
	icon: String
	position: String
	type: Unknown
}
type RedditEntity {
	redditEntity: String
	linkType: SocialLinkTypeUiModel
	error: String
}
type ComplexUrl {
	linkType: SocialLinkTypeUiModel
	url: String
	displayText: String
	error: String
}
type UrlWithUsername {
	linkType: SocialLinkTypeUiModel
	username: String
	error: String
}
type SubredditMutingSubreddit {
	action: String
	post: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type SocialLinkTypeUiModel {
	icon: String
	type: Unknown
}
type AddButton {
	id: Unknown
	label: String
}
type UserHoverCardClick {
	noun: String
	correlationId: String
	actionInfo: ActionInfo
	subreddit: Subreddit
	post: Post
	comment: Comment
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ExpandAndCollapseButton {
	id: Unknown
	label: String
}
type ModToolsSave {
	noun: String
	subreddit: Subreddit
	actionInfo: ActionInfo
	setting: Setting
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PollOptionViewState {
	canDelete: Boolean
	option: Unknown
}
type RoomVersionInfo {
	version: String
	status: Unknown
}
type EmailClick {
	noun: String
	correlationId: String
	post: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	email: Email
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type HomeServerCapabilities {
	canChangePassword: Boolean
	canChangeDisplayName: Boolean
	canChangeAvatar: Boolean
	canChange3pid: Boolean
	maxUploadFileSize: Int
	lastVersionIdentityServerSupported: Boolean
	defaultIdentityServerUrl: String
	roomVersions: RoomVersionCapabilities
	canUseThreading: Boolean
	canControlLogoutDevices: Boolean
	canLoginWithQrCode: Boolean
	canUseThreadReadReceiptsAndNotifications: Boolean
	canRemotelyTogglePushNotificationsOfDevices: Boolean
	canRedactEventWithRelations: Boolean
	externalAccountManagementUrl: String
}
type OnboardingSubmit {
	noun: String
	correlationId: String
	post: Post
	oauth: Unknown
	userPreferences: Unknown
	actionInfo: ActionInfo
	onboarding: Onboarding
	email: Unknown
	experiment: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type RoomVersionCapabilities {
	defaultRoomVersion: String
	supportedVersion: Unknown
	capabilities: Unknown
}
type RoomCapabilitySupport {
	preferred: String
	support: Unknown
}
type PostVotesState {
	score: Unknown
	scoreLabel: Unknown
	voteDirection: Unknown
	hideScore: Unknown
	postUnitAccessibilityProperties: PostUnitAccessibilityProperties
	isCompact: Boolean
}
type UpdatePhoneNumberClickLearnMore {
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type DevicePerformance {
	performanceClass: Int
}
type DeactivateAccountSuccessClickOk {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PostVotesProps {
	linkIdWithKind: String
	postUnitAccessibilityProperties: PostUnitAccessibilityProperties
}
type Failure {
	throwable: Unknown
}
type Uploading {
	current: Int
	total: Int
}
type UploadingThumbnail {
	current: Int
	total: Int
}
type NewAwardsPromo {
	action: String
	noun: String
	correlationId: String
	actionInfo: ActionInfo
	post: Post
	goldPurchase: Unknown
	newAward: NewAward
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type User {
	userId: String
	displayName: String
	avatarUrl: String
	stats: UserStats
}
type UserStats {
	memberSince: Int
	messageCount: Int
}
type RecapMenuClickRecapSubreddit {
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type DiscoverViewSubredditCard {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type OnboardingScrollCategory {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type RecapViewUserRecap {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type PlatformMutabilityMapping {
	javaClass: Unknown
	kotlinReadOnly: Unknown
	kotlinMutable: Unknown
}
type PhoneAuthOtpLoginSignupComplete {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type FeedExperienceUnsubscribeSubreddit {
	subreddit: Subreddit
	actionInfo: ActionInfo
	communityRecommendationUnit: CommunityRecommendationUnit
	feed: Feed
	topicTag: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type MutedSubreddit {
	id: String
	subredditName: String
	iconUrl: String
	isMuted: Boolean
}
type BottomDialogPresentationModel {
	iconRes: Unknown
	confirmationText: Boolean
}
type ArenaInfo {
	id: String
	slug: String
}
type CommunityRecommendationUnit {
	id: String
	model: String
	version: String
	recommendationIds: [Unknown]
	recommendationSources: [Unknown]
}
type Feed {
	correlationId: String
}
type ActionInfo {
	pageType: String
	position: Int
	reason: String
	success: Boolean
	type: String
	relativePosition: Int
	paneSection: String
}
type Subreddit {
	id: String
	name: String
	nsfw: Boolean
	numberCoins: Int
	quarantined: Boolean
	recommendationSource: String
}
type ActionInfo {
	pageType: String
	type: String
	reason: String
}
type RecapCard {
	count: Int
	facts: String
	index: Int
	kind: String
	type: String
}
type RemovePhoneNumberClickCancel {
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type MarketplaceGoldViewContributorProgramPage {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type ModLogClickModFilterDropdown {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userSubreddit: UserSubreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type SearchView {
	noun: String
	correlationId: String
	post: Unknown
	listing: Unknown
	comment: Unknown
	userPreferences: Unknown
	subreddit: Unknown
	actionInfo: ActionInfo
	profile: Unknown
	discoveryUnit: Unknown
	userSubreddit: Unknown
	search: Search
	adblock: Unknown
	metaSearch: Unknown
	categoryHeader: Unknown
	poll: Unknown
	postFlair: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type FilterSettingItemUiState {
	title: String
	description: String
}
type ChatAllowlist {
	action: String
	userPreferences: Unknown
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PhoneAuthEnterPhoneClickLearnMore {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type FrequentlyAskedQuestionItem {
	questionTitle: String
	answerDescription: String
}
type Present {
	fragment: PostCarouselFragment
}
type PostSetMediaPreview {
	resolutions: [Unknown]
}
type PostCarouselElementProps {
	id: String
	disableCarousel: Unknown
	subredditName: String
}
type ResetPasswordClickHelp {
	post: Post
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type PostDetailClick {
	noun: String
	correlationId: String
	post: Post
	listing: Listing
	comment: Unknown
	userPreferences: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	media: Media
	profile: Unknown
	userSubreddit: Unknown
	search: Search
	outbound: Unknown
	adblock: Unknown
	targetUser: User
	poll: Poll
	feed: Feed
	navigationSession: NavigationSession
	marketplace: Unknown
	automoderator: Unknown
	parent: Unknown
	snacks: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type CommunityInviteComposerViewCommunityInviteComposer {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type Redditor {
	isPremium: Boolean
	userAvatar: String
	userKarma: String
	username: String
	isEmailVerified: Boolean
}
type SubredditInfoScreenUiModel {
	displayName: String
	wikiEnabled: Boolean
	passCookie: Boolean
	descriptionRtJson: String
	quarantined: Boolean
	quarantineMessageRtJson: String
	displayNamePrefixed: String
}
type RecapMedia {
	url: String
	aspectRatio: Unknown
}
type PostsCarouselCard {
	theme: Unknown
	commonData: CommonData
	title: String
	subtitle: String
	posts: [Unknown]
}
type UserLevel {
	level: String
}
type TopicsCard {
	theme: Unknown
	commonData: CommonData
	title: String
	subtitle: String
	topics: [Unknown]
}
type IntroCard {
	theme: Unknown
	commonData: CommonData
	title: String
	subtitle: String
	yearLoadedText: String
	imageUrl: String
}
type Comment {
	postId: String
	postTitle: String
	subredditName: String
	subredditId: String
	postImageUrl: String
	commentId: String
	commentText: String
	commentImageUrl: String
	commentDeeplink: String
	postImageAspectRatio: Unknown
	commentImageAspectRatio: Unknown
}
type FinalCard {
	theme: Unknown
	commonData: CommonData
	title: String
	subtitle: String
	subredditList: [Unknown]
}
type SubredditCard {
	theme: Unknown
	commonData: CommonData
	title: String
	subtitle: String
	subredditId: String
	subredditName: String
	deeplink: Unknown
	imageUrl: String
}
type ShareCard {
	theme: Unknown
	commonData: CommonData
	title: String
	subtitle: String
	isPremium: Boolean
	level: String
	translatedLevel: String
	subredditList: [Unknown]
	userAvatar: String
	userKarma: String
	username: String
	topicUrl: String
	topicName: String
}
type Topic {
	name: String
	imageUrl: String
}
type SubredditListCard {
	theme: Unknown
	commonData: CommonData
	title: String
	subtitle: String
	subredditList: [Unknown]
}
type Subreddit {
	id: String
	name: String
	isSubscribed: Boolean
	imageUrl: String
}
type GenericCard {
	theme: Unknown
	commonData: CommonData
	title: String
	subtitle: String
	imageUrl: String
}
type CommentCard {
	theme: Unknown
	commonData: CommonData
	title: String
	subtitle: String
	postId: String
	postTitle: String
	subredditName: String
	subredditId: String
	postImageUrl: String
	commentId: String
	commentText: String
	commentImageUrl: String
	commentDeeplink: String
	postImageAspectRatio: Unknown
	commentImageAspectRatio: Unknown
}
type CommentsCarouselCard {
	theme: Unknown
	commonData: CommonData
	title: String
	subtitle: String
	comments: [Unknown]
}
type PostCard {
	theme: Unknown
	commonData: CommonData
	title: String
	subtitle: String
	postId: String
	postDeepLink: String
	postTitle: String
	subredditName: String
	subredditId: String
	postImageUrl: String
	postAspectRatio: Unknown
}
type Post {
	postId: String
	postDeepLink: String
	postTitle: String
	subredditName: String
	subredditId: String
	postImageUrl: String
	postAspectRatio: Unknown
}
type PostStatusProps {
	data: PostStatus
	canModeratePost: Boolean
	promoted: Boolean
	onEvent: Unknown
}
type EditUsernameSuccessPresentationModel {
	avatarModel: Unknown
	textSpan: Unknown
}
type Value {
	value: Boolean
}
type PostSetPostViewState {
	body: String
	title: String
	postId: String
	domain: String
	isOwnPost: Boolean
	permalink: String
	hasPreview: Boolean
	link: String
	type: Unknown
	media: [Unknown]
	footerViewState: FooterViewState
	preview: Unknown
	postIndicators: [Unknown]
	headerViewState: PostSetPostHeaderViewState
}
type ChannelViewChannel {
	subreddit: Subreddit
	channelNav: ChannelNav
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type CommentsFilterBarViewState {
	selectedFilterId: String
	fallbackFilterId: String
	filters: Unknown
}
type UserPresence {
	lastActiveAgo: Int
	statusMessage: String
	isCurrentlyActive: Boolean
	presence: Unknown
}
type CommentFilter {
	id: String
	name: String
}
type SnoovatarModelHistory {
	history: [Unknown]
}
type EventRelationData {
	chunks: [Unknown]
	originalEvent: Event
	nextBatch: String
	prevBatch: String
}
type NewAwardsLeaderboard {
	action: String
	noun: String
	subreddit: Subreddit
	post: Post
	comment: Comment
	actionInfo: ActionInfo
	correlationId: String
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type Comment {
	id: String
}
type ActionInfo {
	pageType: String
	paneName: String
}
type Post {
	id: String
	type: String
}
type Subreddit {
	id: String
}
type PhoneAuthOtpClickResendOtp {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ModmailSelectBulkActionThread {
	listing: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ChannelManagementDeleteChannel {
	subreddit: Subreddit
	chat: Chat
	channelManagement: ChannelManagement
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type RecapScrollCarousel {
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PostDetailView {
	noun: String
	post: Post
	subreddit: Subreddit
	actionInfo: ActionInfo
	poll: Poll
	navigationSession: NavigationSession
	search: Search
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type PhoneAuthEnterPhoneClickDropdown {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type GarlicBreadSwipePinp {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PostClick {
	noun: String
	correlationId: String
	post: Post
	listing: Listing
	comment: Unknown
	postFlair: PostFlair
	userPreferences: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	media: Media
	profile: Unknown
	experiment: Unknown
	userSubreddit: Unknown
	search: Search
	outbound: Unknown
	adblock: Unknown
	metaflair: TopicMetadata
	poll: Poll
	playback: Unknown
	gallery: Unknown
	adClick: Unknown
	feed: Feed
	adMetadata: Unknown
	navigationSession: NavigationSession
	chat: Unknown
	translationMetrics: TranslationMetrics
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type UpdatePhoneNumberClickBack {
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type Popup {
	buttonText: String
	id: String
	text: String
}
type ActionInfo {
	count: Int
	pageType: String
	paneName: String
	paneSection: String
	position: Int
	reason: String
	settingValue: String
	type: String
	success: Boolean
}
type AdminDecision {
	id: String
	decisionReason: Unknown
	privacyViolation: String
}
type CommunityStatusClick {
	noun: String
	actionInfo: ActionInfo
	subreddit: Subreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type Comment {
	id: String
}
type Post {
	id: String
}
type UserHovercardClick {
	noun: String
	correlationId: String
	post: Post
	comment: Comment
	userPreferences: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	chat: Unknown
	profile: Profile
	userSubreddit: Unknown
	search: Unknown
	targetUser: User
	poll: Unknown
	snoovatar: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type Subreddit {
	id: String
}
type NewAwardsReporting {
	action: String
	noun: String
	subreddit: Subreddit
	post: Post
	comment: Comment
	newAward: NewAward
	correlationId: String
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type BlockedAccount {
	id: String
	username: String
	prefixedName: String
	iconUrl: String
	isBlocked: Boolean
}
type ChannelManagementCreateChannel {
	subreddit: Subreddit
	chat: Chat
	channelManagement: ChannelManagement
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type JavaNullabilityAnnotationsStatus {
	reportLevelBefore: Unknown
	sinceVersion: Unknown
	reportLevelAfter: Unknown
}
type NameAndSignature {
	classInternalName: String
	name: Unknown
	parameters: String
	returnType: String
}
type Jsr305Settings {
	globalLevel: Unknown
	migrationLevel: Unknown
	userDefinedLevelForSpecificAnnotation: Unknown
}
type JavaDefaultQualifiers {
	nullabilityQualifier: NullabilityQualifierWithMigrationStatus
	qualifierApplicabilityTypes: Unknown
	definitelyNotNull: Boolean
}
type ResetPasswordClickBack {
	post: Post
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type Params {
	promoted: Boolean
	isModmailReport: Boolean
}
type TopicUiModel {
	id: String
	name: String
	displayName: String
	index: Unknown
}
type SubtopicUiModel {
	id: String
	name: String
	displayName: String
	index: Unknown
	checked: Boolean
}
type ResetPasswordClickRequestPasswordResetEmail {
	post: Post
	actionInfo: ActionInfo
	popup: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type UserflairmanagementClick {
	noun: String
	subreddit: Subreddit
	actionInfo: ActionInfo
	userSubreddit: UserSubreddit
	setting: Setting
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type AppSession {
	id: String
}
type Subreddit {
	subredditNamePrefixed: String
}
type Params {
}
type FeedChainUnit {
	action: String
	noun: String
	actionInfo: ActionInfo
	post: Post
	subreddit: Subreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type DeactivateAccountViewPopup {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type CommunityInviteComposerClickCommunity {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userSubreddit: UserSubreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type CommunityOnboardingViewWelcomeScreen {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type DiscoverUnsubscribeSubredditCard {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type TimelineSettings {
	initialSize: Unknown
	buildReadReceipts: Boolean
	prefetchMembers: Boolean
}
type TimelineEvent {
	root: Event
	localId: Int
	eventId: String
	displayIndex: SenderInfo
	reactionsSummary: [Unknown]
	editSummary: EditAggregatedSummary
}
type Subreddit {
	id: String
}
type PostflairmanagementClick {
	noun: String
	postFlair: PostFlair
	subreddit: Subreddit
	actionInfo: ActionInfo
	userSubreddit: UserSubreddit
	setting: Setting
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type NewAwardsViewAwardOptionsSheet {
	subreddit: Subreddit
	post: Post
	comment: Comment
	correlationId: String
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type InvitationInboxViewInvitation {
	chat: Chat
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type ChannelManagementUpdateChannel {
	subreddit: Subreddit
	channelManagement: ChannelManagement
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type RecapMenuClickUserRecap {
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type DeactivateAccountSuccessViewPopup {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type AddPhoneNumberSubmitEnterNumber {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type DeactivateAccountClickCancel {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PostView {
	noun: String
	correlationId: String
	post: Post
	subreddit: Subreddit
	actionInfo: ActionInfo
	profile: Unknown
	programmatic: Unknown
	feed: Feed
	newAward: NewAward
	chat: Unknown
	devplatform: Unknown
	postFlair: PostFlair
	metaflair: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type NavClick {
	noun: String
	correlationId: String
	post: Unknown
	listing: Unknown
	comment: Unknown
	userPreferences: Unknown
	subreddit: Unknown
	actionInfo: ActionInfo
	profile: Unknown
	userSubreddit: Unknown
	search: Unknown
	goldPurchase: Unknown
	adblock: Unknown
	metaSearch: Unknown
	customFeed: Unknown
	topicMetadata: Unknown
	inbox: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type MutedClick {
	noun: String
	post: Post
	comment: Comment
	userPreferences: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	userSubreddit: UserSubreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type Setting {
	value: String
	values: Unknown
}
type Notification {
	type: String
}
type FilterReference {
	name: String
}
type AddPhoneNumberClickLearnMore {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type Post {
	id: String
	type: String
}
type Post {
	id: String
	authorId: String
	title: String
	bodyText: String
}
type ParticipatedThread {
	roomSummary: RoomSummary
	rootTimelineEvent: TimelineEvent
	threadTimelineEvents: [Unknown]
	lastUpdateTs: Int
	lastReadEventId: String
	unreadCount: Unknown
}
type Filter {
	reference: FilterReference
}
type Search {
	caller: String
	commentIds: Unknown
	conversationId: String
	customFeedId: String
	errorString: String
	filters: String
	impressionId: String
	links: Unknown
	metaFlairId: String
	metaFlairName: String
	modelResponses: String
	nsfw: Boolean
	numberComments: Int
	numberLinks: Int
	numberSubreddits: Int
	numberUsers: Int
	originElement: String
	originPageType: String
	partialResults: Boolean
	postFlairName: String
	protocolName: Unknown
	query: String
	queryId: String
	range: String
	requestedRows: Int
	sort: String
	start: Int
	structureType: String
	subredditId: String
	subredditIds: Unknown
	subredditName: String
	trends: String
	typeaheadActive: Boolean
	userIds: Unknown
	suggestedQueries: Unknown
	interleavingRankerInfo: String
	searchScopeType: String
	searchScopePath: String
	searchScopeId: String
	searchScopeName: String
	scopeType: String
	scopePath: String
	scopeId: String
	scopeName: String
}
type NullabilityQualifierWithMigrationStatus {
	qualifier: Unknown
	isForWarningOnly: Boolean
}
type JavaTypeQualifiers {
	nullability: Unknown
	mutability: Unknown
	definitelyNotNull: Boolean
	isNullabilityQualifierForWarning: Boolean
}
type Subreddit {
	id: String
	name: String
	numberCoins: Int
}
type ActionInfo {
	pageType: String
	position: Int
	reason: String
	settingValue: String
	sourceName: String
	success: Boolean
	type: String
}
type Subreddit {
	categoryName: String
	id: String
	name: String
	nsfw: Boolean
	quarantined: Boolean
}
type Onboarding {
	actionSource: String
	categoryId: String
	categoryName: String
	categoryNameSection: String
	categoryPosition: Int
	id: String
	isSimilarSubreddit: Boolean
	landingPage: String
	numberSubreddits: Int
	numberSubredditsSelected: Int
	passedCaptcha: Boolean
	preSelected: Boolean
	processNotes: String
	recommendedUserName: Boolean
	semanticVersion: String
	subredditId: String
	subredditIsSelected: Boolean
	subredditName: String
	subredditPosition: Int
	subredditsAlreadySelected: Int
	subredditsSelected: Unknown
	successful: Boolean
	userName: String
	validEmailSubmitted: Boolean
}
type Sizes {
}
type AnimationSnapshot {
}
type Post {
	archived: Boolean
	authorId: String
	commentType: String
	createdTimestamp: Int
	crosspostRootId: String
	domain: String
	id: String
	nsfw: Boolean
	numberComments: Int
	numberGildings: Int
	promoted: Boolean
	score: Int
	spoiler: Boolean
	subredditId: String
	subredditName: String
	title: String
	type: String
	upvoteRatio: Unknown
	url: String
}
type OnPresentationModeSwitched {
	newIsComfyModeEnabled: Boolean
}
type CollectionState {
	contentState: Unknown
}
type Empty {
	headerTitle: String
	bodyTitle: String
	bodySubtitle: String
}
type OnOutfitClicked {
	storefrontListingId: String
	analyticsClickData: OutfitAnalyticsClickData
}
type WithResults {
	headerTitle: String
	headerSubtitle: String
	heroImageUrl: String
	authors: Unknown
	items: Unknown
	appendState: Unknown
	listingPresentationType: ListingPresentationType
	showSearchButton: Unknown
	showShareButton: Boolean
}
type CustomFeedCreateHomeScreenShortcutCustomFeed {
	customFeed: CustomFeed
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ActionInfo {
	pageType: String
	paneName: String
	position: Int
	relativePosition: Int
	type: String
	success: Boolean
	reason: String
}
type DevplatformErrorInfo {
	runtimeMessage: String
	runtimeOrigin: String
}
type EnterNewPasswordViewBanner {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type DevplatformRuntimeError {
	devplatform: DevPlatform
	devplatformErrorInfo: DevplatformErrorInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type EventBatch {
	events: [Unknown]
}
type PhoneHomeScreenClick {
	noun: String
	userPreferences: Unknown
	subreddit: Subreddit
	customFeed: CustomFeed
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PostModActionMenuSave {
	noun: String
	post: Post
	subreddit: Subreddit
	actionInfo: ActionInfo
	profile: Unknown
	userSubreddit: UserSubreddit
	setting: Setting
	poll: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type GlobalRelaunchApp {
	action: String
	userPreferences: Unknown
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type MemberSignature {
	signature: String
}
type AddPhoneNumberClickNumberVerify {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ExperimentConfigFetch {
	clientReceiveTimestamp: Int
	clientAssignTimestamp: Int
}
type GlobalExperiments {
	action: String
	experimentConfigFetch: ExperimentConfigFetch
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type CommunityInviteComposerClickModPermission {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userSubreddit: UserSubreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type CommunityOnboardingClickWelcomeScreen {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type RecapClick {
	noun: String
	post: Post
	comment: Comment
	subreddit: Subreddit
	actionInfo: ActionInfo
	recapCard: RecapCard
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type OnGamificationAccomplishmentsMessageData {
	gameID: String
}
type Subscribe {
	id: String
}
type Data1 {
	__typename: String
	onVoteCountUpdateMessageData: OnVoteCountUpdateMessageData
}
type Subscribe {
	__typename: String
	id: String
	onBasicMessage: OnBasicMessage
}
type Data {
	subscribe: Subscribe
}
type StreaksSubscription {
	userId: String
}
type Subscribe {
	__typename: String
	id: String
	onBasicMessage: OnBasicMessage
}
type Subscribe {
	id: String
}
type Subscribe {
	id: String
}
type Data {
	subscribe: Subscribe
}
type Data1 {
	__typename: String
	onCommentCountUpdateMessageData: OnCommentCountUpdateMessageData
}
type Data {
	subscribe: Subscribe
}
type Data {
	subscribe: Subscribe
}
type CreateCommunityCropImageScreenDependencies {
	view: Unknown
	params: Unknown
}
type Subscribe {
	__typename: String
	id: String
	onBasicMessage: OnBasicMessage
}
type OnBasicMessage {
	data: Data1
}
type Timer {
	millis: Int
}
type OnBasicMessage {
	data: Data1
}
type Data {
	subscribe: Subscribe
}
type Data1 {
	__typename: String
	onLLMResponseMessageData: OnLLMResponseMessageData
}
type LocalUserIsTypingSubscription {
	input: SubscribeInput
}
type RemoteUsersAreReadingSubscription {
	input: SubscribeInput
}
type OnPostReadingCountMessageData {
}
type ModeratorSwipe {
	noun: String
	post: Post
	comment: Comment
	subreddit: Subreddit
	actionInfo: ActionInfo
	timer: Timer
	filter: Filter
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type OnBasicMessage {
	data: Data1
}
type RemoteUsersAreOnlineSubscription {
	input: SubscribeInput
}
type CommentCountUpdateSubscription {
	input: SubscribeInput
}
type OnBasicMessage {
	data: Data1
}
type Subscribe {
	__typename: String
	id: String
	onBasicMessage: OnBasicMessage
}
type Subscribe {
	__typename: String
	id: String
	onBasicMessage: OnBasicMessage
}
type OnLLMResponseMessageData {
	postIDs: [Unknown]
	subredditIDs: [Unknown]
	suggestedPrompts: [Unknown]
	choices: [Unknown]
}
type LocalUserIsInChatSubscription {
	input: SubscribeInput
}
type OnBasicMessage {
	data: Data1
}
type Message {
	content: String
}
type Data {
	subscribe: Subscribe
}
type Data {
	subscribe: Subscribe
}
type Data1 {
	__typename: String
	onGamificationAccomplishmentsMessageData: OnGamificationAccomplishmentsMessageData
}
type RemoteUsersAreInChatSubscription {
	input: SubscribeInput
}
type Data {
	subscribe: Subscribe
}
type LocalUserIsOnlineSubscription {
	input: SubscribeInput
}
type OnBasicMessage {
	data: Data1
}
type Data1 {
	__typename: String
	onDevPlatformAppMessageData: OnDevPlatformAppMessageData
}
type Subscribe {
	__typename: String
	id: String
	onBasicMessage: OnBasicMessage
}
type OnCommentCountUpdateMessageData {
}
type DevPlatformSubscription {
	input: SubscribeInput
}
type RemoteUsersAreTypingSubscription {
	input: SubscribeInput
}
type OnVoteCountUpdateMessageData {
}
type Subscribe {
	__typename: String
	onBasicMessage: OnBasicMessage
}
type Data1 {
	__typename: String
	onPostReadingCountMessageData: OnPostReadingCountMessageData
}
type OnBasicMessage {
	data: Data1
}
type LocalUserIsReadingSubscription {
	input: SubscribeInput
}
type Data {
	subscribe: Subscribe
}
type OnModActionMessageData {
	id: String
	createdAt: Unknown
	subredditID: String
	moderatorID: String
	targetID: String
	targetType: Unknown
	action: Unknown
}
type OnPostTypingIndicatorMessageData {
}
type Data {
	subscribe: Subscribe
}
type UserFlairPickerClick {
	noun: String
	correlationId: String
	post: Post
	userPreferences: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	userSubreddit: UserSubreddit
	userFlair: UserFlair
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type OnPostReadingCountMessageData {
}
type OnBasicMessage {
	data: Data1
}
type OnUserOnlineStatusMessageData {
	isOnline: Boolean
}
type OnDevPlatformAppMessageData {
	payload: Unknown
}
type OnBasicMessage {
	data: Data1
}
type OnBasicMessage {
	data: Data1
}
type Subscribe {
	__typename: String
	id: String
	onBasicMessage: OnBasicMessage
}
type Data {
	publish: Publish
}
type Publish {
	ok: Boolean
}
type Data1 {
	__typename: String
	onPostReadingCountMessageData: OnPostReadingCountMessageData
}
type Data {
	subscribe: Subscribe
}
type UpdateGuidesQueryMutation {
	conversationId: String
	content: String
	id: String
}
type VoteCountUpdateSubscription {
	input: SubscribeInput
}
type Data1 {
	__typename: String
	onPostTypingIndicatorMessageData: OnPostTypingIndicatorMessageData
}
type Data1 {
	__typename: String
	onModActionMessageData: OnModActionMessageData
}
type Subscribe {
	__typename: String
	id: String
	onBasicMessage: OnBasicMessage
}
type Data {
	subscribe: Subscribe
}
type Data {
	subscribe: Subscribe
}
type Data {
	subscribe: Subscribe
}
type Data1 {
	__typename: String
	onUserOnlineStatusMessageData: OnUserOnlineStatusMessageData
}
type Choice {
	finishReason: String
	message: Message
}
type ModActionSubscription {
	input: SubscribeInput
}
type Subscribe {
	id: String
}
type GuidesSubscription {
	input: SubscribeInput
}
type Subscribe {
	__typename: String
	onBasicMessage: OnBasicMessage
}
type Listing {
	depth: Int
	length: Int
	links: Unknown
	oldSort: String
	sort: String
	source: String
	geoFilter: String
}
type Visibility {
	offScreenTimestamp: Int
	onScreenTimestamp: Int
	seen: Boolean
}
type Media {
	autoplaySetting: String
	byteRange: String
	caption: String
	captionsPresent: Boolean
	domain: String
	duration: Int
	fileName: String
	format: String
	hasAudio: Boolean
	height: Int
	id: String
	loadTime: Int
	maxTimeServed: Int
	md5: String
	mimetype: String
	orientation: String
	outboundDomain: String
	outboundUrl: String
	packagingFormat: String
	pinned: Boolean
	reactionsEnabled: Boolean
	size: Int
	streamPublicId: String
	time: Int
	type: String
	url: String
	width: Int
	zoomed: Boolean
	loaded: Boolean
}
type Experiment {
	id: Int
	isOverride: Boolean
	name: String
	variant: String
	version: String
}
type OnFeedbackGiven {
	isCorrect: Boolean
	testString: String
}
type ToggleViewState {
	filterEnabled: Boolean
}
type OnChangeTimeFrameSettings {
	banEvasionProtectionRecency: Unknown
	event: Unknown
}
type OnChangeContentAction {
	contentAction: Unknown
	event: Unknown
}
type Feed {
	correlationId: String
	id: String
	referrerCorrelationId: String
	servingPosition: Int
}
type OnChangeConfidenceLevel {
	settingsUiState: ReputationFilterConfidenceSettingsUiState
	event: Unknown
}
type OnFilterTestStringSubmit {
	testString: String
}
type OnModmailToggleChange {
	value: Boolean
}
type OnChangeConfidenceLevel {
	banEvasionConfidenceSettingsUiState: BanEvasionConfidenceSettingsUiState
	event: Unknown
}
type OnToggleChange {
	value: Boolean
}
type OnContentActionChangesFromBottomSheet {
	contentAction: Unknown
}
type OnChangeTargetingLevel {
	harassmentFilterTargeting: Unknown
	event: Unknown
}
type OnConfidenceChangesFromBottomSheet {
	settingsUiState: ReputationFilterConfidenceSettingsUiState
}
type OnToggleChange {
	value: Boolean
}
type OnModmailEnabledChange {
	value: Boolean
}
type OnPermittedWordUpdated {
	newString: String
}
type OnCommentsToggleChange {
	value: Boolean
}
type OnTimeChangeFromBottomSheet {
	banEvasionProtectionRecency: Unknown
}
type OnPostsToggleChange {
	value: Boolean
}
type OnTargetingChangesFromBottomSheet {
	harassmentFilterTargeting: Unknown
}
type OnConfidenceChangesFromBottomSheet {
	banEvasionConfidenceSettingsUiState: BanEvasionConfidenceSettingsUiState
}
type OnFilterTestStringUpdated {
	testString: String
}
type TopicMetadata {
	displayName: String
	id: String
}
type NewAward {
	id: String
	isContentEligible: Boolean
}
type ActionInfo {
	count: Int
	pageType: String
	paneName: String
	position: Int
	reason: String
	retried: Boolean
	settingValue: String
	success: Boolean
	type: String
	pageRequestId: String
}
type TranslationMetrics {
	translationSettingState: String
	targetLanguage: String
}
type MlModel {
	name: String
	features: String
}
type CarouselPostMediaInfo {
	mediaUrl: String
	mediaHint: Unknown
}
type PhoneAuthEnterPhoneClickBack {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type NavigationSession {
	id: String
	referringPageType: String
	source: String
}
type PostFlair {
	id: String
	title: String
}
type Item {
	postId: String
	parentCarouselId: String
	createdAt: String
	title: String
	socialProof: SocialProof
	subredditInfo: AttributionInfo
	mediaInfo: CarouselPostMediaInfo
}
type Poll {
	options: Unknown
	optionsLength: Int
	optionsVoteTotals: Unknown
	type: String
	userVoteText: String
	voteAffectsScore: Boolean
	voteAffectsScoreReason: String
}
type AttributionInfo {
	subredditId: String
	prefixedName: String
	iconUrl: String
}
type Search {
	conversationId: String
	customFeedId: String
	filters: String
	impressionId: String
	metaFlairId: String
	metaFlairName: String
	nsfw: Boolean
	originElement: String
	originPageType: String
	postFlairName: String
	query: String
	queryId: String
	range: String
	sort: String
	structureType: String
	subredditId: String
	subredditName: String
	typeaheadActive: Boolean
}
type PostCarouselComponent {
	id: String
	title: String
	type: Unknown
	uxTargetingExperience: Unknown
	uxVariantId: String
	items: Unknown
}
type SocialProof {
	commentCount: String
	voteCount: String
}
type Subreddit {
	accessType: String
	categoryName: String
	id: String
	name: String
	nsfw: Boolean
	numberCoins: Int
	postDifficultyRating: String
	quarantined: Boolean
	whitelistStatus: String
}
type Post {
	age: Int
	archived: Boolean
	authorId: String
	bodyText: String
	commentType: String
	createdTimestamp: Int
	crosspostRootId: String
	domain: String
	flair: String
	id: String
	isAutomated: Boolean
	isEvent: Boolean
	isScheduled: Boolean
	language: String
	nsfw: Boolean
	numberComments: Int
	numberGildings: Int
	numberPostsFromAd: Int
	originalContent: Boolean
	pinned: Boolean
	pinnedInd: Boolean
	postSetCount: Int
	promoted: Boolean
	recommendationSource: String
	recommendationSourceSubredditId: String
	recommendationSourceSubredditName: String
	score: Int
	spoiler: Boolean
	subredditId: String
	subredditName: String
	title: String
	topAwardedType: String
	translationLanguage: String
	translationState: Boolean
	type: String
	upvoteRatio: Unknown
	url: String
	views: Int
	contentDuration: Int
	impressionId: String
	highlighted: Boolean
}
type ReportClosed {
	eventId: String
}
type Setting {
	oldValue: String
	value: String
}
type Video {
	videoUrl: String
}
type Image {
	filePaths: [Unknown]
}
type Text {
	body: String
}
type PostSubmitDeepLinkParams {
	title: String
	subreddit: String
	postContent: Unknown
	removedFromSubreddit: String
}
type ResetPasswordViewBanner {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type Community {
	isProfile: Boolean
	communityId: String
	displayName: String
	isModerator: Boolean
	isSpoilerEnabled: Boolean
	communityIcon: String
	publicDescription: String
	linkFlairs: [Unknown]
	postFlairsEnabled: Boolean
	canAssignLinkFlair: Boolean
	primaryColor: String
	permissions: Unknown
	postRequirements: Unknown
	allAllowedPostTypes: [Unknown]
	isCrosspostDestination: Boolean
	isCrosspostingAllowed: Boolean
	prefixedName: String
	userCanPost: Boolean
	postGuidanceEnabled: Boolean
	detectedLanguage: String
	userIsBanned: Boolean
	isNsfw: Boolean
	canAmaPost: Boolean
	subscribersCount: Int
	activeCount: Int
	karmaPilotEligibility: KarmaPilotEligibility
	isPlaceholder: Boolean
	recommendationCount: Boolean
	createdUtc: Int
	isClubContentEnabled: Boolean
}
type Link {
	url: String
}
type LinkWithBodyText {
	body: String
	url: String
}
type Rule {
	isMet: Boolean
	type: Unknown
}
type KarmaPilotEligibility {
	isUserAllowed: Boolean
	isAllRulesRequired: Boolean
	rules: [Unknown]
	communityPostKarma: Boolean
}
type EditAggregatedSummary {
	latestContent: Unknown
	sourceEvents: [Unknown]
	localEchos: [Unknown]
	lastEditTs: Int
	collapsed: Boolean
	collapseReason: String
	approved: Boolean
	reportReasons: [Unknown]
	urlPreviewSummary: UrlPreviewSummary
}
type ReportOpened {
	eventId: String
	position: String
	threadId: String
}
type RoomMemberSummary {
	membership: Unknown
	userId: String
	userPresence: UserPresence
	displayName: String
	avatarUrl: String
}
type ReactionAggregatedSummary {
	key: String
	count: Boolean
	firstTimestamp: Int
	sourceEvents: [Unknown]
	localEchoEvents: [Unknown]
}
type DeactivateAccountClickLearnMore {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type RoomSummary {
	roomId: String
	displayName: String
	name: String
	topic: String
	avatarUrl: String
	canonicalAlias: String
	aliases: Unknown
	joinRules: Unknown
	isDirect: Boolean
	directUserId: String
	directUserPresence: UserPresence
	joinedMembersCount: Int
	invitedMembersCount: Int
	latestPreviewableEvent: TimelineEvent
	lastActivityTime: Int
	heroesIds: Unknown
	notificationCount: Boolean
	tags: Unknown
	membership: Unknown
	versioningState: Unknown
	readMarkerId: String
	userDrafts: Unknown
	isEncrypted: Boolean
	encryptionEventTs: Int
	inviterId: String
	inviterDisplayName: String
	roomType: String
	migrationStatus: String
	migratedChatId: String
	parentSpaces: Unknown
	childSpaces: Unknown
	channelInfo: String
	subredditInfo: String
	isHidden: Boolean
	peekExpire: Int
	powerLevel: Boolean
	roleInvite: String
	inviteSpamStatus: Unknown
}
type Label {
	name: String
}
type BarValue {
	y: Boolean
}
type LabelBounds {
}
type ChartData {
	yLabels: Unknown
	xLabels: Unknown
	barValues: Unknown
}
type SessionParamsEntity {
	userId: String
	sessionId: String
	credentialsJson: String
	homeServerConnectionConfigJson: String
	isTokenValid: Boolean
	date: Int
}
type CommunityInviteReminderClickDeclineInvite {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PhoneAuthCreatePasswordSubmitSetPassword {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type AdminNotificationSettingsClick {
	noun: String
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type CollectionItem {
	uiModel: StorefrontOutfitUiModel
	analyticsClickData: OutfitAnalyticsClickData
}
type SmsAccountSettingsEnableNotification {
	notification: Notification
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type SortHeaderPresentationModel {
	sortType: Unknown
	sortTimeFrame: Unknown
	viewMode: Unknown
	geopopularTitle: String
	isModSubreddit: Boolean
	modEnabled: Boolean
	isVisible: Boolean
}
type PlaceholderPresentationModel {
	placeholderColor: Int
	placeholderIcon: String
	placeholderPosition: String
	showCustomPlaceholderIcon: Boolean
}
type RecapCard {
	index: Int
	count: Int
	type: String
	facts: String
	kind: String
}
type ShareClick {
	noun: String
	post: Unknown
	listing: Unknown
	comment: Unknown
	userPreferences: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	chat: Chat
	share: Unknown
	search: Unknown
	feed: Unknown
	recapCard: RecapCard
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type Error {
	shouldHandleBack: Unknown
}
type Post {
	id: String
	type: String
}
type Loading {
	shouldHandleBack: Unknown
}
type RecapViewCard {
	subreddit: Subreddit
	actionInfo: ActionInfo
	recapCard: RecapCard
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type Comment {
	id: String
}
type NewAwardsAwardSheet {
	action: String
	noun: String
	subreddit: Subreddit
	post: Post
	comment: Comment
	correlationId: String
	newAward: NewAward
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type Loaded {
	isViewingAsAnonymous: Boolean
	isSSREnabledForProfile: Boolean
	currentProfile: AccountUiModel
	profileToDisplay: AccountUiModel
	headerState: Unknown
	shouldHandleBack: Unknown
}
type Subreddit {
	id: String
}
type DevplatformTraceRuntime {
	devplatform: DevPlatform
	devplatformBaseTrace: DevplatformBaseTrace
	devplatformRuntimeTraceInfo: DevplatformRuntimeTraceInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type InvitationInboxClickInvitationDecline {
	userPreferences: Unknown
	actionInfo: ActionInfo
	chat: Chat
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type PhoneAuthVerifyPasswordClickSendOtpCodeInstead {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type Custom {
}
type ApiResponse {
	responseCode: Int
	error: String
}
type CommunityDrawerEvent {
	action: String
	noun: String
	correlationId: String
	subreddit: Subreddit
	actionInfo: ActionInfo
	userSubreddit: UserSubreddit
	apiResponse: ApiResponse
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type InvitationInboxClickInvitationAccept {
	userPreferences: Unknown
	actionInfo: ActionInfo
	chat: Chat
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type ModqueueHitlFilterFeedback {
	action: Unknown
	userLegacyId: String
	actionInfo: Unknown
	comment: Filter
	post: Post
	subreddit: Subreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type BuilderPresentationModel {
	tabs: [Unknown]
	canVaultBeSecured: Boolean
}
type MePresentationModel {
	myAppearancePresentationModelList: [Unknown]
	myStuff: MyStuffPresentationModel
	pastOutfits: [Unknown]
}
type StorefrontPresentationModel {
	featured: Unknown
}
type OutfitListPresentationModel {
	id: String
	title: String
	items: [Unknown]
}
type AccessoryExpiryPresentationModel {
	isUrgent: Boolean
	text: String
}
type StylePresentationModel {
	items: [Unknown]
}
type AccessoryPresentationModel {
	id: String
	state: Unknown
	accessoryType: Unknown
	limitedAccessType: Unknown
	isSelected: Boolean
	userStyles: Unknown
	assets: Unknown
	expiryModel: AccessoryExpiryPresentationModel
}
type MyAppearancePresentationModel {
	id: Unknown
	tileTitle: String
	tileImg: Regular
}
type Regular {
	colorPickers: Unknown
	accessories: Unknown
	sectionTitle: String
}
type V2StylePresentationModel {
	items: [Unknown]
	tabId: String
}
type MyStuffPresentationModel {
	items: [Unknown]
}
type OutfitsPresentationModel {
	outfitLists: [Unknown]
}
type NftOutfitPresentationModel {
	id: String
	inventoryId: String
	title: String
	outfitComponents: Regular
	renderable: RenderableUiModel
	artistName: String
	listTitle: String
	backgroundImageUrl: String
	nftMetadata: NftMetadata
}
type RegularOutfitPresentationModel {
	id: String
	inventoryId: String
	title: String
	outfitComponents: Regular
	listTitle: String
	imageUrl: String
	isPremium: Boolean
}
type BuilderData {
	constantBuilderModel: ConstantBuilderModel
	accountModel: AccountModel
}
type Available {
	capacityLeft: Int
}
type BuilderDataError {
	constantModelError: Unknown
	accountError: Unknown
}
type ConstantBuilderModel {
	categories: [Unknown]
	defaultAccessories: [Unknown]
	runways: [Unknown]
	pastOutfits: [Unknown]
	nftOutfits: [Unknown]
	distributionCampaigns: [Unknown]
	nftBackgrounds: [Unknown]
}
type ColorPickerPresentationModel {
	colorPickerDataSet: ColorPickerDataSet
	associatedCssClass: String
}
type Owned {
	capacityLeft: Int
}
type NftListingOutfitPresentationModel {
	id: String
	inventoryId: String
	title: String
	outfitComponents: Regular
	foregroundImage: String
	backgroundImage: String
	outfitId: String
	nftMetadata: NftMetadata
	status: Unknown
	listingAnalyticsData: SnoovatarStorefrontListingAnalyticsData
	ownedOutfit: AccessoryModel
}
type StyleItemPresentationModel {
	id: Unknown
	tileTitle: String
	tileImg: Regular
}
type ExplorePresentationModel {
	outfitLists: [Unknown]
}
type PostSubmitParams {
	community: Community
	deeplinkParams: PostSubmitDeepLinkParams
	correlationId: String
	linkId: String
	postSetId: String
}
type V2StyleItemPresentationModel {
	id: Unknown
	section: Regular
}
type ModToolsClick {
	noun: String
	userPreferences: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	userSubreddit: UserSubreddit
	setting: Setting
	topicTag: Unknown
	postFlair: PostFlair
	timer: Timer
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type ContentAttachmentData {
	size: Int
	duration: Int
	date: Int
	height: Int
	width: Int
	exifOrientation: String
	queryUri: Unknown
	mimeType: String
	type: Unknown
	waveform: [Unknown]
}
type Params {
	txID: String
	roomId: String
	threadId: String
	eventId: String
	reason: String
	withRelations: [Unknown]
}
type Params {
	event: Event
}
type AggregatedPotentiallyToxicContent {
	reason: String
	collapse: Boolean
	attributes: Unknown
}
type LatestThreadUnsignedRelation {
	limited: Boolean
	count: Int
	event: Event
	isUserParticipating: Boolean
	heroesUserIds: [Unknown]
}
type UrlPreviewRedactEvent {
	relatesTo: RelationDefaultContent
}
type UrlPreviewEvent {
	type: String
	eventId: String
	content: UrlPreviewContent
}
type UrlPreviewMetadata {
	linkType: String
	uri: String
	topic: String
	numberOfUpvotes: Int
	numberOfComments: Int
}
type UrlPreviewResponse {
	description: String
	title: String
	imageUrl: String
	preliminaryImage: String
	imageHeight: Int
	imageWidth: Int
	metadata: UrlPreviewMetadata
}
type UnsignedData {
	age: Int
	redactedEvent: Event
	redactedContent: Unknown
	keepRedactedContent: Boolean
	transactionId: String
	prevContent: Unknown
	relations: AggregatedRelations
	replacesState: String
	isDirect: Boolean
	inviteRoomState: [Unknown]
	redelivered: Boolean
	annotationCount: Int
	isSentByModerator: Boolean
	originalSender: String
	onBehalfOf: Unknown
	introductionMessage: Boolean
}
type UserAccountDataThreadsContent {
	threads: [Unknown]
}
type UrlPreviewContent {
	relatesTo: RelationDefaultContent
	url: String
	image: String
	title: String
	description: String
	imageType: String
	imageSize: Int
	imageHeight: Int
	imageWidth: Int
	metadata: UrlPreviewMetadata
}
type UserAccountDataEvent {
	type: String
	content: Unknown
}
type UserAccountDataThreadEvent {
	roomId: String
	parentEventId: String
	lastUpdateTs: Int
}
type AggregatedReplace {
	eventId: String
	originServerTs: Int
	senderId: String
}
type Event {
	type: String
	eventId: String
	content: Unknown
	prevContent: Unknown
	originServerTs: Int
	senderId: String
	stateKey: String
	roomId: String
	unsignedData: UnsignedData
	redacts: String
	localCookieData: LocalCookieData
}
type LocalCookieData {
	linkUrlForUrlPreview: String
}
type User {
	userId: String
	displayName: String
	avatarUrl: String
}
type AggregatedRelations {
	annotations: [Unknown]
	references: DefaultUnsignedRelationInfo
	pinnedEvents: Unknown
	replaces: AggregatedReplace
	latestThread: LatestThreadUnsignedRelation
	hideUserContent: AggregatedHideUserContent
	displaySettings: Unknown
	potentiallyToxicContent: AggregatedPotentiallyToxicContent
}
type InviteSpamStatusContent {
	status: String
}
type RoomAliasesContent {
	aliases: [Unknown]
}
type RoomHistoryVisibilityContent {
	apiValue: String
}
type RoomGuestAccessContent {
	apiValue: String
}
type RoomJoinRulesAllowEntry {
	roomId: String
	type: String
}
type RoomMemberContent {
	membership: Unknown
	reason: String
	displayName: String
	avatarUrl: String
	isDirect: Boolean
	thirdPartyInvite: Invite
	unsignedData: UnsignedData
}
type VoteInfo {
	userId: String
	option: String
	voteTimestamp: Int
}
type RoomCanonicalAliasContent {
	canonicalAlias: String
	alternativeAliases: [Unknown]
}
type RoomTopicContent {
	topic: String
}
type RoomStatusContent {
	status: String
}
type PowerLevelsContent {
	ban: Int
	kick: Int
	invite: Int
	redact: Int
	eventsDefault: Int
	events: Unknown
	usersDefault: Int
	users: Unknown
	stateDefault: Int
	notifications: Unknown
	eventFields: Unknown
}
type RoomNameContent {
	name: String
}
type RoomHiddenContent {
	hidden: Boolean
}
type RoomMigrationContent {
	status: String
	sendbirdId: String
}
type PollQuestion {
	unstableQuestion: String
	question: String
}
type MessageEmoteContent {
	msgType: String
	body: String
	format: String
	formattedBody: String
	relatesTo: RelationDefaultContent
	newContent: Unknown
}
type MessageImageContent {
	msgType: String
	body: String
	info: ImageInfo
	url: String
	relatesTo: RelationDefaultContent
	newContent: Unknown
	encryptedFileInfo: EncryptedFileInfo
}
type AudioWaveformInfo {
	duration: Int
	waveform: [Unknown]
}
type PollCreationInfo {
	question: PollQuestion
	kind: Unknown
	maxSelections: [Unknown]
}
type MessageTextContent {
	msgType: String
	body: String
	format: String
	formattedBody: String
	relatesTo: RelationDefaultContent
	newContent: Unknown
}
type AudioInfo {
	mimeType: String
	size: Int
	duration: Int
}
type MessagePollResponseContent {
	msgType: String
	body: String
	relatesTo: RelationDefaultContent
	newContent: Unknown
	unstableResponse: PollResponse
	response: PollResponse
}
type MessageNoticeContent {
	msgType: String
	body: String
	format: String
	formattedBody: String
	relatesTo: RelationDefaultContent
	newContent: Unknown
}
type MessageRelationContent {
	relatesTo: RelationDefaultContent
}
type ThumbnailInfo {
	width: Int
	mimeType: String
}
type MessageStickerContent {
	msgType: String
	body: String
	info: ImageInfo
	url: String
	relatesTo: RelationDefaultContent
	newContent: Unknown
	encryptedFileInfo: EncryptedFileInfo
}
type MessageDefaultContent {
	msgType: String
	body: String
	relatesTo: RelationDefaultContent
	newContent: Unknown
}
type PollAnswer {
	id: String
	unstableAnswer: String
	answer: String
}
type MessageEndPollContent {
	msgType: String
	body: String
	newContent: Unknown
	relatesTo: RelationDefaultContent
	unstableText: String
	text: String
}
type MessageLocationContent {
	msgType: String
	body: String
	geoUri: String
	locationInfo: LocationInfo
	relatesTo: RelationDefaultContent
	newContent: Unknown
}
type MessageFileContent {
	msgType: String
	body: String
	filename: String
	info: FileInfo
	url: String
	relatesTo: RelationDefaultContent
	newContent: Unknown
	encryptedFileInfo: EncryptedFileInfo
}
type VideoInfo {
	mimeType: String
	width: Int
	duration: ThumbnailInfo
	thumbnailUrl: String
	thumbnailFile: EncryptedFileInfo
}
type LocationInfo {
	thumbnailUrl: String
	thumbnailInfo: ThumbnailInfo
	thumbnailFile: EncryptedFileInfo
}
type MessageAudioContent {
	msgType: String
	body: String
	audioInfo: AudioInfo
	url: String
	relatesTo: RelationDefaultContent
	newContent: Unknown
	encryptedFileInfo: EncryptedFileInfo
	audioWaveformInfo: AudioWaveformInfo
	voiceMessageIndicator: Unknown
}
type MessageVideoContent {
	msgType: String
	body: String
	videoInfo: VideoInfo
	url: String
	relatesTo: RelationDefaultContent
	newContent: Unknown
	encryptedFileInfo: EncryptedFileInfo
}
type FileInfo {
	mimeType: String
	size: Int
	thumbnailInfo: ThumbnailInfo
	thumbnailUrl: String
	thumbnailFile: EncryptedFileInfo
}
type RoomRoleInviteContent {
	role: String
	inviterUserId: String
	userId: String
}
type PollResponse {
	answers: [Unknown]
}
type ImageInfo {
	mimeType: String
	width: Int
	thumbnailInfo: ThumbnailInfo
	thumbnailUrl: String
	thumbnailFile: EncryptedFileInfo
}
type RoomJoinRulesContent {
	apiValue: String
	allowList: [Unknown]
}
type RoomChatTypeContent {
	participants: [Unknown]
	type: String
}
type AggregatedAnnotation {
	key: String
	count: String
	originServerTs: Int
}
type Signed {
	token: String
	signatures: Unknown
	mxid: String
}
type ReportOpenedContent {
	position: String
	threadId: String
	relatesTo: OpenedReportInfo
}
type PublicRoom {
	aliases: [Unknown]
	canonicalAlias: String
	name: String
	numJoinedMembers: String
	topic: String
	worldReadable: Boolean
	guestCanJoin: Boolean
	avatarUrl: String
	isFederated: Boolean
}
type MessagePollContent {
	msgType: String
	body: String
	relatesTo: RelationDefaultContent
	newContent: Unknown
	unstablePollCreationInfo: PollCreationInfo
	pollCreationInfo: PollCreationInfo
}
type DisplaySettingsContent {
	distinguishHost: Boolean
	relatesTo: RelationDefaultContent
	distinguishLabel: String
}
type ClosedReportInfo {
	type: String
	eventId: String
	inReplyTo: ReplyToContent
	option: Int
	isFallingBack: Boolean
}
type ReactionContent {
	relatesTo: ReactionInfo
}
type ReportClosedContent {
	relatesTo: ClosedReportInfo
}
type ReportContent {
	relatesTo: ReportInfo
}
type ReportInfo {
	type: String
	eventId: String
	key: String
	inReplyTo: ReplyToContent
	option: Int
	isFallingBack: Boolean
}
type PreviewCollapseContent {
	collapse: Boolean
	reason: String
	relatesTo: RelationDefaultContent
}
type ReplyToContent {
	eventId: String
}
type OpenedReportInfo {
	type: String
	eventId: String
	inReplyTo: ReplyToContent
	option: Int
	isFallingBack: Boolean
}
type RoomTagContent {
	tags: Unknown
}
type ReactionInfo {
	type: String
	eventId: String
	key: String
	currentUserEventId: String
	inReplyTo: ReplyToContent
	option: Int
	isFallingBack: Boolean
}
type PublicRoomsResponse {
	nextBatch: String
	prevBatch: String
	chunk: [Unknown]
	totalRoomCountEstimate: Int
}
type PublicRoomsParams {
	limit: Int
	since: String
	filter: PublicRoomsFilter
	includeAllNetworks: Boolean
	thirdPartyInstanceId: String
}
type PublicRoomsFilter {
	searchTerm: String
}
type RelationDefaultContent {
	type: String
	eventId: String
	inReplyTo: ReplyToContent
	option: Int
	isFallingBack: Boolean
}
type Invite {
	displayName: String
	signed: Signed
}
type VoteSummary {
	total: Float
}
type RoomStrippedState {
	aliases: [Unknown]
	canonicalAlias: String
	name: String
	numJoinedMembers: String
	topic: String
	worldReadable: Boolean
	guestCanJoin: Boolean
	avatarUrl: String
	isFederated: Boolean
	isEncrypted: Boolean
	roomType: String
	membership: String
}
type RoomAvatarContent {
	avatarUrl: String
}
type AggregatedHideUserContent {
	hide: Boolean
}
type RoomTombstoneContent {
	body: String
	replacementRoomId: String
}
type DefaultUnsignedRelationInfo {
	limited: Boolean
	count: Int
	chunk: [Unknown]
}
type Predecessor {
	roomId: String
	eventId: String
}
type RoomCreateContent {
	creator: String
	roomVersion: String
	predecessor: Predecessor
}
type EncryptedFileKey {
	alg: String
	ext: Boolean
	keyOps: [Unknown]
	kty: String
	k: String
}
type EncryptedFileInfo {
	url: String
	key: EncryptedFileKey
	iv: String
	hashes: Unknown
	v: String
}
type MatrixCoroutineDispatchers {
	io: Unknown
	computation: Unknown
	main: Unknown
	crypto: Unknown
	dmVerif: Unknown
}
type Highlight {
	highlight: Boolean
}
type RoomSyncState {
	events: [Unknown]
}
type SyncResponse {
	accountData: UserAccountDataSync
	nextBatch: String
	presence: PresenceSyncResponse
	toDevice: ToDeviceSyncResponse
	peekData: Unknown
	rooms: RoomsSyncResponse
	deviceLists: DeviceListResponse
	deviceOneTimeKeysCount: DeviceOneTimeKeysCountSyncResponse
	globalUnreadCounter: Int
	invitesCounter: Int
	spamInvitesCounter: Int
	w3ReportLabels: W3ReportLabels
}
type PushRule {
	actions: [Unknown]
	default: Boolean
	enabled: Boolean
	ruleId: String
	conditions: [Unknown]
	pattern: String
	expirationTime: Int
}
type UploadThumbnailResult {
	uploadedThumbnailUrl: String
}
type ContentUploadResponse {
	contentUri: String
}
type NewAttachmentAttributes {
	newWidth: Int
	newHeight: Int
	newFileSize: Int
}
type Params {
	sessionId: String
	lastFailureMessage: String
	localEchoIds: [Unknown]
	attachment: ContentAttachmentData
	isEncrypted: Boolean
	compressBeforeSending: Boolean
	requireSfw: Boolean
}
type InitialSyncStrategy {
	minSizeToSplit: Int
	minSizeToStoreInFile: Int
}
type InitialSyncStatus {
	step: Int
}
type Capabilities {
	changePassword: ChangePassword
	roomVersions: RoomVersions
	threads: BooleanCapability
}
type RoomVersions {
	default: String
	available: Unknown
	roomCapabilities: Unknown
}
type BooleanCapability {
	enabled: Boolean
}
type TokensChunkResponse {
	start: String
	end: String
	chunk: [Unknown]
}
type IdentityServerContent {
	baseUrl: String
}
type IgnoredUsersContent {
	ignoredUsers: Unknown
}
type Params {
	sessionId: String
	lastFailureMessage: String
	timeout: Int
	delay: Int
	periodic: Boolean
	roomId: String
}
type ChangePassword {
	enabled: Boolean
}
type GetCapabilitiesResult {
	capabilities: Capabilities
}
type Params {
	timeout: Int
	presence: Unknown
	ioScope: Unknown
	useSyncStreaming: Boolean
	syncFlow: Unknown
}
type PEEK {
	data: Unknown
}
type LEFT {
	data: Unknown
}
type INVITED {
	data: Unknown
}
type INACTIVE {
	data: Unknown
}
type JOINED {
	data: Unknown
}
type EphemeralResult {
	typingUserIds: Unknown
}
type Params {
	syncResponse: RoomsSyncResponse
	rules: [Unknown]
}
type EventAction {
	action: Unknown
	startTime: Int
}
type RoomSummaryUpdateData {
}
type PagingRoomSummaryType {
	memberships: [Unknown]
}
type Params {
	roomId: String
	eventId: String
	reaction: String
}
type Params {
	roomId: String
	eventId: String
	eventType: String
	relationType: String
	direction: String
	from: String
	limit: Int
}
type Result {
	redactEventId: String
}
type RelationsResponse {
	chunks: [Unknown]
	originalEvent: Event
	nextBatch: String
	prevBatch: String
}
type RoomAliasDescription {
	roomId: String
	servers: [Unknown]
}
type GetAliasesResponse {
	aliases: [Unknown]
}
type TagBody {
	order: Unknown
}
type AddRoomAliasBody {
	roomId: String
}
type RoomUpgradeBody {
	newVersion: String
}
type Params {
	roomId: String
	threadId: String
	customRule: String
	ruleKindOverride: Unknown
	roomNotificationState: Unknown
	defaultNotificationState: Unknown
	expirationTime: Int
}
type DetailedSendState {
	sendState: Unknown
	matrixErrorStr: String
}
type Params {
	roomId: String
	threadId: String
	lastKnownEventId: String
	direction: Unknown
	limit: String
}
type TextContent {
	text: String
	formattedText: String
}
type LocalEchoIdentifiers {
	roomId: String
	threadId: String
	eventId: String
}
type TimelineState {
	hasReachedEnd: Boolean
	hasMoreInCache: Boolean
	isPaginating: Boolean
	requestedPaginationCount: Int
}
type Params {
	roomId: String
	from: String
	roomSessionDatabase: Unknown
	receivedEvents: [Unknown]
	receivedPartialUpdates: [Unknown]
	receivedFullUpdates: [Unknown]
}
type EventRedactBody {
	reason: String
	withRelations: [Unknown]
}
type Params {
	roomId: String
	threadId: String
	eventId: String
	timelineID: String
}
type Params {
	roomId: String
	threadId: String
	from: String
	direction: Unknown
	limit: String
	ignoreFirstNotAllowedEvent: Boolean
}
type EventContextResponse {
	event: Event
	start: String
	eventsBefore: [Unknown]
	eventsAfter: [Unknown]
	end: String
	stateEvents: [Unknown]
	updates: AggregateUpdates
}
type PaginationResponse {
	start: String
	end: String
	chunk: [Unknown]
	stateEvents: [Unknown]
	updates: AggregateUpdates
}
type ReactionUiEchoData {
	localEchoId: String
	reactedOnEventId: String
	reaction: String
}
type Request {
	localId: String
	roomId: String
}
type Params {
	sessionId: String
	lastFailureMessage: String
	roomId: String
	threadId: String
	eventId: String
	isEncrypted: Boolean
}
type SendResponse {
	eventId: String
}
type SyncFillPaginationResponse {
	events: [Unknown]
	stateEvents: [Unknown]
	partialUpdates: [Unknown]
	fullUpdates: [Unknown]
}
type RoomPushRule {
	kind: Unknown
	rule: PushRule
}
type Params {
	sessionId: String
	lastFailureMessage: String
	localEchoIds: [Unknown]
	isEncrypted: Boolean
}
type Params {
	roomId: String
	isTyping: Boolean
	typingTimeoutMillis: Int
}
type Params {
	roomId: String
	type: String
	content: Unknown
}
type TypingEventContent {
	typingUserIds: [Unknown]
}
type RedactEventTaskInfo {
	roomId: String
	type: String
	redactionLocalEcho: String
}
type SendEventTaskInfo {
	type: String
	roomId: String
	localEchoId: String
	encrypt: Boolean
}
type FallbackTaskInfo {
	type: String
}
type TypingBody {
	typing: Boolean
	timeout: Int
}
type RoomUpgradeResponse {
	replacementRoomId: String
}
type Params {
	kind: Unknown
	pushRule: PushRule
}
type ReadBody {
	threadId: String
}
type Params {
	roomId: String
	fullyReadEventId: String
	readReceiptEventId: String
	readReceiptThreadId: String
	forceReadReceipt: Boolean
	forceReadMarker: Boolean
}
type Params {
	roomId: String
	stateKey: Unknown
	eventType: Unknown
	body: Unknown
}
type SerializablePowerLevelsContent {
	ban: Int
	kick: Int
	invite: Int
	redact: Int
	eventsDefault: Int
	events: Unknown
	usersDefault: Int
	users: Unknown
	stateDefault: Int
	notifications: Unknown
}
type RoomName {
	name: String
	normalizedName: String
}
type CreateRoomBody {
	visibility: Unknown
	roomAliasName: String
	name: String
	topic: String
	invitedUserIds: [Unknown]
	creationContent: Unknown
	initialStates: [Unknown]
	preset: Unknown
	isDirect: Boolean
	powerLevelContentOverride: PowerLevelsContent
	roomVersion: String
}
type FullyReadContent {
	eventId: String
}
type Params {
	roomId: String
}
type Params {
	roomId: String
	reason: String
}
type PeekRoomResponse {
	roomId: String
	peekExpiryTs: Int
	stateEvents: [Unknown]
	updates: AggregateUpdates
	chunkStart: String
	chunkEnd: String
	chunkEvents: [Unknown]
}
type Params {
	roomId: String
	userId: String
	userName: String
	ioScope: Unknown
}
type CreateRoomResponse {
	roomId: String
}
type RoomMembersResponse {
	roomMemberEvents: [Unknown]
}
type Params {
	roomId: String
	excludeMembership: Unknown
}
type Params {
	roomId: String
	eventId: String
	score: Unknown
	reason: String
}
type ReportContentBody {
	score: String
}
type Params {
	roomIdOrAlias: String
	reason: String
	viaServers: [Unknown]
}
type InviteBody {
	userId: String
	reason: String
}
type UserIdAndReason {
	userId: String
	reason: String
}
type Params {
	type: Unknown
	roomId: String
	userId: String
	reason: String
}
type Params {
	roomId: String
	userId: String
	reason: String
}
type Params {
	kind: Unknown
	ruleId: String
}
type Params {
	pushRules: GetPushRulesResponse
}
type EnabledBody {
	enabled: Boolean
}
type GetPushRulesResponse {
	global: RuleSet
	device: RuleSet
}
type PushCondition {
	kind: String
	key: String
	pattern: String
	roomId: String
	threadId: String
	iz: String
}
type W3ReportLabels {
	isPowerUser: Boolean
}
type RoomDirectoryVisibilityJson {
	visibility: Unknown
}
type EventFilter {
	limit: Int
	senders: [Unknown]
	notSenders: [Unknown]
	types: [Unknown]
	notTypes: [Unknown]
}
type Filter {
	eventFields: [Unknown]
	eventFormat: String
	presence: EventFilter
	accountData: EventFilter
	room: RoomFilter
}
type Params {
	url: String
}
type GetMediaConfigResult {
	maxUploadSize: Int
}
type FilterResponse {
	filterId: String
}
type RoomFilter {
	notRooms: [Unknown]
	rooms: [Unknown]
	ephemeral: RoomEventFilter
	includeLeave: Boolean
	state: RoomEventFilter
	timeline: RoomEventFilter
	accountData: RoomEventFilter
}
type RoomSyncSummary {
	heroes: [Unknown]
	joinedMembersCount: Int
	invitedMembersCount: Int
}
type RoomEventFilter {
	limit: Int
	notSenders: [Unknown]
	notTypes: [Unknown]
	senders: [Unknown]
	types: [Unknown]
	rooms: [Unknown]
	notRooms: [Unknown]
	containsUrl: Boolean
	lazyLoadMembers: Boolean
	enableUnreadThreadNotifications: Boolean
	notAggregatedRelations: [Unknown]
}
type RuleSet {
	content: [Unknown]
	override: [Unknown]
	room: [Unknown]
	sender: [Unknown]
	underride: [Unknown]
}
type RoomInviteState {
	events: [Unknown]
}
type RoomSyncUnreadNotifications {
	events: [Unknown]
	notificationCount: Int
	highlightCount: Int
	openReviewCount: Int
	isCountedInUnread: Boolean
}
type RoomPeek {
	peekExpiryTs: Int
	peekStartTs: Int
}
type SpacesResponse {
	nextBatch: String
	rooms: [Unknown]
}
type SearchResponse {
	searchCategories: SearchResponseCategories
}
type SpaceChildSummaryResponse {
	roomType: String
	childrenState: [Unknown]
	aliases: [Unknown]
	canonicalAlias: String
	name: String
	numJoinedMembers: String
	topic: String
	worldReadable: Boolean
	guestCanJoin: Boolean
	avatarUrl: String
	isFederated: Boolean
}
type SearchRequestCategories {
	roomEvents: SearchRequestRoomEvents
}
type SearchResponseEventContext {
	eventsBefore: [Unknown]
	eventsAfter: [Unknown]
	start: String
	end: String
	profileInfo: Unknown
}
type SearchRequestEventContext {
	beforeLimit: Int
	afterLimit: Int
	includeProfile: Boolean
}
type SearchRequestFilter {
	limit: Int
	rooms: [Unknown]
}
type SearchRequestBody {
	searchCategories: SearchRequestCategories
}
type SearchRequestRoomEvents {
	searchTerm: String
	keys: Unknown
	filter: SearchRequestFilter
	orderBy: Unknown
	eventContext: SearchRequestEventContext
	includeState: Boolean
}
type SearchResponseItem {
	rank: Unknown
	event: Event
	context: SearchResponseEventContext
}
type GetPresenceResponse {
	presence: Unknown
	lastActiveAgo: Int
	message: String
	isCurrentlyActive: Boolean
}
type SearchResponseCategories {
	roomEvents: SearchResponseRoomEvents
}
type UserStats {
	memberSince: Int
}
type SearchUsersParams {
	searchTerm: String
	limit: String
	roomId: String
}
type Params {
	userIds: [Unknown]
	deleteTimelineEvents: Boolean
}
type Params {
	userIdsToIgnore: [Unknown]
	userIdsToUnIgnore: [Unknown]
	sendToServer: Boolean
	deleteTimelineEvents: Boolean
}
type Params {
	limit: String
	searchScope: String
	roomId: String
}
type SearchUser {
	userId: String
	displayName: String
	avatarUrl: String
	userStats: UserStats
}
type SearchUsersResponse {
	limited: Boolean
	users: [Unknown]
}
type PresenceContent {
	presence: Unknown
	lastActiveAgo: Int
	statusMessage: String
	isCurrentlyActive: Boolean
	avatarUrl: String
	displayName: String
}
type SearchResponseRoomEvents {
	results: [Unknown]
	count: Int
	highlights: [Unknown]
	nextBatch: String
}
type SetPresenceBody {
	presence: Unknown
	statusMsg: String
}
type DeviceListResponse {
	changed: [Unknown]
	left: [Unknown]
}
type InvitedRoomSync {
	inviteState: RoomInviteState
}
type DeviceOneTimeKeysCountSyncResponse {
	signedCurve25519: Int
}
type PresenceSyncResponse {
	events: [Unknown]
}
type RoomSyncEphemeral {
	events: [Unknown]
}
type UserAccountDataSync {
	list: [Unknown]
}
type UserPasswordAuth {
	session: String
	type: String
	user: String
	password: String
}
type RoomsSyncResponse {
	join: Unknown
	invite: Unknown
	leave: Unknown
	peek: Unknown
	inactive: Unknown
}
type RoomSyncUnreadThreadNotifications {
	notificationCount: Int
	highlightCount: Int
}
type Sound {
	sound: String
}
type RoomSyncAccountData {
	events: [Unknown]
}
type HomeServerConnectionConfig {
	homeServerUri: Unknown
	homeServerUriBase: Unknown
	identityServerUri: Unknown
}
type Credentials {
	userId: String
	accessToken: String
	refreshToken: String
	homeServer: String
	deviceId: String
	storageVersion: String
}
type MatrixError {
	code: String
	message: String
	consentUri: String
	limitType: String
	adminUri: String
	retryAfterMillis: Int
	isSoftLogout: Boolean
	newLookupPepper: String
	session: String
	completedStages: [Unknown]
	params: Unknown
	redditErrorCode: String
	existingRoomId: String
}
type SsoIdentityProvider {
	id: String
	name: String
	iconUrl: String
	brand: String
}
type AggregateUpdates {
	full: [Unknown]
	partial: [Unknown]
}
type ToDeviceSyncResponse {
	events: [Unknown]
}
type SpaceOrderContent {
	order: String
}
type SpaceParentContent {
	via: [Unknown]
	canonical: Boolean
}
type RoomSyncTimeline {
	events: [Unknown]
	limited: Boolean
	prevToken: String
	updates: AggregateUpdates
}
type SpaceChildContent {
	via: [Unknown]
	order: String
	suggested: Boolean
}
type MatrixConfiguration {
	applicationFlavor: String
	integrationUIUrl: String
	integrationRestUrl: String
	integrationWidgetUrls: [Unknown]
	clientPermalinkBaseUrl: String
	proxy: Unknown
	connectionSpec: Unknown
	supportsCallTransfer: Boolean
	longPollTimeout: Int
	maxPeekedRooms: [Unknown]
	timelineDropTimeDiffSeconds: Int
	slowActionsThreshold: Unknown
	extraDebugNetworkInterceptors: [Unknown]
	aggregatedEventsFilteringList: [Unknown]
	getLoid: Unknown
	getDeviceId: Unknown
}
type FederationGetVersionServer {
	name: String
	version: String
}
type RoomConfiguration {
	name: String
	userId: String
}
type RoomIdEventId {
	roomId: String
	eventId: String
}
type FederationGetVersionResult {
	server: FederationGetVersionServer
}
type ErrorData {
	sessionId: String
	lastFailureMessage: String
}
type PasswordLoginParams {
	identifier: Unknown
	password: String
	type: String
	deviceDisplayName: String
	deviceId: String
}
type Params {
	homeServerConnectionConfig: HomeServerConnectionConfig
	bearerToken: String
	deviceName: Unknown
	deviceId: String
}
type Versions {
	supportedVersions: [Unknown]
	unstableFeatures: Unknown
}
type RedditLoginParams {
	token: String
	deviceId: String
	displayName: String
	type: String
}
type MoreCommentUiState {
	viewState: MoreComment
}
type ModFilterDropdownClickModerator {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userSubreddit: UserSubreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type InteractingWithPoll {
	votingState: Unknown
	pollOptions: Unknown
	preselectedItem: String
	onCastVote: Unknown
	onSelectItem: Unknown
}
type PollResultItemData {
	value: String
	isSelected: Boolean
	voteCount: String
	votePercentage: String
	pollIsExpired: Boolean
}
type RoomAccountDataEvent {
	roomId: String
	type: String
	content: Unknown
}
type UpdatePhoneNumberSubmitEnterNumber {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PollViewState {
	totalVoteCount: String
	remainingTime: String
	uiBodyState: Unknown
}
type IncrementalSyncParsing {
}
type Progressing {
	initSyncStep: Unknown
}
type DisplayingPollResults {
	pollResults: Unknown
}
type MoreCommentProps {
	kindWithId: String
}
type PostUnitMediaDimensions {
}
type CommunityInviteComposerClickCreateChat {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userSubreddit: UserSubreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type FeedExperienceOverflowClick {
	noun: String
	subreddit: Subreddit
	actionInfo: ActionInfo
	communityRecommendationUnit: CommunityRecommendationUnit
	feed: Feed
	topicTag: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type CommentsMetric {
	totalCommentsInPage: Int
	translatedComments: Int
	untranslatedComments: Int
	translatableComments: Int
	allCommentsTranslated: Boolean
	allCommentsUntranslated: Boolean
	translatableIds: [Unknown]
	translatedIds: [Unknown]
	untranslatedIds: [Unknown]
}
type ActionInfo {
	pageType: String
	reason: String
	sourceName: String
	success: Boolean
	type: String
	paneName: String
}
type Comment {
	bodyText: String
	contentType: String
	createdTimestamp: Int
	depth: Int
	id: String
	numberGildings: Int
	parentId: String
	postId: String
	score: Int
	translationLanguage: String
	translationState: Boolean
	type: String
}
type Survey {
	experimentName: String
	experimentVariant: String
	experimentVersion: String
	max: Int
	min: Int
	parentQuestionId: String
	question: String
	questionId: String
	score: Int
	text: String
	type: String
}
type Post {
	archived: Boolean
	authorId: String
	bodyText: String
	commentType: String
	createdTimestamp: Int
	crosspostRootId: String
	domain: String
	flair: String
	id: String
	isAutomated: Boolean
	isEvent: Boolean
	isScheduled: Boolean
	language: String
	languageSource: String
	nsfw: Boolean
	numberComments: Int
	numberGildings: Int
	originalContent: Boolean
	pinned: Boolean
	promoted: Boolean
	recommendationSource: String
	recommendationSourceSubredditId: String
	recommendationSourceSubredditName: String
	score: Int
	spoiler: Boolean
	subredditId: String
	subredditName: String
	title: String
	translationLanguage: String
	translationState: Boolean
	type: String
	upvoteRatio: Unknown
	url: String
	seedPostId: String
}
type PostMetric {
	id: String
	hasBody: Boolean
	postType: String
	titleState: String
	bodyState: String
	isTranslatable: Boolean
	translatedImages: Int
	untranslatedImages: Int
}
type Setting {
	oldValue: String
	oldValues: Unknown
	value: String
	values: Unknown
}
type PostsMetric {
	totalPostsInPage: Int
	postsWithTranslatedTitle: Int
	postsWithUntranslatedTitle: Int
	postsWithTranslatedBody: Int
	postsWithUntranslatedBody: Int
	translatablePosts: Int
	allPostTitlesUntranslated: Boolean
	allPostTitlesTranslated: Boolean
	allPostBodiesUntranslated: Boolean
	allPostBodiesTranslated: Boolean
	translatableIds: Unknown
	translatedIds: Unknown
	untranslatedIds: Unknown
	translatedImages: Int
	untranslatedImages: Int
	postsWithBody: Int
}
type Subreddit {
	id: String
	name: String
	nsfw: Boolean
	quarantined: Boolean
	translationState: Boolean
	translationLanguage: String
}
type Running {
	afterPause: Boolean
}
type TranslationMetrics {
	scenario: String
	translationSettingState: String
	targetLanguage: String
	post: PostMetric
	comments: CommentsMetric
	posts: PostsMetric
	loadType: String
}
type FeedLoadFirstTime {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type EnterNewPasswordClickBanner {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type DevicePerformance {
	performanceClass: Int
}
type ModeratorClickFilter {
	noun: String
	userLegacyId: String
	actionInfo: Unknown
	comment: Filter
	post: Post
	subreddit: Subreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type GlobalCrashApp {
	actionInfo: ActionInfo
	appSession: AppSession
	devicePerformance: DevicePerformance
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type AppSession {
	id: String
}
type Setting {
	value: String
	values: Unknown
}
type Subreddit {
	accessType: String
	id: String
	name: String
	nsfw: Boolean
	numberCoins: Int
	quarantined: Boolean
}
type ActionInfo {
	pageType: String
	paneName: String
	reason: String
	settingValue: String
	type: String
}
type SettingsRevokeGoogleConsent {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type EnterNewPasswordSubmitResetComplete {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type SubredditClickRecapMenu {
	subreddit: Subreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type Post {
	id: String
	type: String
	authorId: String
	createdTimestamp: Int
}
type Comment {
	id: String
	authorId: String
	createdTimestamp: Int
	parentId: String
	postId: String
}
type NewAwardsAwarding {
	action: String
	noun: String
	subreddit: Subreddit
	post: Post
	comment: Comment
	newAward: NewAward
	actionInfo: ActionInfo
	correlationId: String
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type Subreddit {
	id: String
}
type DiscoverViewTaxonomyTopic {
	actionInfo: ActionInfo
	topicTag: TopicTag
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type RecapCard {
	index: Int
	count: Int
	type: String
	facts: String
	kind: String
}
type ModeratorView {
	noun: String
	correlationId: String
	post: Post
	comment: Comment
	subreddit: Subreddit
	actionInfo: ActionInfo
	chat: Unknown
	modAction: ModAction
	targetUser: User
	poll: Unknown
	modnote: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type ShareView {
	noun: String
	post: Unknown
	listing: Unknown
	comment: Unknown
	subreddit: Unknown
	actionInfo: ActionInfo
	share: Unknown
	search: Unknown
	feed: Unknown
	recapCard: RecapCard
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type ModeratorSelectSubredditModlog {
	correlationId: String
	subreddit: Subreddit
	actionInfo: ActionInfo
	modAction: ModAction
	modnote: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type AdMetadata {
	impressionId: String
}
type Media {
	duration: Int
	height: Int
	id: String
	loadTime: Int
	orientation: String
	time: Int
	width: Int
}
type Feed {
	correlationId: String
}
type PhoneAuthCreatePasswordSubmitSkipSetPassword {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type StableUnstableId {
	stable: String
	unstable: String
}
type Crosspost {
	titleStyle: Unknown
	classicTitleStyle: Unknown
	usernameStyle: Unknown
	horizontalPadding: Unknown
	verticalSpacing: Unknown
	thumbnailVerticalSpacing: Unknown
}
type ComposableSection {
	section: Unknown
}
type ModmailSwipeMarkUnreadThread {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ElementProps {
	props: Unknown
}
type ScrollViewState {
	animate: Boolean
	scrollPastPostBody: Boolean
	scrollToTop: Boolean
}
type Data {
	isRefreshing: Boolean
	topAppBar: PostDetailTopAppBarViewState
	sectionsTop: Unknown
	sectionsBottom: Unknown
	floatingCtaSection: Unknown
	stickyHeaderVisible: Boolean
	isPromotedPost: Boolean
	linkId: String
	uniqueLinkId: String
	postOverflowMenuItems: Unknown
	amaCommentPillViewState: PostDetailAmaCommentPillViewState
	searchCommentViewState: PostCommentSearchResultsViewState
	screenshotBannerVisible: Boolean
	scrollViewState: ScrollViewState
	postDetailTransitionAnimationState: PostDetailTransitionAnimationState
	postDetailNewSortPillViewState: PostDetailNewSortPillViewState
}
type Error {
}
type HistorySortHeaderPresentationModel {
	sort: SortOption
	viewMode: Unknown
}
type CrowdControlUiModel {
	crowdControlFilterLevel: Unknown
	isCrowdControlFilterEnabled: Boolean
}
type RecommendationContextUiModel {
	type: Unknown
	richtext: Unknown
	source: String
	sourceSubredditId: String
	sourceSubredditName: String
	topicId: String
	recommendationPreferenceEnabled: Boolean
	isVisible: Boolean
}
type TranslationActionPresentationModel {
	shouldShowTranslateAction: Boolean
	shouldShowRevertOriginalAction: Boolean
}
type Input {
	presentationLink: Unknown
	position: Unknown
	subredditId: String
	subredditName: String
	sourceSubredditId: String
	sourceSubredditName: String
	topicId: String
}
type Loading {
	isLoadingJustComments: Boolean
}
type ImageLinkPreviewPresentationModel {
	resolutions: [Unknown]
	altText: String
}
type LinkEventPresentationModel {
	eventStartUtc: Int
	eventEndUtc: Int
	eventType: Unknown
	isEventAdmin: Boolean
	remindeesCount: Int
	collaborators: [Unknown]
}
type LinkPresentationModelAnalytics {
	listingPosition: Int
	visibilityOnScreenTimeStamp: Int
}
type PhoneAuthEnterPhoneClickNumberVerify {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PostDetailContext {
	onEvent: Unknown
}
type Awarded {
	byCurrentUser: Boolean
	count: Boolean
}
type LeadGenInformationPresentationModel {
	disclaimerText: String
	prompt: String
	campaignId: String
	postId: String
	userInformationFields: [Unknown]
	publicEncryptionKey: String
	formId: String
	advertiserLegalName: String
}
type MatchGroup {
	value: String
	range: Unknown
}
type Mp4LinkPreviewPresentationModel {
	params: Mp4PreviewParams
}
type Timer {
	millis: Int
	type: String
}
type SmsAccountSettingsDisableNotification {
	notification: Notification
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type DeactivateAccountFailureClickOk {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type JavaTypeEnhancementState {
	jsr305: Jsr305Settings
	getReportLevelForAnnotation: Unknown
}
type DeltaCounter {
}
type PostLeavePost {
	post: Post
	listing: Listing
	subreddit: Subreddit
	actionInfo: ActionInfo
	experiment: Experiment
	visibility: Visibility
	relevanceModel: Unknown
	topicMetadata: TopicMetadata
	poll: Poll
	feed: Feed
	adMetadata: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type DeactivateAccountFailureClickLearnMore {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type RemovePhoneNumberClickConfirm {
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PostSetPostHeaderViewState {
	iconUrl: String
	posterUsername: String
	timeSincePosted: String
	postLocationName: String
}
type VisibleItemInfo {
}
type PopupView {
	noun: String
	correlationId: String
	post: Post
	listing: Unknown
	comment: Unknown
	userPreferences: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	profile: Unknown
	userSubreddit: Unknown
	search: Unknown
	outbound: Unknown
	metaSearch: Unknown
	popup: Unknown
	topicMetadata: Unknown
	socialLink: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type ModmailSwipeMarkReadThread {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PostComposerView {
	noun: String
	correlationId: String
	post: Post
	subreddit: Subreddit
	actionInfo: ActionInfo
	media: Media
	postComposer: Unknown
	videoErrorReport: Unknown
	cameraFeature: Unknown
	automoderator: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type Gallery {
	position: Int
	numItems: Int
}
type PhoneAuthVerifyPasswordSubmitCheckPassword {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PostClickAd {
	correlationId: String
	post: Post
	listing: Unknown
	subreddit: Unknown
	actionInfo: ActionInfo
	media: Media
	adblock: Unknown
	gallery: Gallery
	adClick: AdClick
	feed: Feed
	adMetadata: AdMetadata
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type Post {
	id: String
	type: String
	title: String
	nsfw: Boolean
	spoiler: Boolean
	url: String
	domain: String
	createdTimestamp: Int
	promoted: Boolean
	authorId: String
	archived: Boolean
	crosspostRootId: String
	numberGildings: Int
	score: Int
	upvoteRatio: Unknown
	numberPostsFromAd: Int
	commentType: String
	numberComments: Int
	subredditId: String
	subredditName: String
	age: Int
	language: String
}
type AdClick {
	location: String
}
type RecapViewFeedBanana {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type Comment {
	authorId: String
	bodyText: String
	contentType: String
	createdTimestamp: Int
	id: String
	lastEditedTimestamp: Int
	mediaIds: Unknown
	numberGildings: Int
	parentId: String
	postId: String
	score: Int
	type: String
	videoMediaIds: Unknown
}
type Filter {
	reference: FilterReference
}
type ActionInfo {
	count: Int
	pageType: String
	paneName: String
	position: Int
	reason: String
	settingValue: String
	success: Boolean
	type: String
}
type Post {
	age: Int
	archived: Boolean
	authorId: String
	bodyText: String
	commentType: String
	createdTimestamp: Int
	crosspostRootId: String
	domain: String
	flair: String
	id: String
	isAutomated: Boolean
	isEvent: Boolean
	isScheduled: Boolean
	language: String
	nsfw: Boolean
	numberComments: Int
	numberGildings: Int
	numberPostsFromAd: Int
	originalContent: Boolean
	pinned: Boolean
	postSetCount: Int
	promoted: Boolean
	recommendationSource: String
	recommendationSourceSubredditId: String
	recommendationSourceSubredditName: String
	score: Int
	spoiler: Boolean
	subredditId: String
	subredditName: String
	title: String
	type: String
	upvoteRatio: Unknown
	url: String
}
type UserSubreddit {
	isFavorite: Boolean
	isMod: Boolean
	isSubscriber: Boolean
	modAccess: Boolean
	modConfig: Boolean
	modFlair: Boolean
	modFull: Boolean
	modMail: Boolean
	modNone: Boolean
	modPost: Boolean
	modWiki: Boolean
}
type NormalClass {
	value: Unknown
}
type ModAction {
	duration: Int
	isAutomoderator: Boolean
	removalreason: RemovalReason
	targetUserId: String
	trigger: String
	triggerMessage: String
	action: String
	isInModmode: Boolean
}
type Subreddit {
	accessType: String
	categoryName: String
	id: String
	name: String
	nsfw: Boolean
	numberCoins: Int
	publicDescription: String
	quarantined: Boolean
	topicTagContents: Unknown
	topicTagIds: Unknown
	topicTagTypes: Unknown
	whitelistStatus: String
}
type FilterReference {
	name: String
}
type LocalClass {
	type: Unknown
}
type ModmailConversation {
	id: String
	isAuto: Boolean
	isHighlighted: Boolean
	isInternal: Boolean
	lastModUpdateTimestamp: Int
	lastUserUpdateTimestamp: Int
	legacyFirstMessageId: String
	numberMessages: Int
	participantConversationId: String
	participantId: String
	participantSubredditId: String
	state: String
	subject: String
	subredditId: String
	type: String
}
type Timer {
	millis: Int
	type: String
}
type PostFlair {
	id: String
	title: String
}
type Setting {
	oldValue: String
	oldValues: Unknown
	scope: String
	value: String
	values: Unknown
}
type RemovalReason {
	isLocked: Boolean
	notify: String
	sendAs: String
}
type UserFlair {
	active: Boolean
	id: String
	idAchieve: String
	isSupporter: Boolean
	locked: Boolean
	title: String
	titleAchieve: String
}
type SimpleTextPanel {
	text: String
}
type FollowerList {
	topPanel: Unknown
	followers: [Unknown]
	nextCursor: String
	footerLoaderModel: LoadingFooterPresentationModel
}
type SearchInProgressPanel {
	text: String
}
type ActionInfo {
	pageType: String
	position: Int
	type: String
	pageRequestId: String
}
type FollowerUiModel {
	id: String
	title: String
	subtitle: String
	icon: Unknown
	isOnline: Boolean
	isFollowing: Boolean
	showFollowerButton: Boolean
}
type FollowerListScreenUiModel {
	content: Unknown
	isCleanSearchVisible: Boolean
	currentSearch: String
}
type SearchResultsPanel {
	title: String
	subtitle: String
}
type Voice {
	content: String
}
type Edit {
	linkedEventId: String
	content: String
}
type Reply {
	linkedEventId: String
	content: String
}
type Quote {
	linkedEventId: String
	content: String
}
type Regular {
	content: String
}
type PhoneAuthOtpClickCheckOtp {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type InboxViewInboxNotificationOverflow {
	notification: Notification
	userPreferences: Unknown
	actionInfo: ActionInfo
	inbox: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type CommunityHighlightsClick {
	noun: String
	actionInfo: ActionInfo
	subreddit: Subreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type OnboardingSelectGender {
	post: Post
	listing: Unknown
	userPreferences: Unknown
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type OnProceedToSetPassword {
	email: String
	username: String
	verificationTokenId: String
	emailDigestState: Boolean
}
type OnSignUpSuccess {
	username: String
	password: String
	email: String
	scope: String
	token: String
	sessionCookie: String
	modhash: String
}
type IntroCardUiModel {
	theme: Unknown
	commonData: CommonData
	title: String
	subtitle: String
	yearLoadedText: String
	imageUrl: String
}
type Topic {
	name: String
	imageUrl: String
}
type SubredditListCardUiModel {
	theme: Unknown
	commonData: CommonData
	title: String
	subtitle: String
	subredditList: Unknown
}
type Post {
	postId: String
	postDeepLink: String
	postTitle: String
	subredditName: String
	subredditNamePrefixed: String
	subredditId: String
	postImageUrl: String
	postImageRatio: Unknown
}
type SubredditCardUiModel {
	theme: Unknown
	commonData: CommonData
	title: String
	subtitle: String
	subredditId: String
	subredditName: String
	subredditNamePrefixed: String
	deeplink: Unknown
	imageUrl: String
}
type Comment {
	postId: String
	postTitle: String
	subredditName: String
	subredditNamePrefixed: String
	subredditId: String
	postImageUrl: String
	commentId: String
	commentText: String
	commentImageUrl: String
	commentDeeplink: String
	postImageRatio: Unknown
	commentImageRatio: Unknown
}
type RecapCommunity {
	id: String
	name: String
	iconUrl: String
	description: String
	subscribersCount: String
}
type GenericCardUiModel {
	theme: Unknown
	commonData: CommonData
	title: String
	subtitle: String
	imageUrl: String
}
type CommentCardUiModel {
	theme: Unknown
	commonData: CommonData
	title: String
	subtitle: String
	postId: String
	postTitle: String
	postImageUrl: String
	commentText: String
	commentId: String
	commentDeeplink: String
	subredditName: String
	subredditNamePrefixed: String
	subredditId: String
	commentImageUrl: String
	postImageRatio: Unknown
	commentImageRatio: Unknown
}
type RecapFeaturedCommunitySection {
	categoryId: String
	categoryName: Unknown
	isLoading: Boolean
}
type CommonData {
	index: String
	analyticsData: String
	cardCount: Unknown
}
type TopicsCardUiModel {
	theme: Unknown
	commonData: CommonData
	title: String
	subtitle: String
	topics: Unknown
}
type PostCardUiModel {
	theme: Unknown
	commonData: CommonData
	title: String
	subtitle: String
	postTitle: String
	subredditName: String
	subredditNamePrefixed: String
	postDeeplink: String
	postImageUrl: String
	postId: String
	subredditId: String
	postImageRatio: Unknown
}
type CommentsCarouselCardUiModel {
	theme: Unknown
	commonData: CommonData
	title: String
	subtitle: String
	comments: Unknown
}
type Parameters {
	originalFlair: Unknown
	subredditName: String
	isUserFlair: Boolean
}
type Subreddit {
	id: String
	name: String
	namePrefixed: String
	isSubscribed: Boolean
	imageUrl: String
}
type GarlicBreadClick {
	noun: String
	subreddit: Unknown
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type GarlicBreadClosePinp {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type CommunityOnboardingDismissWelcomeScreen {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type IndividualTranslations {
	isPostTranslated: Boolean
}
type FinalCardUiModel {
	theme: Unknown
	commonData: CommonData
	title: String
	subtitle: String
	finalCardCta: Unknown
	subredditList: Unknown
	showRecapMenuCta: Boolean
}
type OnClickTranslateEvent {
	modelPosition: String
}
type CommunityView {
	noun: String
	subreddit: Subreddit
	actionInfo: ActionInfo
	chat: Unknown
	userSubreddit: UserSubreddit
	brand: Unknown
	tooltip: Unknown
	topicTag: TopicTag
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type NavigationAvailabilityModel {
	saveEnabled: Boolean
	backEnabled: Boolean
	dataLossPossible: Boolean
	progressVisible: Boolean
}
type PostUnitTitleSection {
	data: PostUnitTitle
}
type PostActionBarData {
	voteScore: String
	hideScore: Boolean
	shareCount: Int
	formattedShareCount: String
	commentCount: Int
	formattedCommentCount: String
	voteDirection: Unknown
	canModPost: Boolean
	isModModeEnabled: Boolean
	awardData: Award
	voteEnabled: Boolean
}
type CrosspostMetadata {
	linkDomain: String
	subredditName: String
	timestamp: String
	author: String
}
type PostUnitStatsSection {
	postUnitStats: PostUnitStats
}
type PostUnitContentProps {
	data: Unknown
	title: PostUnitTitle
	flair: Flair
	sourcePage: Unknown
	isPromoted: Boolean
	earlyDetachFixEnabled: Boolean
	largeRichTextImagesFixEanbled: Boolean
	linkId: String
	largeGalleryImageFixEnabled: Boolean
	enableVideoComposableEffectFix: Boolean
	enableUpdatedAdVisibleTracker: Boolean
	postDetailTransitionAnimationState: PostDetailTransitionAnimationState
}
type PostActionBarSection {
	data: PostActionBarData
}
type PostUnitRemovedRetrySection {
	postUnitRemovedPostRetry: PostUnitRemovedPostRetry
}
type IptImageSizeModel {
}
type PostUnitMetadataProps {
	data: PostUnitMetadata
	moderation: PostUnitModeration
	domain: String
}
type OnClickShowOriginalEvent {
	modelPosition: String
}
type PostsCarouselCardUiModel {
	theme: Unknown
	commonData: CommonData
	title: String
	subtitle: String
	posts: Unknown
}
type GlobalTranslations {
	link: Unknown
}
type TrendingArenaEvent {
	action: String
	actionInfo: ActionInfo
	arenaInfo: ArenaInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type ArenaEvent {
	action: String
	noun: String
	actionInfo: ActionInfo
	arenaInfo: ArenaInfo
	subreddit: Subreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type OnClickTranslationFeedbackEvent {
	modelPosition: String
}
type BackendDeactivateUser {
	oauth: Unknown
	actionInfo: ActionInfo
	userDeactivationInfo: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type ActionInfo {
	pageType: String
	position: Int
	reason: String
	settingValue: String
	success: Boolean
	type: String
}
type AddEmailAddressClickClose {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PointF {
}
type Update {
	currentOrNext: Unknown
	isSameVariant: Boolean
}
type Snap {
	position: PointF
	snappingPosition: Point
	type: Unknown
}
type Point {
}
type FreeFloating {
}
type Visibility {
	next: Unknown
	visible: Boolean
}
type SnapPosition {
	position: Point
}
type PhoneAuthOtpSubmitCheckOtp {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type CommunityInviteComposerClickChatCompose {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userSubreddit: UserSubreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type InviteInfo {
	inviterId: String
	directUserId: String
}
type ModmailClick {
	noun: String
	post: Post
	listing: Unknown
	comment: Comment
	subreddit: Subreddit
	actionInfo: ActionInfo
	setting: Setting
	modmailConversation: ModmailConversation
	modmailMessage: Unknown
	modnote: Unknown
	timer: Timer
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type FeedTapOptions {
	subreddit: Subreddit
	feedOptions: FeedOptions
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type SelectCommunityPrivacyTypeScreenDependencies {
	view: Unknown
	selectCommunityPrivacyTypeTarget: Unknown
}
type FeedOptions {
	target: String
	value: String
}
type PostComposerClick {
	noun: String
	correlationId: String
	post: Post
	listing: Listing
	userPreferences: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	media: Media
	postComposer: Unknown
	profile: Unknown
	userSubreddit: Unknown
	postDraft: Unknown
	cameraFeature: Unknown
	reactSource: Unknown
	automoderator: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type ModActionDropdownClickAction {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userSubreddit: UserSubreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type DeactivateAccountFailureViewPopup {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ContributorsClick {
	noun: String
	subreddit: Subreddit
	actionInfo: ActionInfo
	userSubreddit: UserSubreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type MenuLinksBarClick {
	noun: Unknown
	userPreferences: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	userSubreddit: UserSubreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type GlobalAnrApp {
	appSession: AppSession
	devicePerformance: DevicePerformance
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type CommunityInviteReminderClickDismiss {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userSubreddit: UserSubreddit
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type RoomMemberQueryParams {
	displayName: Unknown
	memberships: [Unknown]
}
type FailedJoining {
	throwable: Unknown
}
type HomeServerVersion {
}
type FailedPeeking {
	throwable: Unknown
}
type Default {
	keyColor: Int
}
type SheetViewWelcomeMessage {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type OnModeSelected {
	selectedMode: Unknown
}
type SheetViewWelcomeMessageRules {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type GalleryViewModeSelectionUiState {
	selectedMode: Unknown
	modes: Unknown
}
type GalleryViewModeSelectionParams {
	selectedMode: Unknown
	modes: [Unknown]
}
type Loading {
	linkId: String
}
type Loaded {
	domain: String
	link: Unknown
	linkPostPreviewModel: Unknown
}
type PostGuidanceState {
	hasBlockingRules: Boolean
	bodyGuidance: FieldGuidance
	titleGuidance: FieldGuidance
	isOnOrAfterSubmit: Boolean
	isPostGuidanceCheckOnSubmit: Boolean
}
type FeedExperienceSubscribeSubreddit {
	subreddit: Subreddit
	actionInfo: ActionInfo
	communityRecommendationUnit: CommunityRecommendationUnit
	feed: Feed
	topicTag: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type Loaded {
	imageUrl: String
	title: String
	domainUrl: String
}
type CommentCountChanges {
}
type FormStateValuesSnapshot {
	keyPaths: [Unknown]
	values: [Unknown]
}
type FailedLeaving {
	throwable: Unknown
}
type Chunk {
	type: Unknown
	emphasis: Unknown
	text: String
	link: String
}
type PostStatsChange {
	score: Int
	comments: Int
}
type TabContentComponentProperties {
	noContentButtonNavId: String
	noContentTextTitle: String
	noContentTextDescription: String
	noContentButtonText: String
	endOfContentTitle: String
	endOfContentDescription: String
}
type AddUsersViewState {
	addedUsers: [Unknown]
	addedUsersState: Unknown
	searchAccountsResult: [Unknown]
	accountSearchValue: String
}
type MultiContentViewState {
	selectedContents: [Unknown]
	postsResult: Unknown
	commentsResult: Unknown
	selectedTabId: String
	disableNotSelectedItems: Boolean
	showItemsLoading: Boolean
	errorLoadingContentData: Unknown
}
type ScrollToItem {
}
type OnDescriptionChanged {
	description: String
}
type LoadedState {
	appealId: String
	description: String
	descriptionMaxChars: Unknown
	adminDecision: AdminDecision
}
type ScrollBy {
}
type AvatarUrls {
	first: String
	second: String
}
type MoveInfo {
	itemId: Unknown
}
type CommentComposerPresenceUiModel {
	avatarUrls: AvatarUrls
	message: String
	showDots: Boolean
}
type AwardItem {
	image: AwardImageAsset
	label: String
	count: Int
	allowImageAnimation: Boolean
}
type AwardImageAsset {
	uri: String
	animated: Boolean
}
type Image {
	caption: String
	contentDescription: String
	imageInfo: RichTextImage
}
type CodeBlock {
	rawText: String
}
type Formatting {
	style: Unknown
	range: Range
}
type PostDetailPresenceState {
	visible: Boolean
	text: String
}
type PostDetailPostState {
	link: Unknown
	linkPresentationModel: Unknown
	joinButton: Unknown
	authorAcceptsFollowers: Boolean
}
type PostDetailNewSortPillState {
	deepCommentPillShown: Boolean
	freshCommentPillShown: Boolean
	freshCommentTargetEnabled: Boolean
	visible: Boolean
	message: String
}
type PostDetailTransitionAnimationState {
}
type PostDetailLoadParams {
	linkId: String
	requestStrategy: Unknown
}
type PostDetailFloatingCtaState {
	floatingCta: PostUnitFloatingCta
	stickyHeaderVisible: Boolean
}
type PostDetailTranslationState {
	state: Unknown
}
type PostDetailScrollState {
	animate: Boolean
	scrollToTop: Boolean
	scrollPastPostBody: Boolean
}
type Error {
	error: Unknown
}
type CustomAction {
	label: String
	spoilerStartIndices: [Unknown]
}
type PostDetailAmaCommentPillState {
	amaCommentPillState: Unknown
}
type EmptyMiniContextBarViewState {
	isVisible: Unknown
	title: String
	postMetrics: PostMetricsState
}
type GalleryMiniContextBarViewState {
	isVisible: Boolean
	title: String
	postMetrics: PostMetricsState
	url: String
}
type TextMiniContextBarViewState {
	isVisible: Boolean
	title: String
	postMetrics: PostMetricsState
}
type OnMediaBoundsChanged {
	mediaBounds: Unknown
}
type ImageMiniContextBarViewState {
	isVisible: Boolean
	title: String
	postMetrics: PostMetricsState
	url: String
}
type PostMiniContextBarState {
	link: Unknown
	linkPresentationModel: Unknown
	postId: String
	title: String
	isVisible: Boolean
	postMetrics: PostMetricsState
	imagePath: String
	blurredUrl: String
	galleryPosition: Unknown
	videoMetadata: VideoMetadata
	videoIsPlaying: Boolean
	type: Unknown
	scrollToTop: Boolean
	mediaBounds: Unknown
	shouldBlur: Boolean
	wasUnblurred: Boolean
}
type PostMetricsState {
	voteCount: String
	commentCount: String
	largeFontFixEnabled: Boolean
}
type OnVisibilityChanged {
	isVisible: Boolean
}
type VideoMiniContextBarViewState {
	isVisible: Boolean
	title: String
	postMetrics: PostMetricsState
	isPlaying: Boolean
	videoInput: Unknown
	screenVisibility: Unknown
	forceAutoPlay: Boolean
}
type PostDetailState {
	linkId: String
	isRefresh: Boolean
	searchState: PostDetailSearchState
	postState: PostDetailPostState
	adState: Unknown
	loadingState: Unknown
	presenceState: PostDetailPresenceState
	displayDialogState: Unknown
	floatingCtaState: PostDetailFloatingCtaState
	scrollState: PostDetailScrollState
	screenshotBannerVisible: Boolean
	amaCommentPillState: PostDetailAmaCommentPillState
	translationState: PostDetailTranslationState
	showContextMenuCoachMark: Boolean
	newSortPillState: PostDetailNewSortPillState
}
type RichTextImageProperties {
	roundedCornerSize: Unknown
	showCaption: Boolean
}
type PostDetailSearchState {
	isSearchModeEnabled: Boolean
	isSearchFocused: Boolean
	searchQuery: String
}
type PostDetailScreenDependencies {
	analyticsPageType: Unknown
	commentsParams: CommentsParams
	commentsTarget: Unknown
	amaEventTarget: Unknown
	screenArguments: PostDetailScreenArguments
	screenName: Unknown
	sourcePage: Unknown
	screenReferrer: Unknown
	analyticsScreenViewEventProvider: Unknown
}
type PostCommentSearchResultsViewState {
	searchQuery: String
	comments: Unknown
	isLoading: Boolean
	isLoadingMore: Boolean
	isError: Boolean
	isCommentSearchActive: Boolean
}
type CommentWithRichTextViewState {
	richTextElements: Unknown
	commentViewState: CommentViewState
}
type PostPresenceProps {
}
type PostDetailHeaderModerationBarState {
	postStatus: PostStatus
	canDistinguishPost: CanDistinguishPost
	moderationReasons: Unknown
}
type CanDistinguishPost {
	isPostDistinguished: Boolean
}
type BlockedPostContentLayoutState {
	isInitiallyBlocked: Boolean
	composeUnblockedContentBelow: Boolean
}
type PostContentLayoutState {
	data: Unknown
	source: String
	collapseLines: Boolean
	isExpandableTextEnabled: Boolean
	largeRichTextImagesFixedEnabled: Boolean
	enableVideoComposableEffectFix: Boolean
	enableUpdatedAdVisibleTracker: Boolean
}
type PostStatus {
	approved: Boolean
	removed: Boolean
	spammed: Boolean
	isRemoved: Boolean
}
type MediaGalleryImageInfo {
	imageUrl: String
	thumbnailUrl: String
}
type PostPresenceState {
	visible: Boolean
	text: String
}
type PostDetailNewSortPillViewState {
	deepScrollPillEnabled: Boolean
	freshCommentPillEnabled: Boolean
	pillShown: Boolean
	visible: Boolean
	message: String
	experimentEnabled: Boolean
}
type FeedSwitcherButtonAnimationState {
	fromIndex: Unknown
}
type TextContent {
	rawText: String
	formatting: Unknown
	spoilers: Unknown
	links: Unknown
}
type Range {
}
type Table {
	columnAlignments: Unknown
	rows: Unknown
}
type Numbered {
}
type Paragraph {
	textContent: TextContent
}
type CustomElement {
	data: Unknown
}
type List {
	items: Unknown
}
type BlockQuote {
	items: Unknown
	nested: Boolean
}
type Heading {
	textContent: TextContent
	level: Unknown
}
type TableCell {
	textContent: TextContent
}
type ListItem {
	item: Unknown
	depth: Unknown
}
type SearchTrackingContextSearch {
	sort: String
	range: String
}
type ConversationMode {
	context: Unknown
}
type CommentStatusViewState {
	isRemoved: Boolean
	isSpam: Boolean
	isReported: Boolean
	isPinned: Boolean
	isLocked: Boolean
	isApproved: Boolean
}
type UserComment {
	id: String
	depth: String
	parentId: String
	isCollapsed: Boolean
	isDeleted: Boolean
	isArchived: Boolean
	childCount: CommentBodyViewState
	modVerdict: ModVerdict
	removalReason: ModRemovalReasonViewState
	hasModVerdict: Boolean
	footer: CommentFooterViewState
	header: CommentHeaderViewState
	isHighlighted: Boolean
	roleIndicator: Unknown
	createdUtc: Int
	removalReasonIntResource: String
	a11yAnnouncement: UserCommentA11yAnnouncement
	isSpotlightComment: Boolean
	isLastCommentInThread: Boolean
	indentDecoration: CommentThreadIndentDecoration
	previousCommentIsAd: Boolean
}
type CommentsAmaCommentFiltersViewState {
	selectedFilter: Unknown
}
type Accepting {
	error: String
}
type DevPlatformMenuViewState {
	items: Unknown
}
type CommentFooterViewState {
	score: Boolean
	commentIndex: String
	replyEnabled: Boolean
	canVote: Boolean
	replyCollapsed: Boolean
	hideScore: Boolean
	voteDirection: Unknown
	footerEnabled: Boolean
	awardsViewState: AwardsViewState
	inlineModerationBarViewState: InlineModerationBarViewState
}
type AdsAnalyticsInfoState {
	uniqueLinkIdToAdsAnalyticsInfo: Unknown
}
type NotImplemented {
	id: String
	parentId: String
	depth: String
}
type AwardsViewState {
	awardsUiModel: CommentAwardsUiModel
	redditAwardsEntryPointDelegate: Unknown
}
type CommentBodyViewState {
	body: String
	rtJson: String
	expressionUiModel: Unknown
	mediaMetadata: Unknown
	richTextElements: Unknown
	commentIndex: String
	isGifAutoplayEnabled: Boolean
	isSpotlightComment: Boolean
	commentIdWithKind: String
}
type StopTrackingAuthor {
	authorId: String
}
type OnCommentTreeAdActionEvent {
	action: Unknown
	ad: Unknown
}
type OnConversationAdActionEvent {
	action: Unknown
}
type StartTrackingAuthor {
	authorId: String
}
type OnDevPlatformItemClick {
}
type UserPresenceState {
	authorOnlineStatus: Unknown
}
type CommentA11yAnnouncement {
	commentAuthor: String
	commentBody: String
	relativeTimespan: String
}
type CommentOverflowActionsBottomSheetScreenDependencies {
	menuParams: CommentOverflowActionsBottomSheetMenuParams
	commentOverflowData: CommentOverflowData
	isAdmin: Boolean
	analyticsPageType: Unknown
	link: CommentLink
}
type OnDismissBottomSheet {
	dismissedWithoutAction: Boolean
}
type CommentAd {
	id: String
	uniqueId: String
	uiModel: CommentScreenAdUiModel
	ad: Unknown
}
type MenuItemViewState {
	index: String
	iconName: String
	subtitle: String
}
type LoadParentCommentState {
	loadState: Unknown
}
type LoadParentButtonElementUiState {
	loading: Boolean
	parentKindWithId: String
}
type CommentSpotlightViewState {
	commentA11YAnnouncement: CommentA11yAnnouncement
	comment: UserComment
	parentComment: UserComment
}
type CommentOverflowData {
	comment: Unknown
	parentComment: Unknown
}
type CommentOverflowActionsBottomSheetMenuParams {
	modelPosition: Boolean
	isBlockable: Boolean
	isDeletable: Boolean
	isReportable: Boolean
	hasReports: Boolean
	isCollapsible: Boolean
	isCopyable: Boolean
	isSubscribable: Boolean
	subredditKindWithId: String
	isUserSubscriber: Boolean
	userIsModerator: Boolean
	isAdmin: Boolean
	isAwardVisible: Unknown
	showShareIcon: Unknown
	hasRegularActions: Unknown
	isReplyVisible: Boolean
	isEditVisible: Boolean
	isMarkAsBrandVisible: Boolean
	isMarkAsBrandEnabled: Boolean
	isTranslationFeedbackVisible: Boolean
	analyticsPageType: String
	correlationId: String
	hasDistinguishAsAdmin: Boolean
	distinguishAsAdminActive: Boolean
	commentIdWithKind: String
	isPostFollowMenuRerankingEnabled: Boolean
	isTranslateVisible: Boolean
	isShowOriginalVisible: Boolean
}
type LoadParentCommentProps {
	parentKindWithId: String
}
type CommentsData {
	models: Unknown
}
type MoreComment {
	id: String
	depth: String
	parentId: String
	isLoading: Boolean
	hasRefreshedUi: Boolean
}
type CommentHeaderViewState {
	commentIdWithKind: String
	timestamp: String
	authorName: String
	authorIcon: String
	bodyPreview: String
	authorOnline: Boolean
	isSnoovatarIcon: Boolean
	isNftIcon: Boolean
	authorId: String
	authorRoleIndicator: Unknown
	isCommercialCommunication: Boolean
	isVerified: Boolean
	flairItems: Unknown
	commentIndex: CommentStatusViewState
	edited: Boolean
	isAuthorBlocked: Boolean
	showPaidSubscriberBadge: Boolean
	isCollapsed: Boolean
	isPotentialSpamCollapsed: Boolean
	isCrowdControlCollapsed: Boolean
	isSpotlightComment: Boolean
	authorCommunityBadge: AchievementsBadgePillViewState
}
type CommentsState {
	commentLink: CommentLink
	link: Unknown
	refreshing: Boolean
	correlationId: String
	sortType: Unknown
	previousSortType: Unknown
	commentsTreeState: Unknown
	conversationAdViewState: Unknown
	conversationAdLink: Unknown
	speedReadSnapPosition: Unknown
	performanceTraceId: String
	isTruncated: Boolean
	isFromCache: Boolean
	showCollectibleExpressions: Boolean
	customEmojiSet: EmojiSet
	isInitialLoad: Boolean
	commentTreeAds: Unknown
	filter: Unknown
	isDefaultSortType: Boolean
	adMutations: Unknown
	conversationModes: Unknown
	commentIndexToScrollTo: Int
	prefetchedComments: PrefetchedComments
	isCommentingBlocked: Boolean
	subredditAllowsImagesInComments: Boolean
	subredditAllowedMediaTypesInComments: [Unknown]
}
type CommentsDependencies {
	commentsTarget: Unknown
	commentsParams: CommentsParams
	sourcePage: String
	analyticsPageType: String
}
type UserCommentA11yAnnouncement {
	description: String
	actions: Unknown
}
type SingleThreadMode {
	hasParent: Boolean
	commentIndexToScrollTo: Int
}
type Comments {
	isLoading: Boolean
	comments: Unknown
	isModModeEnabled: Boolean
	pageStartTime: Int
	singleThreadMode: SingleThreadMode
	postCarousel: PostCarousel
}
type CommentsSortOptionViewState {
	type: Unknown
	label: String
}
type PostCarousel {
	postId: String
	subredditName: String
}
type CommentsComposerViewState {
	isVisible: Boolean
	speedReadSnapPosition: Unknown
	imageButtonVisible: Boolean
	videoButtonVisible: Boolean
	customEmojis: Unknown
	isLocked: Boolean
}
type WithComposable {
	title: String
	subtitle: String
	imageResource: Unknown
	buttonEnabled: Boolean
}
type CommentsScreenViewState {
	commentViewState: Unknown
	commentsComposerViewState: CommentsComposerViewState
	conversationAdViewState: Unknown
	sortOption: CommentsSortOptionViewState
	commentsContext: Unknown
	postUnitState: PostUnitViewState
	isScreenFullyVisible: Boolean
	canSortComments: Boolean
	isModerator: Boolean
	isModModeEnabled: Boolean
	amaCommentFiltersViewState: CommentsAmaCommentFiltersViewState
	commentFiltersViewState: CommentsFilterBarViewState
}
type WithStateComposable {
	state: Unknown
}
type SearchContext {
	query: String
	sort: String
	range: String
	typeAheadActive: Boolean
	subredditId: String
	subredditName: String
	postFlairName: String
	metaFlairId: String
	metaFlairName: String
	isClientPrefNsfw: Boolean
	nsfw: Boolean
	structureType: Unknown
	searchCorrelation: Unknown
	pageType: String
}
type Subreddit {
	id: String
	isNsfw: Boolean
	isQuarantined: Boolean
	name: String
}
type SearchTrackingContextActionInfo {
	paneName: String
	position: Int
	type: String
	reason: String
}
type Metasearch {
	displayQuery: String
	rawQuery: String
}
type Post {
	id: String
	isNsfw: Boolean
	isSpoiler: Boolean
	title: String
}
type SearchTrackingContext {
	search: SearchTrackingContextSearch
	actionInfo: SearchTrackingContextActionInfo
	post: Post
	metasearch: Metasearch
	profile: Profile
	subreddit: Subreddit
}
type SearchEvent {
	source: String
	action: String
	noun: String
}
type SearchTelemetryPayload {
	trackingContext: SearchTrackingContext
	events: Unknown
}
type Profile {
	id: String
	name: String
}
type BlockedAccountsViewState {
	blockedAccounts: Unknown
	blockedAccountsState: Unknown
	accountSearchValue: String
	searchAccountsResult: [Unknown]
}
type AnalyticalCommentAttributes {
	id: String
	parentId: String
	depth: String
}
type OnNextButtonClick {
	nextScreen: Unknown
}
type ReportingFlowViewState {
	reportingData: Unknown
	showFormDataLoading: Boolean
	selectedOptionScreen: Unknown
	selectedPolicyOption: Unknown
	selectedPolicyNextStepOption: Unknown
	selectedSubredditRule: Unknown
	customRule: String
	selectedEvidenceScreenIndex: Unknown
	freeText: String
	isCtlReportSubmitted: Boolean
	isReportSubmitted: Boolean
	multiContentViewState: MultiContentViewState
}
type OnContentPolicyOptionSelected {
	option: Unknown
}
type OnContentItemCheckChanged {
	multiContentItem: MultiContentReportingItem
}
type PostCarouselItemVisibilityInfo {
	linkId: String
	uniqueId: String
	promoted: Boolean
	position: Int
	carouselType: Unknown
}
type OnFreeTextChanged {
	text: String
}
type OnLinkClick {
	url: String
	closeReport: Boolean
}
type OnSubredditRuleSelected {
	subredditRule: Unknown
}
type OnContentPolicyLeafOptionSelected {
	option: Unknown
}
type OnCustomRuleChanged {
	text: String
}
type MultiContentViewState {
	selectedContents: [Unknown]
	postsResult: Unknown
	commentsResult: Unknown
	selectedTabId: String
	disableNotSelectedItems: Boolean
	showItemsLoading: Boolean
	errorLoadingContentData: Boolean
}
type OnTabChangeRequested {
	buttonNavId: String
}
type Present {
	postCarouselComponent: PostCarouselComponent
}
type StartFetching {
	getFragment: Unknown
}
type Ready {
	postCarouselComponent: PostCarouselComponent
	shouldShowCta: Boolean
	onPostClick: Unknown
	onAttributionClick: Unknown
	onCtaClick: Unknown
	onCarouselVisible: Unknown
	onIndexVisible: Unknown
}
type FlexibleReportingFlowScreenDependencies {
	reportData: Unknown
	reportResultCallback: Unknown
}
type FilterItemUiState {
	filterSettingsName: Unknown
	filterValue: Boolean
}
type MatureContentSettingsViewState {
	subredditId: String
	filterToggleState: ToggleViewState
	saveButtonState: Unknown
	settingsViewState: SettingsViewState
	showDiscardDialog: Boolean
}
type FilterTestStringState {
	filterTestString: String
}
type SettingsModifications {
	filterEnabled: Boolean
	modmailEnabled: Boolean
	currentHatefulContentFilterSetting: Unknown
	currentHarassmentFilterTargetingSetting: Unknown
	currentContentActionFilterSetting: Unknown
	allowList: [Unknown]
	permittedWords: String
	filterTestString: String
	testStringFilterState: Unknown
}
type BanEvasionConfidenceSettingsUiState {
	filterName: Unknown
	confidenceLevel: Unknown
}
type PermittedWordsState {
	permittedWords: String
}
type SettingsModifications {
	filterEnabled: Boolean
	filterModmailEnabled: Boolean
	timeFrame: Unknown
	filterPosts: Unknown
	filterComments: Unknown
}
type SettingsModifications {
	filterEnabled: Boolean
	sexualPostsSetting: Boolean
	sexualCommentsSetting: Boolean
	graphicPostsSetting: Boolean
	graphicCommentsSetting: Boolean
}
type ToggleChange {
	value: Boolean
}
type OnChangeMatureFilterSelected {
	selectedFilterItemUiState: FilterItemUiState
}
type ReputationFilterConfidenceSettingsUiState {
	filterName: Unknown
	confidenceLevel: Unknown
}
type SettingsViewState {
	sexualPostsSettings: FilterItemUiState
	sexualCommentsSettings: FilterItemUiState
	graphicPostsSettings: FilterItemUiState
	graphicCommentsSettings: FilterItemUiState
}
type SafetyFiltersSettingsViewState {
	subredditName: String
	subredditId: String
	isReputationFilterSettingsEnabled: Boolean
	isTemporaryEventsEnabled: Boolean
	isBannedByRedditEnabled: ToggleViewState
}
type SettingsModifications {
	postsSettingsEnabled: Boolean
	postsConfidenceLevel: Unknown
	commentsSettingsEnabled: Boolean
	commentsConfidenceLevel: Unknown
}
type HarassmentFilterSettingsViewState {
	subredditId: String
	saveButtonState: Unknown
	filterToggleState: ToggleViewState
	filterModmailState: ToggleViewState
	settingsViewState: Unknown
	targetingViewState: Unknown
	contentActionViewState: Unknown
	permittedWordsString: PermittedWordsState
	testString: FilterTestStringState
	testStringFilterState: Unknown
	showDiscardDialog: Boolean
	showGetFeedback: Boolean
}
type ReputationFilterSettingsViewState {
	subredditId: String
	saveButtonState: Unknown
	postsToggleState: ToggleViewState
	postsConfidenceLevel: Unknown
	commentsToggleState: ToggleViewState
	commentsConfidenceLevel: Unknown
	showDiscardDialog: Boolean
	isCommentsFilterEnabled: Boolean
}
type OnBannedByRedditToggleChange {
	value: Boolean
}
type CommunityFlairs {
	flairs: [Unknown]
}
type FlairState {
	showViewAllFlair: Boolean
	hasMoreThan7Flairs: Boolean
	selectedFlair: Unknown
	displayFlairList: [Unknown]
	originalFlairList: Unknown
	searchWord: String
	searchEnabled: Boolean
	isSearchFocused: Boolean
	isFlairListExpanded: Boolean
}
type KarmaPilotArgs {
	communityId: String
	communityName: String
	karmaPilotEligibility: KarmaPilotEligibility
	showElsewhereOption: Boolean
}
type KarmaPilotViewState {
	communityName: String
	isUserAllowed: Boolean
	isAllRulesRequired: Boolean
	redditRules: Unknown
	communityRules: Unknown
	showElsewhereOption: Boolean
	karmaRulesExpanded: Unknown
	totalRedditKarma: String
	accountAge: String
}
type KarmaPilotDependencies {
	args: KarmaPilotArgs
}
type UploadFailure {
	id: String
}
type PostSubmitFailure {
	id: String
}
type PostSubmitStart {
	id: String
}
type UploadStart {
	id: String
}
type PostSubmitSuccess {
	id: String
}
type MuteCommunityBottomSheetViewState {
	subredditName: String
	toggleMute: Boolean
}
type ClubContentState {
	isVisible: Boolean
	isChecked: Boolean
}
type OnlineCtaClicked {
	presenceToggleState: Unknown
	showErrorToast: Unknown
}
type CrossPostsInfo {
	id: String
	icon: String
	permalink: String
	prefixedName: String
	isCommunity: Boolean
}
type OpenPostLocation {
	postId: String
}
type GenericError {
	postInformation: PostInfo
	quarantined: Boolean
}
type PostSetSharedToViewModelArgs {
	postSetId: String
	postId: String
}
type Args {
	postId: String
}
type OpenPostDetails {
	postId: String
}
type Stats {
	postInfo: PostInfo
	shareTotalCount: String
	shareTotalDisplayCount: String
	chartData: ChartData
	pastHourViewCount: String
	crossPosts: Unknown
	awardUrls: Unknown
	topComment: TopCommentPreview
	lowEngagement: Boolean
	hideChart: Boolean
}
type PostSet {
	items: [Unknown]
	showShareButton: Boolean
}
type BodyViewState {
	isVisible: Boolean
	field: Unknown
	placement: Unknown
}
type CreatorStatsScreenDependencies {
	is24HourDateFormat: Unknown
	timeFormatter: Unknown
	viewModelArgs: CreatorStatsViewModelArgs
	currentDateProvider: Unknown
	dateFormatter: Unknown
}
type OnAvatarNudgeClicked {
	nudge: AvatarNudgeUiModel
}
type PostSubmitDependencies {
	params: PostSubmitParams
	postSubmitTarget: Unknown
	getRouter: Unknown
	postSubmittedTarget: Unknown
}
type AiCopilotIconViewState {
	visible: Boolean
	loading: Boolean
	rules: [Unknown]
}
type OpenCrossPost {
	permalink: String
	communityId: String
	communityName: String
}
type OnAvatarNudgeDismissClicked {
	id: String
}
type PostInfo {
	postId: String
	title: String
	permalink: String
	thumbnailUrl: String
	subredditIconUrl: String
	subredditPrefixedName: String
	createdAtRelativeString: String
	scoreFriendlyCountString: String
	commentCount: Boolean
	isSpoiler: Boolean
}
type ShowErrorToast {
	message: String
}
type OpenCreatorStats {
	postId: String
}
type Link {
	preview: Unknown
}
type Link {
	title: String
	thumbnail: String
	author: String
	timeStamp: String
	subreddit: String
	domain: String
}
type Image {
	isGallery: Boolean
	displayWidthPixels: IptImageSizeModel
	images: [Unknown]
}
type OpenLink {
	link: String
}
type PostTypeSelectorOptionViewState {
	type: Unknown
	allowed: Boolean
}
type ChangeVoteState {
	postId: String
	voteState: Unknown
}
type Ama {
	data: AmaPostCreationViewState
}
type CreatorStatsViewModelArgs {
	postId: String
}
type AiCopilotPostComposerViewState {
	loading: Boolean
	error: Boolean
	rules: Unknown
	subredditNamePrefixed: String
	standaloneRedditCareComposerEnabled: Boolean
}
type Video {
	videoState: VideoItemViewState
}
type Params {
	correlationId: String
	subredditId: String
	subredditNamePrefixed: String
}
type CommunityViewState {
	communityName: String
	isUserCommunity: Boolean
	communityIcon: Unknown
	isPlaceholder: Boolean
}
type FlairViewState {
	id: String
	name: String
	backgroundColor: String
	textColor: Unknown
	chipState: FlairChipState
}
type InsightsUnavailable {
	postInformation: PostInfo
}
type MutedSubredditsViewState {
	mutedSubreddits: Unknown
	mutedSubredditsState: Unknown
	searchSubredditsResult: [Unknown]
	subredditSearchValue: String
}
type TagsViewState {
	hint: String
	isBrand: Boolean
	isNsfw: Boolean
	isSpoiler: Boolean
	requiresFlair: Boolean
	flair: FlairViewState
	showTagsAndFlairs: Boolean
	showFlairPicker: Boolean
	isClubContent: Boolean
}
type TooltipState {
	enabled: Boolean
	lastTimeDisabledMs: Int
}
type CarouselViewState {
	size: IptImageSizeModel
}
type Selector {
	options: [Unknown]
	doesNotAllowAttachments: Boolean
	aiCopilotIconViewState: AiCopilotIconViewState
}
type OpenProfile {
	postId: String
}
type PostSetSharedToScreenDependencies {
	onBackPressed: Unknown
	args: PostSetSharedToViewModelArgs
}
type SharePost {
	permalink: String
	hasNoData: Boolean
}
type Poll {
	fullLabel: String
	styledLabel: String
	pollDurationDays: Boolean
	options: [Unknown]
	showDurationSelector: Boolean
}
type FieldPostGuidanceMessages {
	messages: Unknown
}
type EditingPost {
	tags: TagsViewState
	body: BodyViewState
	actionButtonLabel: String
	title: Unknown
	isSubmittingPost: Boolean
	actionButtonEnabled: Boolean
	showKeyboard: Boolean
	clearFocus: Boolean
	showDiscardDialog: Boolean
	postTypeViewState: Unknown
	typeSelector: Unknown
	showTranslateToggle: Boolean
	translateToggleEnabled: Boolean
	postSubmissionMessage: String
	communityViewState: CommunityViewState
	canBeScheduled: Boolean
	toolbarTitle: String
	showCommunityChangeDialog: Boolean
	showAmaCoachmark: Boolean
	aiCopilotIconViewState: AiCopilotIconViewState
	clubContentToggle: ClubContentState
}
type SelectAvatarButtonPressed {
	target: Unknown
}
type SelectBannerButtonPressed {
	target: Unknown
}
type GotCreatorKitResult {
	result: Unknown
}
type Error {
	throwable: Unknown
}
type Params {
	subredditId: String
	communityDescription: String
}
type PickUsernameFlowScreenDependencies {
	view: Unknown
	getActivityRouter: Unknown
	getAuthCoordinatorDelegate: Unknown
	authTransitionParameters: AuthTransitionParameters
	getOnLoginListener: Unknown
	params: Params
}
type Params {
	pickUsernameRequest: Unknown
}
type UpdateDescriptionScreenDependencies {
	view: Unknown
	params: Params
	communityDescriptionUpdatedTarget: Unknown
	analyticsSubreddit: Unknown
	analyticsModPermissions: Unknown
}
type ImageInputViewState {
	url: String
	fileName: String
	imageSelected: Boolean
}
type Loaded {
	publicDescription: String
	banner: ImageInputViewState
	avatar: ImageInputViewState
	isUploading: Boolean
}
type ObscuredState {
	isObscuredByFullScreen: Boolean
	isObscuredByDialog: Boolean
	isObscuredByBottomSheet: Boolean
	isObscuredByUnknown: Boolean
}
type SaveConfirmation {
	username: String
	showProgress: Boolean
}
type ChangeUsernameSuccess {
	username: String
}
type TopLevelItemOpenedForEditing {
	item: DdgConfigValue
}
type DdgDynamicConfigOverridesViewState {
	filterQuery: String
	configurations: [Unknown]
	editing: EditingViewState
	mapItemEditing: MapItemEditingViewState
}
type SearchQueryChanged {
	searchQuery: String
}
type ValueEdited {
	name: String
	value: String
}
type MapItemEditingViewState {
	topLevelName: String
	mapKeyName: String
	value: String
}
type MapKeyOpenedForEditing {
	name: String
	keyName: String
	value: Unknown
}
type MapValueEdited {
	name: String
	keyName: String
	value: String
}
type EditingViewState {
	editedValue: DdgConfigValue
	overriddenMapKeys: Unknown
}
type DdgConfigValue {
	name: String
	value: Unknown
	isOverridden: Boolean
}
type Reset {
	name: String
}
type OnGeolocationSet {
	location: Unknown
}
type MockGeolocationViewState {
	secretAvailable: Boolean
	supportedLocations: Unknown
	mockedLocation: Unknown
}
type MockFeedElementUiModel {
	feed: Unknown
	position: String
}
type Params {
	username: String
}
type Parameters {
	isLink: Boolean
	idToken: String
	ssoProvider: String
	issuerId: String
	email: String
	passwordConfirmedTarget: Unknown
}
type EditUsernameSuccessScreenDependencies {
	view: Unknown
	params: Params
	getListener: Unknown
}
type ChangeUsername {
	initUsername: String
}
type Params {
	editUsernameFlowRequest: Unknown
}
type UpdateIconScreenDependencies {
	view: Unknown
	model: IconPresentationModel
	params: Params
	analyticsSubreddit: Unknown
	analyticsModPermissions: Unknown
	communityMediaUpdatedTarget: Unknown
}
type Params {
	subredditName: String
	subredditKindWithId: String
	currentIconUrl: String
}
type IconPresentationModel {
	iconUrl: String
	bgColor: Int
	iconType: Unknown
	selectedIconBgIndex: String
}
type InboxNotificationSectionViewState {
	id: String
	title: String
	rows: Unknown
}
type NavigateToSubreddit {
	subredditName: String
}
type OptionItemRow {
	description: String
	option: Unknown
	displayName: String
	isSelected: Boolean
}
type SectionsAndModSubredditsResult {
	sections: [Unknown]
	modSubreddits: [Unknown]
}
type Content {
	showNotificationPermissionPrompt: Boolean
	showSuccessBanner: Boolean
	showErrorBanner: Boolean
	sections: Unknown
}
type ToggleNotification {
	type: String
	isEnabled: Boolean
}
type UpdatedModNavigationItem {
	title: String
	type: String
	subredditName: String
	icon: CommunityImage
}
type ModNavigationItem {
	title: String
	type: String
	subredditName: String
	icon: CommunityImage
}
type NavigateToNotificationSettings {
	option: Unknown
}
type InboxSettingsModification {
	sectionsChanged: Unknown
	optionsChanged: Unknown
}
type ChangeConfirmation {
	username: String
}
type EditUsernameFlowScreenDependencies {
	view: Unknown
	params: Params
}
type FromToData {
	fromView: Unknown
	toView: Unknown
}
type Params {
	subredditScreenArg: SubredditScreenArg
	settingsMutations: Unknown
	analyticsModPermissions: Unknown
}
type AddContentLanguagePrefsViewState {
	contentLanguages: Unknown
	addLanguageButton: AddLanguageButtonState
}
type ContentLanguageDependencies {
	allContentLanguages: Unknown
}
type AddLanguageButtonState {
	text: String
	isEnabled: Boolean
	isLoading: Boolean
}
type ContentLanguagePrefsViewState {
	isDataLoading: Boolean
	spokenLanguages: Unknown
}
type Params {
	subreddit: SubredditScreenArg
	analyticsPageType: String
	showAsBottomSheet: Boolean
	v2Group: Unknown
	v2Target: Unknown
	v2ReloadOnAttach: Boolean
}
type RangeToggleSwitched {
	row: Unknown
	newValue: Boolean
}
type ToggleSwitched {
	row: Unknown
	newValue: Boolean
}
type GroupClicked {
	row: Unknown
}
type RangeChanged {
	row: Unknown
}
type WhitelistSettingUpdates {
	users: Unknown
}
type SelectGenderScreenDependencies {
	view: Unknown
	onboardingQuestionActionListener: Unknown
}
type Interactions {
	onBack: Unknown
}
type OnboardingCompletedSpinnerScreenDependencies {
	getRouter: Unknown
	getHostRouter: Unknown
	startParameters: StartParameters
	onboardingCompletionData: Unknown
}
type TopicSelectionLoading {
	continueButtonState: ContinueButtonState
	showElevation: Boolean
	isSkippable: Boolean
}
type Ready {
	snoovatar: Remote
}
type TopicSelectionScreenDependencies {
	getRouter: Unknown
	getHostRouter: Unknown
	getHostTopicsDataState: Unknown
	startParameters: StartParameters
}
type TopicSelectionSuccess {
	data: TopicSelectionViewModelState
}
type ContinueButtonState {
	text: String
	enabled: Boolean
	loading: Boolean
}
type TopicSelectionViewModelState {
	uiModels: Unknown
	continueButtonState: ContinueButtonState
	showElevation: Boolean
	isSkippable: Boolean
}
type SavingInProgress {
	snoovatar: Remote
}
type TopicSelectionError {
	continueButtonState: ContinueButtonState
	showElevation: Boolean
	isSkippable: Boolean
}
type OnSelectedSnoovatarChanged {
}
type SnoovatarOnboardingScreenDependencies {
	view: Unknown
	getRouter: Unknown
	getHostRouter: Unknown
	getHostTopicsDataState: Unknown
	startParameters: StartParameters
	onboardingCompletionData: Unknown
}
type RowState {
	firstVisibilityInfo: RowVisibilityInfo
	lastVisibilityInfo: RowVisibilityInfo
}
type LazyGridMeasureState {
	rowStates: Unknown
	rowFirstFillOrder: [Unknown]
	rowLastFillOrder: [Unknown]
	firstLinearIndexMap: Unknown
	lastLinearIndexMap: Unknown
	itemRowMap: Unknown
	scrollValue: Unknown
}
type RowVisibilityInfo {
}
type SaveableState {
	measureState: LazyGridMeasureState
	lastScroll: LazyGridMeasureState
}
type LazyFlowGridItemContent {
	itemIndex: Unknown
}
type RowResolutionResult {
	rowIndex: Boolean
}
type LazyGridMetadata {
}
type LazyGridDimensions {
}
type LazyGridItemPlacementResult {
	dimensions: LazyGridDimensions
	measureState: LazyGridMeasureState
	placeables: Unknown
}
type SelectSnoovatarScreenDependencies {
	startParams: StartParameters
	onboardingData: Unknown
	getRouter: Unknown
	getHostRouter: Unknown
}
type Loaded {
	snoovatarsCarouselItems: Unknown
}
type SnoovatarCarouselAccessibilityProperties {
	pageProperties: Unknown
}
type SnoovatarCarouselContentDescription {
	pageCount: String
}
type SnoovatarCarouselItem {
	id: String
	title: String
	imageUrl: String
}
type SavingError {
	snoovatar: Remote
}
type LoadingSucceeded {
	result: [Unknown]
}
type SelectUsernameScreenDependencies {
	view: Unknown
	getSelectUsernameActionListener: Unknown
	params: Params
}
type SelectedChatSetting {
	chatSettings: Unknown
}
type Params {
	initUsername: String
	source: Unknown
}
type SelectedDirectSetting {
	chatSettings: Unknown
}
type OnSettingSelected {
	chatSetting: Unknown
}
type OnSettingSelected {
	chatSetting: Unknown
}
type DirectChatRequestSettingsBottomSheetViewState {
	settings: Unknown
	selectedSetting: Unknown
	updateError: Unknown
}
type ChatRequestSettingsBottomSheetViewState {
	settings: Unknown
	selectedSetting: Unknown
	updateError: Unknown
}
type Loaded {
	directSettings: SettingsState
	chatSetting: SettingsState
	numWhitelisted: Int
	whitelistedVisible: Boolean
	directSettingsVisible: Boolean
}
type SettingsState {
	selectedSetting: Unknown
}
type Params {
	name: String
	description: Unknown
	privacyType: Unknown
	isNsfw: Boolean
}
type Loaded {
	searchInput: String
	searchResults: Unknown
	error: Unknown
	isSearching: Boolean
}
type UserViewModel {
	user: Unknown
	isWhitelisted: Boolean
}
type CommunityPickerScreenDependencies {
	view: Unknown
	getActivity: Unknown
	getContext: Unknown
	params: Unknown
	lifecycleOwner: Unknown
}
type SeeMoreCommunitiesUiModel {
	diffId: String
}
type AddToWhitelist {
	user: Unknown
}
type ChatWhitelistInteractions {
	onBack: Unknown
}
type CommunityUiModel {
	kindWithId: String
	subredditName: String
	userFacingName: String
	metaDataType: Unknown
	metadata: String
	contentDescription: String
	publicDescription: String
	icon: Unknown
	showNsfw: Boolean
	nsfwString: String
	community: Community
	disallowPostTypeMessage: String
	nsfwDrawableResId: Int
	nsfwTintResId: Int
	nsfwTextColor: Int
	diffId: String
	cannotPostToCommunityMessage: String
}
type RemoveFromWhitelist {
	user: Unknown
}
type SearchUpdated {
	input: String
}
type OperationError {
	type: Unknown
	retryAction: Unknown
}
type ConfirmPurchase {
	subscriptionType: Unknown
}
type PremiumMarketingScreenDependencies {
	view: Unknown
	parameters: Unknown
}
type ChooseYourPlan {
	showHeader: Boolean
}
type PremiumMarketingPricesUiModel {
	monthlyPrice: String
	annualPrice: String
	annualSavingsPercentage: Int
}
type PremiumPurchaseConfirmationScreenDependencies {
	view: Unknown
}
type CreateCommunityFormScreenDependencies {
	view: Unknown
	communityCreatedTarget: Unknown
}
type PremiumMarketingUiModel {
	isUserSubscribed: Boolean
	benefits: [Unknown]
	prices: PremiumMarketingPricesUiModel
	freeTrialDescription: Unknown
	purchaseStep: Unknown
}
type CreateCommunityFormUiModel {
	privacyType: Unknown
	isNsfw: Boolean
	isCreateButtonEnabled: Boolean
	isCreateButtonLoading: Boolean
	communityNameErrorMessage: String
	createCommunityDisclosureText: Unknown
}
type ToastAction {
	label: String
	onClick: Unknown
}
type Failure {
	error: Unknown
	lastSuccessfulValue: Unknown
	isLoading: Boolean
}
type Success {
	value: Unknown
	isLoading: Boolean
}
type ContentBehindInteraction {
	blocksTouchEvents: Boolean
}
type Parameters {
	inReplyTo: Unknown
	kindWithId: String
	sortType: Unknown
	subredditKindWithId: String
	subredditName: String
	activeAccountKindWithId: String
	linkKindWithId: String
	replyWith: Unknown
	correlationId: String
	composerSessionId: String
}
type VideoCommentParameters {
	markdownText: String
	parentType: Unknown
	sortType: Unknown
	parentKindWithId: String
	targetLanguage: String
	composerSessionId: String
	videoThumbnailPath: String
	replyPosition: Int
}
type Params {
	outfitName: String
	sheetTopOffset: SnoovatarModel
	defaultAccessories: [Unknown]
	outfitAccessories: [Unknown]
	originPaneNameValue: String
	nftData: NftData
}
type CustomFeedPresentationModel {
	name: String
	iconUrl: String
	onClicked: Unknown
}
type AddNewCustomFeedPresentationModel {
	onClicked: Unknown
}
type Params {
	sheetTopOffset: SnoovatarModel
	defaultAccessories: [Unknown]
	originPaneNameValue: String
}
type Loaded {
	accessories: Unknown
	snoovatarModel: SnoovatarModel
}
type CommunityUiModel {
	name: String
	metadataText: String
	icon: Unknown
	onClicked: Unknown
}
type ReadyToBeSaved {
	snoovatar: SnoovatarModel
	backgroundSelection: Unknown
}
type Input {
	snoovatarToSave: SnoovatarModel
	currentUserSnoovatar: SnoovatarModel
	sourceInfo: SnoovatarSourceInfo
}
type SuccessfulSave {
	username: String
	snoovatarImgUrl: String
}
type Loading {
	snoovatar: SnoovatarModel
	backgroundSelection: Unknown
}
type Loaded {
	accessories: Unknown
	snoovatarModel: SnoovatarModel
	isNftOutfit: Boolean
	showSecureYourVaultBanner: Boolean
}
type BuilderOutfitDetailsViewModelInput {
	currentSnoovatar: SnoovatarModel
	defaultAccessories: [Unknown]
	outfitAccessories: [Unknown]
	outfitName: String
	originPaneName: Unknown
	nftData: NftData
}
type OnAccessoryClick {
	model: AccessoryPresentationModel
	isCurrentlySelected: Boolean
}
type OnAccessoryClick {
	model: AccessoryPresentationModel
	isCurrentlySelected: Boolean
}
type PremiumNeeded {
	snoovatar: SnoovatarModel
	backgroundSelection: Unknown
}
type HeaderUiModel {
	title: String
	actionText: Unknown
	onActionClicked: Unknown
}
type WearingViewModelInput {
	currentSnoovatar: SnoovatarModel
	defaultAccessories: [Unknown]
	originPaneName: Unknown
}
type Saving {
	snoovatar: SnoovatarModel
	backgroundSelection: Unknown
}
type UserUiModel {
	name: String
	icon: Unknown
	onClicked: Unknown
}
type LoadInput {
	avatarId: String
	username: String
	avatarUrl: String
	source: Unknown
}
type Ready {
	model: SnoovatarModel
}
type CustomFeedHeaderPresentationModel {
	title: String
	iconUrl: String
	metadataLine1: String
	metadataLine2: String
	ctaText: String
	isCtaOutlined: Boolean
	description: [Unknown]
	visibility: Unknown
}
type ArtistId {
	artistId: String
}
type ArtistPageUiState {
	contentState: Unknown
}
type Loaded {
	result: Unknown
}
type ArtistPageParams {
	identifier: Unknown
}
type Username {
	username: String
}
type BuilderLoadingParams {
	loadInput: Unknown
	storefrontDestination: Unknown
	analyticsReferrer: DeepLinkInfo
	referrer: Unknown
}
type OnListingClicked {
	listingId: String
}
type AvatarUpdate {
	initialAvatarUpdate: BatchUpdate
	authorUsername: String
	source: Unknown
}
type OnTabChanged {
	newTab: Unknown
}
type Save {
	type: Unknown
}
type OnColorCleared {
	associatedCssClass: String
}
type OpenWearing {
	currentSnoovatar: SnoovatarModel
	defaultAccessories: [Unknown]
	originPaneName: Unknown
}
type OpenOutfitDetails {
	currentSnoovatar: SnoovatarModel
	defaultAccessories: [Unknown]
	outfitAccessories: [Unknown]
	outfitName: String
	originPaneName: Unknown
	nftData: NftData
}
type Loaded {
	tabs: Unknown
	snoovatarModel: SnoovatarModel
	undoAvailable: Boolean
	redoAvailable: Boolean
}
type OnTabSelected {
	builderTab: Unknown
}
type OpenConfirmation {
	snoovatarToBeSaved: SnoovatarModel
	userCurrentSnoovatar: SnoovatarModel
	snoovatarSourceInfo: SnoovatarSourceInfo
}
type OpenPastLooks {
	currentSnoovatar: SnoovatarModel
}
type Appearance {
	tabId: String
}
type ScrollToTop {
	tab: Unknown
}
type OnTabClicked {
	builderTab: Unknown
}
type Outfits {
}
type OnColorSelected {
	rgb: String
	associatedCssClass: String
}
type Loaded {
	tabs: [Unknown]
}
type OnOutfitClick {
	outfitPresentationModel: Unknown
}
type OnSnoovatarSelected {
	model: SnoovatarModel
}
type Contributor {
	id: String
}
type DispatchBackEvent {
	tab: Unknown
}
type OnMenuActionClick {
	action: Unknown
}
type SnoovatarSourceInfoParcel {
	source: Unknown
	sourceAuthorId: String
}
type NonThemedSeeAllClick {
	initialPaginationCursor: String
}
type FilteredSeeAllClick {
	sectionId: String
	sectionName: String
	initialPaginationCursor: String
	filter: StorefrontListingsFilterModel
}
type CategoryClick {
	categoryDetail: CategoryDetail
}
type LoadSuccess {
	data: InitialStorefrontData
}
type ArtistCarouselViewCreatorClick {
	artistId: String
	sectionIndex: Int
}
type AnnouncementBannerClicked {
	announcementBanner: AnnouncementBannerRow
}
type Loaded {
	categoryDetail: CategoryDetail
}
type SortBottomSheetScreenDependencies {
	sortOptions: [Unknown]
	sortOptionListener: Unknown
}
type SortSheetViewState {
	sortOptions: Unknown
}
type ArtistItemClick {
	artistId: String
	sectionIndex: Int
}
type API {
	error: Unknown
}
type LoadFailure {
	error: Unknown
}
type BrowseAllCategoriesScreenDependencies {
	params: BrowseAllCategoriesParams
}
type BrowseAllCategoriesViewState {
	title: String
	categories: Unknown
}
type CategoriesSeeAllClick {
	categoryRowSectionId: String
}
type BrowseAllCategoriesParams {
	sectionId: String
}
type LoadInput {
	refreshCache: Boolean
	id: String
}
type OutfitItemClick {
	storefrontListingId: String
	paneSection: Unknown
	sectionIndex: Int
}
type Loaded {
	components: [Unknown]
}
type OnAnnouncementBannerViewed {
	announcementBanner: AnnouncementBannerRow
}
type Params {
	multiredditToCopy: Unknown
	customFeedCreatedTarget: Unknown
	initialSubredditName: String
}
type AnnouncementBannerDetailsViewState {
	contentList: Unknown
}
type ColorSelected {
	rgb: String
	associatedCssClass: String
}
type Params {
	sheetTopOffset: SnoovatarModel
	originPaneNameValue: String
}
type Loaded {
	models: Unknown
}
type PastLookItemViewState {
	snoovatarModel: SnoovatarModel
	nftBackground: String
	isNft: Boolean
}
type AccessorySelected {
	model: AccessoryPresentationModel
	currentlySelected: Boolean
}
type ArtistListContentState {
	items: Unknown
	appendState: Unknown
}
type OnUtilityTypeSelected {
	selectedUtilityType: Unknown
}
type Loaded {
	selectedMode: Unknown
	selectedUtilityType: Unknown
	galleryPresentationMode: ListingPresentationType
	filters: Unknown
	contentUiState: Unknown
	sortOption: Unknown
}
type RawString {
	raw: String
}
type Loaded {
	filters: Unknown
}
type OnModeSelected {
	selectedMode: Unknown
}
type GalleryViewParams {
	initialPaginationCursor: String
	initialMode: Unknown
	modes: [Unknown]
}
type OnUtilityTypeClicked {
	currentUtilityType: Unknown
}
type Filter {
	id: String
	label: String
	iconUrl: String
}
type Loaded {
	items: Unknown
	pageLoadingState: PageLoadingState
}
type PageLoadingState {
	prependState: Unknown
	appendState: Unknown
}
type Filtered {
	filterName: String
	filter: StorefrontListingsFilterModel
}
type StringResource {
}
type UtilityTypeSelectionNavigationRequest {
	currentUtilityType: Unknown
}
type OnFilterClicked {
	filter: PriceFilter
}
type OnModeClicked {
	currentMode: Unknown
}
type OnGalleryComfyModeSwitched {
	isNewComfyModeEnabled: Boolean
}
type ModeSelectionNavigationRequest {
	currentMode: Unknown
	selectableModes: [Unknown]
}
type OnOutfitClicked {
	storefrontListingId: String
}
type OnSortOptionChanged {
	sortOption: Unknown
}
type OnUtilityFilterSelected {
	filter: Unknown
}
type UtilityFilterSelectionUiState {
	selectedUtilityType: Unknown
	utilityTypes: Unknown
}
type Loaded {
	models: Unknown
}
type Loaded {
	pastLooks: Unknown
	snoovatarModel: SnoovatarModel
}
type OnSnoovatarClick {
	pastLook: PastLookItemViewState
}
type ArtistListScreenUiState {
	sortOrder: Unknown
	contentState: Unknown
}
type PastLooksViewModelInput {
	currentSnoovatar: SnoovatarModel
	paneName: Unknown
}
type ArtistClicked {
	artist: StorefrontArtistUiModel
}
type BuilderAppearanceViewModelInput {
	appearanceTabId: String
}
type OnOutfitClick {
	outfitPresentationModel: Unknown
}
type VideoParams {
	videoThumbnailPath: String
	videoFilePath: String
	continuation: Unknown
}
type CommentParams {
	markdownText: String
	parentType: Unknown
	sortType: Unknown
	parentKindWithId: String
	targetLanguage: String
	linkKindWithId: String
	composerSessionId: String
	replyPosition: Int
}
type SubmitSuccess {
	linkKindWithId: String
	comment: Unknown
	mediaInfo: MediaInfo
	composerSessionId: String
	replyPosition: Int
}
type SubmitFailure {
	linkKindWithId: String
}
type Content {
	title: String
	communities: Unknown
}
type RecapLandingViewState {
	userReapViewState: Unknown
	subredditRecapViewState: Unknown
}
type ViewMoreSubredditsClick {
	categoryId: String
	categoryName: String
}
type Success {
	featuredCommunitySections: Unknown
}
type SubredditRecapCardClick {
	community: RecapCommunity
	category: String
}
type RecapCategoryInfo {
	categoryId: String
	categoryName: String
}
type CommunityClick {
	community: RecapCommunity
}
type RecapLandingScreenDependencies {
	recapEntryPoint: Unknown
}
type UserRecapContent {
	userName: String
	userAvatar: Unknown
}
type Loading {
	title: String
}
type RecapCommunitiesListScreenDependencies {
	entryPoint: Unknown
	categoryInfo: RecapCategoryInfo
}
type Error {
	title: String
}
type HistoryLoadDataParams {
	username: String
	sort: Unknown
	after: String
	refresh: Boolean
}
type Parameters {
	sortState: Unknown
}
type HistoryListingData {
	links: Unknown
	models: [Unknown]
}
type ReplyCommentResult {
	replyIdentifier: String
	response: Unknown
}
type ReplyError {
	replyIdentifier: String
	exception: Unknown
}
type AccountInfoResult {
	accountInfo: Unknown
	presenceState: Unknown
	vaultDrawerInfo: VaultDrawerInfo
}
type ProvisionsDelegateDependencies {
	activity: Unknown
	context: Unknown
	analyticsPageType: Unknown
}
type NavDrawerHelperDependencies {
	view: Unknown
	screen: Unknown
}
type ComposableNavDrawerHelperDependencies {
	screen: Unknown
	accountSwitcherNavigator: Unknown
	drawerController: Unknown
}
type Params {
	subredditKindWithId: String
	subredditName: String
	source: Unknown
}
type WithDrawable {
	title: Unknown
	drawable: Unknown
	destination: Unknown
	subtitle: Subtitle
	hasDivider: Boolean
}
type Premium {
	status: Unknown
}
type CommunityDrawerSectionUiModel {
	items: [Unknown]
	paginationType: Unknown
}
type ContributorProgramForAward {
	goldBalance: Int
}
type HeaderItemUiModel {
	uniqueId: Int
	type: Unknown
	isCollapsed: Boolean
	badgeCount: String
	isRecentlyVisited: Boolean
}
type PremiumSubscriber {
	memberSinceDateString: String
}
type CommunityDrawerScreenDependencies {
	view: Unknown
	analyticsPageType: Unknown
	canSelectBottomNav: Unknown
}
type CTAItemUiModel {
	uniqueId: Int
	titleResId: Unknown
	iconResId: Unknown
	showBadge: Boolean
}
type Click {
}
type PaginationItemUiModel {
	uniqueId: Int
	type: Unknown
}
type RetryLoading {
}
type OnlineStatus {
	isOnline: Boolean
}
type SubredditItemUiModel {
	uniqueId: Int
	icon: Unknown
	displayNamePrefixed: String
	subredditName: String
	subredditId: String
	subredditKindWithId: String
	isFavorite: Boolean
	isUser: Boolean
	additionalClickAction: Unknown
	removable: Boolean
}
type OnNavMenuItemClicked {
	item: Unknown
}
type RecentlyVisitedSeeAllClicked {
}
type AccountSwitcher {
	userName: String
	adminIconVisible: Boolean
	premiumIconVisible: Boolean
}
type Subtitle {
	text: Unknown
	icon: Unknown
}
type Vault {
	subtitleText: Int
}
type ModQueueItemUiModel {
	uniqueId: Int
	badgeCount: String
}
type CommunityDrawerUiModel {
	subscribed: CommunityDrawerSectionUiModel
	moderating: CommunityDrawerSectionUiModel
	following: CommunityDrawerSectionUiModel
}
type DividerItemUiModel {
	uniqueId: Int
}
type FavUnfavClicked {
}
type LoggedIn {
	avatarProfileContent: Unknown
	accountSwitcher: AccountSwitcher
	showVerifiedLabel: Boolean
	navDrawerStatsContent: Unknown
	statsContentArgs: StatsContentArgs
	onlineStatus: OnlineStatus
	navMenuItems: Unknown
	navDrawerIcon: NavDrawerIcon
}
type LoggedOut {
	avatarProfileContent: Unknown
	navMenuItems: Unknown
}
type PremiumNonSubscriber {
	expirationDateString: String
}
type GenericItemUiModel {
	uniqueId: Int
	titleResId: Boolean
	tintItem: Boolean
	itemType: Unknown
}
type RecentlyVisitedScreenDependencies {
	view: Unknown
	analyticsPageType: Unknown
}
type RemoveClicked {
}
type SubredditItemLoadingUiModel {
	uniqueId: Int
}
type WithIcon {
	title: Unknown
	destination: Unknown
	subtitle: Subtitle
	hasDivider: Boolean
}
type NavDrawerIcon {
	avatar: Unknown
	userName: String
	isOnline: Boolean
}
type StatsContentArgs {
	accountStats: AccountStats
	onKarmaClickLabel: Unknown
	onAchievementsClickLabel: Unknown
}
type Overlay {
	contentType: Unknown
}
type SubredditFeedOptionsBottomSheetScreenArgs {
	subreddit: Unknown
	menus: [Unknown]
}
type OnToggleHideAvatar {
	card: Unknown
	isHidden: Boolean
}
type OnClickFinalCardCta {
	card: Unknown
	ctaType: Unknown
}
type OnClickOpenComment {
	card: Unknown
	postId: String
	postTitle: String
	commentId: String
	subredditId: String
	subredditName: String
}
type OnClickOpenRecapSubreddit {
	card: Unknown
	subredditName: String
	subredditId: String
}
type OnClickShare {
	card: Unknown
}
type OnScrolledToIndex {
	card: Unknown
}
type OnUpdateCarouselCardIndex {
	card: Unknown
}
type User {
	subredditScreenArg: SubredditScreenArg
	subreddit: String
	subredditId: String
	subredditDisplayName: String
	linkId: String
	linkKindWithId: String
	linkTitle: String
	username: String
	userId: String
	isModerator: Boolean
	link: Unknown
	comment: Unknown
}
type ModNoteUiState {
	modNoteUiModel: ModNoteUiModel
	noteCount: Int
	note: Unknown
}
type Link {
	subredditScreenArg: SubredditScreenArg
	subreddit: String
	subredditId: String
	subredditDisplayName: String
	linkId: String
	linkKindWithId: String
	linkTitle: String
	username: String
	userId: String
	isModerator: Boolean
	link: Unknown
	comment: Unknown
}
type DotAnimation {
	sizeAnim: Unknown
	offsetAnim: Unknown
	colorAnim: Unknown
}
type DotStyle {
	currentDotRadius: Unknown
}
type UserModalInfo {
	account: Unknown
	currentUserAccount: Unknown
	isBanned: Boolean
	isMuted: Boolean
	canBeInvitedToCommunity: Boolean
	showViewProfile: Boolean
	showInviteToChatButton: Boolean
	nftCardUiState: Unknown
	modNoteUiState: ModNoteUiState
	userGoldBalance: Int
	userContributorTier: String
	isBlocked: Boolean
	achievementsUiState: Unknown
	isModerator: Boolean
}
type OnCardThemeChanged {
	theme: Unknown
}
type OnClickOpenRecapMenu {
	card: Unknown
}
type OnShareTargetSelected {
	selection: Unknown
}
type RecapContent {
	cards: Unknown
	cardCaptureRequest: CaptureRequest
	hasDarkStatusBar: Boolean
	areAnimationsEnabled: Boolean
	carouselCardShareIndexes: Unknown
	initialIndex: Boolean
}
type OnScreenVisibleFirstTime {
	entryPoint: Unknown
}
type ErrorState {
	isRetrying: Boolean
}
type OnCardCaptured {
	bitmap: Unknown
	error: Unknown
}
type OnClickOpenCommunity {
	card: Unknown
	subredditName: String
	subredditId: String
}
type OnClickClose {
	card: Unknown
}
type CaptureRequest {
	card: Unknown
	shareSize: Unknown
}
type Subreddit {
	subredditName: String
}
type RecapScreenDependencies {
	recapType: Unknown
	entryPoint: Unknown
	shareScreenTarget: Unknown
}
type Comment {
	subredditScreenArg: SubredditScreenArg
	subreddit: String
	subredditId: String
	subredditDisplayName: String
	linkId: String
	linkKindWithId: String
	linkTitle: String
	username: String
	userId: String
	isModerator: Boolean
	link: Unknown
	comment: Unknown
	commentId: String
	commentKindWithId: String
}
type OnClickOpenPost {
	card: Unknown
	postId: String
	postTitle: String
	subredditName: String
	subredditId: String
}
type SortTimeFrameMenuItem {
	id: Unknown
}
type Tap {
	itemId: Int
}
type Item {
	id: String
	parentId: Int
	title: String
	titleRichText: Unknown
	richTextUtil: Unknown
	icon: Unknown
	submenuId: Int
	selected: Boolean
	disabled: Boolean
	checkMarked: Boolean
	subtitle: String
	extras: Unknown
}
type SubredditHeaderDependencies {
	getContext: Unknown
}
type MenuGroup {
	id: String
	items: [Unknown]
}
type ProcessedTextHighlight {
	text: String
	highlights: Unknown
}
type SubredditFeedOptionsMenu {
	id: [Unknown]
	titleRes: Int
}
type Content {
	hideBottomSheet: Boolean
	menu: SubredditFeedOptionsMenu
}
type TextHighlight {
	text: String
}
type PostChannelTap {
	channelId: String
	channelName: String
	selected: Boolean
}
type SubredditHeaderMapperDependencies {
	getContext: Unknown
}
type SubredditFeedOptionsBottomSheetScreenDependencies {
	subreddit: Unknown
	menus: [Unknown]
	listener: Unknown
}
type OnClickShareTarget {
	selection: Unknown
}
type OnJoinClick {
	wrappedAction: OnSubscribeButtonClicked
}
type OnTopicButtonVisible {
	taxonomyTopic: TaxonomyTopicInfo
}
type OnBannerLoaded {
	drawable: Unknown
}
type OnToolbarJoinClick {
	wrappedAction: OnSubscribeButtonClicked
}
type OnHeaderExpandStateChanged {
	isExpanded: Boolean
}
type Idle {
	isJoined: Boolean
	paidSubState: Unknown
	hasJustChanged: Boolean
}
type Palette {
	keyColor: Int
}
type OnDayZeroTaskClick {
	taskId: String
}
type SubredditHeaderError {
	type: Unknown
	throwable: Unknown
}
type RecapShareSheetScreenDependencies {
	shareScreenTarget: Unknown
}
type RecapShareDrawable {
	drawable: Unknown
}
type OtherOptions {
	icon: RecapShareDrawable
	label: String
}
type TaxonomyTopicInfo {
	id: String
	name: String
	displayName: String
}
type OnSearchClick {
	palette: Palette
}
type SaveImage {
	icon: RecapShareDrawable
	label: String
}
type RecapShareSheetViewState {
	shareTargets: Unknown
	shouldHideSheet: Boolean
}
type CopyImage {
	icon: RecapShareDrawable
	label: String
}
type OnTopicButtonClick {
	taxonomyTopic: TaxonomyTopicInfo
}
type User {
	avatar: Unknown
	username: String
}
type OnError {
	error: SubredditHeaderError
}
type IntentShareTarget {
	packageName: String
	activityName: String
	icon: RecapShareDrawable
	label: String
}
type EntrypointClickBanner {
	context: Unknown
}
type PersonalRecap {
	user: User
}
type UserAccountParams {
	appLaunchedFromDeeplink: Boolean
}
type UrlWithUsername {
	linkType: Unknown
	username: String
	error: String
	loading: Boolean
}
type EditUsername {
	username: String
}
type SelectSocialLinkType {
	type: Unknown
}
type EditDisplayText {
	displayText: String
}
type Loading {
	addingNewLink: Boolean
	canSave: Boolean
}
type ComplexUrl {
	linkType: Unknown
	url: String
	displayText: String
	error: String
	loading: Boolean
}
type RedditEntity {
	redditEntity: String
	error: String
	loading: Boolean
}
type SocialLinkTypes {
	socialLinkTypes: Unknown
}
type SocialLinkEditor {
	uiModel: Unknown
	canSave: Boolean
	isEditing: Boolean
	isNewSocialLink: Boolean
	shouldHandleBack: Boolean
}
type EditRedditEntity {
	redditEntity: String
}
type Args {
	socialLink: Unknown
	socialLinkType: Unknown
}
type EditUrl {
	url: String
}
type SubredditHeaderState {
	displayNamePrefixed: String
	subredditKindWithId: String
	publicDescription: String
	avatarImgUrl: String
	bannerImgUrl: String
	isTiledBanner: Boolean
	bannerBackgroundColor: String
	colorPalette: Palette
	forceDefaultBanner: Boolean
	joinState: Unknown
	showJoinButton: Boolean
	showModeratorButton: Boolean
	showModeratorButtonRulesTooltip: Boolean
	formattedMembersCount: String
	formattedActiveAccountsCount: String
	membersCountContentDescription: String
	initialCollapseBehavior: Unknown
	isExpanded: Boolean
	showRecapEntrypoint: Boolean
	taxonomyTopics: [Unknown]
	showTranslateButton: Boolean
	communityStatus: CommunityStatus
	userHasManageSettingsPermission: Boolean
	subredditDayZero: SubredditDayZero
	leaderboard: LeaderboardEntrypointViewState
	showArenaEventsCarousel: Boolean
}
type AddOrEditSocialLinkSheetViewModelArgs {
	type: Unknown
	socialLink: Unknown
}
type RecapTopNavViewState {
	appBarVerticalOffset: Boolean
}
type CommunityRecap {
	isNewSubredditBannerEnabled: Boolean
	subredditImageUrl: String
	subredditPrimaryColor: Int
	subredditNamePrefixed: String
}
type BannerActionClick {
	action: Unknown
}
type TogglesViewState {
	public: Boolean
	showActiveCommunities: Boolean
}
type HeaderViewState {
	avatar: Unknown
	editAvatarButtonState: Unknown
	banner: BannerViewState
	editBannerButtonState: Unknown
}
type SocialLinkRemoveClick {
	id: String
}
type OnAddToCustomFeedClicked {
	customFeedPickedTarget: Unknown
}
type ProfileDetailsScreenScreenDependencies {
	username: String
	onBackPressed: Unknown
	canGoBack: Unknown
	replaceWithHome: Unknown
	profileDetailTarget: Unknown
	socialLinkEditorTarget: Unknown
}
type ActiveInCommunitiesDependencies {
	username: String
}
type TotalContributionsViewState {
	commentContributionsCount: String
	postContributionsCount: String
}
type ActiveCommunityUiModel {
	id: String
	subredditNamePrefixed: String
	subredditName: String
	formattedMemberCount: String
	memberCount: String
	description: String
	isLoading: Boolean
}
type Content {
	profileVisibilityPresentationModel: ProfileVisibilityPresentationModel
	communities: Unknown
}
type TotalCommunitiesDependencies {
	username: String
}
type AvatarActionClick {
	action: Unknown
}
type OnSubredditClick {
	subredditName: String
	subredditNamePrefixed: String
}
type Loading {
	loadingCommunities: Unknown
}
type OnAchievementsPressed {
}
type DropSlotRef {
	id: String
}
type Loaded {
	currentProfile: Unknown
	profileToDisplay: Unknown
	socialLinksCollapsed: Boolean
	nftCardUiState: Unknown
	userGoldBalance: Int
	activeInCommunities: [Unknown]
}
type ViewSocialLinksBottomSheetViewState {
	socialLinkUiModels: Unknown
	addLinkButtonState: Unknown
}
type OnSocialLinkClick {
	socialLink: SocialLink
}
type ViewSocialLinksDependencies {
	username: String
	socialLinkEditorTarget: Unknown
}
type BannerViewState {
	imageUrl: String
	isUploading: Boolean
}
type OnSingleSocialLinkClicked {
	socialLink: SocialLink
}
type AboutFieldViewState {
	about: String
}
type PostCreationClicked {
	postSubmitTarget: Unknown
	correlationId: String
}
type ReorderSocialLinks {
	fromId: String
	toId: String
}
type OnGetThemHelpClicked {
	userId: String
	username: String
}
type OnSendMessageClicked {
	recipient: String
}
type SocialLinkClick {
	id: String
}
type ToggleChange {
	toggle: Unknown
	value: Boolean
}
type AboutChange {
	text: String
}
type DisplayNameChange {
	text: String
}
type AvatarActionsModalViewState {
	actions: Unknown
}
type OnUnblockUser {
	currentScreenName: String
}
type SnoovatarViewState {
	fullbodyImageUrl: String
}
type OnBlockUserClicked {
	username: String
	currentScreenName: String
}
type BannerActionsModalViewState {
	actions: Unknown
}
type ProfileEditViewState {
	saveButton: Unknown
	header: HeaderViewState
	displayNameField: DisplayNameFieldViewState
	aboutField: AboutFieldViewState
	toggles: TogglesViewState
	socialLinks: SocialLinksViewState
	avatarActionsModal: AvatarActionsModalViewState
	bannerActionsModal: BannerActionsModalViewState
	shouldHandleBack: Boolean
}
type ImageModification {
	localFile: Unknown
	remoteUrl: String
}
type CommunityIconViewState {
	communityIcon: Unknown
	isUploading: Boolean
}
type SocialLinksViewState {
	items: Unknown
	showAddButton: Boolean
}
type DisplayNameFieldViewState {
	displayName: String
}
type ProfileModifications {
	displayName: String
	about: String
	public: Boolean
	showActiveCommunities: Boolean
	avatar: ImageModification
	banner: ImageModification
	socialLinks: [Unknown]
	deletedSocialLinkIds: [Unknown]
}
type OnViewCustomFeedClicked {
	multireddit: Unknown
}
type OnOpenSocialLink {
	socialLinkUiModel: SocialLink
}
type ImagePick {
	imageFile: Unknown
}
type ClubContentState {
	isEnabled: Boolean
}
type ItemFollowClicked {
	userId: String
}
type ItemClicked {
	userId: String
}
type Loaded {
	channels: [Unknown]
	modEnabled: Boolean
	preSelectedChannelFromDeepLink: Unknown
	clubContent: ClubContentState
}
type IndexedTab {
	index: Unknown
}
type FetchError {
	message: String
	code: Int
}
type FollowerListScreenDependencies {
	view: Unknown
}
type FetchOperation {
	input: [Unknown]
	fetch: Unknown
}
type Params {
	bundleImprovementsEnabled: Boolean
	subredditDisplayName: String
	subredditId: String
	menuWidget: Unknown
}
type OnFeedOptionsClicked {
	channelId: String
	subredditFeedOptionsBottomSheetListener: Unknown
	channels: [Unknown]
	subreddit: Unknown
}
type SubredditMenuScreenDependencies {
	view: Unknown
	params: Params
}
type Error {
	throwable: Unknown
}
type OnChatChannelClicked {
	chatChannelIndex: Unknown
}
type SendChannelTapNavigationEvent {
	navIndex: Unknown
	version: Unknown
}
type OnViewCustomFeedClicked {
	multireddit: Unknown
}
type SendCommunityHeaderClickEvent {
	expanded: Boolean
}
type OnSearchClicked {
	palette: Palette
}
type OnPageSelected {
}
type OnTopicClicked {
	topic: TaxonomyTopicInfo
}
type OnDayZeroTaskClick {
	taskId: String
}
type OnPostCreationClicked {
	postSubmittedTarget: Unknown
	correlationId: String
}
type Loaded {
	channelsNavigationEnabled: Boolean
}
type OnCommunitySettingsChanged {
	subreddit: Unknown
}
type OnTabSelected {
	tabIndex: Unknown
}
type SendChannelSwipeNavigationEvent {
	navCurrentIndex: Unknown
}
type OnDevPlatformContextActionActionId {
}
type OnWelcomeScreenAction {
	action: PostSubmitted
}
type SendChannelViewEvent {
	channelIndex: Unknown
}
type SendChannelDeselectNavigationEvent {
	navIndex: Unknown
	version: Unknown
}
type OnShareClicked {
	shareTrigger: Unknown
}
type OnWelcomeMessageAction {
	action: Unknown
}
type OnNotificationLevelPicked {
	notificationLevel: Unknown
	onNotificationLevelChanged: Unknown
}
type SubredditPagerV2ScreenDependencies {
	view: Unknown
	sourcePage: Unknown
	incognitoAuthParams: Unknown
	notificationDeeplinkParams: Unknown
	subredditPagerParams: Unknown
}
type OnSubscribeButtonClicked {
	action: Unknown
}
type OnPostSubmitted {
	subredditName: String
	linkId: String
}
type OnTopicVisible {
	topic: TaxonomyTopicInfo
}
type OnModerateClicked {
	onModerateClickedDelegate: Unknown
	subreddit: Unknown
}
type SourceImage {
	filePath: String
	originalFilePath: String
	imageInfo: Unknown
}
type Ama {
	startTimestamp: Int
	selfieImageUrl: String
}
type Video {
	thumbnail: String
	video: String
	originalVideoPath: String
	continuation: Unknown
	jobUuids: [Unknown]
	videoInfo: Unknown
	mediaId: String
	requestId: String
	editingExistingVideo: Boolean
}
type Poll {
	options: [Unknown]
	pollDurationDays: Boolean
}
type SubredditFeedScreenDependencies {
	analyticsScreenData: ScreenPageData
	feedType: Unknown
	screenName: Unknown
	sourcePage: Unknown
	subredditName: String
	subredditId: String
	subredditChannelId: String
	postChannelEnabled: Boolean
	subredditChannelsNavigator: Unknown
	pendingPostId: String
}
type TextElement {
	contentType: String
	text: String
	formatting: [Unknown]
}
type TableHeaderCell {
	columnAlignment: String
	content: [Unknown]
}
type RedditLinkElement {
	contentType: String
	permalink: String
}
type ListItemElement {
	contentType: String
	content: [Unknown]
}
type LinkElement {
	contentType: String
	text: String
	urlString: String
	outboundLinkUrlString: String
	formatting: [Unknown]
	alternativeText: String
}
type BlockQuoteElement {
	contentType: String
	content: [Unknown]
	author: Unknown
}
type NewLineElement {
	contentType: String
}
type RawTextElement {
	contentType: String
	text: String
}
type ParagraphElement {
	contentType: String
	content: [Unknown]
}
type SpoilerTextElement {
	contentType: String
	content: [Unknown]
}
type UnknownElement {
	contentType: String
}
type HorizontalRuleElement {
	contentType: String
}
type HeadingElement {
	contentType: String
	headingLevel: [Unknown]
}
type TableElement {
	contentType: String
	headerRow: [Unknown]
	tableRows: [Unknown]
}
type ListElement {
	contentType: String
	isOrdered: Boolean
	content: [Unknown]
}
type TableCell {
	content: [Unknown]
}
type CodeBlockElement {
	contentType: String
	content: [Unknown]
	language: String
}
type OnPinnedPostClickedEvent {
	element: PinnedPostsElement
	postIndex: Unknown
}
type FetchSubredditParams {
	after: String
	subredditName: String
	subredditId: String
	subredditChannelId: String
	correlationId: String
	sort: Sort
	pendingPostId: String
	feedLayout: FeedLayout
	adContextInput: AdContextInput
	experimentOverrides: [Unknown]
	filterPostIds: [Unknown]
}
type Image {
	community: Community
	carouselCurrentIndex: Int
	displayWidthPixels: Int
	selectedImages: [Unknown]
	carouselSize: IptImageSizeModel
}
type Link {
	field: Unknown
	preview: Unknown
}
type PostSubmitState {
	isNsfw: Boolean
	isBrand: Boolean
	postSetId: String
	isSpoiler: Boolean
	selectedFlair: Unknown
	isSubmitting: Boolean
	showDiscardDialog: Boolean
	selectedCommunity: Community
	linkTextSelection: Unknown
	translateToggleEnabled: Boolean
	translationAccepted: Boolean
	translationEnabled: Boolean
	body: Unknown
	allowSingleAttachment: Boolean
	showingHyperLinkDialog: Boolean
	selectedPostTypeState: Unknown
	postGuidanceState: PostGuidanceState
	title: Unknown
	schedulePostModel: Unknown
	communityPendingChange: Community
	hideAmaCoachmark: Boolean
	aiCopilotIconViewState: AiCopilotIconViewState
	standaloneRedditCareMessageViewed: Boolean
	isClubContentChecked: Boolean
}
type Url {
	url: String
	keyColor: Int
}
type Nsfw {
	shape: Unknown
}
type CommunityDescriptionPresentationModel {
	communityDescription: String
	charsLeft: Boolean
}
type UserFlair {
	id: String
	title: String
}
type SubredditRecap {
	subredditName: String
}
type FlairPromptEvent {
	action: String
	noun: String
	actionInfo: ActionInfo
	subreddit: Subreddit
	userFlair: UserFlair
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type DeactivateAccountClickDelete {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type Subreddit {
	id: String
	name: String
}
type SnoovatarUrl {
	headshotUrl: String
	fullBodyUrl: String
	keyColor: Int
}
type Url {
	url: String
	keyColor: Int
}
type Default {
	keyColor: Int
}
type Community {
	id: String
	name: String
	subscriptionState: Unknown
	icon: Unknown
	description: String
	topicLabel: String
	subscribersCount: StringWithDescription
	prefixedName: String
	recommendationSource: String
	postsIn7Days: StringWithDescription
}
type ImageUrl {
	url: String
}
type PostRecommendation {
	url: String
	uniquePostId: String
	community: Community
	thumbnail: Unknown
	upVotesCountText: String
	commentsCountText: String
	displayTitle: String
}
type CommunityClick {
	noun: String
	post: Unknown
	listing: Unknown
	userPreferences: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	chat: Unknown
	userSubreddit: UserSubreddit
	outbound: Unknown
	topicTag: TopicTag
	topicMetadata: Unknown
	feed: Feed
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type StringWithDescription {
	value: String
	contentDescription: String
}
type SubredditIcon {
	communityIcon: Unknown
}
type PostStatsEntryPointEvent {
	action: String
	actionInfo: ActionInfo
	userPreferences: Unknown
	targetPost: Post
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type SettingsMessagingSaveRecieveMessages {
	correlationId: String
	actionInfo: ActionInfo
	setting: Setting
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type AccountSelectorClickBack {
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ModmailUnselectBulkActionAll {
	listing: Unknown
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type UrlPreviewSummary {
	previewImageUrl: String
	linkUrl: String
	title: String
	description: String
	previewImageWidth: Int
	previewImageHeight: Int
	linkType: Unknown
	numberOfUpvotes: Int
	numberOfComments: Int
	uri: String
	topic: String
}
type ChatViewDistinguishMessage {
	action: String
	noun: String
	actionInfo: ActionInfo
	chat: Chat
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type DevplatformClickWatermark {
	devplatform: DevPlatform
	devplatformCustomPostInfo: DevPlatformCustomPostInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type EmailAppSettingsActionEmail {
	action: String
	notification: Notification
	userPreferences: Unknown
	actionInfo: ActionInfo
	email: Email
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type DevplatformClickCustomPost {
	devplatform: DevPlatform
	devplatformCustomPostInfo: DevPlatformCustomPostInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type Post {
	id: String
	type: String
}
type Comment {
	id: String
}
type RecapViewSubredditRecap {
	subreddit: Subreddit
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type NewAwardsViewAwardInfo {
	subreddit: Subreddit
	post: Post
	comment: Comment
	correlationId: String
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type Subreddit {
	id: String
}
type AddPhoneNumberClickBack {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PostCarouselEvent {
	action: String
	noun: String
	actionInfo: ActionInfo
	postCarousel: PostCarousel
	feed: Feed
	correlationId: String
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type PostCarousel {
	carouselType: String
	destination: String
	carouselId: String
}
type ActionInfo {
	count: Int
	pageType: String
	paneName: String
	position: Int
	reason: String
	settingValue: String
	success: Boolean
	type: String
}
type CustomFeed {
	coverArtUrl: String
	id: String
	isNsfw: Boolean
	numberFollowers: Int
	numberSubreddits: Int
	ownerId: String
	visibility: String
}
type Message {
	message: String
}
type Timer {
	millis: Int
}
type ModeratorClick {
	noun: String
	correlationId: String
	post: Post
	comment: Comment
	subreddit: Subreddit
	actionInfo: ActionInfo
	chat: Unknown
	profile: Unknown
	userSubreddit: UserSubreddit
	modAction: ModAction
	targetUser: User
	poll: Unknown
	modnote: Unknown
	automoderator: Unknown
	filter: Filter
	navigationSession: Unknown
	timer: Timer
	setting: Setting
	postRequirement: Unknown
	newAward: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type Feed {
	correlationId: String
}
type Subreddit {
	accessType: String
	categoryName: String
	id: String
	name: String
	nsfw: Boolean
	numberCoins: Int
	publicDescription: String
	quarantined: Boolean
	topicTagIds: Unknown
	whitelistStatus: String
}
type TopicTag {
	content: String
	id: String
	isPrimary: Boolean
	type: String
}
type UserSubreddit {
	isFavorite: Boolean
	isMod: Boolean
	isSubscriber: Boolean
	modAccess: Boolean
	modConfig: Boolean
	modFlair: Boolean
	modFull: Boolean
	modMail: Boolean
	modNone: Boolean
	modPost: Boolean
	modWiki: Boolean
}
type Comment {
	id: String
}
type Accepting {
	error: String
}
type PollOption {
	id: String
	text: String
}
type Processing {
	selectId: String
}
type Email {
	subjectLine: String
	type: String
}
type Setting {
	oldValue: String
	value: String
}
type Notification {
	authorizationStatus: String
	body: String
	id: String
	title: String
	type: String
}
type ActionInfo {
	count: Int
	pageType: String
	paneName: String
	position: Int
	reason: String
	success: Boolean
	type: String
}
type InitialSyncRequest {
	reason: Unknown
}
type InvalidToken {
	softLogout: Boolean
}
type ChannelNav {
	arrivedBy: String
	badgeCount: Int
	channelId: String
	channelIndex: Int
	channelName: String
	channelType: String
	hasBadges: Boolean
	hasUnread: Boolean
	numChannels: Int
	state: String
	swipeDirection: String
	type: String
	uiVariant: String
	version: String
}
type ConsentNotGivenError {
	consentUri: String
}
type CastVote {
	selectedItemId: String
	linkIdWithKind: String
}
type PollState {
	poll: Unknown
	voteState: Unknown
	dispatchEvent: Unknown
}
type PollsState {
	pollStateByLinkId: Unknown
}
type Post {
	id: String
	type: String
}
type Subreddit {
	id: String
}
type NewAwardsClickEntryPoint {
	actionInfo: ActionInfo
	subreddit: Subreddit
	post: Post
	comment: Comment
	newAward: NewAward
	correlationId: String
	feed: Unknown
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type TimerDefinition {
	id: String
}
type ActionInfo {
	pageType: String
}
type Subreddit {
	accessType: String
	categoryName: String
	id: String
	name: String
	nsfw: Boolean
	quarantined: Boolean
	whitelistStatus: String
}
type Ready {
	content: Unknown
	username: String
	status: Unknown
}
type CommunityMenu {
	badgeVisible: Boolean
}
type AppStartSession {
	appSession: AppSession
	devicePerformance: DevicePerformance
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type SuggestionPresentationModel {
	name: String
}
type CheckInboxClick {
	noun: String
	post: Unknown
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type SelectUsernamePresentationModel {
	usernameValidityStatus: Unknown
	suggestions: [Unknown]
	nextButtonEnabled: Boolean
	currentUsername: String
	isRefreshButtonEnabled: Boolean
	showUsernameSelectProgress: Boolean
}
type NftData {
	outfitId: String
	inventoryId: String
	nftMetadata: NftMetadata
}
type ActionInfo {
	pageType: String
	reason: String
	success: Boolean
	type: String
}
type ActionInfo {
	foregroundingAction: Boolean
	pageType: String
	paneName: String
	reason: String
	settingValue: String
	sourceName: String
	success: Boolean
	triggerType: String
	type: String
	pageRequestId: String
}
type AddEmailAddressClickAddEmail {
	actionInfo: ActionInfo
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type CommunitySettingsDetailsClickWelcomeMessageEnabled {
	subreddit: Subreddit
	actionInfo: ActionInfo
	setting: Setting
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
	referrerDomain: String
}
type AppShortcutClick {
	noun: String
	userLoggedInId: String
	screenViewType: String
	requestBaseUrl: String
}
type ClassData {
	nameResolver: Unknown
	classProto: Unknown
	metadataVersion: Unknown
	sourceElement: Unknown
}
type DeleteImage {
}
type CreatorKitVideoSuccess {
	video: Unknown
}
type RemoveOption {
}
type OnTranslationConfirmation {
	accepted: Boolean
}
type ImagesPicked {
	images: [Unknown]
}
type OnChangeTitleTextSelection {
}
type OnFieldFocusChanged {
	hasFocus: Boolean
	source: Unknown
	attachmentIndex: Int
}
type ChangeDuration {
}
type ImagesSelected {
	selectedImages: [Unknown]
}
type PickImages {
}
type EditBody {
	body: String
}
type VideoPicked {
	videoPath: String
	fromCamera: Boolean
}
type StartTimeEdited {
	startTimestamp: Int
}
type UpdateScheduleInformation {
	schedulePostModel: Unknown
}
type VideoWorkReceived {
	continuation: Unknown
	thumbnail: Unknown
	videoInfo: Unknown
	mediaId: String
	jobUuids: [Unknown]
}
type ImagePicked {
	path: String
}
type EditImagePressed {
}
type EditLink {
	url: String
}
type EditOption {
	option: String
}
type OnTagsSelected {
	flair: Unknown
	isNsfw: Boolean
	isBrand: Boolean
	isSpoiler: Boolean
}
type ImageEdited {
	sourceImage: SourceImage
}
type PlayVideoPressed {
	video: String
	thumbnail: String
}
type ChangeOptionFieldFocus {
	hasFocus: Boolean
}
type OnKeyboardNextPressed {
	source: Unknown
}
type OnKeyboardDonePressed {
	source: Unknown
}
type LoadLink {
	linkId: String
}
type OnChangeBodyTextSelection {
}
type EditTitle {
	title: String
}
type ChangeCommunity {
	community: Community
	clearPostConfirmed: Boolean
}
type HyperLinkInserted {
	text: String
	link: String
}
type FocusChanged {
	hasFocus: Boolean
	imeAction: Unknown
}
type LaunchCreatorKit {
	trimVideoUrl: String
}
type IncompatibleVersionErrorData {
	actualVersion: Unknown
	compilerVersion: Unknown
	languageVersion: Unknown
	expectedVersion: Unknown
	filePath: String
	classId: Unknown
}
type ImageEdited {
	image: SourceImage
}
type FollowersState {
	followers: String
}
type ProfilePicture {
	url: String
	isPremium: Boolean
}
type NftShowcaseViewState {
	commonProfileData: CommonProfileDataDelegate
	nftCardUiState: NftCardUiModel
}
type Snoovatar {
	url: String
	isPremium: Boolean
	reduceMotion: Boolean
}
type CommonProfileDataDelegate {
	title: String
	formattedUsername: String
	followers: Int
	followersState: FollowersState
	userId: String
	metadata: String
	isAdmin: Boolean
	hasPremium: Boolean
	description: String
	isFollowing: Boolean
	showChatButton: Boolean
	legacyShowEditButton: Boolean
	legacyEditButtonText: String
	acceptsInvites: Boolean
	acceptsFollowers: Boolean
	showFollowButton: Boolean
	socialLinksViewState: SocialLinksViewState
	bannerImg: String
	isVerifiedBrand: Boolean
	legacyUsernameMetaData: String
	karma: String
	createdAt: String
	userRedditGoldInfo: String
	showFollowerCountEnabled: Boolean
	isSelf: Boolean
	achievementsViewState: AchievementsViewState
	useNewBanner: Boolean
	useLegacyAchievementsAndFollowers: Boolean
	profileHighlightStats: ProfileHighlightStats
}
type AchievementsViewState {
}
type DefaultHeaderViewState {
	commonProfileData: CommonProfileDataDelegate
	profileIcon: Unknown
}
type ProfileHighlightStats {
	karma: String
	contributions: String
	accountAge: String
	communitiesActiveIn: String
	isActiveInClickable: Boolean
	subredditIcons: Unknown
}
type AchievementsViewState {
	count: Boolean
	followers: Int
	followersClickEnabled: Boolean
}
type RichTextImage {
	url: String
	isGif: Boolean
}
type RichTextLink {
	displayText: String
	url: String
	outboundUrl: String
	source: String
	analyticsData: Unknown
}
type BaseRichTextListItem {
	item: Unknown
	depth: Unknown
}
type TextNode {
	rawText: String
	textStyles: Unknown
	link: RichTextLink
}
type CommentReportData {
	commentId: String
	authorUsername: String
	blockUserId: String
}
type MatrixChatMessageReportData {
	senderRedditorId: String
	matrixRoomId: String
	matrixEventId: String
	authorUsername: String
	blockUserId: String
	messageType: String
}
type UserDetailsReportData {
	reportUserId: String
	reportUsername: String
	blockUserId: String
}
type PrivateMessageReportData {
	messageId: String
	authorUsername: String
	blockUserId: String
}
type RedditorReportData {
	redditorId: String
	reportUsername: String
	blockUserId: String
}
type ModmailReportData {
	messageId: String
	conversationId: String
	authorUsername: String
	blockUserId: String
}
type TalkReportData {
	postId: String
	relativeReportTimeSec: String
	blockUserId: String
}
type PostReportData {
	postId: String
	authorUsername: String
	blockUserId: String
	promoted: Boolean
	adImpressionId: String
}
type Progress {
}
type VideoRichTextUiModel {
	input: Unknown
	caption: String
}
type Params {
	subreddit: String
	subredditKindWithId: String
	file: Unknown
}
type AuthorMetadataUiModel {
	authorIcon: Unknown
	authorName: String
}
type Complete {
	newIconUrl: String
}
type FilterEvaluations {
	minimumThresholdToFilter: Unknown
}
type BanEvasionUpsertSettings {
	subredditId: String
	isEnabled: Boolean
	isModmailEnabled: Boolean
	recency: Unknown
	postLevel: Unknown
	commentLevel: Unknown
}
type SafetyFiltersOverviewSettings {
	subredditId: String
	isBannedByRedditEnabled: Boolean
}
type HarassmentFilterSettings {
	subredditId: String
	isEnabled: Boolean
	isModmailEnabled: Boolean
	hatefulContentThresholdAbuse: Unknown
	hatefulContentPermittedTerms: [Unknown]
	hatefulContentPermittedString: String
	contentAction: Unknown
	targeting: Unknown
}
type Avatar {
	position: String
}
type OnCommentMediaFailedEvent {
	commentKindWithId: String
}
type UserRoleIndicator {
	position: String
}
type OnClickCollectibleExpressionAttributionEvent {
	modelPosition: String
}
type MatureContentSettings {
	subredditId: String
	isEnabled: Boolean
	sexualCommentContentType: Unknown
	sexualPostContentType: Unknown
	violentCommentContentType: Unknown
	violentPostContentType: Unknown
}
type OnCheckCommentGiphyAttributionEvent {
	modelPosition: String
	modelIdWithKind: String
}
type OnCommentUnDistinguishAsAdmin {
	modelPosition: String
}
type ImageClick {
	rtImage: RichTextImage
}
type OnClickSubscribeEvent {
	modelPosition: String
}
type OnClickCollapseThreadEvent {
	modelPosition: String
}
type OnAwardGivenEvent {
	modelPosition: AwardTarget
	awardParams: AwardParams
	updatedAwards: AwardResponse
	analytics: GoldAnalyticsBaseFields
}
type OnClickMoreCommentEvent {
	modelPosition: String
}
type OnCommentsRenderedEvent {
	isSuccess: Boolean
}
type OnClickSortTypeEvent {
	sortType: Unknown
}
type ReloadComment {
	commentKindWithId: String
}
type LinkClick {
	rtLink: RichTextLink
}
type OnClickReportEvent {
	modelPosition: String
}
type OnClickUnsubscribeEvent {
	modelPosition: String
}
type OnClickDeleteEvent {
	modelPosition: String
}
type AchievementsBadge {
	position: String
}
type OnChangeSpeedReadButtonPositionEvent {
	isDragging: Boolean
	snapPosition: Unknown
}
type OnClickEditEvent {
	modelPosition: String
}
type OnClickInlineModerationActionEvent {
	modelPosition: Unknown
	pageStartTime: Int
	modelIdWithKind: String
}
type OnClickModCommentActionsEvent {
	modelPosition: String
}
type OnClickLoadParent {
	parentKindWithId: String
}
type OnClickUnsaveEvent {
	modelPosition: String
}
type OnClickCommentEvent {
	modelPosition: String
}
type OnCommentVisibilityChangeEvent {
	commentId: String
	isVisible: Boolean
}
type OnClickAmaCommentFilter {
	filter: Unknown
}
type OnUnmarkAsBrandEvent {
	modelPosition: String
}
type OnClickBlockCommentAuthorEvent {
	modelPosition: String
}
type OnClickCommentReplyEvent {
	modelPosition: String
}
type OnClickSaveEvent {
	modelPosition: String
}
type OnClickCommentComposerEvent {
	reply: Unknown
}
type OnClickModTriggersEvent {
	modelPosition: String
}
type GiphyAttributionLinkClick {
	displayText: String
	url: String
}
type OnReceiveCommentReplyEvent {
	comment: Unknown
	commentPos: MediaInfo
	composerSessionId: String
}
type PerformLoad {
	isRefreshing: Boolean
	context: Unknown
	prefetchedComments: PrefetchedComments
}
type OnCommentDistinguishAsAdmin {
	modelPosition: String
}
type OnMarkAsBrandEvent {
	modelPosition: String
}
type OnClickShareEvent {
	modelPosition: String
}
type OnClickOverflowMenuEvent {
	modelPosition: String
}
type OnClickAwardEvent {
	modelPosition: String
	awardCount: String
}
type OnClickVoteEvent {
	modelPosition: Unknown
	isOverflow: Boolean
	modelIdWithKind: String
}
type VideoClick {
	commentIdWithKind: String
	mediaId: String
	url: String
	thumbnailUrl: String
}
type OnClickModVerdictAddRemovalReasonEvent {
	modelPosition: String
}
type OnClickCopyText {
	modelPosition: String
}
type CategoriesRow {
	uiKey: String
	index: Int
	sectionId: String
	ctaText: String
	title: String
	cardSize: Unknown
	categories: Unknown
}
type ShowFiltered {
	initialPaginationCursor: String
	filter: StorefrontListingsFilterModel
}
type OutfitsRow {
	uiKey: String
	index: Int
	listings: Unknown
	title: String
	ctaText: String
	ctaEffect: Unknown
}
type BrowseAllRow {
	uiKey: String
	title: String
	image: String
}
type AnnouncementBannerRow {
	uiKey: String
	bannerImageUrl: String
	size: Unknown
	destination: Unknown
}
type ArtistsCarousel {
	uiKey: String
	index: Int
	title: String
	ctaText: String
	artists: Unknown
}
type ShowArtist {
	artistRedditorId: String
}
type ShowNonThemed {
	initialPaginationCursor: String
}
type Header {
	isSoldOut: Boolean
}
type OutfitsGallery {
	uiKey: String
	index: Int
	listings: Unknown
	title: String
	ctaText: String
	ctaEffect: Unknown
}
type Parameters {
	subredditName: String
}
type SubredditRulesDialogScreenDependencies {
	view: Unknown
	params: Parameters
}
type GalleryFilterUiModel {
	label: String
	isSelected: Boolean
	domainModel: PriceFilter
}
type ListingPresentationType {
	isComfy: Boolean
}
type LinkParameters {
	link: Unknown
}
type CommentParameters {
	comment: Unknown
	position: String
	parentCommentsUsedFeatures: Unknown
	correlationId: String
	composerSessionId: String
}
type OneButtonDialogPresentationModel {
	layoutId: Unknown
	title: String
	description: String
	buttonText: String
}
type TwoButtonDialogPresentationModel {
	layoutId: Unknown
	title: String
	description: String
	primaryButtonText: String
	secondaryButtonText: String
}
type Author {
	position: String
}
type FullBleedDataSourceParams {
	entryPointType: Unknown
	adDistance: String
}
type FullBleedPlayerParams {
	linkId: String
	linkEventCorrelationId: String
	mediaContext: Unknown
	mediaDataSourceParams: Params
	commentsState: Unknown
	commentsExtras: Unknown
	navigationSession: Unknown
	feedId: String
	screenReferrer: Unknown
	selectedGalleryPosition: Int
	galleryModels: [Unknown]
	entryPointType: Unknown
	isFromCrossPost: Boolean
	onboardingCategoriesOverride: [Unknown]
}
type FullBleedEntryParams {
	linkId: String
	linkEventCorrelationId: String
	mediaContext: Unknown
	mediaDataSourceParams: Params
	entryPointType: Unknown
	adDistance: String
	commentsState: Unknown
	commentsExtras: Unknown
	navigationSession: Unknown
	feedId: String
	screenReferrer: Unknown
	selectedGalleryPosition: Int
	galleryModels: [Unknown]
	isFromCrossPost: Boolean
	onboardingCategoriesOverride: [Unknown]
}
type SubredditChatChannelsAnalyticsData {
	pageType: String
	chatId: String
	chatNumberOnline: Int
	chatLatestMessageTimestamp: Int
	recommendationAlgorithm: String
	position: String
	subredditName: String
}
type VideoCommentsBottomSheetDependencies {
	commentParams: CommentsParams
	sourcePage: String
	analyticsPageType: String
}
type UserChatChannelsAnalyticsData {
	pageType: String
	chatId: String
	chatNumberOnline: Int
	chatLatestMessageTimestamp: Int
	recommendationAlgorithm: String
}
type HomePagerScreenTabUiModel {
	id: String
	name: String
	isBadged: Boolean
}
type VideoPerformanceData {
	decoders: Unknown
	loadTime: Unknown
	videoInfo: Unknown
	isFromNetwork: Boolean
}
type ListingQueryModel {
	listing: ListingDataModel
	links: [Unknown]
	discoveryUnits: [Unknown]
}
type LinkQueryModel {
	link: Unknown
	mutation: LinkMutationDataModel
	userIsSubscriber: Boolean
}
type AdPromotedCommunityPostElement {
	linkId: String
	uniqueId: String
	promotedCommunityPostType: Unknown
	promotedPostId: String
	title: String
	postImage: CellMediaSourceElement
	upvoteText: String
	commentText: String
	subredditName: String
	subredditImage: CellMediaSourceElement
	subredditBackgroundColor: String
	classicUpvoteCommentLabel: String
}
type TrendingCarouselElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	title: String
	trendingItems: Unknown
	searchCorrelation: Unknown
	arenaItem: TrendingCarouselArenaItemElement
}
type AdFreeFormElement {
	linkId: String
	uniqueId: String
	titleElement: PostTitleElement
	previewTextElement: PreviewTextElement
	image: CellMediaSourceElement
}
type PostTitleElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	title: String
	translatedTitle: String
	showTranslation: Boolean
	isRead: Boolean
	maxLines: String
	showShimmer: Boolean
	galleryItemPosition: Int
	suppressClickHandling: Boolean
}
type UnsupportedCellElement {
	linkId: String
	uniqueId: String
	promoted: Unknown
	cellDetails: String
}
type GalleryLinkFooterPageElement {
	galleryPage: GalleryPageElement
}
type FeedSurveyQuestion {
	text: String
	buttons: Unknown
	viewEvent: AnalyticsEventPayload
}
type PostRecommendationContext {
	id: String
	name: String
	typeName: String
}
type Image {
	url: String
}
type Size {
}
type AdGalleryPageElement {
	linkId: String
	uniqueId: String
	galleryPage: GalleryPageElement
	callToActionElement: AdCallToActionElement
	appInstallCallToActionElement: AdAppInstallCallToActionElement
}
type AdPayloadGalleryItem {
	caption: String
	outboundUrl: String
	displayAddress: String
	callToAction: String
	adEventsList: Unknown
}
type NewsProfileMetadataElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	isBrandAffiliate: Boolean
	username: String
	link: String
	dateTextOverride: String
	showGoldPopup: Boolean
}
type RichTextRecommendationContextElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	rtJsonText: String
}
type SortBarElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	isModerator: Boolean
	isModModeEnabled: Boolean
}
type Include {
	subredditId: String
}
type PostMediaWebsiteElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	preview: CellMediaSourceElement
	sourceName: String
	linkUrl: String
}
type FeedMp4VideoDetails {
	lowRes: String
	mediumRes: String
	highRes: String
	highestRes: String
	recommendedRes: String
}
type TitleWithThumbnailCollapsedElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	postTitleElement: PostTitleElement
	thumbnail: Unknown
	indicatorsElement: IndicatorsElement
}
type Link {
	linkId: String
	uniqueId: String
	promoted: Boolean
	preview: CellMediaSourceElement
	sourceName: String
	url: String
	showLinkBar: Boolean
}
type AdAppInstallCallToActionElement {
	linkId: String
	uniqueId: String
	appName: String
	appIcon: String
	category: String
	appRating: String
	callToAction: String
	downloadCount: String
	ctaLocation: Unknown
}
type PromotedUserPostImage {
	media: CellMediaSourceElement
	type: Unknown
}
type AdBrandLiftSurveyElement {
	linkId: String
	uniqueId: String
	surveyURL: String
	hasLoadedAlready: Boolean
}
type YouTubeElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	width: String
	shouldObfuscate: Boolean
	videoUrl: String
	createdAtUtc: Int
	preview: CellMediaSourceElement
}
type LinkId {
	linkId: String
	uniqueId: String
	promoted: Boolean
}
type RichTextElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	rtJsonText: String
	mediaDataMap: Unknown
	suppressClickHandling: Boolean
	fallbackRichTextLinkClickHandlingEnabled: Boolean
}
type GoldInfo {
	gilded: Boolean
	gildedByCurrentUser: Boolean
	totalCount: Boolean
	awardIcon: String
	promoId: String
}
type AmaCarouselElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	posts: Unknown
}
type AdCallToActionElement {
	linkId: String
	uniqueId: String
	callToAction: String
	outboundUrl: String
	caption: String
	strikeThrough: String
	subCaption: String
	displayAddress: String
	adPayload: AdPayload
	ctaLocation: Unknown
}
type AdPayload {
	uniqueId: String
	impressionId: String
	isBlankAd: Boolean
	isSurveyAd: Boolean
	adLinkUrl: String
	adEventsList: Unknown
	encryptedTrackingPayload: String
	additionalEventMetadata: [Unknown]
	ctaMediaColor: String
	appStoreData: AppStoreData
	promoLayout: Unknown
	adInstanceId: String
	isVideo: Boolean
	galleryList: Unknown
	domain: String
	isCreatedFromAdsUi: Boolean
	callToAction: String
	campaign: AdPayloadCampaign
	formatData: AdPayloadFormatData
	shouldOpenExternally: Boolean
	adAttributionInformation: AdAttributionInformation
	excludedExperiments: Unknown
}
type PostFlairsElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	flairs: Unknown
}
type NewsPostHeaderElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	isBrandAffiliate: Boolean
	topic: String
	subreddit: String
	createdAt: String
	showGoldPopup: Boolean
}
type AdPromotedUserPostCollectionElement {
	linkId: String
	uniqueId: String
	postsViaText: String
	adPromotedUserPosts: Unknown
	subredditName: String
	subredditImage: CellMediaSourceElement
}
type PostSelfImageElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	preview: CellMediaSourceElement
	adPayload: AdPayload
	translatedPreview: CellMediaSourceElement
	showTranslation: Boolean
	showShimmer: Boolean
	suppressClickHandling: Boolean
}
type PostElement {
	linkId: String
	feedElements: Unknown
	postRecommendationContext: PostRecommendationContext
	groupRecommendationContext: CellGroupRecommendationContext
	gilded: Boolean
	isGildable: Boolean
	removed: Boolean
	crosspostSeedLinkId: String
}
type IndicatorsElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	indicatorCount: [Unknown]
	isShowDevPlatformPrivacyLink: Boolean
	isBrandAffiliate: Boolean
}
type AdSupplementaryTextElement {
	linkId: String
	uniqueId: String
	rtJsonText: String
}
type TrendingCarouselArenaItemElement {
	eventId: String
	title: String
	homeMediaPath: String
	awayMediaPath: String
}
type AdGalleryElement {
	linkId: String
	uniqueId: String
	height: PostTitleElement
	pages: [Unknown]
	currentIndex: AdPayload
	adSupplementaryTextElement: AdSupplementaryTextElement
}
type AdsMetadataElement {
	linkId: String
	uniqueId: String
	createdAt: String
	authorNameWithPrefix: String
	iconPath: String
	isAuthorBrand: Boolean
	stripUserPrefixInTitle: Boolean
	shouldLogWhitespaceClick: Boolean
}
type Video {
	linkId: String
	uniqueId: String
	promoted: Boolean
	preview: CellMediaSourceElement
}
type AnalyticsEventPayload {
	source: String
	action: String
	noun: String
	actionInfoReason: String
	postId: String
}
type FeedVideoAuthInfo {
	postId: String
	authToken: String
	authTokenExpiresAt: String
	authTokenId: String
}
type PostViewsCount {
	label: String
	accessibilityLabel: String
}
type AdPromotedUserPostItemElement {
	postId: String
	title: String
	upvotesText: String
	upvotesCount: Int
	commentsText: String
	commentsCount: Int
	postImage: PromotedUserPostImage
}
type PostMetricElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	scoreLabel: String
	hideScore: Boolean
	commentLabel: String
}
type AdSpotlightVideoElement {
	linkId: String
	uniqueId: String
	callToAction: String
	details: String
	videoElement: VideoElement
	iconPath: String
	media: CellMediaSourceElement
	title: String
	videoIdentifier: String
	videoUrl: String
	showAudioControlInHeader: Boolean
}
type AdPayloadLeadGenerationInformation {
	privacyPolicyUrl: String
	userInputFields: Unknown
	prompt: String
	disclaimerRichText: String
	advertiserLegalName: String
	publicEncryptionKey: String
	formId: String
}
type TrendingCarouselItemElement {
	title: String
	media: CellMediaSourceElement
	searchQuery: String
	isPromoted: Boolean
	isBlank: Boolean
	adPayload: AdPayload
}
type PreviewTextElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	text: String
	numberOfLines: Boolean
	translatedText: String
	showTranslation: Boolean
	showShimmer: Boolean
	suppressClickHandling: Boolean
}
type AdPayloadCampaign {
	id: String
}
type FeedSurveyElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	surveyId: String
	questions: Unknown
	viewEvent: AnalyticsEventPayload
	isVisible: Boolean
}
type AdElement {
	linkId: String
	adPayload: AdPayload
	feedElements: Unknown
}
type ModActionBarAccessibilityConnection {
	shouldClearActionButtonsSemantics: Unknown
	uiModelListener: Unknown
}
type SelfImage {
	linkId: String
	uniqueId: String
	promoted: Boolean
	preview: CellMediaSourceElement
}
type CellGroupRecommendationContext {
	name: String
	richText: String
	sourceId: String
	typeIdentifier: String
	isContextHidden: Boolean
}
type GalleryPageElement {
	mediaSource: CellMediaSourceElement
	translatedPreview: CellMediaSourceElement
	showTranslation: Boolean
	showShimmer: Boolean
}
type PostFlairFeedPresentationModel {
	text: String
	richText: String
	id: String
	subredditName: String
	subredditId: String
	textColor: String
	backgroundColor: String
	apiText: String
	tooltipText: String
}
type AdPayloadFormatData {
	id: String
	leadGenerationInformation: AdPayloadLeadGenerationInformation
}
type ModViewRightState {
	isDistinguished: Boolean
	showDistinguish: Boolean
	onDistinguishClick: Unknown
	onActionListClick: Unknown
}
type PostAwardsBarElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	numberAwards: String
	awardNumberContentDescription: String
	awardImageUrls: Unknown
}
type ModViewLeftState {
	isApproved: Boolean
	onApproveClick: Unknown
	isRemoved: Boolean
	onRemoveClick: Unknown
	isSpam: Boolean
	onMarkSpamClick: Unknown
}
type TitleWithThumbnailElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	postTitleElement: PostTitleElement
	previewText: PreviewTextElement
	thumbnail: Unknown
	indicatorsElement: IndicatorsElement
}
type GalleryWithLinkFooterElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	height: [Unknown]
}
type VideoErrorData {
	httpCode: Unknown
}
type FeedSurveyButton {
	text: String
	clickEvent: AnalyticsEventPayload
	clickActions: Unknown
	completionText: String
}
type CrosspostElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	crossposted: PostElement
}
type GalleryElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	height: [Unknown]
	galleryItemPosition: Boolean
}
type Video {
	url: String
	videoAuthInfo: FeedVideoAuthInfo
	details: FeedMp4VideoDetails
	type: Unknown
}
type VideoElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	type: Unknown
	preview: CellMediaSourceElement
	defaultUrl: String
	width: String
	isGif: Boolean
	shouldObfuscate: Boolean
	videoIdentifier: String
	subredditName: String
	subredditId: String
	adCallToAction: String
	showExpandVideoIndicator: Boolean
	mediaId: String
	authInfo: FeedVideoAuthInfo
	adPayload: AdPayload
	audioState: Unknown
	mp4VideoDetails: FeedMp4VideoDetails
	applyCrop: Boolean
}
type HiddenPostElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	showUndoButton: Boolean
	hiddenElement: Unknown
}
type CellMediaSourceElement {
	path: String
	obfuscatedPath: String
	shouldObfuscate: Boolean
	size: Size
}
type Post {
	id: String
	title: String
	imageUrl: String
	subredditName: String
	subredditIcon: String
	authorName: String
	authorIcon: String
	startTimeMillis: Int
	endTimeMillis: Int
	relativeTimeString: String
}
type AmaStatusBarElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	eventType: Unknown
	startTimeMillis: Int
	endTimeMillis: Int
	relativeTimeString: String
	isEventAdmin: Boolean
	isFollowed: Boolean
	buttonLoading: Boolean
	showTooltip: Boolean
	rsvpCountString: String
}
type Params {
	id: String
	position: Int
	reason: String
}
type SortBarSection {
	sortBarElement: SortBarElement
	sort: Sort
	listingViewMode: Unknown
	isModerator: Boolean
	isModModeEnabled: Boolean
}
type FeedSwitcherEditModeSettings {
	nonMovableFeedsCount: Unknown
}
type SvgCandidate {
}
type Success {
	svg: Unknown
}
type Error {
	bytesDebugSignature: String
}
type AppIconFields {
	id: String
	name: String
	isPremium: Boolean
}
type Visible {
	input: String
	isInputVisible: Boolean
	isAnonymous: Boolean
}
type PrefetchedComments {
	comments: [Unknown]
	isTruncated: Boolean
}
type CommentsLinkPagerTransitionParams {
	comments: [Unknown]
	isTruncated: Boolean
}
type LoadedWithSections {
	goldBalance: [Unknown]
	showLeaderBoard: Boolean
}
type LinkPagerTransitionParams {
	transitionLink: Unknown
	postBounds: Unknown
	postMediaBounds: Unknown
	listingViewMode: Unknown
	transitionComments: CommentsLinkPagerTransitionParams
	staticPostHeader: Boolean
}
type Loaded {
	goldBalance: [Unknown]
	awardsBestowed: Unknown
}
type ViewDiffResult {
	diff: Unknown
}
type SortSelection {
	sortOption: SortOption
	timeFrameOption: Unknown
}
type ClaimImage {
	width: String
}
type PlayerPoolPerformanceData {
	playerCreationTimeMs: Int
	playerCreationDurationMs: Int
}
type ClaimData {
	choiceMetadata: ChoiceMetadata
	drops: [Unknown]
}
type ChoiceMetadata {
	id: String
	pageContext: String
	title: String
	description: String
	ctaText: String
	images: Unknown
}
type VideoPerformanceTrackerResult {
	videoPerformanceData: VideoPerformanceData
	exoPlayerStats: Unknown
	playerPoolPerformanceData: PlayerPoolPerformanceData
}
type NftDrop {
	id: String
	name: String
	description: String
	images: [Unknown]
}
type Sort {
	sortType: Unknown
	sortTimeFrame: Unknown
}
type TimeFrameRequired {
	timeframeTitleResId: Int
}
type SortOption {
	iconAttrResId: Int
	labelResId: Unknown
	timeFrameContext: Unknown
	clickAction: Int
}
type ExperimentOverride {
	experimentName: Unknown
	variantName: String
}
type StorefrontListingId {
	id: String
	galleryPreviewTypeAnalytics: String
}
type ProductDetailsParams {
	productReference: Unknown
	analyticsOrigin: Unknown
}
type OnTranslateFeedbackCoachmarkClicked {
	linkKindWithId: String
}
type OnBeginTranslating {
	linkKindWithId: String
}
type OnRateTranslationClicked {
	linkKindWithId: String
	uniqueId: String
	promoted: Boolean
}
type ScreenPerformanceAnalyticsMetrics {
	timeForFirstDraw: Int
	timeForFirstInteraction: Int
}
type AwardScreensPerformanceData {
	timeOfFirstVisible: Int
	firstRenderSpan: Int
	interactivitySpan: Int
}
type OnTranslateFeedbackCoachmarkDismiss {
	linkKindWithId: String
}
type OnTranslateButtonViewed {
	linkId: String
	uniqueId: String
	promoted: Boolean
	currentState: Unknown
}
type Button {
	sectionId: String
	title: String
	appearance: ButtonAppearanceUiModel
	destination: DefaultExplainerButtonDestination
}
type Space {
}
type ScrollerSection {
	pages: [Unknown]
}
type OnRevertToOriginal {
	linkKindWithId: String
	title: String
	body: String
	originalImage: Unknown
	originalGallery: [Unknown]
	postTranslationIndicatorState: Unknown
}
type ButtonAppearanceUiModel {
	style: Unknown
}
type OnTranslationInProgress {
	linkKindWithId: String
}
type EducationalUnitUiModel {
	explainerId: String
	sections: [Unknown]
	footer: Footer
	containPages: Boolean
}
type Footer {
	primarySection: Unknown
	secondarySection: Unknown
	tertiarySection: Unknown
}
type OnTranslationSuccess {
	linkKindWithId: String
	title: String
	body: String
	translatedImage: Unknown
	translatedGallery: [Unknown]
	shouldShowCoachmark: Boolean
	postTranslationIndicatorState: Unknown
}
type OnTranslateButtonClicked {
	linkKindWithId: String
	uniqueId: String
	promoted: Boolean
	currentState: Unknown
}
type DefaultExplainerButtonDestination {
	id: String
	deepLink: String
}
type SpannedTextParams {
	spannedText: Unknown
	deepLink: String
}
type Text {
	sectionId: String
	content: String
	appearance: TextAppearanceUiModel
	spannedTextParams: SpannedTextParams
}
type Image {
	url: String
}
type TextAppearanceUiModel {
	fontType: Unknown
	alignment: Unknown
}
type ScrollerSectionPage {
	pageId: String
	sections: [Unknown]
}
type InventoryItemId {
	id: String
	background: Unknown
}
type NftUrl {
	url: String
}
type Custom {
	rawValue: String
}
type Custom {
	rawValue: String
}
type FailedLinkFetch {
	numberOfFailedPosts: String
}
type Fetched {
	timestamp: Int
}
type DeepLink {
	chainId: String
	contractAddress: String
	tokenId: String
	deeplinkType: Unknown
}
type LinkModel {
	link: Unknown
	postType: String
}
type CommentModel {
	kindWithId: String
	linkKindWithId: String
	parentKindWithId: String
}
type AdSupplementaryLinkModel {
	link: Unknown
	linkId: String
	isFeed: Boolean
	postType: String
	promoted: Boolean
	onClicked: Unknown
}
type CommentBottomSheetMenuParams {
	isSaveEnabled: Boolean
	isBlockable: Boolean
	isDeletable: Boolean
	isReportable: Boolean
	hasReports: Boolean
	isCollapsible: Boolean
	isCopyable: Boolean
	isSubscribable: Boolean
	hasModActions: Boolean
	subredditKindWithId: String
	isUserSubscriber: Boolean
	userIsModerator: Boolean
	isAwardVisible: Boolean
	showShareIcon: Boolean
	hasRegularActions: Boolean
	isReplyVisible: Boolean
	isEditVisible: Boolean
	isVotingEnabled: Boolean
	isMarkAsBrandVisible: Boolean
	isMarkAsBrandEnabled: Boolean
	isTranslationFeedbackVisible: Boolean
	isTranslateVisible: Boolean
	isShowOriginalVisible: Boolean
	isPostFollowMenuRerankingEnabled: Boolean
}
type FooterActionState {
	voteCount: Int
	voteDirection: Unknown
	voteEnabled: Boolean
	commentCount: Int
	isScoreHidden: Boolean
	name: String
	votableCachedName: String
	allowModeration: Boolean
	awardVisibility: String
}
type StringWithIndicators {
	usernameTextOffset: String
	indicators: Unknown
	authorFlair: String
	afterIndicators: String
	outboundLink: String
	outboundLinkDisplay: String
}
type SavedCommentPresentationModel {
	commentModel: Unknown
	linkModel: Unknown
	authorText: String
}
type SocialLinkModel {
	socialLink: Unknown
}
type SAN {
	source: String
	action: Unknown
	noun: String
}
type ScreenPageData {
	v2AnalyticsPageType: String
}
type EnableShowFlairPrompt {
	enableShowFlairPrompt: Boolean
}
type SwitchTwoLine {
	id: String
	title: String
	subtitle: String
	checked: Boolean
	isNew: Boolean
}
type EnablePostFlairAction {
	enablePostFlair: Boolean
}
type Header {
	id: String
	title: String
}
type AllowUserOwnFlairAction {
	allowUserOwnFlair: Boolean
}
type Topic {
	id: String
	displayName: String
	index: Boolean
	checked: Boolean
	type: Unknown
}
type FlairSelectScreenParams {
	subredditName: String
	linkKindWithIdOrName: String
	isUserFlair: Boolean
	isFlairModerator: Boolean
	isModerator: Boolean
	userFlairEnabledInSubreddit: Boolean
	canAssignUserFlair: Boolean
	userSubredditFlairEnabled: Boolean
	canUndo: Boolean
	showFlairSwitch: Boolean
	screenMode: Unknown
	subredditId: String
	subredditScreenArg: SubredditScreenArg
	modPermissions: Unknown
}
type PostFlairNavigationAction {
	enablePostFlairNavigation: Boolean
}
type SwitchOneLine {
	id: String
	title: String
	checked: Boolean
	isNew: Boolean
}
type OriginalComment {
	html: String
	markdown: String
	richtext: String
	preview: String
}
type TranslatedComment {
	richtext: String
	preview: String
	markdown: String
}
type Model {
	mediaUrl: String
	mediaId: String
	mediaDuration: Int
	orientation: Unknown
	eventProperties: EventProperties
	playbackPosition: Int
	postType: String
	postTitle: String
	postUrl: String
	postPosition: Int
}
type MediaInfo {
	contentType: String
	mediaSize: Int
	mimeType: String
	localPath: String
	mediaWidth: Int
	mediaHeight: Int
	isGif: Boolean
}
type BuyGold {
	targetScreen: Unknown
	subredditId: String
	postId: String
	commentId: String
	correlationId: String
	customGoldPurchaseUiModel: CustomGoldPurchaseUiModel
	postType: String
}
type AwardSection {
	id: String
	title: String
	style: Unknown
	tooltip: String
	extraSectionInfo: Unknown
	awards: [Unknown]
}
type CreateAwardOrderError {
	error: Unknown
	message: String
}
type HiddenRecommendationChainingSection {
	element: Unknown
}
type MarketplaceAward {
	id: String
	awardName: String
	goldPrice: [Unknown]
	animatedImageUrl: String
	successfulAnimationUrl: String
	successfulStaticImageUrl: String
	highlight: Boolean
	isLimited: Boolean
	isCommunityAward: Boolean
	isCommunityClubAward: Boolean
	sectionTitle: String
	sectionDescription: String
}
type GiveAward {
	awardToBuy: MarketplaceAward
	recipientName: String
	recipientId: String
	postId: String
	commentId: String
	groupId: String
	isAnonymous: Boolean
	message: String
	subredditId: String
	awardTarget: AwardTarget
	position: Unknown
	correlationId: String
	navigable: Unknown
	postType: String
	analytics: GoldAnalyticsBaseFields
	customGoldPurchaseUiModel: CustomGoldPurchaseUiModel
}
type CommunityGoldManager {
}
type GalleryPostImage {
}
type AdClick {
	clickLocation: Unknown
}
type ModActionClick {
	type: Unknown
}
type ImageFromUrl {
	url: String
}
type OnGiveGoldSelected {
	productId: String
}
type VoteClick {
	newDirection: Unknown
	newVoteCount: String
}
type CrosspostToProfile {
	userIconUrl: String
}
type CrosspostToSubreddit {
	displayNamePrefixed: String
	avatarUrl: String
}
type ShareSheetEventArgs {
	shareContentType: String
	linkId: String
	linkKindWithId: String
	subredditId: String
	subredditName: String
	subredditNsfw: Boolean
	commentId: String
}
type ModFeatureFlag {
	experimentName: Unknown
	autoExpose: Boolean
	sessionView: Unknown
}
type HoldoutFeatureFlag {
	experimentName: Unknown
	holdout: Unknown
}
type SubredditRuleUiModel {
	name: String
	description: String
	isExpanded: Boolean
}
type SubredditRuleHeaderUiModel {
	name: String
}
type WithMessage {
	message: String
}
type CustomFilter {
	allowed: String
	blocked: String
}
type TextFilter {
	id: String
	label: String
	selected: Boolean
}
type LoadingFooterPresentationModel {
	state: Unknown
	errorMessage: String
	onErrorClick: Unknown
}
type OnError {
	type: Unknown
}
type ModReasonGroup {
	title: String
	reasons: [Unknown]
}
type OnVideoClicked {
	mediaId: String
}
type OnOrientationChanged {
	orientation: Unknown
}
type OnUsernameClicked {
	username: String
}
type OnVideoStarted {
	mediaId: String
}
type Gif {
	id: String
	downsizedImage: GifImage
	image: GifImage
	previewImage: GifImage
	user: GifUser
}
type OnSubredditClicked {
	subredditName: String
}
type FullBleedContainerViewState {
	pages: Unknown
	bottomSheetMenuViewState: BottomSheetMenuViewState
	portraitOrientation: Boolean
}
type CommentSubmitButtonEvent {
	isEnabled: Boolean
}
type GifImage {
	width: Int
	height: Int
	gifUrl: String
	mp4Url: String
}
type HitlFilterDetails {
	contentId: String
	authorId: String
	subredditName: String
	isComment: Unknown
	isMatureContent: Boolean
}
type Completed {
	intent: Unknown
}
type GifUser {
	username: String
	displayName: String
	profileUrl: String
}
type Params {
	originPageType: String
	isTimeout: Boolean
	exitReason: String
}
type IncognitoSessionExitScreenDependencies {
	view: Unknown
	params: Params
}
type Available {
	source: Unknown
	isManageable: Boolean
	isEnabled: Boolean
}
type PagedData {
	data: [Unknown]
	nextKey: String
	sort: Sort
	adDistance: Int
	prefetchDistance: Int
}
type Subreddit {
	id: String
	name: String
	over18: Boolean
	userIsSubscriber: Boolean
}
type UserCommentPresentationModel {
	id: String
	subject: String
	preview: String
	body: Unknown
	metadata: String
	mediaMetadata: Unknown
	subredditNamePrefixed: String
	timePosted: String
}
type VisibleItemsChanged {
	itemVisibilityInfos: [Unknown]
	feedInfo: FeedInfo
}
type PostUriSource {
	id: String
	url: String
	title: String
	domain: String
	postType: Unknown
	isOver18: Boolean
	createdUtc: Int
	isSpoiler: Boolean
	isPromoted: Boolean
}
type FeedInfo {
	sortType: Unknown
}
type OnVotesStateChanged {
	linkId: String
}
type OnPostRemovedInFbp {
	linkKindWithId: String
}
type VisibleItemInfo {
}
type KeyboardVideoInfo {
	videoThumbnailPath: String
	videoFilePath: String
	continuation: Unknown
}
type FeedOptionsSubredditChannelUIModel {
	id: String
	title: String
	titleRichText: Unknown
	richTextUtil: Unknown
	selected: Boolean
}
type CommunityRecommendationUnit {
	id: String
	communityRecommendationIds: Unknown
	communityRecommendationSources: Unknown
	model: String
	version: String
}
type Media {
	config: Unknown
}
type FullBleedContainerArgs {
	contentType: Media
}
type NftOwner {
	displayName: String
	id: String
}
type NftArtist {
	id: String
	displayName: String
	description: String
	profileUrl: String
	snoovatarUrl: String
	prefixName: String
}
type StorefrontInventoryItem {
	inventoryItem: InventoryItem
	listing: Listing
}
type InventoryItem {
	id: String
	name: String
	description: String
	preRenderImage: String
	backgroundImage: String
	serialNumber: String
	series: String
	owner: NftOwner
	collectionSize: Int
	rarity: Unknown
	mintedAt: Unknown
	contractAddress: String
	walletAddress: String
	externalUrls: ExternalNftUrls
	artist: NftArtist
	outfit: AvatarOutfit
	nftStatusTag: [Unknown]
	tokenId: String
	utilities: [Unknown]
}
type ExternalNftUrls {
	explorerUrl: String
	ipfsUrl: String
	ipfsMetadataUrl: String
}
type AvatarOutfit {
	id: String
}
type Local {
}
type TrackingData {
	position: CommunityRecommendationUnit
	subredditId: String
	subredditName: String
	rowCount: String
	visibilityOnScreenTimeStamp: Int
	schemeName: String
}
type Remote {
	url: String
}
type Valid {
	nftCard: NftSnoovatarCard
}
type ApiError {
	errorCodes: Unknown
}
type EntityId {
	id: Int
}
type Comment {
	commentId: String
}
type LocalVideo {
	mediaId: String
	videoUrl: String
	thumbnailUrl: String
}
type NftSnoovatarCard {
	id: String
	uuid: String
	rarity: Unknown
	url: String
	backgroundUrl: String
	name: String
	series: String
	seriesSize: Int
	minted: String
	owner: String
}
type PostPollOptionUiModel {
	id: String
	text: String
	voteCount: Int
	totalVoteCount: Int
	voteCountText: String
}
type WithSubredditName {
	subredditName: String
}
type WithButton {
	subredditName: String
}
type ItemVisibilityInfo {
	element: Unknown
	index: Int
}
type PostPollUiModel {
	postId: String
	userSelectedOption: String
	votingEndsTimestamp: Int
	options: [Unknown]
	canVote: Boolean
	isExpired: Boolean
	totalVoteCount: Int
	showVotesAsPercentage: Boolean
}
type Enabled {
}
type PostActionScoreBarElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	goldInfo: GoldInfo
	scoreLabel: String
	voteDirection: Unknown
	hideScore: Boolean
	commentLabel: String
	isModeratable: Boolean
	showAwardAction: Boolean
	numberFormatter: Unknown
	shareIconRes: Int
	dynamicShareIconState: Unknown
	shareCount: Int
	formattedShareCount: String
	isTranslatable: Boolean
	isTranslated: Boolean
	translationState: Unknown
	showTranslationTooltip: Boolean
	showGoldPopup: Boolean
	showCommentIcon: Boolean
	galleryItemPosition: Int
	goldPopupTriggeringSource: Unknown
	showAwardEntryPoint: Boolean
	awardEntryPointTooltip: AwardEntryPointTooltip
	shouldLogActionBarWhitespaceClick: Boolean
}
type Listing {
	id: String
	status: Unknown
	totalQuantity: Int
	validPricePackage: ValidPricePackage
	tags: [Unknown]
}
type PdpMotionState {
	translationY: Unknown
	mediaTranslationY: Unknown
}
type Content {
	text: Unknown
	media: Unknown
	link: Link
}
type LinearPostCard {
	linkId: String
	uniqueId: String
	promoted: Boolean
	postTitle: PostTitleElement
	metadataHeader: Unknown
	actionBarElement: PostActionScoreBarElement
	indicatorsElement: IndicatorsElement
	cardContent: Content
	highlightedComments: Unknown
}
type Preview {
	element: PreviewTextElement
}
type UserCommentViewState {
	linkId: String
	commentId: String
	avatar: Unknown
	username: String
	isTopComment: Boolean
	timeAgoLabel: String
	content: Unknown
	upvotesLabel: String
	repliesLabel: String
}
type Gallery {
	element: GalleryElement
}
type Link {
	sourceName: String
	previewImageUrl: String
	linkUrl: String
	linkId: String
	uniqueId: String
	promoted: Boolean
}
type Image {
	element: PostSelfImageElement
}
type TheaterPostCard {
	linkId: String
	uniqueId: String
	promoted: Boolean
	postTitle: PostTitleElement
	metadataHeader: Unknown
	actionBarElement: PostActionScoreBarElement
	mediaElement: Video
	indicatorsElement: IndicatorsElement
}
type Video {
	element: VideoElement
}
type Video {
	element: VideoElement
}
type RichText {
	elements: Unknown
}
type Rich {
	element: RichTextElement
}
type Preview {
	text: String
}
type PdpPrefetchItemInfo {
	linkId: String
	uniqueId: String
	promoted: Boolean
	index: Int
	feedType: Unknown
}
type ReplyableLinkModel {
	linkKindWithId: String
	subredditId: String
	subreddit: String
	title: String
	isSelf: Boolean
	selfTextHtml: String
}
type PrimaryOwner {
	redeemingInstructions: String
	redeemCode: String
	url: String
	startDate: Unknown
	endDate: Unknown
}
type UtilityType {
	id: String
	title: String
	iconUrl: String
}
type UtilityDetails {
	id: String
	utilityType: UtilityType
	name: String
	subtitle: String
	description: String
	image: UtilityDetailsImage
	ownership: Unknown
}
type UtilityDetailsImage {
	imageUrl: String
}
type VideoError {
	correlation: EventsVideoCorrelation
	pageType: String
	videoErrorReport: VideoErrorReport
}
type VideoplayerInvalidPlaybackVideo {
	pageType: String
	isPromoted: Boolean
}
type VideoPlayerClickLinkGallery {
	correlation: EventsVideoCorrelation
	numImages: Int
	outboundUrl: String
	outboundDomain: String
	pageType: String
}
type VideoPlayerSideNavigation {
	correlation: EventsVideoCorrelation
	pageType: Unknown
	galleryInfo: GalleryInfo
}
type EventsVideoCorrelation {
	id: String
}
type VideoClickOverflowCaptionsEnabled {
	correlation: EventsVideoCorrelation
	pageType: String
}
type VideoClickOverflowCaptionsDisabled {
	correlation: EventsVideoCorrelation
	pageType: String
}
type CommunityRecommendationElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	title: String
	id: String
	model: String
	version: String
	communities: Unknown
	destination: Unknown
}
type CardPostCommunityRecommendationsElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	title: String
	id: String
	model: String
	version: String
	postRecommendations: Unknown
	destination: Unknown
}
type CompactPostCommunityRecommendationsElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	id: String
	model: String
	version: String
	title: String
	postRecommendations: Unknown
	destination: Unknown
}
type ListStyleCommunityRecommendationsElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	title: String
	id: String
	model: String
	version: String
	communities: Unknown
	destination: Unknown
}
type FullBleedInfo {
	author: Author
	subreddit: Subreddit
	sourceType: Unknown
	content: Video
	title: String
}
type Author {
	id: String
	name: String
	avatar: String
	icon: Unknown
}
type Subreddit {
	id: String
	name: String
	prefixedName: String
	iconUrl: String
}
type Video {
	kindId: String
	mediaId: String
	videoUrl: String
	thumbnailUrl: String
	ownerId: String
}
type Params {
	postBounds: Unknown
	mediaBounds: Unknown
	staticPostHeader: Boolean
	postToFeedAutoAdvanceEnabled: Boolean
	baliAnimationCalculationsFixEnabled: Boolean
}
type CommunityInfoUIModel {
	communityName: String
	communityImageUrl: String
}
type ExpressionUiModel {
	id: String
	name: String
	avatarFullBodyUrl: String
	foregroundExpressionAsset: ExpressionAsset
	backgroundExpressionAsset: ExpressionAsset
	aspectRatio: Unknown
	perspective: Unknown
	position: Unknown
}
type CommunityAwardPageUIModel {
	communityName: String
	communityImageUrl: String
	awardCount: Awards
}
type Awards {
	firstAward: AwardInfo
	secondAward: AwardInfo
	thirdAward: AwardInfo
}
type AwardInfo {
	awardName: String
	awardImageUrl: String
}
type ExpressionAsset {
	url1x: String
	url2x: String
	url3x: String
}
type CommunityBadgePageUIModel {
	showBadge: Unknown
	username: String
	snoovatarUrl: String
}
type CommentsError {
	link: Unknown
	linkPresentationModel: Unknown
	comments: [Unknown]
	models: [Unknown]
	hasLocalData: Boolean
	isTruncated: Boolean
	isFromCache: Boolean
}
type AllCommentsPreTranslated {
	languageTag: String
	commentId: String
	context: Int
}
type CommentsSuccess {
	link: Unknown
	linkPresentationModel: Unknown
	comments: [Unknown]
	models: [Unknown]
	isTruncated: Boolean
	isFromCache: Boolean
}
type SingleComment {
	commentId: String
	context: Int
	shouldOpenReplyScreen: Boolean
}
type EventData {
	screenViewPageType: String
	screenViewSubreddit: Unknown
	screenViewPost: Unknown
}
type OnArenaCarouselItemImpression {
	item: TrendingCarouselArenaItemElement
}
type PostHidden {
	linkKindWithId: String
	uniqueId: String
	promoted: Boolean
	hiddenFromFeed: Boolean
	suppressToast: Boolean
}
type ShowFewerRecommended {
	linkKindWithId: String
	uniqueId: String
	promoted: Boolean
	prefixedSubredditName: String
	onMuteClicked: Unknown
}
type FeedVisibilityEvent {
	visibility: Unknown
}
type SubredditHeaderPresentationModel {
	displayName: String
	displayNamePrefixed: String
	keyColor: String
	primaryColor: String
	secondaryColor: String
	bannerBackgroundColor: String
	iconImg: String
	numSubscribers: Int
	accountsActive: Int
	publicDescription: String
	bannerImg: String
	kindWithId: String
	notificationLevel: Unknown
	quarantined: Boolean
	quarantineMessage: String
	quarantineMessageRtJson: String
	interstitialWarningMessage: String
	interstitialWarningMessageRtJson: String
	powerupsHeader: Unknown
	contentTopMargin: String
	subtitle: String
	searchBar: String
	isMuted: Boolean
	structuredStyle: Unknown
	userIsSubscriber: Boolean
	isYearInReviewEligible: Boolean
	isYearInReviewEnabled: Boolean
	taxonomyTopics: [Unknown]
	communityStatus: CommunityStatus
	userHasManageSettingsPermission: Boolean
	userIsPaidSubscriber: Boolean
	isPaidSubscriptionEnabled: Boolean
	showArenaCarousel: Boolean
}
type SubscribeToPost {
	linkId: String
	uniqueId: String
	promoted: Boolean
	linkKindWithId: String
	shouldSubscribe: Boolean
}
type IsSaved {
	linkId: String
	uniqueId: String
	promoted: Boolean
	linkKindWithId: String
	isSaved: Boolean
}
type OnClickArenaCarouselItem {
	item: TrendingCarouselArenaItemElement
}
type BlockUser {
	linkKindWithId: String
	uniqueId: String
	promoted: Boolean
	blockUser: Boolean
}
type PostUnhidden {
	linkKindWithId: String
	uniqueId: String
	promoted: Boolean
	unhiddenFromFeed: Boolean
}
type OnTrendingCarouselItemImpression {
	query: String
	isPromoted: Boolean
	isBlank: Boolean
	position: [Unknown]
	searchCorrelation: Unknown
}
type OnClickDelete {
	linkKindWithId: String
	uniqueId: String
	promoted: Boolean
}
type OnGiveAwardClicked {
	linkId: String
	uniqueId: String
	promoted: Boolean
	awardTarget: AwardTarget
}
type OnClickOpenComments {
	linkId: String
	uniqueId: String
	promoted: Boolean
	postTransitionParams: PostTransitionParams
	galleryItemPosition: Int
}
type OnClickCarouselItem {
	element: TrendingCarouselElement
	clickedItem: TrendingCarouselItemElement
	allCarouselItems: [Unknown]
	searchCorrelation: Unknown
}
type SubredditMuted {
	linkKindWithId: String
	uniqueId: String
	promoted: Boolean
	subredditId: String
	isSubredditMuted: Boolean
}
type OnClickReport {
	linkKindWithId: String
	uniqueId: String
	promoted: Boolean
}
type OnSetFeedRefreshPillVisibility {
	isVisible: Boolean
}
type OnClickShare {
	linkId: String
	uniqueId: String
	promoted: Boolean
	isDynamicShareIcon: Boolean
}
type PostDetailTransitionParams {
	transitionLink: Unknown
	postBounds: Unknown
	postMediaBounds: Unknown
	staticPostHeader: Boolean
}
type FeedEventContext {
	publishFeedEvent: Unknown
	stateHolder: Unknown
	updateOverflowMenu: Unknown
	updateBottomSheet: Unknown
}
type OnSubredditFlairClicked {
	flairId: String
}
type GoldPackageClicked {
	goldPackage: GoldPackageUiModel
}
type BasicPurchaseInfoTextProvider {
	text: String
}
type Loading {
}
type Loaded {
	uiModel: GoldPurchaseScreenUiModel
}
type DebugEvent {
	id: Int
	source: String
	action: String
	noun: String
	timestamp: Int
	eventJson: Unknown
}
type AwardConfirmScreenUiModel {
	communityGoldBalance: String
	awardGoldPrice: String
	awardAssetUrl: String
	animateAward: Boolean
	confirmCtaEnabled: Boolean
	confirmCtaLoading: Boolean
	showError: Boolean
	composePerfTrackerEnabled: Boolean
}
type OnClickMultiChatChannelDiscoverAllChats {
	feedElementId: String
	pageType: String
	multiChatChannelFeedUnit: MultiChatChannelFeedUnit
}
type OnYoutubeVideoClick {
	linkId: String
	uniqueId: String
	title: String
	videoUrl: String
	createdUtc: Int
	shouldObfuscate: Boolean
	isPromoted: Boolean
}
type MediaImage {
	id: String
	path: String
	isGif: Boolean
}
type OnClickMultiChatChannelFeedUnit {
	feedElementId: String
	uxExperience: Unknown
	uxVariant: Unknown
	pageType: String
	clickItemIndex: Unknown
	multiChatChannelFeedUnit: MultiChatChannelFeedUnit
}
type OnClickMultiChatChannelOverflowMenu {
	feedElementId: String
	pageType: String
	multiChatChannelFeedUnit: MultiChatChannelFeedUnit
}
type MarkdownConversionResult {
	text: Unknown
	bigEmotes: Boolean
	gifsUsed: Boolean
	imagesUsed: Boolean
	videoUsed: Boolean
}
type NavigationAvailabilityUiModel {
	saveEnabled: Boolean
	dataLossPossible: Boolean
}
type OnClickMultiChatChannelHide {
	feedElementId: String
	uxExperience: Unknown
	uxVariant: Unknown
	pageType: Unknown
	multiChatChannelFeedUnit: MultiChatChannelFeedUnit
}
type OnViewMultiChatChannelFeedUnit {
	feedElementId: String
	uxExperience: Unknown
	uxVariant: Unknown
	pageType: String
	multiChatChannelFeedUnit: MultiChatChannelFeedUnit
	reportTelemetry: Boolean
}
type GiphyAttribution {
	text: String
	link: String
}
type Optional {
	value: Unknown
}
type RecommendationChainingData {
	title: String
	recommendations: Unknown
	referringPostId: String
	referringSubredditId: String
	referringSubredditName: String
}
type GqlContext {
	linkId: String
	adPayload: AdPayload
}
type EventDataList {
	events: [Unknown]
	failedIds: Unknown
}
type CustomFiltersUpdate {
	allowed: Optional
	blocked: Optional
}
type EventData {
	id: Int
	timestamp: Int
	event: Unknown
	isDispatched: Boolean
}
type AdvancedSettingsUpdate {
	regex: Optional
	banImages: Optional
	banGifs: Optional
	banStickers: Optional
	linkSharing: Optional
	allowedDomains: Optional
	blockedDomains: Optional
}
type ButtonRepresentation {
	hasBorder: Boolean
	iconSize: Unknown
	iconColorOverride: Int
	showAwardsCount: Boolean
	iconRplColorOverride: Unknown
	showAnimationIfHighlyAwarded: Boolean
}
type AwardEntryPointTooltip {
	message: String
	uxtsExperience: String
	uxtsVariant: String
	onTooltipViewed: Unknown
}
type EntryPointUiModel {
	awarding: EntryPointAwarding
	buttonRepresentation: ButtonRepresentation
	isAwardedByTheCurrentUser: Boolean
	entryPointTooltip: AwardEntryPointTooltip
}
type RecommendationChainingElement {
	linkId: String
	data: RecommendationChainingData
}
type EntryPointAwarding {
	iconUrl: String
	awardTitle: String
	totalAwardCount: Int
}
type RankedCommunityElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	rank: Int
	subreddit: Community
}
type HighValue {
	flairText: String
}
type LeaderboardListItemUiModel {
	awardId: String
	awardImageUrl: String
	animatedAwardImageUrl: String
	reduceMotion: Boolean
	awardCount: String
	goldCount: String
	isFreeAward: Boolean
	isTopAward: Boolean
	isPromotedAward: Boolean
	isLimitedAward: Boolean
	isReportable: Boolean
	awardListItemContentDescription: String
	reportAwardButtonContentDescription: String
	isCommunityAward: Boolean
	isSubscriberAward: Boolean
	infoPopupUiModel: Unknown
	showInfoPopup: Boolean
	awardFlair: Unknown
}
type Simple {
	screenSourceForAnalytics: Unknown
	enableSpoilerNsfw: Boolean
	enableAddLink: Boolean
	isLinkOver18: Boolean
	isLinkSpoiler: Boolean
}
type Full {
	screenSourceForAnalytics: Unknown
	enableSpoilerNsfw: Boolean
	enableAddLink: Boolean
	subredditKindWithId: String
	subredditName: String
	userKindWithId: String
	linkKindWithId: String
	metaCorrelation: MetaCorrelation
	parentCommentsUsedFeatures: Unknown
	autoOpenExtension: Unknown
	markdownText: String
	mediaMetadata: Unknown
	layoutConfig: Unknown
}
type Coachmark {
	coachmarkText: String
	ctaText: String
}
type TabInfo {
	selectedTabId: String
	tabs: [Unknown]
}
type Tooltip {
	tooltipText: String
}
type Club {
	flairText: String
}
type ReportInfo {
	showReportActionSheet: Boolean
	awardId: String
}
type BaliExperimentToVariant {
	experimentId: Unknown
	experimentName: Unknown
	variantName: String
}
type SurveyProgressUiModel {
}
type OnExternalSortChange {
	sort: Sort
}
type OnExternalViewModeChange {
	viewMode: Unknown
}
type LeaderboardUiModel {
	awardCount: String
	goldCount: String
	showGoldInfoPopup: Boolean
	reportInfo: ReportInfo
	awardsUiModel: Unknown
	awardersViewState: Unknown
	leaderboardHeaderContentDescription: String
	isComposePerformanceTrackerEnabled: Boolean
	tabInfo: TabInfo
	showBackButton: Boolean
	showBottomGradientEdge: Boolean
}
type BlockedPostUiModel {
	postId: String
	expandBlockedPost: Boolean
}
type SubredditSubscribe {
	trackingData: TrackingData
	isSubscribed: Boolean
	cardType: Unknown
}
type LinearPostCardSection {
	data: LinearPostCard
	titleSection: Unknown
	metadataHeaderSection: Unknown
	actionBarSection: Unknown
	mediaSection: Unknown
	textSection: Unknown
	indicatorsSection: Unknown
	commentCardComponent: Unknown
}
type TheaterCardSection {
	data: TheaterPostCard
	titleSection: Unknown
	metadataHeaderSection: Unknown
	actionBarSection: Unknown
	mediaSection: Unknown
	indicatorsElement: IndicatorsElement
}
type AvatarModel {
	redditorId: String
	profileIconUrl: String
	snoovatarIconUrl: String
	isNsfw: Boolean
}
type Preview {
	text: String
}
type LinkCardViewState {
	previewImageUrl: String
	sourceName: String
	linkUrl: String
	linkId: String
	uniqueId: String
	promoted: Boolean
}
type CommentCardProps {
	linkId: String
	commentId: String
	authorName: String
	authorAvatar: AvatarModel
	content: Unknown
	upvotesCount: Unknown
	isTopComment: Boolean
}
type RichText {
	text: String
	mediaDataMap: Unknown
}
type TelemetryEvent {
	trackingEvent: Unknown
}
type NotifyUXTSEvent {
	feedId: String
	experience: Unknown
	action: Unknown
	targetingInput: Unknown
}
type CustomPostHidden {
	linkKindWithId: String
	uniqueId: String
	promoted: Boolean
}
type SubredditClicked {
	trackingData: TrackingData
	cardType: Unknown
}
type ShowMore {
	destination: Unknown
}
type CommunityAvatarAwardRedesignArgs {
	cx: String
	cy: String
	px: String
	fullscreen: Boolean
	edit: Boolean
	timestamp: String
}
type OnClickPost {
	linkId: String
	uniqueId: String
	promoted: Unknown
	url: String
}
type SubredditViewed {
	trackingData: TrackingData
	cardType: Unknown
}
type PostClicked {
	trackingData: TrackingData
	cardType: Unknown
}
type OnClickSubreddit {
	linkId: String
	uniqueId: String
	promoted: Unknown
	subredditName: String
	type: Unknown
}
type OnCustomElementOverflowMenuOpened {
	linkKindWithId: String
	uniqueId: String
	promoted: Boolean
	menuTrigger: Unknown
}
type PinnedPostsGroupUiModel {
	posts: Unknown
	clickedPostsIds: Unknown
	expanded: Boolean
}
type Website {
	linkId: String
	uniqueId: String
	title: String
	timePostedLabelWithoutDelimeter: String
	thumbnail: String
	blurType: Unknown
	isRead: Boolean
	domain: String
	showTranslationShimmer: Boolean
}
type Generic {
	linkId: String
	uniqueId: String
	title: String
	timePostedLabelWithoutDelimeter: String
	thumbnail: String
	blurType: Unknown
	isRead: Boolean
	showTranslationShimmer: Boolean
}
type CustomPost {
	linkId: String
	uniqueId: String
	title: String
	timePostedLabelWithoutDelimeter: String
	thumbnail: String
	blurType: Unknown
	isRead: Boolean
	link: Unknown
	customPostElement: Unknown
	showTranslationShimmer: Boolean
}
type PostSubmitted {
	subredditName: String
	linkId: String
}
type Variant {
	experimentName: String
	autoExpose: Boolean
	mapper: Unknown
}
type FeatureFlag {
	experimentName: String
	autoExpose: Boolean
}
type IsVariant {
	experimentName: Unknown
	autoExpose: Unknown
	expectedVariant: Unknown
}
type InternalOnlyFeatureFlag {
	experimentName: String
	autoExpose: Boolean
}
type KillSwitch {
	killSwitch: String
}
type VariantOrDefault {
	experimentName: String
	autoExpose: Unknown
	mapper: Unknown
	default: Unknown
}
type IsInVariants {
	experimentName: String
	autoExpose: Unknown
	expectedVariants: Unknown
}
type RemoveComment {
	kindWithId: String
}
type ShowTranslatedOriginalComment {
	kindWithId: String
	originalComment: OriginalComment
}
type AddCommentReply {
	parentPos: Unknown
}
type AddParentComment {
	comment: Unknown
}
type CollapseCommentToRoot {
	kindWithId: String
}
type ShowTranslation {
	kindWithId: String
	commentTranslation: TranslatedComment
}
type UpdateGiphyAttribution {
	commentIdWithKind: String
	giphyAttribution: GiphyAttribution
}
type AddCommentChildren {
	comments: [Unknown]
	moreCommentKindWithId: String
	models: [Unknown]
}
type CollapseComment {
	kindWithId: String
}
type UpdateComment {
	kindWithId: String
	mapper: Unknown
}
type ExpandComment {
	kindWithId: String
}
type SetComments {
	comments: [Unknown]
	models: [Unknown]
}
type RemoveMoreComment {
	kindWithId: String
}
type MerchandisingUnitElementUIModel {
	id: String
	format: Unknown
	title: String
	body: String
	url: String
	ctaText: String
	images: [Unknown]
	video: Unknown
	listableType: Unknown
}
type TopicScreenUiModel {
	discoverPageTopic: DiscoverPageTopic
	subscribedSubredditIds: Unknown
}
type ChangeMoreCommentLoadingState {
	kindWithId: String
	isLoading: Boolean
}
type MerchandiseViewState {
	title: String
	description: String
	ctaText: String
	imageResource: Unknown
	imageUrl: String
	imageVisible: Boolean
	ctaButtonVisible: Boolean
	classicViewEnabled: Boolean
	size: Unknown
	useMediumIcon: Boolean
}
type DiscoverPageTopic {
	id: String
	name: String
	subreddits: Unknown
}
type Metric {
	name: Unknown
	value: Float
	labels: Unknown
	sensitiveLabels: Unknown
}
type OnClickChatChannelHide {
	feedElementId: String
	chatChannelFeedUnit: ChatChannelFeedUnit
	uxExperience: Unknown
	uxVariant: String
	pageType: String
}
type OnClickChatChannelOverflowMenu {
	feedElementId: String
	chatChannelFeedUnit: ChatChannelFeedUnit
	pageType: String
}
type NetworkError {
	message: String
}
type CommunitySubscriptionInfo {
	subredditInfo: SubredditInfo
	products: [Unknown]
}
type CommunityGoldInfo {
	isActivePaidSubscriber: Boolean
	isSubscriptionsEnabled: Boolean
	isSubscriberBadgeEnabled: Boolean
	isSubscriberOnlyPostEnabled: Boolean
	isSubscriberAwardsEnabled: Boolean
}
type OnClickChatChannelFeedUnit {
	feedElementId: String
	chatChannelFeedUnit: ChatChannelFeedUnit
	uxExperience: Unknown
	uxVariant: String
	pageType: String
	state: Unknown
}
type SubredditInfo {
	id: String
	name: String
	iconUrl: String
	communityGoldInfo: CommunityGoldInfo
}
type OnClickDiscoverAllChats {
	feedElementId: String
	chatChannelFeedUnit: ChatChannelFeedUnit
	pageType: String
}
type OnViewChatChannelFeedUnit {
	feedElementId: String
	chatChannelFeedUnit: ChatChannelFeedUnit
	uxExperience: Unknown
	uxVariant: String
	pageType: String
	reportTelemetry: Boolean
}
type TopicStoreKey {
	id: String
	schemeName: String
}
type GQL {
	allowDeletedPosts: Boolean
	includePostStats: Boolean
}
type ButtonAppearance {
	style: Unknown
}
type Button {
	sectionId: String
	title: String
	appearance: ButtonAppearance
	destination: DefaultExplainerButtonDestination
}
type Space {
}
type EducationalUnit {
	explainerId: String
	sections: [Unknown]
	footer: Footer
}
type Footer {
	primarySection: Unknown
	secondarySection: Unknown
	tertiarySection: Unknown
}
type ScrollerSection {
	pages: [Unknown]
}
type DefaultExplainerButtonDestination {
	id: String
	deepLink: String
}
type ScrollerSectionPage {
	pageId: String
	sections: [Unknown]
}
type Image {
	url: String
}
type Text {
	sectionId: String
	content: String
	appearance: TextAppearance
	rtJSONText: String
}
type TextAppearance {
	fontType: Unknown
	alignment: Unknown
}
type ChatChannelElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	chatChannelFeedUnit: ChatChannelFeedUnit
	chatChannelElementType: Unknown
}
type MultiChatChannelElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	multiChatChannelFeedUnit: MultiChatChannelFeedUnit
}
type AchievementFlairUiModel {
	imageUrl: String
	id: String
	title: String
}
type CommentAchievementFlairUiModel {
	displayedFlairs: [Unknown]
	unlockedFlairCount: [Unknown]
}
type Image {
	url: String
	contentDescription: String
}
type Text {
	text: String
}
type SnoomojiUiItem {
	name: String
	url: String
	createdBy: String
}
type Image {
	url: String
}
type EmailCollectionAddEmailUiModel {
	title: String
	description: String
	controlsEnabled: Boolean
	errorMessage: String
}
type EmailCollectionConfirmationUiModel {
	title: String
	description: Unknown
	primaryActionEnabled: Boolean
	secondaryActionEnabled: Boolean
	successMessage: String
	errorMessage: String
}
type Image {
	url: String
}
type CommentDataModel {
	commentId: String
	parentId: String
	linkId: String
	listingPosition: String
	sortType: String
	type: Unknown
}
type CommentAndMutations {
	commentDataModel: CommentDataModel
	mutations: CommentMutationDataModel
}
type CommentMutationDataModel {
	commentId: String
	isCollapsed: Boolean
}
type CreatorKitImageParams {
	imageUri: String
	link: String
	isGif: Boolean
	isFromCamera: Boolean
}
type Cancelled {
	activeUntil: Unknown
}
type Rotating {
	awardImages: Unknown
}
type Confetti {
	awardImages: Unknown
}
type ButtonZeroState {
	hasBorder: Boolean
	buttonSize: Unknown
	iconColorOverride: Int
	a11yLabel: String
	iconRplColorOverride: Unknown
	awardEntryPointTooltip: AwardEntryPointTooltip
}
type Manual {
	expiresOn: Unknown
}
type ButtonState {
	iconUrl: String
	awardTitle: String
	totalAwardCount: String
	a11yLabel: String
	hasBorder: Boolean
	isAwardedByCurrentUser: Boolean
	buttonSize: Unknown
	showAwardsCount: Boolean
	awardEntryPointAnimation: Unknown
	awardEntryPointTooltip: AwardEntryPointTooltip
}
type AwardImage {
}
type Active {
	renewal: Unknown
	since: Unknown
}
type Expired {
	since: Unknown
}
type GracePeriod {
	activeUntil: Unknown
}
type Auto {
	renewsOn: Unknown
}
type SubscriptionListItem {
	id: String
	type: Community
	state: Unknown
	costToRenew: String
}
type SubscriptionInfo {
	id: String
	type: Community
	subscriptionProvider: Unknown
	state: Unknown
	costToRenew: String
	communityGoldInfo: CommunityGoldInfo
	subscriberBadgeVisibility: Unknown
}
type Community {
	subredditKindWithId: String
	subredditName: String
	subredditIconUrl: String
}
type ClaimedNft {
	id: String
	name: String
	preRenderImage: String
	accessoryIds: [Unknown]
	outfitId: String
}
type CountInfo {
	raw: String
}
type FeedLoadServingEvent {
	type: String
	pageType: String
	correlationId: String
	listingSort: String
	subredditName: Unknown
	settingValue: String
	newFeedSize: Int
	arenaId: String
}
type PdpSubredditChatChannelUiModel {
	roomId: String
	roomName: String
	roomIconUrl: String
	facepileIconUrls: Unknown
	activeUsersCount: CountInfo
	recentMessagesCount: CountInfo
	description: String
	subredditId: String
	subredditName: String
	subredditNamePrefixed: String
}
type PdpUserChatChannelUiModel {
	roomId: String
	roomName: String
	roomIconUrl: String
	facepileIconUrls: Unknown
	activeUsersCount: CountInfo
	recentMessagesCount: CountInfo
	description: String
	topics: Unknown
}
type OnOverflowMenuOpened {
	linkKindWithId: String
	uniqueId: String
	promoted: Boolean
	type: Unknown
	menuTrigger: Unknown
}
type OnGalleryVisibilityChangeEvent {
	linkId: String
	uniqueId: String
	promoted: Boolean
}
type OnGallerySelectionStateRestored {
	linkId: String
}
type GoldPurchaseData {
	packages: [Unknown]
}
type OnSnapFeedCardClick {
	linkId: String
	uniqueId: String
	promoted: Boolean
	clickedOnVideoPreview: Unknown
	clickLocation: Unknown
	postTransitionParams: PostTransitionParams
}
type OnSearchBannerDismissed {
	linkKindWithId: String
	bannerId: String
	isDismissed: Boolean
}
type JoinedSubredditElementEvent {
	feedEvent: JoinedSubredditEvent
}
type OnAdVideoPlay {
	linkKindWithId: String
	uniqueId: String
	elapsedMs: Int
	durationMs: Int
	isMuted: Boolean
	fromTimelineScrub: Boolean
	adPayload: AdPayload
}
type OnGoldPopupOpened {
	linkKindWithId: String
	uniqueId: String
	promoted: Boolean
	source: Unknown
}
type OnTooltipViewed {
	linkKindWithId: String
	key: Unknown
}
type OnGoldItemSelected {
	linkKindWithId: String
	uniqueId: String
	promoted: Boolean
	productId: String
	awardTarget: AwardTarget
	awardCount: String
	promoId: String
}
type FeedBoundsInWindowUpdated {
	bounds: Unknown
}
type DismissAwardTooltipFeedEvent {
	linkKindWithId: String
	variant: String
	action: Unknown
}
type OnModMenuClicked {
	linkId: String
	uniqueId: String
	promoted: Boolean
	feedContext: FeedContext
}
type OnGoldGivenEvent {
	linkKindWithId: String
	count: String
}
type OnAmaReminderToggled {
	linkKindWithId: String
	uniqueId: String
	promoted: Boolean
	followed: Boolean
	buttonLoading: Boolean
}
type IsRead {
	linkKindWithId: String
	uniqueId: String
	promoted: Unknown
	isRead: Boolean
}
type OnClickPostLink {
	linkId: String
	uniqueId: String
	promoted: Boolean
	url: String
	isLinkSourceUrl: Boolean
	previewClick: Boolean
	postTransitionParams: PostTransitionParams
}
type VisibleItemsChangedEvent {
	items: [Unknown]
}
type OnClickFeedSurveyButton {
	linkId: String
	uniqueId: String
	promoted: Boolean
	analyticsEventPayload: AnalyticsEventPayload
	toastCompletionText: String
	clickActions: Unknown
	surveyId: String
}
type OnClickLink {
	linkId: String
	uniqueId: String
	promoted: Boolean
	clickedOnVideoPreview: Boolean
	clickLocation: Unknown
	expandOnly: Boolean
	postTransitionParams: PostTransitionParams
	skipPostClickAdAnalytics: Boolean
	galleryItemPosition: Int
}
type OnAdVideoVisibilityChange {
	linkKindWithId: String
	uniqueId: String
	percentVisible: Unknown
	adPayload: AdPayload
}
type OnPlayerHasAudio {
	linkKindWithId: String
	uniqueId: String
	hasAudio: Boolean
	muted: Boolean
}
type OnFeedRefresh {
	refreshType: Unknown
	interactionMode: Unknown
}
type OnVideoPlaybackToggled {
	linkId: String
	isPlaying: Boolean
}
type OnViewFeedSurvey {
	linkId: String
	uniqueId: String
	promoted: Boolean
	surveyId: String
	analyticsEventPayload: AnalyticsEventPayload
}
type OnAdClickLocationEvent {
	linkId: String
	uniqueId: String
	clickLocation: Unknown
}
type PostStatsUpdated {
	linkKindWithId: String
	uniqueId: String
	promoted: Boolean
	score: String
	numComments: String
}
type OnClassicHideOverflow {
	linkKindWithId: String
}
type SetVoteDirection {
	linkKindWithId: String
	uniqueId: String
	promoted: Boolean
	voteDirection: Unknown
}
type OnVideoAutoPlayChangeEvent {
	linkKindWithId: String
}
type OnScrollPositionChanged {
	firstVisibleItemPosition: Unknown
}
type OnClickPromotedUserPostSubreddit {
	linkId: String
	uniqueId: String
	promoted: Boolean
	subredditName: String
}
type OnClickAppContentTag {
	linkId: String
}
type OnSelectFlairElementEvent {
	linkKindWithId: String
	subredditId: String
	flairs: Unknown
}
type OnClickSubreddit {
	linkId: String
	uniqueId: String
	promoted: Boolean
	subredditName: String
}
type LoadRecommendationChainingEvent {
	referringPostId: String
	subredditId: String
	subredditName: String
}
type IndicatorChangeEvent {
	linkId: String
	isPresent: Boolean
	indicatorType: Unknown
}
type OnAdAttributionClick {
	uniqueId: String
}
type OnVoteClicked {
	linkKindWithId: String
	uniqueId: String
	promoted: Boolean
	voteDirection: Unknown
	currentDirection: Unknown
}
type OnVideoAudioToggled {
	linkKindWithId: String
	isMuted: Boolean
	isPromoted: Boolean
}
type OnModSelectFlair {
	linkId: String
	subredditId: String
	flair: Unknown
}
type ShowAwardTooltipFeedEvent {
	linkKindWithId: String
	tooltipContent: TooltipContent
}
type OnClickGalleryImage {
	linkId: String
	uniqueId: String
	promoted: Boolean
	index: Boolean
	postTransitionParams: PostTransitionParams
}
type OnFeedLoad {
	loadType: Unknown
	feedType: Unknown
}
type OnClickAd {
	linkId: String
	uniqueId: String
	clickLocation: Unknown
	adType: Unknown
}
type SubredditListScreenUiModel {
	subredditList: Unknown
	subscribedSubredditIds: Unknown
}
type OnVideoCtaClicked {
	linkId: String
	uniqueId: String
	title: String
	url: String
	createdTimestamp: Int
}
type JoinedSubredditEvent {
	linkKindWithId: String
	subredditId: String
	subredditName: String
	state: Unknown
	shouldShowJoinButton: Boolean
}
type IndicatorState {
	indicator: Unknown
	isEnabled: Boolean
}
type OnClickAdGalleryItem {
	linkId: String
	uniqueId: String
	clickLocation: Unknown
}
type OnScrollToId {
	id: String
}
type GoldPackage {
	id: String
	name: Unknown
	price: String
	priceMacro: String
	quantity: Unknown
	staticImageUrls: [Unknown]
	skuDetails: Unknown
	productVersion: Unknown
	pricePackageId: String
	goldAmount: Boolean
	baseCurrency: String
	externalProductId: String
}
type OnUsernameClicked {
	linkKindWithId: String
	uniqueId: String
	promoted: Boolean
	username: String
	clickLocation: Unknown
}
type OnGalleryPageChangeEvent {
	linkId: String
	uniqueId: String
	promoted: Boolean
}
type PostTransitionParams {
	postBounds: Unknown
	postMediaBounds: Unknown
}
type OnClickAudioChange {
	linkKindWithId: String
	uniqueId: String
	oldAudioState: Unknown
}
type OnClickImage {
	linkId: String
	uniqueId: String
	promoted: Boolean
	expandOnly: Boolean
	postTransitionParams: PostTransitionParams
}
type OnClickPromotedUserLink {
	linkId: String
	uniqueId: String
	promotedPostLinkId: String
	clickLocation: Unknown
	isPcp: Boolean
}
type SetDynamicShareIcon {
	linkKindWithId: String
}
type TooltipContent {
	message: String
	uxtsExperience: String
	uxtsVariant: String
	onTooltipViewed: Unknown
}
type OnPostMetadataModActionIndicatorChangedEvent {
	linkKindWithId: String
	isEnabled: Boolean
	indicatorType: Unknown
	indicators: Unknown
}
type OnLoadMoreVisibleTime {
	timeMs: Int
}
type OnGoldPopupClosed {
	linkKindWithId: String
	uniqueId: String
	promoted: Boolean
}
type OnAdVisibilityChange {
	linkKindWithId: String
	uniqueId: String
	percentVisible: AdPayload
	pastThrough: Boolean
}
type OnAdClickLink {
	linkId: String
	uniqueId: String
	promoted: Unknown
	clickedOnVideoPreview: Boolean
	clickLocation: Unknown
	isVideo: Boolean
}
type OnBlurredPostClicked {
	linkKindWithId: String
}
type ImageMiniContextBarState {
	postId: String
	title: String
	imagePath: String
	blurredUrl: String
	isVisible: Boolean
	shouldBlur: Boolean
	wasUnblurred: Boolean
	postMetrics: PostMetricsState
}
type MediaClick {
	mediaBounds: Unknown
}
type TextMiniContextBarState {
	postId: String
	title: String
	isVisible: Boolean
	postMetrics: PostMetricsState
}
type EmptyMiniContextBarState {
	postId: String
	title: String
	isVisible: Boolean
	postMetrics: PostMetricsState
}
type PostMetricsState {
	voteCount: String
	commentCount: String
	largeFontFixEnabled: Boolean
}
type GalleryMiniContextBarState {
	postId: String
	title: String
	imagePath: String
	blurredUrl: String
	position: Boolean
	isVisible: Boolean
	wasUnblurred: Boolean
	postMetrics: PostMetricsState
}
type VideoMiniContextBarState {
	postId: String
	title: String
	videoMetadata: VideoMetadata
	isPlaying: Boolean
	isVisible: Boolean
	videoState: Unknown
	shouldBlur: Boolean
	wasUnblurred: Boolean
	postMetrics: PostMetricsState
}
type CommunitySettingsActionItem {
	modToolsAction: Unknown
	settingValue: String
	iconTint: Unknown
	isNew: Boolean
}
type CommunitySettingsSectionHeaderItem {
}
type OnGalleryItemSelected {
	linkId: String
}
type VoteStyleUiModel {
	countColor: String
	iconActiveUrl: String
	iconInactiveUrl: String
}
type Awarded {
	byCurrentUser: Boolean
}
type Style {
	upvote: VoteStyleUiModel
	downvote: VoteStyleUiModel
	showCustomIcons: Boolean
}
type VoteUiModel {
	direction: Unknown
	count: String
	isCountHidden: Boolean
	cachedName: String
	style: Style
	redditGoldStatus: Unknown
	isGildable: Boolean
	voteEnabled: Boolean
}
type SnapFeedScreenDependencies {
	analyticsScreenData: ScreenPageData
	feedType: Unknown
	screenName: Unknown
}
type ChannelTap {
	numChannels: Unknown
	channelId: String
	channelName: String
	badgeCount: Int
	readState: Unknown
	version: Unknown
	subreddit: MatrixSubredditInfoAnalyticsData
}
type ChannelDeselect {
	numChannels: Unknown
	channelId: String
	channelName: String
	version: Unknown
	subreddit: MatrixSubredditInfoAnalyticsData
}
type ChannelLoad {
	channelType: Unknown
	numChannels: Boolean
	hasUnread: Boolean
	version: Unknown
	subreddit: MatrixSubredditInfoAnalyticsData
}
type ChannelSwipe {
	channelIndex: Unknown
	type: Unknown
	channelId: String
	channelName: String
	badgeCount: Int
	readState: Unknown
	version: Unknown
	subreddit: MatrixSubredditInfoAnalyticsData
}
type FeedTapOptions {
	target: Unknown
	value: String
	subreddit: MatrixSubredditInfoAnalyticsData
}
type ChannelView {
	numChannels: Int
	channelId: String
	channelName: String
	channelType: Unknown
	arrivedBy: Unknown
	badgeCount: Int
	readState: Unknown
	subreddit: MatrixSubredditInfoAnalyticsData
	version: Unknown
}
type CommunitySettingsFooter {
}
type AwarderListItemUiModel {
	avatarUiModel: Unknown
	awarderName: String
	goldContributed: String
	contentDescription: String
}
type GlideImageSize {
}
type LauncherIcon {
	id: String
	isLimitedTime: Boolean
	isPremiumOnly: Boolean
}
type Styles {
	legacyIcon: LegacyIcon
}
type MuxedMp4s {
	low: Low
	medium: Medium
	high: High
	highest: Highest
	recommended: Recommended
}
type RootComments {
	__typename: String
	snackCommentsPreview: SnackCommentsPreview
}
type AdPayload {
	__typename: String
	adPayloadFragment: AdPayloadFragment
}
type OnSubreddit {
	name: String
	prefixedName: String
}
type PostPollOptionFragment {
	id: String
	text: String
	voteCount: Int
}
type OnProfilePost1 {
	profile: Profile2
}
type PreviewTextCell {
	__typename: String
	previewTextCellFragment: PreviewTextCellFragment
}
type Image {
	__typename: String
	cellMediaSourceFragment: Unknown
}
type Medium {
}
type Icon {
}
type LegacyIcon {
}
type PreviewTextCellFragment {
	id: String
	text: String
	numberOfLines: Boolean
}
type OnModActionNote {
	actionType: ModActionType
	banDays: Int
	isPermanentBan: Boolean
	banReason: String
	description: String
}
type Static_icon_32 {
	__typename: String
	mediaSourceFragment: Unknown
}
type ModmailRedditorInfoFragment {
	__typename: String
	id: String
	displayName: String
	onRedditor: OnRedditor
	onUnavailableRedditor: OnUnavailableRedditor
}
type Post {
	__typename: String
	recapPostFragment: RecapPostFragment
}
type LegacyIcon {
}
type Node1 {
	__typename: String
	profileFragment: ProfileFragment
}
type PreviewTextCell {
	__typename: String
	previewTextCellFragment: PreviewTextCellFragment
}
type Content {
	markdown: String
	richtext: Unknown
}
type OnLinkCell {
	__typename: String
	linkCellFragment: Unknown
}
type Icon_24 {
	__typename: String
	mediaSourceFragment: Unknown
}
type Preview {
	__typename: String
	mediaSourceFragment: Unknown
}
type GqlStorefrontArtist {
	redditorInfo: RedditorInfo
}
type GqlStorefrontPriceBoundsRoot {
	prices: [Unknown]
}
type BannedMemberEndsAtFragment {
	edges: [Unknown]
}
type Media {
	still: Still
	typeHint: MediaType
}
type OnSubreddit {
	name: String
	id: String
	prefixedName: String
	publicDescriptionText: String
	postsIn7Days: String
	subscribersCount: Boolean
	styles: Unknown
	taxonomy: Taxonomy
}
type MediaFragment {
	previewMediaId: String
	still: Still
	obfuscated_still: Obfuscated_still
	animated: Animated
	streaming: Streaming
	video: Video
	packagedMedia: PackagedMedia
	typeHint: MediaType
	download: Download
}
type Content {
	__typename: String
	markdown: String
	richtext: Unknown
	translationInfo: TranslationInfo
	richtextMediaFragment: RichtextMediaFragment
}
type TranslatedImageAssetFragment {
	__typename: String
	id: String
	small: Small
	medium: Medium
	large: Large
	xlarge: Xlarge
	xxlarge: Xxlarge
	xxxlarge: Xxxlarge
}
type Node {
	__typename: String
	createdAt: Unknown
	onComment: OnComment
}
type SnoovatarIcon {
}
type PostStats {
	viewCountTotal: Int
	shareAllTotal: Int
}
type HighlightedPostAuthorInfoFragment {
	icon: Icon
}
type Image {
	__typename: String
	mediaSourceFragment: Unknown
}
type AdditionalImage {
	name: String
	image: Image
}
type ModPermissions {
	isAccessEnabled: Boolean
}
type TaggedTopic {
	name: String
}
type Content {
	__typename: String
	markdown: String
	html: String
	preview: String
	richtext: Unknown
	typeHint: ContentType
	translationInfo: TranslationInfo
	richtextMediaFragment: RichtextMediaFragment
}
type OnSubredditPost {
	subreddit: Subreddit
	paidSubscriberBadge: PaidSubscriberBadge
}
type Static_icon_24 {
	__typename: String
	mediaSourceFragment: Unknown
}
type Subreddit {
	__typename: String
	subredditFragment: SubredditFragment
}
type VideoAuthInfo {
	__typename: String
	mediaAuthInfoFragment: MediaAuthInfoFragment
}
type SnoovatarIcon {
}
type OnCarouselTextPostComponent {
	post: Post
}
type MediaAssetFragment {
	__typename: String
	id: String
	userId: String
	mimetype: String
	width: Int
	height: Int
	onVideoAsset: Unknown
	imageAssetFragment: Unknown
	animatedImageAssetFragment: Unknown
	avatarExpressionMediaAssetFragment: AvatarExpressionMediaAssetFragment
}
type Profile {
	title: String
	isNsfw: Boolean
	publicDescriptionText: String
}
type Medium {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnSubredditPost {
	authorInfo: AuthorInfo
	subreddit: Subreddit
}
type Gallery {
	items: [Unknown]
}
type Redditor {
	__typename: String
	recapRedditorFragment: RecapRedditorFragment
}
type BanMessageContent {
	markdown: String
	richtext: Unknown
	html: String
}
type CommentInfoFragment {
	__typename: String
	feedCommentFragment: FeedCommentFragment
	feedDeletedCommentFragment: FeedDeletedCommentFragment
}
type PositionChangeIcon {
}
type SubredditMemberInfo {
	subredditKarma: SubredditKarma
	subredditContributionStats: SubredditContributionStats
}
type Styles {
}
type OnAchievementImageTrophy {
	carouselImage: CarouselImage
	gridImage: GridImage
	fullImage: FullImage
}
type TitleCell {
	__typename: String
	titleCellFragment: TitleCellFragment
}
type DiscoverTopic {
	name: String
	slug: String
}
type LegacyIcon {
}
type DescriptionContent {
	richtext: Unknown
}
type Media {
	__typename: String
	cellMediaSourceFragment: Unknown
}
type RecencyExplanation {
	markdown: String
	richtext: Unknown
}
type Filter {
	key: String
	value: Unknown
}
type TypeaheadForBlockingFragment {
	id: String
	redditorInfo: RedditorInfo
}
type ModerationInfo {
	isRemoved: Boolean
}
type Drop {
	size: Int
	rarity: ItemRarity
}
type Mp4_source {
	__typename: String
	mediaSourceFragment: Unknown
}
type Subreddit {
	name: String
	prefixedName: String
	authorFlair: AuthorFlair1
	styles: Styles
}
type Subreddit {
	__typename: String
	onSubreddit: OnSubreddit
}
type OnInactiveCommunityDiscoveryRecommendationContext {
	discoverTopic: DiscoverTopic
}
type StaticIcon {
}
type PostingEligibilityCriteria {
	isUserAllowed: Boolean
	isAllRulesRequired: Boolean
	rules: [Unknown]
}
type Obfuscated_xxxlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type Profile1 {
	__typename: String
	profileFragment: ProfileFragment
}
type SeedSubreddit {
	__typename: String
	chatChannelSubredditInfoFragment: ChatChannelSubredditInfoFragment
}
type Avatar {
	id: String
	fullImage: FullImage
}
type GalleryCellPageFragment {
	image: Image
}
type ModQueueReason {
	__typename: String
	previousActionsModQueueReasonFilterFragment: PreviousActionsModQueueReasonFilterFragment
}
type Content {
	preview: String
	richtext: Unknown
	html: String
	markdown: String
}
type Post {
	__typename: String
	highlightedPostFragment: HighlightedPostFragment
}
type OnUnavailableRedditor {
	name: String
	isPermanentlySuspended: Boolean
}
type OnMediaAsset {
	__typename: String
	onImageAsset: OnImageAsset
}
type Promo {
	promoType: EconPromoType
	id: String
}
type RedditorResizedIconsFragment {
	icon_24: Icon_24
	icon_32: Icon_32
	icon_48: Icon_48
	icon_64: Icon_64
	icon_72: Icon_72
	icon_96: Icon_96
	icon_128: Icon_128
	icon_144: Icon_144
	icon_192: Icon_192
	icon_288: Icon_288
	icon_384: Icon_384
}
type OnSubredditInfo {
	name: String
}
type SubredditMomentFeaturesFragment {
	momentsFeatures: MomentsFeatures
}
type AuthorFlair {
	__typename: String
	authorFlairFragment: AuthorFlairFragment
}
type Header {
	image: Unknown
	asset: Asset
	message: String
	isIconEnabled: Boolean
	isSubredditNameEnabled: Boolean
	mediaSelection: HeaderMediaSelection
	messageWithoutTemplating: String
}
type AdCampaignFragment {
	campaign: Campaign
}
type Icon_128 {
	__typename: String
	mediaSourceFragment: Unknown
}
type Post {
	__typename: String
	onSubredditPost: OnSubredditPost
}
type ProxyAuthor {
	id: String
	displayName: String
}
type SearchCommentFragment {
	id: String
	createdAt: Unknown
	editedAt: Unknown
	score: Unknown
	isScoreHidden: Boolean
	content: Content
	authorInfo: AuthorInfo
	isOP: Boolean
	parent: Parent
	postInfo: PostInfo
}
type AssociatedAwarding {
	id: String
}
type OnSubredditPost {
	content: Content
}
type Flair1 {
	richtext: Unknown
	text: String
	textColor: FlairTextColor
	type: String
	template: Unknown
}
type Large {
	__typename: String
	mediaSourceFragment: Unknown
}
type BlurredSource {
	__typename: String
	mediaSourceFragment: Unknown
}
type SearchRedditorFragment {
	__typename: String
	id: String
	name: String
	snoovatarIcon: SnoovatarIcon
	profile: Profile
	redditorResizedIconsFragment: RedditorResizedIconsFragment
}
type ColorFragment {
	__typename: String
	onNativeCellColor: OnNativeCellColor
	onCustomCellColor: OnCustomCellColor
}
type ActionInfo {
	reason: String
}
type Content {
	richtextMedia: [Unknown]
}
type ActivityTab {
	count: BadgeStyle
}
type Xxlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnAdPost {
	__typename: String
	promotedCommunityPostFragment: PromotedCommunityPostFragment
	promotedUserPostFragment: PromotedUserPostFragment
	adLeadGenerationInformationFragment: AdLeadGenerationInformationFragment
	adCampaignFragment: AdCampaignFragment
}
type SubredditListItemFragment {
	id: String
	name: String
	prefixedName: String
	styles: Unknown
	isFavorite: Boolean
	isSubscribed: Boolean
	isNsfw: Boolean
	type: SubredditType
	modPermissions: ModPermissions
}
type PostEventInfo {
	isFollowed: Boolean
	isLive: Boolean
	startsAt: Unknown
	endsAt: Unknown
	eventType: PostEventType
	isEventAdmin: Boolean
	remindeesCount: Int
	collaborators: [Unknown]
}
type ModeratorInfo {
	__typename: String
	previousActionsRedditorInfoFragment: PreviousActionsRedditorInfoFragment
}
type SnoovatarIcon {
}
type OnRedditor {
	name: String
	isCakeDayNow: Boolean
	newIcon: NewIcon
	iconSmall: IconSmall
	snoovatarIcon: SnoovatarIcon
	profile: Profile
	accountType: AccountType
}
type RecapCardDataSubredditFragment {
	subreddit: Subreddit
}
type Level {
	level: String
}
type Image {
	__typename: String
	mediaSourceFragment: Unknown
}
type Subreddit {
	id: String
	name: String
	prefixedName: String
	moderation: Moderation
	allowedMediaInComments: [Unknown]
	isQuarantined: Boolean
	tippingStatus: TippingStatus
}
type RecChatChannelsFragment {
	__typename: String
	recommendedChannels: [Unknown]
	recChatChannelsAnalyticsInfoFragment: RecChatChannelsAnalyticsInfoFragment
}
type TrophyFragment {
	__typename: String
	id: String
	name: String
	shortDescription: String
	longDescription: String
	unlockedAt: Unknown
	progress: Progress
	isNew: Boolean
	onAchievementImageTrophy: OnAchievementImageTrophy
	onAchievementRepeatableImageTrophy: OnAchievementRepeatableImageTrophy
	onAchievementTrophyWithBadge: OnAchievementTrophyWithBadge
}
type OnComment {
	__typename: String
	id: String
	createdAt: Unknown
	score: Unknown
	authorData: AuthorData
	concreteCommentContent: ConcreteCommentContent
}
type RecurringScheduledPostsFragment {
	recurringPosts: RecurringPosts
}
type Image {
	__typename: String
	mediaSourceFragment: Unknown
}
type RecapPostFragment {
	id: String
	title: String
	permalink: String
	subreddit: Subreddit
	gallery: Gallery
	media: Media1
}
type Page {
	page: Page1
	galleryPageAdEvents: [Unknown]
	callToActionCell: CallToActionCell
	appInstallCallToActionCell: AppInstallCallToActionCell
}
type LeaderboardUserFragment {
	__typename: String
	rankLabel: String
	scoreInfo: ScoreInfo
	positionChangeIcon: PositionChangeIcon
	currentScoreLabel: String
	leaderboardRedditorFragment: LeaderboardRedditorFragment
}
type Action {
	__typename: String
	onAutomationInformAction: OnAutomationInformAction
	onAutomationReportAction: OnAutomationReportAction
	onAutomationBlockAction: OnAutomationBlockAction
}
type Content {
	html: String
	typeHint: ContentType
	markdown: String
	richtext: Unknown
	richtextMedia: [Unknown]
}
type AuthorCommunityBadge {
	__typename: String
	onAchievementBadge: OnAchievementBadge
}
type AuthorCommunityBadgeFragment {
	authorCommunityBadge: AuthorCommunityBadge
}
type RecapRedditorFragment {
	karma: Karma
	displayName: String
	isPremiumMember: Boolean
	isVerified: Boolean
	avatar: Avatar
}
type Data {
	__typename: String
	id: String
	recapCardDataCommentFragment: RecapCardDataCommentFragment
	recapCardDataEntityFragment: RecapCardDataEntityFragment
	recapCardDataPostFragment: RecapCardDataPostFragment
	recapCardDataRedditorFragment: RecapCardDataRedditorFragment
	recapCardDataSubredditFragment: RecapCardDataSubredditFragment
	recapCardDataTextFragment: RecapCardDataTextFragment
}
type PreviousActions {
	actions: [Unknown]
}
type Subreddit {
	__typename: String
	onSubreddit: OnSubreddit
}
type InboxFeedPostInfoFragment {
	__typename: String
	id: String
	title: String
	score: Unknown
	commentCount: Unknown
	isNsfw: Boolean
	isSpoiler: Boolean
	removedByCategory: RemovedByCategory
	onPost: OnPost
}
type Image {
}
type Poll {
	__typename: String
	postPollFragment: PostPollFragment
}
type AdEventFragment {
	type: AdEventType
	url: String
	encryptedTrackingId: String
}
type OnModQueueReasonUserReport {
	title: String
	description: Description2
	icon: ModQueueReasonIcon
}
type TitleCell {
	__typename: String
	titleCellFragment: TitleCellFragment
}
type GridImage1 {
}
type SubQuestion {
	id: String
	questionTextMarkdown: String
	pageType: String
	answerOptions: [Unknown]
}
type GoldenUpvoteInfo {
	countTotal: Boolean
	icon: Icon
	promos: [Unknown]
}
type Xxlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnTopicDestination {
	topic: Topic
	schemeName: String
}
type TranslationInfo {
	isTranslated: Boolean
	translatedLanguage: String
}
type ThumbnailCell {
	__typename: String
	classicThumbnailCellFragment: Unknown
}
type SubredditFragment {
	id: String
	name: String
	prefixedName: String
	isQuarantined: Boolean
	title: String
	type: SubredditType
	subscribersCount: Boolean
	isSubscribed: Boolean
	isThumbnailsEnabled: Boolean
	isFavorite: Boolean
	path: String
	styles: Unknown
	modPermissions: ModPermissions
	communityStatus: CommunityStatus
	isTitleSafe: Boolean
	isUserBanned: Boolean
	isMediaInCommentsSettingShown: Boolean
	allowedMediaInComments: [Unknown]
	isMuted: Boolean
	isChannelsEnabled: Boolean
	tippingStatus: TippingStatus
	whitelistStatus: WhitelistStatus
}
type Karma {
}
type Awarding {
}
type RedditorInfo {
	__typename: String
	redditorNameFragment: RedditorNameFragment
}
type Content {
	__typename: String
	richtext: Unknown
	preview: String
	richtextMediaFragment: RichtextMediaFragment
}
type OnModQueueReasonReport {
	title: String
	description: Description
	icon: ModQueueReasonIcon
}
type Tree {
	depth: Int
	more: More
	parentId: String
	node: Node
	childCount: Int
}
type Behavior {
	__typename: String
	searchFilterBehaviorFragment: SearchFilterBehaviorFragment
	searchNoOpBehaviorFragment: SearchNoOpBehaviorFragment
}
type Subreddit {
	__typename: String
	onSubreddit: OnSubreddit
}
type Medium {
	__typename: String
	onMediaSource: OnMediaSource
}
type ViewEvent {
	__typename: String
	analyticsEventPayloadFragment: AnalyticsEventPayloadFragment
}
type OnCommentModerationInfo {
	isAutoCollapsedFromCrowdControl: Boolean
}
type Icon {
}
type Post1 {
	__typename: String
	carouselPostInfoFragment: CarouselPostInfoFragment
}
type VideoCell {
	__typename: String
	legacyVideoCellFragment: LegacyVideoCellFragment
}
type Image {
}
type WelcomeMessageFragment {
	welcomeMessage: WelcomeMessage
}
type Award {
	__typename: String
	awardFragment: AwardFragment
}
type TitleCell {
	__typename: String
	titleCellFragment: TitleCellFragment
}
type LegacyIcon {
	__typename: String
	mediaSourceFragment: Unknown
}
type Poll1 {
	__typename: String
	postPollFragment: PostPollFragment
}
type CreatorStatsAvailabilityFragment {
	availableAt: Unknown
	isAvailable: Boolean
}
type LegacyIcon {
}
type OnSubreddit {
	prefixedName: String
	styles: Unknown
}
type OnModPnSettingsLayoutRowRange {
	id: String
	title: String
	description: String
	icon: ModPnSettingsLayoutIcon
	ranges: [Unknown]
	rangeTitle: String
	rangeSubtitle: String
	currentRange: Boolean
	thresholdName: Unknown
}
type OnSubredditListDestination {
	subredditIds: [Unknown]
}
type SnoovatarIcon {
}
type Source {
	__typename: String
	mediaSourceFragment: Unknown
}
type Breakdown8 {
	metric: String
}
type DeletedPostFragment {
	id: String
	createdAt: Unknown
	title: String
	commentCount: Unknown
	subreddit: Subreddit
}
type ModAwardedCommentInfo {
	id: String
	permalink: String
	authorInfo: AuthorInfo
	postInfo: PostInfo
	content: Content
	createdAt: Unknown
}
type Mp4_medium {
	__typename: String
	mediaSourceFragment: Unknown
}
type UserCommentFragment {
	id: String
	createdAt: Unknown
	content: Content
	postInfo: PostInfo
	score: Unknown
}
type Taxonomy {
	generatedDescription: String
}
type DistributionCampaignChoiceFragment {
	id: String
	pageContext: String
	title: String
	description: String
	ctaText: String
	images: [Unknown]
	media: [Unknown]
}
type Node {
	__typename: String
	onSnackCommentNode: OnSnackCommentNode
}
type AuthorFlair {
	type: String
	richtext: Unknown
	text: String
	template: Unknown
}
type OnModPnSettingsLayoutRowPage {
	id: String
	title: String
	description: String
	icon: ModPnSettingsLayoutIcon
	displayValue: String
}
type Node {
	__typename: String
	gqlStorefrontListing: GqlStorefrontListing
}
type SnoovatarIcon {
}
type LegacyIcon {
	__typename: String
	mediaSourceFragment: Unknown
}
type TranslationInfo {
	isTranslated: Boolean
	translatedLanguage: String
}
type CommentInfo1 {
	__typename: String
	postInfo: PostInfo3
	onDeletedComment: OnDeletedComment
	commentFragmentWithPost: CommentFragmentWithPost
}
type PromotedUserPostFragment {
	promotedUserPosts: [Unknown]
}
type CrowdControlCommentsFiltered {
	metric: Unknown
	delta: Unknown
	breakdown: [Unknown]
}
type Media {
	__typename: String
	onImageAsset: OnImageAsset
}
type OnAutomationBlockAction {
	message: String
}
type ModerationInfo {
	__typename: String
	verdict: ModerationVerdict
	verdictAt: Unknown
	verdictByRedditorInfo: VerdictByRedditorInfo
	verdictReason: ModerationVerdictReason
	banReason: String
	reportCount: Boolean
	isRemoved: Boolean
	modReportsFragment: ModReportsFragment
	userReportsFragment: UserReportsFragment
	modQueueTriggersFragment: ModQueueTriggersFragment
	modQueueReasonsFragment: ModQueueReasonsFragment
	lastAuthorModNoteFragment: LastAuthorModNoteFragment
}
type Topic {
	id: String
	displayName: String
}
type AssociatedAward {
	__typename: String
	awardFragment: AwardFragment
}
type PaidSubscriberBadge {
	__typename: String
	commentPaidSubscriberBadgeFragment: CommentPaidSubscriberBadgeFragment
}
type Item {
	__typename: String
	trendingCarouselCellItemFragment: TrendingCarouselCellItemFragment
}
type Award {
	id: String
	name: String
	description: String
	goldPrice: Int
	additionalImages: [Unknown]
	tags: [Unknown]
	icon: Icon
}
type SourceData {
	__typename: String
	cellMediaSourceFragment: Unknown
}
type Parent {
	id: String
}
type OnReportNextStepOpenUrl {
}
type ChatChannelSubredditInfoFragment {
	__typename: String
	id: String
	name: String
	onSubreddit: OnSubreddit
}
type Static_icon_64 {
	__typename: String
	mediaSourceFragment: Unknown
}
type CommunityRecommendation {
	recommendationSource: String
	subreddit: Subreddit
}
type OnNativeCellColor {
	name: NativeCellColorName
}
type Destination {
	__typename: String
	onTopicDestination: OnTopicDestination
	onUnavailableDestination: OnUnavailableDestination
	onSubredditListDestination: OnSubredditListDestination
}
type ModReport {
	reason: String
	authorInfo: AuthorInfo
}
type Unsubscribes {
	metric: Unknown
	delta: Unknown
}
type Pagination {
	endCursor: String
	hasNextPage: Boolean
}
type OnPost {
	authorInfo: AuthorInfo
	isFollowed: Boolean
	postEventInfo: PostEventInfo
}
type GqlStorefrontUtilityType {
	id: String
	title: String
	icon: Icon
}
type Breakdown1 {
	metric: String
}
type InterestTopicNode1 {
	id: String
	topic: Topic1
}
type Small {
	__typename: String
	mediaSourceFragment: Unknown
}
type RedditorInfo {
	__typename: String
	redditorNameFragment: RedditorNameFragment
}
type RedditorInfoFragment {
	__typename: String
	redditorFragment: RedditorFragment
	deletedRedditorFragment: DeletedRedditorFragment
	unavailableRedditorFragment: UnavailableRedditorFragment
}
type MenuWidgetFragment {
	id: String
	shortName: String
	isWikiShown: Boolean
	menus: [Unknown]
}
type ModPermissions {
	isAllAllowed: Boolean
}
type Highest {
}
type FullImage {
}
type MultiContentCommentFragment {
	__typename: String
	id: String
	createdAt: Unknown
	onComment: OnComment
}
type Gallery {
	items: [Unknown]
}
type CommentsPublished {
	metric: Unknown
	delta: Unknown
}
type Owner {
	__typename: String
	id: String
	onRedditor: OnRedditor
}
type AuthorInfo {
	__typename: String
	authorInfo: AuthorInfo
}
type Dimensions {
}
type OnInterestTopicRecommendationContext {
	interestTopicNode: InterestTopicNode
}
type SearchFilterOptionListPresentationFragment {
	__typename: String
	onSearchFilterOptionListPresentation: OnSearchFilterOptionListPresentation
}
type Description {
	markdown: String
}
type Icon {
}
type SearchDropdownModifier {
	presentation: Presentation
	behaviors: [Unknown]
}
type OnRedditor {
	id: String
	name: String
	icon64: Icon64
}
type OnRedditor {
	icon: Icon
}
type Award {
	icon: Icon
}
type TranslatedStillMediaFragment {
	source: Source
	small: Small
	medium: Medium
	large: Large
	xlarge: Xlarge
	xxlarge: Xxlarge
	xxxlarge: Xxxlarge
}
type AdGalleryCellFragment {
	id: String
	titleCell: TitleCell
	height: [Unknown]
	supplementaryTextString: String
	indicatorsCell: IndicatorsCell
}
type TrendingCarouselCellFragment {
	id: String
	title: String
	items: [Unknown]
}
type FlairCell {
	__typename: String
	flairCellFragment: FlairCellFragment
}
type SubredditCountryFragment {
	countrySiteSettings: CountrySiteSettings
}
type Node {
	id: String
	name: String
	prefixedName: String
	subscribersCount: Unknown
}
type PostFlairSettings {
	isSelfAssignable: Boolean
	isEnabled: Boolean
}
type OnDeletedSubredditPost {
	id: String
	title: String
	score: Unknown
	commentCount: Unknown
}
type PostSetAuthorInfo {
	__typename: String
	onRedditor: OnRedditor
}
type Artist {
	redditorInfo: RedditorInfo
}
type ModerationInfo {
	__typename: String
	verdict: ModerationVerdict
	verdictByRedditorInfo: VerdictByRedditorInfo
	banReason: String
	reportCount: ModReportsFragment
	userReportsFragment: UserReportsFragment
	modQueueReasonsFragment: ModQueueReasonsFragment
	modQueueTriggersFragment: ModQueueTriggersFragment
}
type OnMediaSource {
}
type IndicatorsCell {
	__typename: String
	indicatorsCellFragment: IndicatorsCellFragment
}
type PostInfoFragment {
	__typename: String
	id: String
	title: String
	isNsfw: Boolean
	isSpoiler: Boolean
	permalink: String
	crosspostCount: Int
	createdAt: Unknown
	isOwnPost: Boolean
	score: Unknown
	awardings: [Unknown]
	commentCount: Unknown
	topComment: TopComment
	onSubredditPost: OnSubredditPost
	onProfilePost: OnProfilePost
}
type Poll {
	options: [Unknown]
}
type AuthorFlair {
	__typename: String
	authorFlairFragment: AuthorFlairFragment
}
type Still {
	__typename: String
	stillMediaFragment: StillMediaFragment
}
type OnRedditor {
	snoovatarIcon: SnoovatarIcon
	name: String
}
type Profile {
	isNsfw: Boolean
}
type Avatar {
	fullImage: FullImage
}
type Icon {
	__typename: String
	mediaSourceFragment: Unknown
}
type Media {
	obfuscated: Obfuscated
}
type RecapCommentFragment {
	id: String
	permalink: String
	score: Unknown
	content: Content
}
type Edge {
	node: Node
}
type Source {
	__typename: String
	mediaSourceFragment: Unknown
}
type ModeratorActionCellFragment {
	post: Post
}
type SubredditOrProfileInfo {
	subredditInfo: SubredditInfo1
	profileInfo: ProfileInfo
}
type ViewCountTotals {
	totalCount: Int
	availability: Availability2
}
type Description {
	markdown: String
}
type Item {
	media: Media
}
type CarouselComponentSubredditInfoFragment {
	subreddit: Subreddit
}
type Progress {
	done: AchievementTrophyProgressUnit
}
type LastAuthorModNoteFragment {
	lastAuthorModNote: LastAuthorModNote
}
type PostInfo {
	__typename: String
	flair: Flair
	onPost: OnPost
}
type Badge {
}
type Content {
}
type HighlightedPostsModeratorsInfoFragment {
	highlightedPosts: [Unknown]
}
type OnExplainerSpace {
	numSpaces: String
}
type Destination {
	__typename: String
	onDefaultExplainerButtonDestination: Unknown
	onDismissExplainerButtonDestination: OnDismissExplainerButtonDestination
}
type ConcreteCommentContent {
	content: Content
}
type BanEvasionPostsFiltered {
	metric: Unknown
	delta: Unknown
	breakdown: [Unknown]
}
type PostInfo {
	__typename: String
	title: String
	id: String
	onSubredditPost: OnSubredditPost
}
type RichtextMedium {
	__typename: String
	onImageAsset: OnImageAsset
}
type IndicatorsCell {
	__typename: String
	indicatorsCellFragment: IndicatorsCellFragment
}
type Icon {
}
type HighlightedPostFlairFragment {
	type: String
	text: String
	richtext: Unknown
	textColor: FlairTextColor
	template: Unknown
}
type TemporaryEventRunFull {
	id: String
	status: TemporaryEventRunStatus
	startAt: Unknown
	endAt: Unknown
	contributionMessage: String
	labels: [Unknown]
	config: Config
	overriddenFields: OverriddenFields
}
type PrivateMessageFragment {
	bodyHtml: String
	createdAt: Unknown
	distinguished: String
	firstMessageId: String
	id: String
	isComment: Boolean
	isHideNotificationEligible: Boolean
	isNeverViewed: Boolean
	isNew: Boolean
	isToggleMessageTypeEligible: Boolean
	isToggleNotificationUpdateEligible: Boolean
	isToggleUpdateFromSubredditEligible: Boolean
	linkTitle: String
	mailroomMessageType: Unknown
	messageTypeDescription: String
	parentId: String
	subject: String
	associatedAwarding: AssociatedAwarding
	author: Author
	recipient: Recipient
	subredditInfo: SubredditInfo
}
type Icon1 {
}
type Subreddit {
	prefixedName: String
}
type OnReportNextStepSubredditRules {
	isSubredditRules: Boolean
}
type OnAchievementTrophyWithBadge {
	badge: Badge
}
type TrendingStillMediaFragment {
	medium: Medium
	large: Large
}
type AuthorData {
	__typename: String
	onComment: OnComment
}
type Post {
	__typename: String
	crosspostContentFragment: CrosspostContentFragment
}
type AuthorInfo {
	__typename: String
	id: String
	displayName: String
	onRedditor: OnRedditor
}
type Breakdown7 {
	metric: String
}
type OnDeletedRedditor {
	name: String
}
type Gif_source {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnMediaSource1 {
}
type LeaderboardCurrentUserFragment {
	__typename: String
	rankLabel: String
	rankIcon: RankIcon
	currentScoreLabel: String
	leaderboardRedditorFragment: LeaderboardRedditorFragment
}
type Streaming {
	__typename: String
	streamingMediaFragment: Unknown
}
type OnUnavailableRedditor {
	id: String
	name: String
}
type PreviousActionsModQueueReasonFilterFragment {
	confidence: Confidence
}
type Moderator {
	redditor: Redditor
	flair: Flair
}
type Page1 {
	__typename: String
	galleryCellPageFragment: GalleryCellPageFragment
}
type OnRedditor {
	id: String
	name: String
	prefixedName: String
	icon: Icon
	snoovatarIcon: SnoovatarIcon
}
type FullViewVideoCellFragment {
	id: String
	indicatorsCell: IndicatorsCell
	mediaTintColor: MediaTintColor
	metadataCell: MetadataCell
	titleCell: TitleCell
	videoCell: VideoCell
}
type RecommendationContextFragment {
	typeIdentifier: String
	typeName: String
	sourceId: String
	name: String
	isContextHidden: Boolean
	richText: Unknown
}
type DiscoverTopic1 {
	slug: String
	name: String
}
type Obfuscated {
	content: Content
}
type Trophy {
	awardId: String
}
type AuthorInfo {
	__typename: String
	id: String
	displayName: String
	onRedditor: OnRedditor
}
type User {
	__typename: String
	id: String
	onRedditor: OnRedditor
}
type Availability3 {
	__typename: String
	creatorStatsAvailabilityFragment: CreatorStatsAvailabilityFragment
}
type SnoovatarIcon {
	__typename: String
	mediaSourceFragment: Unknown
}
type Event {
	isAllDay: Boolean
	title: Title
	description: Description
	startsAt: Unknown
	endsAt: Unknown
}
type OnSubredditPost {
	awardingsInfo: AwardingsInfo
	poll: Poll1
	outboundLink: Unknown
	postStats: PostStats
	postStatsPrivate: PostStatsPrivate
}
type OnRedditor {
	id: String
	name: String
	prefixedName: String
	displayName: String
	icon: Icon
	snoovatarIcon: SnoovatarIcon
}
type Profile {
	isNsfw: Boolean
}
type DisplayedCollectibleItemsFragment {
	edges: [Unknown]
}
type OnCellMedia {
	type: CellMediaType
	sourceData: SourceData
}
type Edge {
	node: Unknown
}
type OnCellMedia {
	type: CellMediaType
	sourceData: SourceData
}
type SubredditRecapFieldsFragment {
	yearInReviewSettings: YearInReviewSettings
}
type OnRedditor {
	id: String
	name: String
	prefixedName: String
	accountType: AccountType
}
type PageInfo {
	__typename: String
	pageInfoFragment: PageInfoFragment
}
type ProfileDetailsFragment {
	redditorInfo: RedditorInfo
	id: String
	name: String
	styles: Unknown
	title: String
	description: Description
	publicDescriptionText: String
	subscribersCount: Unknown
	createdAt: Unknown
	path: String
	isNsfw: Boolean
	whitelistStatus: WhitelistStatus
	isQuarantined: Boolean
	allowedPostTypes: [Unknown]
	isSpoilerAvailable: Boolean
	isUserBanned: Boolean
	isContributor: Boolean
	modPermissions: ModPermissions
	isSubscribed: Boolean
	isFavorite: Boolean
	authorFlairSettings: AuthorFlairSettings
	authorFlair: AuthorFlair
	postFlairSettings: PostFlairSettings
	isCrosspostingAllowed: Boolean
}
type OnSubredditListDestination {
	subredditIds: [Unknown]
}
type LegacyIcon {
}
type Content {
	__typename: String
	contentFragment: ContentFragment
}
type OnCrossPostCell {
	innerPost: InnerPost
}
type BadgeIndicatorsFragment {
	directMessages: DirectMessages
	chatTab: ChatTab
	messageTab: MessageTab
	activityTab: ActivityTab
	inboxTab: InboxTab
	appBadge: AppBadge
	chatHasNewMessages: ChatHasNewMessages
}
type ModQueueTrigger {
	type: ModQueueTriggerType
	message: String
	details: Details
}
type Edge {
	node: Node
}
type Image {
}
type AuthorInfo {
	id: String
}
type Profile {
	redditorInfo: RedditorInfo
}
type Type {
	__typename: String
	gqlUtilityTypeFragment: GqlUtilityTypeFragment
}
type Icon_288 {
	__typename: String
	mediaSourceFragment: Unknown
}
type VerdictByRedditorInfo {
	__typename: String
	authorInfoFragment: AuthorInfoFragment
}
type GqlStorefrontListings {
	pageInfo: PageInfo
	edges: [Unknown]
}
type User {
	id: String
	displayName: String
}
type Awarder {
	__typename: String
	awarderInfoFragment: AwarderInfoFragment
}
type SubredditInfo {
	__typename: String
	modmailSubredditInfoFragment: ModmailSubredditInfoFragment
}
type Awarding {
	__typename: String
	awardingByCurrentUser: [Unknown]
	awardingTotalFragment: AwardingTotalFragment
}
type CountrySiteSettings {
	countryCode: String
	languageCode: String
	isCountrySiteEditable: Boolean
	modMigrationAt: Unknown
}
type PostsRemovedByAll {
	metric: Unknown
	delta: Unknown
	breakdown: [Unknown]
}
type Poll {
	votingEndsAt: Unknown
}
type Edge {
	node: Node
}
type Post {
	__typename: String
	carouselPostInfoFragment: CarouselPostInfoFragment
}
type Media1 {
	typeHint: MediaType
}
type OnRedditor {
	prefixedName: String
	isEmployee: Boolean
	icon: Icon
	karma: Karma
}
type PostsRemovedByAdminsOnly {
	metric: Unknown
	delta: Unknown
}
type Xxxlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnRedditor {
	icon: Icon
	snoovatarIcon: SnoovatarIcon
	profile: Profile
}
type OnSubredditListDestination {
	subredditIds: [Unknown]
}
type Media {
	typeHint: MediaType
}
type OnCompetitorMedia {
}
type AwardingByCurrentUser {
	id: String
}
type ThumbnailV2 {
	image: Unknown
}
type AdLeadGenerationInformationFragment {
	leadGenerationInformation: Unknown
}
type PostInfo {
	__typename: String
	id: String
	title: String
	onSubredditPost: OnSubredditPost
}
type Small {
	__typename: String
	mediaSourceFragment: Unknown
}
type Subreddit {
	id: String
	styles: Unknown
	prefixedName: String
}
type Karma {
}
type Content {
	typeHint: ContentType
	html: String
	preview: String
	richtext: Unknown
}
type PostStatsPrivate1 {
	viewCountTotals: ViewCountTotals1
}
type Subreddit {
	__typename: String
	subredditFragment: SubredditFragment
}
type OnSubredditPost {
	poll: Poll
}
type CommentsRemovedByAll {
	metric: Unknown
	delta: Unknown
	breakdown: [Unknown]
}
type AdUserTargetingFragment {
	interests: [Unknown]
	gender: AccountGenderCategory
	locations: [Unknown]
	targetingCriteria: [Unknown]
}
type ReportOptionDescription {
	__typename: String
	onReportTextPlain: OnReportTextPlain
	onReportTextLink: Unknown
}
type AppInstallCallToActionCellFragment {
	id: String
	appStoreInfo: AppStoreInfo
	callToActionString: String
}
type Download {
	__typename: String
	downloadMediaFragment: DownloadMediaFragment
}
type Media {
	__typename: String
	onMediaAsset: OnMediaAsset
}
type Subreddit {
	id: String
	prefixedName: String
	styles: Styles
	isQuarantined: Boolean
}
type Icon {
}
type Video {
	__typename: String
	videoMediaFragment: Unknown
}
type OnModerationInfo {
	proxyAuthor: ProxyAuthor
}
type Media1 {
	typeHint: MediaType
	still: Still
}
type SearchNavigationListModifierFragment {
	listPresentation: ListPresentation
	behaviors: [Unknown]
}
type Obfuscated_xlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type Xlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type ImageCellFragment {
	id: String
	media: Media
}
type MessageTab {
	count: BadgeStyle
}
type RecChatChannelsSccItemFragment {
	__typename: String
	onSubredditChatChannelV2: Unknown
}
type OnImageAsset {
}
type OnProfilePost {
	profile: Profile
	outboundLink: Unknown
	adSupplementaryTextRichtext: Unknown
	callToAction: String
	postStats: PostStats1
	postStatsPrivate: PostStatsPrivate1
}
type OnSubredditPost {
	subreddit: Subreddit
}
type Profile {
	isNsfw: Boolean
}
type Page1 {
	__typename: String
	galleryCellPageFragment: GalleryCellPageFragment
}
type SnoovatarIcon {
}
type RichtextMedium {
	__typename: String
	onImageAsset: OnImageAsset
}
type Question {
	__typename: String
	feedSurveyQuestionFragment: FeedSurveyQuestionFragment
}
type AuthorInfo {
	__typename: String
	redditorInfoFragment: RedditorInfoFragment
}
type Icon {
	__typename: String
	mediaSourceFragment: Unknown
}
type CompactPostCommunityRecommendationsFragment {
	id: String
	model: String
	title: String
	version: String
	destination: Destination
	communityRecommendations: [Unknown]
}
type ModPermissions {
	isAccessEnabled: Boolean
}
type InnerPost {
	__typename: String
	id: String
	groupId: String
	cellGroupFragment: CellGroupFragment
}
type Node {
	__typename: String
	commentFragment: CommentFragment
	deletedCommentFragment: DeletedCommentFragment
}
type OnImageAsset {
	medium: Medium
	large: Large
}
type Topic {
	id: String
	displayName: String
}
type SnoovatarIcon {
	__typename: String
	mediaSourceFragment: Unknown
}
type TaggedSubredditFragment {
	id: String
	prefixedName: String
	subscribersCount: Boolean
	isQuarantined: Boolean
	styles: Unknown
}
type Node {
	__typename: String
	scheduledPostFragment: Unknown
}
type CommunityStatusFragment {
	description: Description
	emoji: Unknown
}
type LegacyIcon {
}
type LegacyIcon {
}
type ModPermissions {
	__typename: String
}
type GalleryCellFragment {
	id: String
	height: [Unknown]
}
type GridImage {
}
type OnSubredditTaxonomyRelation {
	displayCopy: String
}
type Profile {
	isNsfw: Boolean
}
type OnComment {
	authorInfo: AuthorInfo
}
type PostRecommendationContextFragment {
	id: String
	recommendationContext: RecommendationContext
}
type LegacyIcon {
}
type Asset {
	id: String
	mimetype: String
	width: Int
	height: Int
	status: MediaAssetStatus
}
type ModerationInfo {
	__typename: String
	verdict: ModerationVerdict
	verdictAt: Unknown
	banReason: String
	verdictByRedditorInfo: VerdictByRedditorInfo
	reportCount: ModReportsFragment
	userReportsFragment: UserReportsFragment
	modQueueTriggersFragment: ModQueueTriggersFragment
	lastAuthorModNoteFragment: LastAuthorModNoteFragment
}
type Edge {
	node: Node
}
type RelatedPost {
	__typename: String
	adPromotedCommunityPostCellFragment: Unknown
}
type RulesWidgetFragment {
	id: String
	shortName: String
	display: String
}
type Awarding {
	award: Award
}
type OnSubreddit {
	isSubscribed: Boolean
	name: String
	prefixedName: String
	styles: Unknown
}
type Content {
	__typename: String
	onCellMedia: OnCellMedia
	onMerchandisingUnitGallery: OnMerchandisingUnitGallery
}
type AuthorFlair {
	template: Unknown
}
type StandaloneScheduledPostsFragment {
	standalonePosts: StandalonePosts
}
type Subreddit {
	__typename: String
	subredditFragment: SubredditFragment
}
type Image {
}
type HighlightedPostFragment {
	id: String
	title: String
	content: Content
	isSelfPost: Boolean
	flair: Flair
	authorInfo: AuthorInfo
	thumbnailV2: ThumbnailV2
	isNsfw: Boolean
	isTranslatable: Boolean
	isTranslated: Boolean
}
type Author {
	displayName: String
}
type Profile1 {
	__typename: String
	profileFragment: ProfileFragment
}
type ProfileIcon {
}
type OnProfilePost {
	profile: Profile
}
type ViewCountTrends {
	availability: Availability3
	data: [Unknown]
}
type LegacyIcon {
}
type Profile {
	isNsfw: Boolean
}
type OnPost {
	__typename: String
	searchCommentPostFragment: SearchCommentPostFragment
}
type Operator {
	id: String
	displayName: String
}
type OnCarouselThumbnailPostComponent {
	post: Post1
}
type LegacyIcon {
}
type Image {
	__typename: String
	galleryCellPageFragment: GalleryCellPageFragment
}
type MetricCellFragment {
	id: String
	commentCount: Boolean
}
type AnnouncementBody {
	preview: String
}
type QuarantineMessage {
	markdown: String
	richtext: Unknown
}
type ArenaEventFragment {
	id: String
	slug: String
	name: String
	location: String
	stage: String
	startAt: Unknown
	endAt: Unknown
	tournamentName: String
	competitors: [Unknown]
}
type Node {
	__typename: String
	leaderboardUserFragment: LeaderboardUserFragment
	leaderboardDelimiterFragment: LeaderboardDelimiterFragment
}
type PostConfig {
	type: String
	encodedData: Unknown
}
type AdEvent {
	type: AdEventType
	url: String
	encryptedTrackingId: String
}
type Color {
	__typename: String
	colorFragment: ColorFragment
}
type MarginCellFragment {
	id: String
	height: Color
}
type CommentsRemovedByAdminsOnly {
	metric: Unknown
	delta: Unknown
}
type Icon2 {
}
type HarassingContentPostsFiltered {
	metric: Unknown
	delta: Unknown
	breakdown: [Unknown]
}
type FeedSurveyCellFragment {
	id: String
	surveyId: String
	viewEvent: ViewEvent
	questions: [Unknown]
}
type MaskedUser {
	name: String
	icon: Icon1
}
type Content {
	markdown: String
	richtext: Unknown
	html: String
	richtextMedia: [Unknown]
	preview: String
	translationInfo: TranslationInfo
}
type ContentRemovedByAll {
	metric: Unknown
	delta: Unknown
	breakdown: [Unknown]
}
type Gallery {
	items: [Unknown]
}
type OperationErrorFragment {
	message: String
	code: String
	errorInputArgs: [Unknown]
}
type Icon {
}
type Thumbnail {
}
type PostFlairSettings {
	isEnabled: Boolean
}
type RedditorInfo {
	__typename: String
	modmailRedditorInfoFragment: ModmailRedditorInfoFragment
}
type FieldErrorFragment {
	field: String
	message: String
	code: String
}
type PackagedMedia {
	__typename: String
	packagedMediaFragment: PackagedMediaFragment
}
type PaidSubscriberBadgeFragment {
	image: Image
}
type Karma {
}
type TitleCellFragment {
	id: String
	title: String
	isVisited: Boolean
}
type Config {
	__typename: String
	temporaryEventConfigFull: TemporaryEventConfigFull
}
type SortCellFragment {
	isModerator: Boolean
	layoutOptions: [Unknown]
}
type Subreddit {
	__typename: String
	recapSubredditFragment: RecapSubredditFragment
}
type OnAdPost {
	__typename: String
	profile: Profile1
	callToAction: String
	subcaption: String
	subcaptionStrikethrough: String
	ctaMediaColor: String
	isBlank: Boolean
	outboundLink: Unknown
	impressionId: String
	adEvents: [Unknown]
	encryptedTrackingPayload: String
	additionalEventMetadata: [Unknown]
	isCreatedFromAdsUi: Boolean
	isSurveyAd: Boolean
	promoLayout: PromoLayout
	appStoreInfo: AppStoreInfo
	adSupplementaryTextRichtext: Unknown
	isInAppBrowserOverride: Boolean
	adUserTargeting: AdUserTargeting
	nextCommentsPageAdEligibility: UserAdEligibilityStatus
	excludedExperiments: [Unknown]
	adLeadGenerationInformationFragment: AdLeadGenerationInformationFragment
	adCampaignFragment: AdCampaignFragment
}
type AuthorInfo {
	__typename: String
	redditorNameFragment: RedditorNameFragment
}
type NewsMetadataCellFragment {
	id: String
	createdAtOptional: Unknown
	topic: String
	subredditName: String
	isBrandAffiliate: Boolean
}
type RedditorNameFragment {
	__typename: String
	onRedditor: OnRedditor
	onUnavailableRedditor: OnUnavailableRedditor
	onDeletedRedditor: OnDeletedRedditor
}
type Uniques {
	metric: Unknown
	delta: Unknown
}
type Media {
	typeHint: MediaType
	video: Video
	streaming: Streaming
}
type Large {
	__typename: String
	mediaSourceFragment: Unknown
}
type Subreddit {
	id: String
	name: String
}
type Size {
}
type StaticIcon {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnSubredditPost {
	subreddit: Subreddit
}
type VerdictByRedditorInfo {
	__typename: String
	redditorNameFragment: RedditorNameFragment
}
type ModPermissions {
	isAllAllowed: Boolean
	isConfigEditingAllowed: Boolean
}
type OnContentRatingSurveyAnswer {
	id: String
	answerText: String
	isMutuallyExclusive: Boolean
}
type ModAwardedSubredditPostInfo {
	id: String
	title: String
	content: Content
	poll: Poll
	thumbnailV2: ThumbnailV2
	media: Media
	authorInfo: AuthorInfo
	isNsfw: Boolean
	isSpoiler: Boolean
	createdAt: Unknown
}
type CommunityListWidgetFragment {
	id: String
	shortName: String
	communities: [Unknown]
}
type OnFunnyRecommendationContext {
	discoverTopic: DiscoverTopic1
}
type SnoovatarIcon {
}
type PostInfo1 {
	__typename: String
	postFragment: PostFragment
}
type Behavior {
	__typename: String
	searchFilterBehaviorFragment: SearchFilterBehaviorFragment
}
type Description {
	markdown: String
	richtext: Unknown
}
type Rule {
	isMet: Boolean
	type: PostingEligibilityCriteriaRuleType
}
type ButtonWidgetFragment {
	id: String
	shortName: String
	description: Description
	buttons: [Unknown]
}
type RecapSubredditFragment {
	id: String
	name: String
	isSubscribed: Boolean
	styles: Unknown
}
type OnSubredditPost {
	subreddit: Subreddit
}
type AdditionalImage {
	name: String
	image: Unknown
}
type CommentFragmentWithPost {
	id: String
	createdAt: Unknown
	editedAt: Unknown
	isAdminTakedown: Boolean
	isRemoved: Boolean
	parent: Parent
	postInfo: PostInfo
	isLocked: Boolean
	isInitiallyCollapsed: Boolean
	initiallyCollapsedReason: CommentCollapsedReason
	content: Content
	authorInfo: AuthorInfo
	score: Unknown
	voteState: VoteState
	authorFlair: AuthorFlair
	isSaved: Boolean
	isStickied: Boolean
	isGildable: Boolean
	isScoreHidden: Boolean
	awardings: [Unknown]
	associatedAward: AssociatedAward
	treatmentTags: [Unknown]
	isArchived: Boolean
	distinguishedAs: DistinguishedAs
	permalink: String
	moderationInfo: ModerationInfo
	isCommercialCommunication: Boolean
	paidSubscriberBadge: PaidSubscriberBadge
}
type CommunityStatus {
	__typename: String
	communityStatusFragment: CommunityStatusFragment
}
type Posts {
	edges: [Unknown]
}
type OnRedditor {
	name: String
	profile: Profile
	icon: Icon
	snoovatarIcon: SnoovatarIcon
}
type Edge {
	node: Node
}
type Icon {
}
type PostEventInfo {
	eventType: PostEventType
	startsAt: Unknown
	endsAt: Unknown
	isLive: Boolean
	isEventAdmin: Boolean
	remindeesCount: Int
}
type Gif_medium {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnProfilePost {
	profile: Profile
}
type AdFreeFormCellFragment {
	id: String
	titleCell: TitleCell
	image: Image
	previewTextCell: PreviewTextCell
}
type OnModActionNotePost {
	actionType: ModActionType
	banDays: Int
	isPermanentBan: Boolean
	banReason: String
	description: String
	postInfo: PostInfo2
}
type Profile {
	isNsfw: Boolean
}
type AwardsCellFragment {
	id: String
	total: [Unknown]
}
type Edge {
	node: Node
}
type OnProfilePost {
	id: String
	isOwnPost: Boolean
	otherDiscussionsCount: Int
	profile: Profile
}
type LastModAuthorInfo {
	__typename: String
	modmailRedditorInfoFragment: ModmailRedditorInfoFragment
}
type Content {
	richtext: Unknown
}
type LegacyIcon {
}
type Icon {
}
type Destination {
	__typename: String
	onTopicDestination: OnTopicDestination
	onUnavailableDestination: OnUnavailableDestination
	onSubredditListDestination: OnSubredditListDestination
}
type Obfuscated_small {
	__typename: String
	mediaSourceFragment: Unknown
}
type BackgroundInventoryItem {
	id: String
}
type OnTimeOnSubredditRecommendationContext {
	subreddit: Subreddit1
}
type Subreddit {
	__typename: String
	subredditFragment: SubredditFragment
}
type DefaultContent {
	__typename: String
	mediaSourceFragment: Unknown
}
type Edge {
	node: Node
}
type InterestTopicNode {
	id: String
	topic: Topic
}
type RichtextRecommendationContextCellFragment {
	id: String
	rtJsonText: Unknown
}
type Redditor {
	name: String
}
type ContentFragment {
	markdown: String
	richtext: Unknown
}
type PostFlairFragment {
	type: String
	text: String
	richtext: Unknown
	textColor: FlairTextColor
	template: Unknown
}
type ModPermissions {
	isAccessEnabled: Boolean
}
type OnExplainerButtonV2 {
	sectionID: String
	style: ExplainerButtonV2Style
	title: String
	destination: Destination
}
type ReportReasonFields {
	reasonId: String
	label: String
}
type Subreddit {
	id: String
	isNsfw: Boolean
	isQuarantined: Boolean
	name: String
}
type Large {
	__typename: String
	onMediaSource: OnMediaSource1
}
type Subscribes {
	metric: Unknown
	delta: Unknown
}
type Animated {
	variant: Variant
}
type Taxonomy {
	generatedDescription: String
}
type ObfuscatedImage {
}
type OnRedditor {
	icon: Icon
	iconSmall: IconSmall
	snoovatarIcon: SnoovatarIcon
}
type PostReports {
	metric: Unknown
	delta: Unknown
}
type AnalyticsInfo {
	recommendationAlgorithm: String
}
type Subreddit {
	__typename: String
	id: String
	name: String
	onSubreddit: OnSubreddit
}
type Flair {
	__typename: String
	highlightedPostFlairFragment: HighlightedPostFlairFragment
}
type OnSubredditPost {
	moderationInfo: ModerationInfo
	removedByCategory: RemovedByCategory
	flair: Flair1
	subreddit: Subreddit1
}
type Static_icon_16 {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnNativeCellColor {
	name: NativeCellColorName
}
type SubredditInfo1 {
	__typename: String
	modmailSubredditInfoFragment: ModmailSubredditInfoFragment
}
type SubredditEligibleMomentFragment {
	eligibleMoments: [Unknown]
}
type Image {
}
type AuthorInfo {
	__typename: String
	id: String
	onRedditor: OnRedditor
}
type WelcomePageFragment {
	version: String
	isEnabled: Boolean
	isEnabledOnJoin: Boolean
	header: Header
	userFlairSelect: UserFlairSelect
	resources: Resources
	curatedPosts: CuratedPosts
}
type CreatorStatsTrendDataFragment {
	at: Unknown
	value: Int
}
type ShareCopyCountTotals {
	totalCount: Int
	availability: Availability1
}
type Source {
	__typename: String
	mediaSourceFragment: Unknown
}
type AdPromotedUserPostCollectionCellFragment {
	id: String
	promotedPosts: [Unknown]
	postsViaText: String
	promotedUserPostSubredditName: String
	subredditImage: SubredditImage
}
type OnDeletedRedditor {
	id: String
	name: String
}
type ConfidenceExplanation {
	markdown: String
}
type Obfuscated_xxlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type SearchTrackingContextFragment {
	search: Search
	actionInfo: ActionInfo
	post: Post
	subreddit: Subreddit
	metaSearch: MetaSearch
	profile: Profile
}
type Icon_96 {
	__typename: String
	mediaSourceFragment: Unknown
}
type Rule {
	id: String
	name: String
	kind: SubredditRuleKind
	violationReason: String
	priority: Content
}
type AutomationOutcomeFragment {
	__typename: String
	onAutomationBlockOutcome: OnAutomationBlockOutcome
	onAutomationInformOutcome: OnAutomationInformOutcome
	onAutomationReportOutcome: OnAutomationReportOutcome
}
type StillMediaFragment {
	source: Source
	small: Small
	medium: Medium
	large: Large
	xlarge: Xlarge
	xxlarge: Xxlarge
	xxxlarge: Xxxlarge
	altText: String
}
type ModReportsFragment {
	modReports: [Unknown]
}
type AwardsSheetAwardFragment {
	total: Award
}
type SearchNoOpBehaviorFragment {
	isNoOpBehavior: Boolean
}
type Image {
}
type Node {
	__typename: String
	id: String
	onCellGroup: OnCellGroup
	amaCarouselFragment: AmaCarouselFragment
	postRecommendationContextFragment: PostRecommendationContextFragment
	carouselCommunityRecommendationsFragment: CarouselCommunityRecommendationsFragment
	listStyleCommunityRecommendationsFragment: ListStyleCommunityRecommendationsFragment
	compactPostCommunityRecommendationsFragment: CompactPostCommunityRecommendationsFragment
	cardPostCommunityRecommendationsFragment: CardPostCommunityRecommendationsFragment
	chatChannelFeedUnitFragment: ChatChannelFeedUnitFragment
	chatChannelFeedUnitV2Fragment: ChatChannelFeedUnitV2Fragment
	chatChannelsFeedUnitFragment: ChatChannelsFeedUnitFragment
	taxonomyTopicsFeedElementFragment: TaxonomyTopicsFeedElementFragment
	exploreFeaturedItemsFragment: ExploreFeaturedItemsFragment
	topicPillsGroupFragment: TopicPillsGroupFragment
	rankedCommunityFragment: RankedCommunityFragment
	postCarouselFragment: PostCarouselFragment
}
type Persistence {
	isDismissible: Boolean
	maxViews: Int
}
type Recipient {
	__typename: String
	onSubredditInfo: OnSubredditInfo
	onRedditorInfo: OnRedditorInfo
}
type OnModUserNoteComment {
	label: ModUserNoteLabel
	note: String
	commentInfo: CommentInfo
}
type Profile {
	redditorInfo: RedditorInfo
}
type OnPost {
	thumbnail: Thumbnail
	media: Media
}
type SubredditInfo {
	id: String
	name: String
	publicDescriptionText: String
	styles: Unknown
}
type Fields {
	__typename: String
	temporaryEventFieldsFull: TemporaryEventFieldsFull
}
type Obfuscated_large {
	__typename: String
	mediaSourceFragment: Unknown
}
type VerdictByRedditorInfo {
	__typename: String
	authorInfoFragment: AuthorInfoFragment
}
type Medium {
	__typename: String
	mediaSourceFragment: Unknown
}
type Small {
	__typename: String
	mediaSourceFragment: Unknown
}
type Content1 {
	__typename: String
	mediaSourceFragment: Unknown
}
type AnimatedMediaFragment {
	mp4_source: Mp4_source
	mp4_small: Mp4_small
	mp4_medium: Mp4_medium
	mp4_large: Mp4_large
	mp4_xlarge: Mp4_xlarge
	mp4_xxlarge: Mp4_xxlarge
	mp4_xxxlarge: Mp4_xxxlarge
	gif_source: Gif_source
	gif_small: Gif_small
	gif_medium: Gif_medium
	gif_large: Gif_large
	gif_xlarge: Gif_xlarge
	gif_xxlarge: Gif_xxlarge
	gif_xxxlarge: Gif_xxxlarge
}
type Small {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnPost {
	content: Content
	authorInfo: AuthorInfo
	postEventInfo: PostEventInfo
}
type Obfuscated_xxlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type Variant {
	__typename: String
	mediaSourceFragment: Unknown
}
type ModPermissions {
	isAllAllowed: Boolean
	isAccessEnabled: Boolean
	isConfigEditingAllowed: Boolean
	isFlairEditingAllowed: Boolean
	isMailEditingAllowed: Boolean
	isPostEditingAllowed: Boolean
	isWikiEditingAllowed: Boolean
	isChatConfigEditingAllowed: Boolean
	isChatOperator: Boolean
	isChannelsEditingAllowed: Boolean
	isCommunityChatEditingAllowed: Boolean
}
type AuthorInfo {
	__typename: String
	authorInfoFragment: AuthorInfoFragment
}
type AnswerableQuestion {
	id: String
	type: CrowdsourcedQuestionType
	questionText: String
	answerOptions: [Unknown]
}
type AuthorFlairSettings {
	isEnabled: Boolean
	isSelfAssignable: Boolean
	isOwnFlairEnabled: Boolean
}
type AdPayloadFragment {
	adLinkUrl: String
	promoLayout: PromoLayout
	adInstanceId: String
	domain: String
	isCreatedFromAdsUi: Boolean
	callToAction: String
	impressionId: String
	isBlankAd: Boolean
	isSurveyAd: Boolean
	isInAppBrowserOverride: Boolean
	isVideo: Boolean
	adEvents: [Unknown]
	encryptedTrackingPayload: String
	additionalEventMetadata: [Unknown]
	appStoreData: AppStoreData
	gallery: [Unknown]
	campaign: Campaign
	formatData: FormatData
	adUserTargeting: AdUserTargeting
	excludedExperiments: [Unknown]
}
type Post {
	id: String
	isNsfw: Boolean
	isSpoiler: Boolean
	title: String
}
type CommunityLeaderboard {
	isEnabled: Boolean
}
type ChatHasNewMessages {
	style: BadgeStyle
	isShowing: Boolean
}
type SnoovatarIcon {
}
type OnSubredditExploreFeaturedItem {
	title: String
	subreddit: Subreddit
}
type AttributionInfo {
	displayName: String
}
type PaidSubscriberBadge {
	__typename: String
	commentPaidSubscriberBadgeFragment: CommentPaidSubscriberBadgeFragment
}
type OnAutomationRegexCondition {
	features: [Unknown]
	value: String
	isCaseSensitive: Boolean
}
type Dimensions1 {
}
type RecapCardDataPostFragment {
	post: Post
}
type Subreddit {
	__typename: String
	id: String
	name: String
	onSubreddit: OnSubreddit
}
type OnExpressionMediaAsset {
	avatar: Avatar
	expression: Expression
}
type Description {
	markdown: String
	richtext: Unknown
}
type AnalyticsInfo {
	recommendationAlgorithm: String
}
type DeletedRedditorFragment {
	id: String
	displayName: String
}
type OnSubreddit {
	name: String
	id: String
	prefixedName: String
	publicDescriptionText: String
	title: String
	subscribersCount: Boolean
	styles: Unknown
	taxonomy: Taxonomy
}
type AnswerOption {
	id: String
	text: String
}
type VideoCell {
	__typename: String
	legacyVideoCellFragment: LegacyVideoCellFragment
}
type AppInstallCallToActionCell {
	__typename: String
	appInstallCallToActionCellFragment: AppInstallCallToActionCellFragment
}
type Description {
	markdown: String
	richtext: Unknown
}
type AutomationFragment {
	id: String
	name: String
	status: AutomationStatus
	condition: Condition
	trigger: AutomationTrigger
	actions: [Unknown]
}
type Post {
	__typename: String
	id: String
	onSubredditPost: OnSubredditPost
}
type Edge {
	node: Node
}
type Gif_xxlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type Profile {
	styles: Styles
	createdAt: Unknown
}
type AuthorInfo {
	__typename: String
	displayName: String
	onRedditor: OnRedditor
}
type ReportNextStepOptions {
	__typename: String
	onReportNextStepSiteRuleOptions: OnReportNextStepSiteRuleOptions
}
type LegacyIcon {
}
type Thumbnail1 {
}
type StandalonePosts {
	edges: [Unknown]
}
type Flair {
	__typename: String
	postFlairFragment: PostFlairFragment
}
type Icon {
}
type Mp4_xlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type Sender {
	__typename: String
	id: String
	displayName: String
	onRedditor: OnRedditor
}
type PageViews {
	metric: Unknown
	delta: Unknown
}
type SnoovatarIcon {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnSubredditPost {
	id: String
	title: String
	distinguishedAs: DistinguishedAs
	isOwnPost: Boolean
	authorInfo: AuthorInfo
	subreddit: Subreddit
	moderationInfo: ModerationInfo
}
type Xxlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type Gallery {
	items: [Unknown]
}
type InboxTab {
	count: BadgeStyle
}
type TheaterPostCardFragment {
	id: String
	cells: [Unknown]
	postInfo: PostInfo
}
type VerdictByRedditorInfo {
	__typename: String
	redditorNameFragment: RedditorNameFragment
}
type Still {
	content: Unknown
}
type CommentPaidSubscriberBadgeFragment {
	image: Image
}
type OnChatChannelImageMessage {
	source: Source
	blurredSource: BlurredSource
}
type Footer {
	outboundUrl: String
	displayUrl: String
}
type Large {
	__typename: String
	onMediaSource: OnMediaSource1
}
type Channel {
	__typename: String
	recChatChannelsSccItemFragment: RecChatChannelsSccItemFragment
	recChatChannelsUccItemFragment: RecChatChannelsUccItemFragment
}
type AuthorInfoFragment {
	__typename: String
	id: String
	onRedditor: OnRedditor
	onUnavailableRedditor: OnUnavailableRedditor
	onDeletedRedditor: OnDeletedRedditor
}
type Gif_small {
	__typename: String
	mediaSourceFragment: Unknown
}
type Presentation {
	__typename: String
	searchFilterOptionListPresentationFragment: SearchFilterOptionListPresentationFragment
}
type Obfuscated_large {
	__typename: String
	mediaSourceFragment: Unknown
}
type BackgroundImage {
}
type Section {
	title: String
	description: String
}
type OnTopicDestination {
	topic: Topic
	schemeName: String
}
type ProductOffer {
	pricePackages: [Unknown]
}
type RichtextMedium {
	__typename: String
	mediaAssetFragment: MediaAssetFragment
}
type GalleryPageAdEvent {
	__typename: String
	adEventFragment: AdEventFragment
}
type Asset {
	__typename: String
	avatarAssetFragment: Unknown
}
type TertiarySection {
	__typename: String
	econEducationalUnitSectionsFragment: EconEducationalUnitSectionsFragment
}
type OnChatChannelTextMessage {
	text: String
}
type Icon_384 {
	__typename: String
	mediaSourceFragment: Unknown
}
type Edge {
	node: Node
}
type Flair {
	template: Template
	text: String
	richtext: Unknown
	textColor: FlairTextColor
}
type TopicPillsGroupFragment {
	title: String
	schemeName: String
	displayStyle: TopicGroupFeedElementDisplayType
	topics: [Unknown]
}
type Image2 {
}
type Xlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type EconEducationalUnitSectionsFragment {
	__typename: String
	onExplainerButtonV2: OnExplainerButtonV2
	onExplainerText: OnExplainerText
	onExplainerImage: Unknown
	onExplainerSpace: OnExplainerSpace
}
type ClaimInfo {
	title: String
	message: String
	image: Image3
	backgroundGradient: [Unknown]
}
type Dimensions {
}
type Icon {
	__typename: String
	mediaSourceFragment: Unknown
}
type Moderation {
	isShowCommentRemovalReasonPrompt: Boolean
}
type AuthorInfo {
	__typename: String
	authorInfoFragment: AuthorInfoFragment
}
type PostEventInfo {
	eventType: PostEventType
	startsAt: Unknown
	endsAt: Unknown
	isLive: Boolean
	isEventAdmin: Boolean
}
type AwardingByCurrentUser {
	id: String
}
type HistoryFragment {
	trophies: [Unknown]
	subredditMemberInfo: SubredditMemberInfo
	subredditKarmaContributions: SubredditKarmaContributions
}
type ThumbnailImage {
	__typename: String
	cellMediaSourceFragment: Unknown
}
type RichtextMediaFragment {
	richtextMedia: [Unknown]
}
type Award {
	id: String
	name: String
	goldPrice: Int
	staticIcon: StaticIcon
	additionalImages: [Unknown]
	tags: [Unknown]
	startsAt: Unknown
	endsAt: Unknown
	section: Section
}
type OnContentRatingSurveyLeafAnswer {
	contentRatingReasonText: String
	contentRatingTag: ContentRatingTag
}
type Topic {
	id: String
	displayName: String
}
type Poll {
	__typename: String
	postPollFragment: PostPollFragment
}
type ReportAction {
	__typename: String
	previousActionsReportActionFragment: PreviousActionsReportActionFragment
}
type Profile {
	title: String
	publicDescriptionText: String
}
type Tree {
	node: Node
}
type WidgetFragment {
	__typename: String
	calendarWidgetFragment: CalendarWidgetFragment
	imageWidgetFragment: ImageWidgetFragment
	communityListWidgetFragment: CommunityListWidgetFragment
	idCardWidgetFragment: IdCardWidgetFragment
	buttonWidgetFragment: ButtonWidgetFragment
	rulesWidgetFragment: RulesWidgetFragment
	moderatorWidgetFragment: ModeratorWidgetFragment
	textAreaWidgetFragment: TextAreaWidgetFragment
	menuWidgetFragment: MenuWidgetFragment
}
type EligibleCommunity {
	progress: Progress
	subreddit: Subreddit
	communityLeaderboardCategoryId: String
}
type ModQueueReason {
	__typename: String
	onModQueueReasonReport: OnModQueueReasonReport
	onModQueueReasonModReport: OnModQueueReasonModReport
	onModQueueReasonUserReport: OnModQueueReasonUserReport
	onModQueueReasonFilter: OnModQueueReasonFilter
}
type Bundle {
	type: String
	encodedData: Unknown
}
type Page {
	page: Page1
	footer: Footer
}
type OnRedditor1 {
	id: String
	prefixedName: String
	icon: Icon2
	snoovatarIcon: SnoovatarIcon
}
type ChatChannelFeedUnitFragment {
	id: String
	analyticsInfo: AnalyticsInfo
	channel: Channel
	chatMessages: [Unknown]
}
type Template {
	__typename: String
	flairTemplateFragment: Unknown
}
type OwnerInfo {
	__typename: String
	id: String
	onRedditor: OnRedditor
	onUnavailableRedditor: OnUnavailableRedditor
}
type OnRedditor {
	prefixedName: String
	name: String
}
type YoutubeCellFragment {
	id: String
	video: Video
	preview: Preview
	title: String
	createdAt: Unknown
	isAdPost: Boolean
}
type LegacyIcon {
	__typename: String
	mediaSourceFragment: Unknown
}
type Breakdown5 {
	metric: String
}
type Profile3 {
	__typename: String
	profileFragment: ProfileFragment
}
type RedditorFragment {
	id: String
	displayName: String
	icon: Icon
	profile: Profile
	snoovatarIcon: SnoovatarIcon
}
type Action {
	__typename: String
	previousActionItemFragment: PreviousActionItemFragment
}
type IndicatorsCellFragment {
	id: String
	indicators: [Unknown]
	isShowDevPlatformPrivacyLink: Boolean
}
type Obfuscated_medium {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnUnavailableDestination {
	reason: String
}
type PreviewTextCell {
	__typename: String
	previewTextCellFragment: PreviewTextCellFragment
}
type LegacyIcon {
}
type TypeaheadSubredditFragment {
	id: String
	name: String
	type: SubredditType
	eligibleMoments: [Unknown]
	prefixedName: String
	publicDescriptionText: String
	isQuarantined: Boolean
	subscribersCount: Boolean
	isSubscribed: Boolean
	styles: Unknown
}
type ModerationInfo {
	__typename: String
	verdict: ModerationVerdict
	verdictAt: Unknown
	verdictByRedditorInfo: VerdictByRedditorInfo
	verdictReason: ModerationVerdictReason
	banReason: String
	reportCount: Boolean
	isRemoved: Boolean
	modReportsFragment: ModReportsFragment
	userReportsFragment: UserReportsFragment
	modQueueTriggersFragment: ModQueueTriggersFragment
	modQueueReasonsFragment: ModQueueReasonsFragment
	lastAuthorModNoteFragment: LastAuthorModNoteFragment
}
type Image {
}
type Topic {
	id: String
	displayName: String
}
type Node {
	__typename: String
	simplifiedSubreddit: SimplifiedSubreddit
}
type Author {
	__typename: String
	id: String
	displayName: String
	onRedditor: OnRedditor
}
type AppBadge {
	count: BadgeStyle
}
type Xxxlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnRedditor {
	profileIcon: ProfileIcon
	snoovatarIcon: SnoovatarIcon
	profile: Profile
}
type BanEvasionFilterSettings {
	isEnabled: TemporaryEventConfigBoolean
	recency: TemporaryEventBanEvasionRecency
	postLevel: TemporaryEventBanEvasionConfidenceLevel
	commentLevel: TemporaryEventBanEvasionConfidenceLevel
}
type RemovalReason {
	id: String
	title: String
	message: String
}
type LeaderboardDelimiterFragment {
	icon: Icon
	title: String
	scoreLabel: String
}
type Promo {
	promoType: EconPromoType
	id: String
}
type SearchFilterBehaviorFragment {
	id: String
	pane: String
	filters: [Unknown]
	isAppliedFiltersRemoved: Boolean
	telemetry: Telemetry
}
type CardImage {
}
type RichtextMedium {
	__typename: String
	onMediaAsset: OnMediaAsset
}
type Profile {
	__typename: String
	profileFragment: ProfileFragment
}
type Xlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnSubredditPost {
	subreddit: Subreddit
}
type AdSupplementaryTextCellFragment {
	id: String
	supplementaryText: String
}
type Confidence {
	confidenceLevel: ModQueueReasonConfidenceLevel
	confidenceLevelText: String
}
type TitleCell {
	__typename: String
	titleCellFragment: TitleCellFragment
}
type CommunitySettings {
	disabledDiscoveryTypes: [Unknown]
	isTopListingAllowed: TemporaryEventConfigBoolean
	isCrowdControlFilterEnabled: TemporaryEventConfigBoolean
	crowdControlLevel: CrowdControlLevel
	crowdControlPostLevel: CrowdControlLevel
	publicDescription: String
	hatefulContentThresholdAbuse: HatefulContentThreshold
	hatefulContentThresholdIdentity: HatefulContentThreshold
	isModmailHarassmentFilterEnabled: TemporaryEventConfigBoolean
	isRestrictCommentingEnabled: TemporaryEventConfigBoolean
	isRestrictPostingEnabled: TemporaryEventConfigBoolean
	isDiscoveryAllowed: TemporaryEventConfigBoolean
}
type LegacyIcon1 {
	__typename: String
	mediaSourceFragment: Unknown
}
type AuthorInfo {
	__typename: String
	modmailRedditorInfoFragment: ModmailRedditorInfoFragment
}
type LastAuthorModNote {
	__typename: String
	onModUserNote: OnModUserNote
	onModUserNoteComment: OnModUserNoteComment
	onModUserNotePost: OnModUserNotePost
}
type OnComment {
	isAdminTakedown: Boolean
	score: Unknown
	postInfo: PostInfo
	authorInfo: AuthorInfo
	authorFlair: AuthorFlair
	content: Content
}
type Medium {
	purpose: DistributionMediaPurpose
	elements: [Unknown]
}
type IconSmall {
}
type Item {
	__typename: String
	postGalleryItemFragment: Unknown
}
type Event {
	source: String
	action: String
	noun: String
	trigger: SearchTelemetryEventTrigger
}
type CommentFragment {
	id: String
	createdAt: Unknown
	editedAt: Unknown
	isAdminTakedown: Boolean
	isRemoved: Boolean
	isLocked: Boolean
	isGildable: Boolean
	isInitiallyCollapsed: Boolean
	initiallyCollapsedReason: CommentCollapsedReason
	content: Content
	authorInfo: AuthorInfo
	authorCommunityBadge: AuthorCommunityBadge
	score: Unknown
	voteState: VoteState
	authorFlair: AuthorFlair
	isSaved: Boolean
	isStickied: Boolean
	isScoreHidden: Boolean
	awardings: [Unknown]
	associatedAward: AssociatedAward
	treatmentTags: [Unknown]
	isArchived: Boolean
	distinguishedAs: DistinguishedAs
	permalink: String
	moderationInfo: ModerationInfo
	paidSubscriberBadge: PaidSubscriberBadge
	isCommercialCommunication: Boolean
}
type Image1 {
}
type PostInfo2 {
	__typename: String
	onDeletedSubredditPost: OnDeletedSubredditPost
	postFragment: PostFragment
}
type AnalyticsEventPayloadFragment {
	source: String
	action: String
	noun: String
	actionInfo: ActionInfo
	postId: String
}
type Subreddit {
	id: String
	name: String
	isQuarantined: Boolean
	prefixedName: String
	styles: Styles
}
type OnCellMedia {
	type: CellMediaType
	sourceData: SourceData
}
type Availability {
	__typename: String
	creatorStatsAvailabilityFragment: CreatorStatsAvailabilityFragment
}
type RedditorInfo {
	__typename: String
	onRedditor: OnRedditor
}
type PostInfo {
	__typename: String
	postFragment: PostFragment
}
type Destination {
	__typename: String
	onTopicDestination: OnTopicDestination
	onUnavailableDestination: OnUnavailableDestination
	onSubredditListDestination: OnSubredditListDestination
}
type OnMediaSource1 {
}
type ImageWidgetFragment {
	id: String
	shortName: String
	data: [Unknown]
}
type GqlStorefrontArtistsWithListings {
	edges: [Unknown]
}
type OnComment {
	score: Unknown
	permalink: String
	content: Content
	authorInfo: AuthorInfo
}
type Edge {
	node: Node
}
type OnAutomationReportAction {
	message: String
}
type Still {
	defaultContent: DefaultContent
	originalContent: OriginalContent
}
type Xxxlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type Content {
	preview: String
	richtext: Unknown
	markdown: String
}
type InsightsSummariesFragment {
	pageViews: PageViews
	uniques: Uniques
	subscribes: Subscribes
	unsubscribes: Unsubscribes
	postsPublished: PostsPublished
	postsRemoved: PostsRemoved
	commentsPublished: CommentsPublished
	commentsRemoved: CommentsRemoved
	contentFiltered: ContentFiltered
	contentRemovedByAll: ContentRemovedByAll
	commentsRemovedByAll: CommentsRemovedByAll
	postsRemovedByAll: PostsRemovedByAll
	postReports: PostReports
	commentReports: CommentReports
	commentsRemovedByAdminsOnly: CommentsRemovedByAdminsOnly
	commentsRemovedByAdminAndMods: CommentsRemovedByAdminAndMods
	commentsRemovedByAdminApprovedByMod: CommentsRemovedByAdminApprovedByMod
	postsRemovedByAdminsOnly: PostsRemovedByAdminsOnly
	postsRemovedByAdminAndMods: PostsRemovedByAdminAndMods
	postsRemovedByAdminApprovedByMod: PostsRemovedByAdminApprovedByMod
	harassingContentPostsFiltered: HarassingContentPostsFiltered
	harassingContentCommentsFiltered: HarassingContentCommentsFiltered
	banEvasionPostsFiltered: BanEvasionPostsFiltered
	banEvasionCommentsFiltered: BanEvasionCommentsFiltered
	crowdControlPostsFiltered: CrowdControlPostsFiltered
	crowdControlCommentsFiltered: CrowdControlCommentsFiltered
}
type VerdictByRedditorInfo {
	__typename: String
	authorInfoFragment: AuthorInfoFragment
}
type NewsProfileMetadataCellFragment {
	id: String
	createdAtOptional: Unknown
	username: String
	link: String
	isBrandAffiliate: Boolean
}
type PostInfo {
	id: String
	domain: String
	__typename: String
}
type AnswerOption1 {
	__typename: String
	onContentRatingSurveyAnswer: OnContentRatingSurveyAnswer
	onContentRatingSurveyLeafAnswer: OnContentRatingSurveyLeafAnswer
}
type Subreddit {
	__typename: String
	id: String
	onSubreddit: OnSubreddit
}
type CellGroupFragment {
	adPayload: AdPayload
	groupRecommendationContext: GroupRecommendationContext
	cells: [Unknown]
}
type ContentMessage {
	stringFeature: AutomationStringFeature
	rtjsonText: Unknown
}
type AuthInfo {
	__typename: String
	mediaAuthInfoFragment: MediaAuthInfoFragment
}
type SnapPostContentFragment {
	__typename: String
	id: String
	isVisited: Boolean
	onSubredditPost: OnSubredditPost
}
type UserFlairSelect {
	isEnabled: Boolean
	description: String
	title: String
}
type GqlStorefrontPriceInfo {
	price: String
}
type Redditor {
	id: String
	displayName: String
	snoovatarIcon: SnoovatarIcon
}
type ModNote {
	__typename: String
	id: String
	createdAt: Unknown
	itemType: ModNoteType
	operator: Operator
	user: User
	onModUserNote: OnModUserNote
	onModUserNotePost: OnModUserNotePost
	onModUserNoteComment: OnModUserNoteComment
	onModActionNote: OnModActionNote
	onModActionNotePost: OnModActionNotePost
	onModActionNoteComment: OnModActionNoteComment
}
type OnContentRatingSurveyLeafAnswer1 {
	contentRatingReasonText: String
	contentRatingTag: ContentRatingTag1
}
type CustomPostCellFragment {
	id: String
	bundle: Bundle
	postConfig: PostConfig
	cachedRender: CachedRender
	post: Post
}
type Video {
}
type CommunityRecommendation {
	recommendationSource: String
	subreddit: Subreddit
	posts: Posts
}
type ModPnSettingSectionFragment {
	id: String
	title: String
}
type TemporaryEventFieldsFull {
	communitySettings: CommunitySettings
	matureContentFilterSettings: MatureContentFilterSettings
	banEvasionFilterSettings: BanEvasionFilterSettings
}
type Topic {
	id: String
	displayName: String
}
type ExploreFeaturedItemsFragment {
	title: String
	schemeName: String
	items: [Unknown]
}
type Color {
	__typename: String
	colorFragment: ColorFragment
}
type SnoovatarIcon {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnSubreddit {
	title: String
	subscribersCount: Boolean
	styles: Unknown
	publicDescriptionText: String
	taxonomy: Taxonomy
}
type Element {
	source: Unknown
	type: DistributionMediaType
	platform: DistributionMediaPlatform
}
type PromotedCommunityPost {
	__typename: String
	onSubredditPost: OnSubredditPost
	postContentFragment: Unknown
}
type MetaSearch {
	displayQuery: String
	rawQuery: String
}
type OnModPnSettingsLayoutRowToggle {
	id: String
	title: String
	description: String
	icon: ModPnSettingsLayoutIcon
	isEnabled: Boolean
	isAuto: Boolean
	statusName: Unknown
}
type OnUnavailableDestination {
	reason: String
}
type Subreddit {
	__typename: String
	chatChannelSubredditInfoFragment: ChatChannelSubredditInfoFragment
}
type Thumbnail {
	__typename: String
	mediaSourceFragment: Unknown
}
type ReportReasonSelection {
	__typename: String
	nextStep: NextStep
	reportReasonFields: ReportReasonFields
}
type FullPageInfoFragment {
	hasNextPage: Boolean
	hasPreviousPage: Boolean
	startCursor: String
	endCursor: String
}
type OnDismissExplainerButtonDestination {
	id: String
}
type SearchCommentPostFragment {
	__typename: String
	crosspostRoot: CrosspostRoot
	onSubredditPost: OnSubredditPost
	searchPostContentFragment: Unknown
}
type PreviousActionItemFragment {
	actionType: PreviousActionType
	actionAt: Unknown
	reportAction: ReportAction
	modAction: ModAction
}
type Edge {
	node: Node
}
type Topic1 {
	name: String
	title: String
}
type PostStatsPrivate {
	viewCountTotals: ViewCountTotals
}
type Dimensions {
}
type ChatChannelFeedUnitV2Fragment {
	id: String
	analyticsInfo: AnalyticsInfo
	chatRecommendation: ChatRecommendation
	chatMessages: [Unknown]
}
type Data {
	__typename: String
	creatorStatsTrendDataFragment: CreatorStatsTrendDataFragment
}
type ChatChannelsFeedUnitFragment {
	id: String
	analyticsInfo: AnalyticsInfo
	chatRecommendations: [Unknown]
}
type OnAchievementBadge {
	image: Image
	label: String
	accessibilityLabel: String
}
type Obfuscated_medium {
	__typename: String
	mediaSourceFragment: Unknown
}
type SnoovatarIcon {
}
type LegacyIcon {
}
type OnMediaSource {
}
type Styles {
}
type CommentsRemovedByAdminApprovedByMod {
	metric: Unknown
	delta: Unknown
}
type OnReportNextStepSupportingEvidence {
	evidenceToCollect: [Unknown]
}
type OnImageAsset {
	url: Int
	height: Int
}
type Subreddit {
	__typename: String
	subredditFragment: SubredditFragment
}
type Participant {
	redditorInfo: RedditorInfo
	subredditInfo: SubredditInfo
}
type CommunityPostRequirements {
	titleTextMaxLength: Int
	titleTextMinLength: Int
	linkRepostAge: Int
	titleRequiredStrings: [Unknown]
	titleRegexes: [Unknown]
	titleBlacklistedStrings: [Unknown]
	bodyRegexes: [Unknown]
	bodyRequiredStrings: [Unknown]
	bodyRestrictionPolicy: BodyRestrictionPolicy
	guidelinesText: String
	domainWhitelist: [Unknown]
	domainBlacklist: [Unknown]
	galleryCaptionsRequirement: GalleryRestrictionPolicy
	galleryMinItems: Int
	galleryMaxItems: Int
	galleryUrlsRequirement: GalleryRestrictionPolicy
	isFlairRequired: Boolean
	bodyBlacklistedStrings: [Unknown]
}
type Topic {
	name: String
	title: String
}
type RedditAwardDetailsFragment {
	total: Int
	award: Award
}
type OnAchievementClaimedCollectibleReward {
	title: String
	message: String
	image: Image4
}
type TopComment {
	trees: [Unknown]
}
type RedditorInfo {
	__typename: String
	onRedditor: OnRedditor
}
type LegacyIcon {
}
type Flair {
	type: String
	text: String
	richtext: Unknown
	textColor: FlairTextColor
	template: Unknown
}
type OnSubredditPost {
	__typename: String
	multiContentPostFragment: Unknown
}
type Still {
	content: Content1
}
type Drop {
	size: Int
}
type Subreddit {
	__typename: String
	onSubredditInfo: OnSubredditInfo
}
type Taxonomy {
	generatedDescription: String
}
type RecapCardDataCommentFragment {
	id: String
	comment: Comment
}
type UserReport {
	reason: String
	count: Int
}
type SubredditRule {
	id: String
	kind: SubredditRuleKind
	name: String
}
type Availability1 {
	__typename: String
	creatorStatsAvailabilityFragment: CreatorStatsAvailabilityFragment
}
type PageInfo {
	startCursor: String
}
type WelcomePage {
	__typename: String
	welcomePageFlagsFragment: WelcomePageFlagsFragment
}
type ChatTab {
	count: BadgeStyle
}
type LegacyIcon {
}
type Icon {
	__typename: String
	mediaSourceFragment: Unknown
}
type TitleFragment {
	id: String
	title: String
	isVisited: Boolean
}
type SourceData {
	__typename: String
	cellMediaSourceFragment: Unknown
}
type CachedRender {
	type: String
	encodedData: Unknown
}
type OnRedditor {
	name: String
}
type AdditionalInfoFragment {
	id: String
	name: String
	modPermissions: ModPermissions
}
type Media {
	__typename: String
	cellMediaSourceFragment: Unknown
}
type Node {
	__typename: String
	postFragment: PostFragment
}
type HighlightedPost {
	expiresAt: Unknown
	label: HighlightedPostLabelType
	post: Post
}
type Node {
	__typename: String
	commentInfoFragment: CommentInfoFragment
}
type Node {
	endsAt: Unknown
}
type OnAchievementRepeatableImageTrophy {
	carouselImage: CarouselImage1
	gridImage: GridImage1
	fullImage: FullImage1
}
type Content {
	__typename: String
	preview: String
	richtext: Unknown
	richtextMediaFragment: RichtextMediaFragment
}
type OnAutomationReportOutcome {
	__typename: String
	automation: Automation2
	contentMessages: [Unknown]
}
type Low {
}
type ProfilePinnedPostsFragment {
	stickyPosts: [Unknown]
}
type TitleCell {
	__typename: String
	titleCellFragment: TitleCellFragment
}
type Image {
	__typename: String
	cellMediaSourceFragment: Unknown
}
type Media {
	__typename: String
	mediaFragment: MediaFragment
}
type ModerationInfo {
	__typename: String
	verdict: ModerationVerdict
	verdictAt: Unknown
	banReason: String
	verdictByRedditorInfo: VerdictByRedditorInfo
	reportCount: Boolean
	onModerationInfo: OnModerationInfo
	onCommentModerationInfo: OnCommentModerationInfo
	modReportsFragment: ModReportsFragment
	userReportsFragment: UserReportsFragment
	modQueueTriggersFragment: ModQueueTriggersFragment
	modQueueReasonsFragment: ModQueueReasonsFragment
	lastAuthorModNoteFragment: LastAuthorModNoteFragment
}
type AuthorCommunityBadge {
	__typename: String
	onAchievementBadge: OnAchievementBadge
}
type MediaAuthInfoFragment {
	authToken: String
	authTokenExpiresAt: Unknown
	authTokenId: String
}
type PostsPublished {
	metric: Unknown
	delta: Unknown
}
type OnSubredditPost {
	id: String
	isOwnPost: Boolean
	subreddit: Subreddit
	otherDiscussionsCount: Int
}
type OnAutomationInformAction {
	message: String
}
type Icon {
}
type GqlStorefrontArtistWithListings {
	__typename: String
	listings: Listings
	gqlStorefrontArtist: GqlStorefrontArtist
}
type High {
}
type Xxlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnRedditor {
	icon: Icon1
}
type Media {
	__typename: String
	onMediaAsset: OnMediaAsset
}
type AppStoreInfo {
	appName: String
	appIcon: String
	appRating: String
	category: String
	downloadCount: String
}
type Taxonomy {
	generatedDescription: String
}
type Media {
}
type Item {
	id: String
	name: String
	artist: Artist
	benefits: Benefits
}
type RecapCardFragment {
	isShareable: Boolean
	name: String
	style: Style
	subtitle: String
	title: String
	data: [Unknown]
}
type Xxlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type ClassicCellFragment {
	id: String
	titleCell: TitleCell
	previewTextCell: PreviewTextCell
	indicatorsCell: IndicatorsCell
	awardsCell: AwardsCell
	metadataCell: MetadataCell
	thumbnailCell: ThumbnailCell
	flairCell: FlairCell
}
type Obfuscated_xlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type Profile {
	redditorInfo: RedditorInfo
}
type ObfuscatedStillMediaFragment {
	source: Source
	small: Small
	medium: Medium
	large: Large
	xlarge: Xlarge
	xxlarge: Xxlarge
	xxxlarge: Xxxlarge
}
type CarouselImage1 {
}
type RankIcon {
}
type IndicatorsCell {
	__typename: String
	indicatorsCellFragment: IndicatorsCellFragment
}
type SnoovatarIcon {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnReportNextStepOpenFlow {
	isOpenCTLFlow: Boolean
}
type Dimensions1 {
}
type Channel {
	__typename: String
	chatChannelUCCFragment: Unknown
	chatChannelSCCv2Fragment: Unknown
}
type Style {
	color: Color
	image: Image
	level: Level
}
type DownloadMediaFragment {
}
type SubredditContributionStats {
}
type OnSubreddit {
	path: String
	prefixedName: String
}
type LeadFormField {
	fieldType: CollectableUserInfo
	isRequired: Boolean
}
type SavedResponseFragment {
	id: String
	title: String
	context: SavedResponseContext
	subredditRule: SubredditRule
	message: Message
}
type MyRedditSettings {
	isEnabled: Boolean
}
type ProfileFragment {
	redditorInfo: RedditorInfo
	id: String
	title: String
	description: Description
	subscribersCount: Boolean
	isSubscribed: Boolean
	isModeratable: Boolean
	modPermissions: ModPermissions
	whitelistStatus: WhitelistStatus
	isDefaultIcon: Boolean
	name: String
	isQuarantined: Boolean
	styles: Unknown
}
type CarouselImage {
}
type NewIcon {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnTopicDestination {
	topic: Topic
	schemeName: String
}
type AuthorInfo {
	__typename: String
	authorInfoFragment: AuthorInfoFragment
}
type ContentMessage1 {
	stringFeature: AutomationStringFeature
	rtjsonText: Unknown
}
type SnoovatarIcon {
	__typename: String
	mediaSourceFragment: Unknown
}
type RecommendedChannel {
	channel: Channel
	usersAvatars: [Unknown]
}
type TitleWithThumbnailCellFragment {
	id: String
	titleCell: TitleCell
	thumbnail: Thumbnail
	previewTextCell: PreviewTextCell
	indicatorsCell: IndicatorsCell
}
type TranslatedGalleryItemFragment {
	id: String
	media: Media
}
type RecChatChannelsUccItemFragment {
	__typename: String
	onUserChatChannel: Unknown
}
type Owner {
	id: String
	displayName: String
}
type CommunityGold {
	__typename: String
	communityGoldFragment: CommunityGoldFragment
}
type ContentRatingTag1 {
	rating: Unknown
	weight: String
	description: String
	icon: Icon1
}
type FeedDeletedCommentFragment {
	id: String
}
type TranslatedCommentContentFragment {
	content: Content
}
type LeaderboardCategoryFragment {
	id: String
	name: String
	isActive: Boolean
	periodList: [Unknown]
	description: String
	deeplinkUrl: String
	updateIntervalLabel: String
	lastUpdatedLabel: String
	footerText: String
}
type Comment {
	__typename: String
	postInfo: PostInfo
	recapCommentFragment: RecapCommentFragment
}
type Item {
	id: String
	text: String
	isSelected: Boolean
}
type ViewEvent {
	__typename: String
	analyticsEventPayloadFragment: AnalyticsEventPayloadFragment
}
type InterstitialWarningMessage {
	markdown: String
	richtext: Unknown
}
type OnProfilePost {
	profile: Profile
}
type PackagedMedia {
	__typename: String
	packagedMediaFragment: PackagedMediaFragment
}
type NextStep {
	__typename: String
	reportNextStep: ReportNextStep
	reportNextStepOptions: ReportNextStepOptions
}
type Subreddits {
	edges: [Unknown]
}
type PinnedPostsHeaderCellFragment {
	id: String
	isInitiallyExpanded: Boolean
}
type MetaSearch {
	displayQuery: String
	rawQuery: String
}
type PostsRemoved {
	metric: Unknown
	delta: Unknown
}
type PromotedCommunityPostFragment {
	promotedCommunityPost: PromotedCommunityPost
}
type Asset {
	image: Image
	layer: AvatarExpressionAssetLayer
}
type AwardsCell {
	__typename: String
	awardsCellFragment: AwardsCellFragment
}
type Awarding {
	total: Award
}
type OnModUserNotePost {
	label: ModUserNoteLabel
	note: String
	postInfo: PostInfo
}
type Icon {
	__typename: String
	mediaSourceFragment: Unknown
}
type ChatChannelMessageFragment {
	__typename: String
	id: String
	createdAt: Unknown
	sender: Sender
	onChatChannelTextMessage: OnChatChannelTextMessage
	onChatChannelImageMessage: OnChatChannelImageMessage
}
type Edge {
	node: Node
}
type Resource {
	url: String
}
type PreRenderImage {
}
type QuestionFragment {
	id: String
	questionTextMarkdown: String
	pageType: String
	answerOptions: [Unknown]
}
type Static_icon_48 {
	__typename: String
	mediaSourceFragment: Unknown
}
type PaidSubscriberBadge {
	__typename: String
	paidSubscriberBadgeFragment: PaidSubscriberBadgeFragment
}
type SubredditTaxonomyFieldsFragment {
	taxonomy: Taxonomy
}
type ScoreInfo {
	__typename: String
	onScoreChangeInfo: Unknown
}
type AvatarAccessoryFragment {
	isAvailableForCloset: Boolean
	assets: [Unknown]
	capabilityRequired: AvatarCapability
	customizableClasses: [Unknown]
	defaultAccessoryId: String
	id: String
	sectionId: String
	state: AvatarAccessoryState
	tags: [Unknown]
}
type Competitor {
	__typename: String
	onCompetitor: OnCompetitor
}
type Image {
}
type Content1 {
	html: String
	markdown: String
}
type TopKarmaContribution {
	postCount: Subreddit
}
type SnackCommentsPreview {
	edges: [Unknown]
}
type OnUnavailableRedditor {
	name: String
}
type TippingStatus {
	isEnabled: Boolean
}
type RedditorInfo {
	__typename: String
	id: String
	displayName: String
	onRedditor: OnRedditor
}
type CarouselCommunityRecommendationsFragment {
	id: String
	model: String
	title: String
	version: String
	destination: Destination
	communityRecommendations: [Unknown]
}
type DefaultPost {
	__typename: String
	postFragment: PostFragment
	subredditDetailFragment: SubredditDetailFragment
}
type TippingStatus1 {
	isEnabled: Boolean
}
type LeadFormField {
	fieldType: CollectableUserInfo
	isRequired: Boolean
}
type OnProfilePost {
	content: Content2
	thumbnail: Thumbnail1
	authorInfo: AuthorInfo1
	profile: Profile
}
type Subreddit1 {
	__typename: String
	id: String
	onSubreddit: OnSubreddit1
}
type FullImage {
	__typename: String
	mediaSourceFragment: Unknown
}
type Edge1 {
	node: Node1
}
type PostInfo4 {
	id: String
}
type ClickEvent {
	__typename: String
	analyticsEventPayloadFragment: AnalyticsEventPayloadFragment
}
type ModPnSettingsRowFragment {
	__typename: String
	onModPnSettingsLayoutRowRange: OnModPnSettingsLayoutRowRange
	onModPnSettingsLayoutRowToggle: OnModPnSettingsLayoutRowToggle
	onModPnSettingsLayoutRowSectionToggle: OnModPnSettingsLayoutRowSectionToggle
	onModPnSettingsLayoutRowPage: OnModPnSettingsLayoutRowPage
}
type AvatarExpressionMediaAssetFragment {
	__typename: String
	onExpressionMediaAsset: OnExpressionMediaAsset
}
type Image {
}
type AuthorSummary {
	firstAuthorInfo: FirstAuthorInfo
	lastModAuthorInfo: LastModAuthorInfo
}
type UnavailableRedditorFragment {
	id: String
	displayName: String
}
type OnRedditor {
	prefixedName: String
	icon: Icon
	snoovatarIcon: SnoovatarIcon
	profile: Profile
}
type RedditorInfo {
	__typename: String
	onRedditor: OnRedditor
}
type Subreddit {
	id: String
	name: String
	prefixedName: String
	styles: Unknown
}
type OnImageAsset {
}
type Icon1 {
}
type TranslatedPostContentFragment {
	title: String
	content: Content
}
type LegacyIcon {
}
type ThumbnailV2 {
	image: Image
}
type AuthorInfo1 {
	__typename: String
	onRedditor: OnRedditor1
}
type Automation2 {
	id: String
	name: String
}
type HarassingContentCommentsFiltered {
	metric: Unknown
	delta: Unknown
	breakdown: [Unknown]
}
type Description {
	preview: String
}
type ChatRecommendation {
	channel: Channel
	recommendationContext: RecommendationContext
}
type ModmailMessageFragment {
	id: String
	body: Body
	createdAt: Unknown
	participatingAs: ModmailMessageParticipatingAsV2
	authorInfo: AuthorInfo
	isInternal: Boolean
	isAuthorHidden: Boolean
}
type PostRequirementsFragment {
	bodyBlacklistedStrings: [Unknown]
	bodyRegexes: [Unknown]
	bodyRequiredStrings: [Unknown]
	bodyRestrictionPolicy: BodyRestrictionPolicy
	domainBlacklist: [Unknown]
	domainWhitelist: [Unknown]
	galleryCaptionsRequirement: GalleryRestrictionPolicy
	galleryMaxItems: Int
	galleryMinItems: Int
	galleryUrlsRequirement: GalleryRestrictionPolicy
	guidelinesText: String
	isFlairRequired: Boolean
	linkRepostAge: Int
	linkRestrictionPolicy: LinkRestrictionPolicy
	titleBlacklistedStrings: [Unknown]
	titleRegexes: [Unknown]
	titleRequiredStrings: [Unknown]
	titleTextMaxLength: Int
	titleTextMinLength: Int
}
type Profiles {
	edges: [Unknown]
}
type Xlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type SourceData {
	__typename: String
	cellMediaSourceFragment: Unknown
}
type Node {
	__typename: String
	subredditDetailFragment: SubredditDetailFragment
}
type Streaming {
}
type Icon_64 {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnCustomCellColor {
}
type PostFragment {
	__typename: String
	crosspostRoot: CrosspostRoot
	onSubredditPost: OnSubredditPost
	onAdPost: OnAdPost
	postContentFragment: Unknown
}
type CommunityGoldFragment {
	isActivePaidSubscriber: Boolean
	settings: Settings
}
type OnRedditor {
	name: String
	prefixedName: String
	karma: Karma
	snoovatarIcon: SnoovatarIcon
}
type ChatChannelTopicFragment {
	taggedTopics: [Unknown]
}
type CardPostCommunityRecommendationsFragment {
	id: String
	model: String
	title: String
	version: String
	destination: Destination
	communityRecommendations: [Unknown]
}
type LinearPostCardComments {
	__typename: String
	onSubredditPost: OnSubredditPost
}
type SnapFeedElementEdgeFragment {
	node: Node
}
type OnSubredditPost1 {
	subreddit: Subreddit1
}
type Description {
	markdown: String
	richtext: Unknown
}
type OnSubredditInfo {
	__typename: String
	subredditData: SubredditData
}
type SubredditDataFragment {
	id: String
	name: String
	prefixedName: String
	isQuarantined: Boolean
	title: String
	type: SubredditType
	subscribersCount: Boolean
	isSubscribed: Boolean
	isThumbnailsEnabled: Boolean
	isFavorite: Boolean
	path: String
	styles: Unknown
	modPermissions: ModPermissions
	isTitleSafe: Boolean
	isUserBanned: Boolean
	isMediaInCommentsSettingShown: Boolean
	allowedMediaInComments: [Unknown]
	myRedditSettings: MyRedditSettings
	isMuted: Boolean
	isChannelsEnabled: Boolean
}
type Gallery {
	items: [Unknown]
}
type LegacyIcon1 {
}
type ModerationInfo {
	__typename: String
	verdict: ModerationVerdict
	verdictAt: Unknown
	banReason: String
	verdictByRedditorInfo: VerdictByRedditorInfo
	reportCount: Boolean
	onModerationInfo: OnModerationInfo
	onCommentModerationInfo: OnCommentModerationInfo
	modReportsFragment: ModReportsFragment
	userReportsFragment: UserReportsFragment
	modQueueTriggersFragment: ModQueueTriggersFragment
	modQueueReasonsFragment: ModQueueReasonsFragment
	lastAuthorModNoteFragment: LastAuthorModNoteFragment
}
type SubredditData {
	name: String
	styles: Unknown
}
type Mp4_large {
	__typename: String
	mediaSourceFragment: Unknown
}
type AnswerableQuestionsFragment {
	__typename: String
	answerableQuestions: [Unknown]
	answerableQuestionAnalyticsDataFragment: AnswerableQuestionAnalyticsDataFragment
}
type GroupRecommendationContext {
	__typename: String
	recommendationContextFragment: RecommendationContextFragment
}
type ContentRatingTag {
	rating: Unknown
	weight: String
	description: String
	icon: Icon
}
type OnSubredditPost {
	subreddit: Subreddit
}
type RedditorInfo {
	__typename: String
	id: String
	displayName: String
	onRedditor: OnRedditor
}
type OnCompetitor {
	id: String
	name: String
	media: Media
}
type Benefits {
	avatarOutfit: AvatarOutfit
	avatarUtilities: [Unknown]
}
type AvatarOutfit {
	id: String
	preRenderImage: PreRenderImage
	backgroundImage: BackgroundImage
}
type Progress {
	done: AchievementTrophyProgressUnit
}
type Settings {
	isSubscriptionsEnabled: Boolean
}
type Content {
	preview: String
}
type Image {
	type: CellMediaType
	sourceData: SourceData
}
type ModAction {
	__typename: String
	previousActionsModActionFragment: PreviousActionsModActionFragment
}
type OnAutomationNotCondition {
	regexCondition: RegexCondition
	stringCondition: StringCondition
}
type ModmailConversationFragment {
	id: String
	isArchived: Boolean
	isFiltered: Boolean
	isJoinRequest: Boolean
	isHighlighted: Boolean
	isAppeal: Boolean
	lastUnreadAt: Unknown
	lastModUpdateAt: Unknown
	lastUserUpdateAt: Unknown
	numMessages: String
	type: ModmailConversationTypeV2
	authorSummary: AuthorSummary
	lastMessage: LastMessage
	participant: Participant
	subredditOrProfileInfo: SubredditOrProfileInfo
}
type Large {
	__typename: String
	mediaSourceFragment: Unknown
}
type PackagedMedia {
	__typename: String
	packagedMediaFragment: PackagedMediaFragment
}
type Media {
	typeHint: MediaType
	still: Still
	obfuscated: Obfuscated
	animated: Animated
	video: Video
}
type PostStats1 {
	viewCountTotal: Int
	shareAllTotal: Int
}
type TextAreaWidgetFragment {
	id: String
	shortName: String
	text: Text
}
type Gif_large {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnMediaAsset {
	__typename: String
	id: String
	translatedImageAssetFragment: TranslatedImageAssetFragment
}
type SubredditRuleContent {
	richtext: Unknown
	richtextMedia: [Unknown]
	typeHint: ContentType
	html: String
	markdown: String
}
type ActionInfo {
	paneName: String
	position: Int
	reason: String
	type: String
}
type SourceData {
	__typename: String
	cellMediaSourceFragment: Unknown
}
type TrackingContext {
	search: Search
	actionInfo: ActionInfo
	post: Post
	subreddit: Subreddit
	metaSearch: MetaSearch
	profile: Profile
}
type Karma {
}
type RichtextMedium {
	id: String
	userId: String
	mimetype: String
	width: Int
	height: Int
	status: MediaAssetStatus
}
type Artist {
	redditorInfo: RedditorInfo
}
type OnSubredditPost {
	subreddit: Subreddit
}
type GqlStorefrontListing {
	id: String
	totalQuantity: Int
	soldQuantity: Int
	badges: [Unknown]
	productOffer: ProductOffer
	status: StorefrontListingStatus
	item: Item
	expiresAt: Unknown
	isSandboxOnly: Boolean
	tags: [Unknown]
}
type MediaTintColor {
	__typename: String
	colorFragment: ColorFragment
}
type Body {
	markdown: String
	richtext: Unknown
	preview: String
}
type OnCustomCellColor {
}
type CrosspostRoot {
	post: Post
}
type IconSmall {
	__typename: String
	mediaSourceFragment: Unknown
}
type Icon {
}
type OnSubredditPost {
	subreddit: Subreddit
}
type Taxonomy {
	generatedDescription: String
}
type Taxonomy {
	generatedDescription: String
}
type Channel {
	__typename: String
	chatChannelUCCFragment: Unknown
	chatChannelSCCv2Fragment: Unknown
}
type Posts {
	edges: [Unknown]
}
type Condition {
	__typename: String
	onAutomationRegexCondition: OnAutomationRegexCondition
	onAutomationStringCondition: OnAutomationStringCondition
	onAutomationNotCondition: OnAutomationNotCondition
}
type Medium {
	__typename: String
	onMediaSource: OnMediaSource
}
type Campaign {
	id: String
}
type LegacyIcon {
}
type LastMessage {
	__typename: String
	modmailMessageFragment: ModmailMessageFragment
}
type Comment {
	__typename: String
	onComment: OnComment
}
type ModQueueTriggersFragment {
	modQueueTriggers: [Unknown]
}
type CommunityStatus {
	description: Description
	emoji: Unknown
}
type OnSimilarSubredditRecommendationContext {
	subreddit: Subreddit
}
type MetadataCell {
	__typename: String
	metadataCellFragment: Unknown
}
type Subreddit {
	id: String
	name: String
}
type Mp4_xxxlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type PostStatsFragment {
	id: String
	shareAllCountTotals: ShareAllCountTotals
	shareCopyCountTotals: ShareCopyCountTotals
	viewCountTotals: ViewCountTotals
	viewCountTrends: ViewCountTrends
}
type OnReportNextStepSiteRuleOptions {
	title: String
	options: [Unknown]
}
type TrendingGalleryItemFragment {
	media: Media
}
type Large {
	__typename: String
	mediaSourceFragment: Unknown
}
type LegacyIcon {
}
type CommentsRemovedByAdminAndMods {
	metric: Unknown
	delta: Unknown
}
type FeedCommentFragment {
	id: String
	createdAt: Unknown
	content: Content
	authorInfo: AuthorInfo
	score: Unknown
	awardings: [Unknown]
}
type OnExplainerText {
	alignment: ExplainerTextAlignment
	content: String
	element: ExplainerTextElement
	sectionID: String
	rtJSON: Unknown
}
type AwarderInfoFragment {
	__typename: String
	id: String
	displayName: String
	onRedditor: OnRedditor
}
type Page {
	__typename: String
	galleryCellPageFragment: GalleryCellPageFragment
}
type Node {
	__typename: String
	displayedCollectibleItemFragment: DisplayedCollectibleItemFragment
}
type Taxonomy {
	generatedDescription: String
}
type Item {
	id: String
}
type MediaAsset {
	id: String
	height: Int
	width: Int
	userId: String
	status: MediaAssetStatus
}
type PostImage {
	type: PromotedPostImageType
	media: Media
}
type Item {
	__typename: String
	postGalleryItemFragment: Unknown
}
type Image {
}
type Icon {
}
type OnAdPost1 {
	profile: Profile3
}
type Animated {
	__typename: String
	animatedMediaFragment: AnimatedMediaFragment
}
type Icon1 {
}
type AuthorInfo {
	__typename: String
	id: String
	displayName: String
	onRedditor: OnRedditor
}
type AwarderRankFragment {
	awarder: Awarder
	rank: Int
}
type DisplayedCollectibleItemFragment {
	isVisible: Boolean
	item: Item
}
type CrosspostContentFragment {
	__typename: String
	onSubredditPost: OnSubredditPost
	postContentFragment: Unknown
}
type Content {
	richtextMedia: [Unknown]
}
type PostFlairSettings {
	isEnabled: Boolean
}
type RankedCommunityFragment {
	rank: Int
	subreddit: Subreddit
}
type OnUnavailableDestination {
	reason: String
}
type Image {
	__typename: String
	mediaSourceFragment: Unknown
}
type VerdictByRedditorInfo {
	__typename: String
	redditorNameFragment: RedditorNameFragment
}
type RecapCardDataEntityFragment {
	imageUrl: String
}
type PostPollFragment {
	options: [Unknown]
	totalVoteCount: Int
	votingEndsAt: Unknown
	selectedOptionId: String
	resolvedOptionId: String
}
type UnlockedCommunity {
	contributedAt: Unknown
	subreddit: Subreddit
	communityLeaderboardCategoryId: String
}
type PostConnectionFragment {
	pageInfo: PageInfo
	edges: [Unknown]
}
type SearchModifiersFragment {
	version: String
	modifiers: [Unknown]
}
type MutedMemberEndsAtFragment {
	edges: [Unknown]
}
type PreviousActionsReportActionFragment {
	id: String
	reason: String
}
type PostCarouselFragment {
	id: String
	type: CarouselType
	uxTargetingExperience: UxTargetingExperience
	uxVariantId: String
	carouselTitle: String
	carouselPosts: [Unknown]
}
type RecapCardDataRedditorFragment {
	redditor: Redditor
}
type AuthorInfo {
	id: String
	displayName: String
}
type LiveEvent {
	id: String
}
type OnAdPost {
	profile: Profile1
}
type RegexCondition {
	features: [Unknown]
	value: String
	isCaseSensitive: Boolean
}
type Xxxlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnModPnSettingsLayoutRowSectionToggle {
	id: String
	title: String
	description: String
	icon: ModPnSettingsLayoutIcon
	isEnabled: Boolean
	isAuto: Boolean
	statusName: Unknown
}
type ChatMessage {
	__typename: String
	chatChannelMessageFragment: ChatChannelMessageFragment
}
type Gif_xlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type GqlStorefrontUtilityTypesRoot {
	utilities: [Unknown]
}
type Option {
	id: String
}
type Wallet {
	address: Unknown
}
type Cell {
	__typename: String
	actionCellFragment: Unknown
	adBrandSurveyCellFragment: Unknown
	adFreeFormCellFragment: AdFreeFormCellFragment
	adGalleryCellFragment: AdGalleryCellFragment
	adLlmPostSuggestionsCellFragment: AdLlmPostSuggestionsCellFragment
	adMetadataCellFragment: Unknown
	adPromotedCommunityPostCellFragment: Unknown
	adPromotedUserPostCollectionCellFragment: AdPromotedUserPostCollectionCellFragment
	adSpotlightVideoCellFragment: Unknown
	adSupplementaryTextCellFragment: AdSupplementaryTextCellFragment
	appInstallCallToActionCellFragment: AppInstallCallToActionCellFragment
	amaStatusCellFragment: AmaStatusCellFragment
	awardsCellFragment: AwardsCellFragment
	callToActionCellFragment: Unknown
	classicCellFragment: ClassicCellFragment
	classicMetadataCellFragment: Unknown
	classicThumbnailCellFragment: Unknown
	conversationCellFragment: ConversationCellFragment
	crosspostCellFragment: CrosspostCellFragment
	customPostCellFragment: CustomPostCellFragment
	emptyContentCellFragment: EmptyContentCellFragment
	feedSurveyCellFragment: FeedSurveyCellFragment
	flairCellFragment: FlairCellFragment
	fullViewVideoCellFragment: FullViewVideoCellFragment
	galleryCellFragment: GalleryCellFragment
	galleryWithLinkFooterCellFragment: GalleryWithLinkFooterCellFragment
	imageCellFragment: ImageCellFragment
	indicatorsCellFragment: IndicatorsCellFragment
	legacyVideoCellFragment: LegacyVideoCellFragment
	linkCellFragment: Unknown
	marginCellFragment: MarginCellFragment
	merchandisingUnitCellFragment: Unknown
	metadataCellFragment: Unknown
	metricCellFragment: MetricCellFragment
	moderatorActionCellFragment: ModeratorActionCellFragment
	newsMetadataCellFragment: NewsMetadataCellFragment
	newsProfileMetadataCellFragment: NewsProfileMetadataCellFragment
	pinnedPostsHeaderCellFragment: PinnedPostsHeaderCellFragment
	pinnedPostsTitleCellFragment: PinnedPostsTitleCellFragment
	pinnedPostsTitleWithThumbnailCellFragment: PinnedPostsTitleWithThumbnailCellFragment
	previewTextCellFragment: PreviewTextCellFragment
	richtextRecommendationContextCellFragment: RichtextRecommendationContextCellFragment
	sortCellFragment: SortCellFragment
	titleCellFragment: TitleCellFragment
	titleWithThumbnailCollapsedCellFragment: TitleWithThumbnailCollapsedCellFragment
	titleWithThumbnailCellFragment: TitleWithThumbnailCellFragment
	trendingCarouselCellFragment: TrendingCarouselCellFragment
	youtubeCellFragment: YoutubeCellFragment
}
type Flair {
	type: String
	text: String
	textColor: FlairTextColor
	richtext: Unknown
	template: Template
}
type Parent {
	id: String
}
type MatureContentFilterSettings {
	isEnabled: TemporaryEventConfigBoolean
	sexualCommentContentType: TemporaryEventMatureContentFilterSettingsContentType
	sexualPostContentType: TemporaryEventMatureContentFilterSettingsContentType
	violentCommentContentType: TemporaryEventMatureContentFilterSettingsContentType
	violentPostContentType: TemporaryEventMatureContentFilterSettingsContentType
}
type Subreddit {
	__typename: String
	subredditFragment: SubredditFragment
}
type Xlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type ExplainerFooterFragment {
	footerID: String
	primarySection: PrimarySection
	secondarySection: SecondarySection
	tertiarySection: TertiarySection
}
type Text {
	markdown: String
	preview: String
	html: String
}
type Icon64 {
}
type OnOnboardingPracticeFeedRecommendationContext {
	interestTopicNode: InterestTopicNode1
}
type ViewCountTotals1 {
	totalCount: Int
}
type AuthorInfo {
	__typename: String
	postSetAuthorInfo: PostSetAuthorInfo
}
type PromotedUserPost {
	__typename: String
	onSubredditPost: OnSubredditPost
	postContentFragment: Unknown
}
type PostInfo {
	__typename: String
	linearCardPost: LinearCardPost
}
type ChatRecommendation {
	channel: Channel
}
type CommentTreeFragment {
	childCount: Int
	depth: Int
	parentId: String
	node: Node
}
type PreRenderImage {
}
type OnCommentModerationInfo {
	isAutoCollapsedFromCrowdControl: Boolean
}
type UserReportsFragment {
	userReports: [Unknown]
}
type SubredditInfo {
	name: String
}
type Body {
	markdown: String
	richtext: Unknown
}
type ListPresentation {
	items: [Unknown]
}
type CreatedBy {
	id: String
	displayName: String
}
type Subreddit {
	name: String
	id: String
	prefixedName: String
	publicDescriptionText: String
	title: String
	subscribersCount: Boolean
	styles: Unknown
	taxonomy: Taxonomy
}
type OnBanEvasionTriggerDetails {
	confidence: BanEvasionConfidence
	recencyExplanation: RecencyExplanation
	confidenceExplanation: ConfidenceExplanation
}
type TranslatedPostImageFragment {
	media: Media
}
type OnPost {
	__typename: String
	gallery: Gallery
	media: Media1
	thumbnailV2: ThumbnailV2
	carouselComponentSubredditInfoFragment: CarouselComponentSubredditInfoFragment
}
type PostInfo3 {
	__typename: String
	postFragment: PostFragment
}
type ViewCountTotals {
	totalCount: Int
}
type Dimensions {
}
type OnSubredditPost {
	rootComments: RootComments
}
type AudioRoom {
	roomId: String
}
type Styles {
	legacyIcon: LegacyIcon
}
type SubredditDataDetailsFragment {
	id: String
	name: String
	prefixedName: String
	styles: Unknown
	title: String
	description: Description
	publicDescriptionText: String
	subscribersCount: Unknown
	createdAt: Unknown
	type: SubredditType
	path: String
	isNsfw: Boolean
	wikiEditMode: WikiEditMode
	whitelistStatus: WhitelistStatus
	isPostingRestricted: Boolean
	isQuarantined: Boolean
	quarantineMessage: QuarantineMessage
	interstitialWarningMessage: InterstitialWarningMessage
	allowedPostTypes: [Unknown]
	isSpoilerAvailable: Boolean
	isUserBanned: Boolean
	isContributor: Boolean
	modPermissions: ModPermissions
	isSubscribed: Boolean
	isFavorite: Boolean
	notificationLevel: SubredditNotificationLevel
	authorFlairSettings: AuthorFlairSettings
	authorFlair: AuthorFlair
	postFlairSettings: PostFlairSettings
	originalContentCategories: [Unknown]
	isTitleSafe: Boolean
	isMediaInCommentsSettingShown: Boolean
	allowedMediaInComments: [Unknown]
	isMuted: Boolean
	isChannelsEnabled: Boolean
	isCrosspostingAllowed: Boolean
	devPlatformInstalledApps: [Unknown]
	detectedLanguage: String
	welcomePage: WelcomePage
	communityStatus: CommunityStatus
	communityGold: CommunityGold
}
type Breakdown4 {
	metric: String
}
type OnAutomationInformOutcome {
	__typename: String
	automation: Automation1
	contentMessages: [Unknown]
}
type Profile {
	isNsfw: Boolean
}
type AvatarOutfit {
	id: String
	preRenderImage: PreRenderImage
	backgroundImage: BackgroundImage
}
type Preview {
	__typename: String
	cellMediaSourceFragment: Unknown
}
type AppStoreData {
	appName: String
	appIcon: String
	category: String
	downloadCount: String
	appRating: String
}
type RedditorInfo {
	__typename: String
	onRedditor: OnRedditor
}
type SimplifiedSubreddit {
	id: String
	name: String
	subscribersCount: String
	taxonomy: Taxonomy
	styles: Unknown
}
type Flair {
	__typename: String
	postFlairFragment: PostFlairFragment
}
type Post {
	__typename: String
	onPost: OnPost
}
type CrosspostRoot {
	type: CrosspostType
	post: Post
}
type Medium {
	__typename: String
	mediaSourceFragment: Unknown
}
type AdEvent1 {
	__typename: String
	adEventFragment: AdEventFragment
}
type PriceUpperBound {
	__typename: String
	gqlStorefrontPriceInfo: GqlStorefrontPriceInfo
}
type Media {
	__typename: String
	onImageAsset: Unknown
}
type Icon {
}
type Karma {
}
type Option {
	id: String
	text: String
	secondaryText: String
	isSelected: Boolean
}
type AwardFragment {
	id: String
	name: String
	static_icon_16: Static_icon_16
	static_icon_24: Static_icon_24
	static_icon_32: Static_icon_32
	static_icon_48: Static_icon_48
	static_icon_64: Static_icon_64
}
type CommentReports {
	metric: Unknown
	delta: Unknown
}
type PeriodList {
	id: String
	name: String
	isActive: Boolean
}
type Image {
}
type Profile {
	id: String
	name: String
}
type Xxxlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type ModmailActionFragment {
	id: String
	actionType: ModmailConversationActionTypeV2
	createdAt: Unknown
	authorInfo: AuthorInfo
}
type SubredditKarma {
}
type Media {
	still: Still
}
type Listings {
	__typename: String
	gqlStorefrontListings: GqlStorefrontListings
}
type AmaCarouselFragment {
	id: String
	posts: [Unknown]
}
type Telemetry {
	__typename: String
	searchElementTelemetryFragment: SearchElementTelemetryFragment
}
type Payload {
	__typename: String
	adPayloadFragment: AdPayloadFragment
}
type Breakdown3 {
	metric: String
}
type Resources {
	isEnabled: Boolean
	resources: [Unknown]
}
type CommentsRemoved {
	metric: Unknown
	delta: Unknown
}
type CuratedPosts {
	isEnabled: Boolean
	posts: [Unknown]
}
type Media {
	__typename: String
	mediaFragment: MediaFragment
}
type OnSubredditPost {
	subreddit: Subreddit
}
type Styles {
}
type Search {
	sort: String
	range: String
}
type SubredditDetailFragment {
	__typename: String
	crosspostRoot: CrosspostRoot
	onSubredditPost: OnSubredditPost1
	onProfilePost: OnProfilePost1
	onAdPost: OnAdPost1
}
type FreeNftClaimDropFragment {
	id: String
	name: String
	description: String
	images: [Unknown]
}
type Dimensions {
}
type OnSubreddit {
	__typename: String
	subredditData: SubredditData
}
type Search {
	originElement: String
	range: String
	sort: String
}
type PackagedMediaFragment {
	muxedMp4s: MuxedMp4s
	authInfo: AuthInfo
}
type Reward {
	__typename: String
	onAchievementUnavailableReward: OnAchievementUnavailableReward
	onAchievementUnavailableCollectibleReward: OnAchievementUnavailableCollectibleReward
	onAchievementClaimableCollectibleReward: OnAchievementClaimableCollectibleReward
	onAchievementClaimedCollectibleReward: OnAchievementClaimedCollectibleReward
}
type AvatarUtility {
	type: Type
}
type Icon_192 {
	__typename: String
	mediaSourceFragment: Unknown
}
type Node {
	endsAt: Unknown
}
type ProxyAuthor {
	id: String
	displayName: String
}
type Video {
	url: String
	dimensions: Dimensions
}
type AuthorInfo {
	__typename: String
	modmailRedditorInfoFragment: ModmailRedditorInfoFragment
}
type AdEvent {
	type: AdEventType
	url: String
	encryptedTrackingId: String
}
type SubredditImage {
	__typename: String
	cellMediaSourceFragment: Unknown
}
type PostsRemovedByAdminApprovedByMod {
	metric: Unknown
	delta: Unknown
}
type TrendingCarouselCellItemFragment {
	title: String
	query: String
	image: Image
	adPostId: String
	payload: Payload
}
type Image3 {
}
type ModPermissions {
	isAllAllowed: Boolean
	isAccessEnabled: Boolean
	isConfigEditingAllowed: Boolean
	isFlairEditingAllowed: Boolean
	isMailEditingAllowed: Boolean
	isPostEditingAllowed: Boolean
	isWikiEditingAllowed: Boolean
	isChatConfigEditingAllowed: Boolean
	isChatOperator: Boolean
	isChannelsEditingAllowed: Boolean
	isCommunityChatEditingAllowed: Boolean
}
type OnModerationInfo {
	proxyAuthor: ProxyAuthor
}
type TypeaheadSubredditForMuteFragment {
	id: String
	name: String
	prefixedName: String
	isMuted: Boolean
	styles: Unknown
}
type Source {
	__typename: String
	mediaSourceFragment: Unknown
}
type Small {
	__typename: String
	mediaSourceFragment: Unknown
}
type IconSource {
	__typename: String
	cellMediaSourceFragment: Unknown
}
type SearchModifierFragment {
	__typename: String
	searchDropdownModifier: SearchDropdownModifier
	searchNavigationListModifierFragment: SearchNavigationListModifierFragment
}
type Still {
	__typename: String
	translatedStillMediaFragment: TranslatedStillMediaFragment
}
type Color {
	__typename: String
	colorFragment: ColorFragment
}
type Color {
	__typename: String
	onNativeCellColor: OnNativeCellColor
	onCustomCellColor: OnCustomCellColor
}
type AuthInfo {
	__typename: String
	mediaAuthInfoFragment: MediaAuthInfoFragment
}
type OnModActionNoteComment {
	actionType: ModActionType
	banDays: Int
	isPermanentBan: Boolean
	banReason: String
	description: String
	commentInfo: CommentInfo1
}
type OnAchievementClaimableCollectibleReward {
	title: String
	message: String
	image: Image2
	footer: String
	claimInfo: ClaimInfo
}
type OnSubreddit {
	name: String
	id: String
	prefixedName: String
	publicDescriptionText: String
	title: String
	subscribersCount: Boolean
	styles: Unknown
	taxonomy: Taxonomy
}
type AchievementRewardFragment {
	reward: Reward
}
type OnSubreddit1 {
	name: String
	prefixedName: String
}
type PostSetFragment {
	id: String
	defaultPost: DefaultPost
	posts: Posts
}
type QuarantineMessage {
	markdown: String
	richtext: Unknown
	html: String
	typeHint: ContentType
}
type Flair {
	text: String
	template: Template
}
type PinnedPostsTitleCellFragment {
	id: String
	post: Post
}
type Price {
	__typename: String
	gqlStorefrontPriceBounds: GqlStorefrontPriceBounds
}
type Recommended {
}
type AmaStatusCellFragment {
	id: String
	post: Post
}
type GalleryWithLinkFooterCellFragment {
	id: String
	height: [Unknown]
}
type SearchAppliedStateFragment {
	pane: String
	filters: [Unknown]
}
type Description {
	markdown: String
	richtext: Unknown
	preview: String
}
type Filter {
	key: String
	value: Unknown
}
type AnswerableQuestionAnalyticsDataFragment {
	modPermissions: ModPermissions
	id: String
	name: String
	publicDescriptionText: String
	isNsfw: Boolean
	type: SubredditType
	originalContentCategories: [Unknown]
	isQuarantined: Boolean
	whitelistStatus: WhitelistStatus
	isSubscribed: Boolean
	isFavorite: Boolean
	karma: Karma
}
type RecChatChannelsAnalyticsInfoFragment {
	analyticsInfo: AnalyticsInfo
}
type Template {
}
type AuthorFlair {
	template: Unknown
}
type LegacyIcon {
}
type Subreddit1 {
	prefixedName: String
	styles: Unknown
}
type AdPromotedUserPostCellItemFragment {
	postId: String
	title: String
	upvotesText: String
	upvotesCount: Int
	commentsText: String
	commentsCount: Int
	postImage: PostImage
}
type Post {
	id: String
	title: String
	createdAt: Unknown
	editedAt: Unknown
}
type FormatData {
	id: String
	leadGenerationInformation: Unknown
}
type GqlUtilityTypeFragment {
	id: String
	title: String
	icon: Unknown
}
type Topic {
	id: String
	displayName: String
}
type AwardingByCurrentUser {
	id: String
}
type Node {
	__typename: String
	id: String
	theaterPostCardFragment: TheaterPostCardFragment
	linearPostCardFragment: LinearPostCardFragment
}
type Collaborator {
	redditor: Redditor
}
type Dimensions {
}
type SubredditPickerInfo {
	id: String
	name: String
	title: String
	type: SubredditType
	prefixedName: String
	subscribersCount: Unknown
	isSubscribed: Boolean
	isFavorite: Boolean
	isNsfw: Boolean
	isTitleSafe: Boolean
	isQuarantined: Boolean
	isUserBanned: Boolean
	isThumbnailsEnabled: Boolean
	allowedPostTypes: [Unknown]
	publicDescriptionText: String
	styles: Unknown
	modPermissions: ModPermissions
	submitText: String
	rules: [Unknown]
	isContributor: Boolean
	isPostingRestricted: Boolean
}
type OnSearchFilterOptionListPresentation {
	id: String
	title: String
	buttonText: String
	options: [Unknown]
}
type AnalyticsInfo {
	recommendationAlgorithm: String
}
type PageInfoFragment {
	hasNextPage: Boolean
	endCursor: String
}
type Dimensions {
}
type Subreddit {
	id: String
	name: String
}
type PrimarySection {
	__typename: String
	econEducationalUnitSectionsFragment: EconEducationalUnitSectionsFragment
}
type BanEvasionCommentsFiltered {
	metric: Unknown
	delta: Unknown
	breakdown: [Unknown]
}
type Content2 {
	html: String
	markdown: String
}
type Dimensions {
	__typename: String
	mediaDimensions: MediaDimensions
}
type SubredditCommunityLeaderboardFragment {
	communityLeaderboard: CommunityLeaderboard
}
type ThumbnailV2 {
	attribution: String
	isObfuscatedDefault: Boolean
	obfuscatedImage: ObfuscatedImage
	image: Image
}
type CommunityRecommendation {
	recommendationSource: String
	subreddit: Subreddit
}
type OnSnackCommentNode {
	childCount: Comment
}
type LegacyIcon {
}
type OnAutomationStringCondition {
	features: [Unknown]
	values: [Unknown]
}
type AssociatedAward {
	__typename: String
	awardFragment: AwardFragment
}
type Subreddit {
	__typename: String
	chatChannelSubredditInfoFragment: ChatChannelSubredditInfoFragment
}
type MediaAsset {
	__typename: String
	mediaAssetFragment: MediaAssetFragment
}
type AwardingTotalFragment {
	award: Award
}
type Channel {
	id: String
	name: String
	permalink: String
	roomId: String
	subreddit: Subreddit
	activeUsersCount: Int
}
type Xxxlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type ModPermissions {
	isAccessEnabled: Boolean
	isPostEditingAllowed: Boolean
	isAllAllowed: Boolean
	isConfigEditingAllowed: Boolean
}
type OnRedditor {
	icon: Icon
}
type OnLinkCell {
	__typename: String
	linkCellFragment: Unknown
}
type PostInfo {
	id: String
	title: String
}
type Taxonomy {
	taxonomyTopics: [Unknown]
}
type Small {
	__typename: String
	mediaSourceFragment: Unknown
}
type Node {
	__typename: String
	scheduledPostFragment: Unknown
}
type OnRedditor {
	id: String
	name: String
	prefixedName: String
	icon: Icon
	isBlocked: Boolean
}
type Xxlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type Cell {
	__typename: String
	actionCellFragment: Unknown
	metadataCellFragment: Unknown
	legacyVideoCellFragment: LegacyVideoCellFragment
	indicatorsCellFragment: IndicatorsCellFragment
}
type RecurringPosts {
	edges: [Unknown]
}
type AwardingsInfo {
	promos: [Unknown]
}
type OnMerchandisingUnitGallery {
	images: [Unknown]
}
type Automation {
	id: String
	name: String
}
type FirstAuthorInfo {
	__typename: String
	modmailRedditorInfoFragment: ModmailRedditorInfoFragment
}
type SnoovatarIcon {
}
type ActionInfo {
	paneName: String
	position: Int
	type: String
	reason: String
}
type Post {
	__typename: String
	onSubredditPost: OnSubredditPost
	onProfilePost: OnProfilePost
	onAdPost: OnAdPost
}
type ModmailSubredditInfoFragment {
	__typename: String
	id: String
	name: String
	onSubreddit: OnSubreddit
}
type Media {
	__typename: String
	onCompetitorMedia: OnCompetitorMedia
}
type RecommendationContext {
	__typename: String
	typeIdentifier: String
	onInterestTopicRecommendationContext: OnInterestTopicRecommendationContext
	onSimilarSubredditRecommendationContext: OnSimilarSubredditRecommendationContext
	onTimeOnSubredditRecommendationContext: OnTimeOnSubredditRecommendationContext
	onOnboardingPracticeFeedRecommendationContext: OnOnboardingPracticeFeedRecommendationContext
	onInactiveCommunityDiscoveryRecommendationContext: OnInactiveCommunityDiscoveryRecommendationContext
	onFunnyRecommendationContext: OnFunnyRecommendationContext
}
type InterstitialWarningMessage {
	markdown: String
	richtext: Unknown
}
type Option {
	__typename: String
	postPollOptionFragment: PostPollOptionFragment
}
type IdCardWidgetFragment {
	id: String
	shortName: String
	currentlyViewingText: String
	subscribersText: String
}
type OnDeletedSubredditPost {
	subreddit: Subreddit1
}
type Large {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnRedditor {
	prefixedName: String
}
type Content {
	preview: String
	html: String
}
type SubredditConnections {
	edges: [Unknown]
}
type OnDeletedComment {
	id: String
	postInfo: PostInfo4
}
type Profile {
	isNsfw: Boolean
}
type Mp4_small {
	__typename: String
	mediaSourceFragment: Unknown
}
type Obfuscated {
	content: Content2
}
type TypeaheadProfileFragment {
	id: String
	createdAt: Unknown
	redditorInfo: RedditorInfo
	isSubscribed: Boolean
	isNsfw: Boolean
	styles: Unknown
}
type Subreddit1 {
	id: String
	name: String
	prefixedName: String
	allowedMediaInComments: [Unknown]
	isQuarantined: Boolean
	tippingStatus: TippingStatus1
	styles: Unknown
}
type PostInfo {
	__typename: String
	theaterCardPost: TheaterCardPost
}
type OnContentRatingSurveyBranchAnswer {
	subQuestions: [Unknown]
}
type OnModUserNote {
	label: ModUserNoteLabel
	note: String
}
type ThumbnailV2 {
	__typename: String
	highlightedPostThumbnailFragment: HighlightedPostThumbnailFragment
}
type OnAdPost {
	profile: Profile
}
type TippingStatus {
	isEnabled: Boolean
}
type ShareAllCountTotals {
	totalCount: Int
	availability: Availability
}
type AdUserTargeting {
	__typename: String
	adUserTargetingFragment: AdUserTargetingFragment
}
type CrosspostCell {
	__typename: String
	onCrossPostCell: OnCrossPostCell
}
type OnModUserNote {
	label: ModUserNoteLabel
}
type Gallery {
	items: [Unknown]
}
type OnRedditor {
	name: String
	prefixedName: String
	icon: Icon
	snoovatarIcon: SnoovatarIcon
	profile: Profile
}
type Cell {
	__typename: String
	actionCellFragment: Unknown
	galleryCellFragment: GalleryCellFragment
	imageCellFragment: ImageCellFragment
	indicatorsCellFragment: IndicatorsCellFragment
	legacyVideoCellFragment: LegacyVideoCellFragment
	linkCellFragment: Unknown
	metadataCellFragment: Unknown
	youtubeCellFragment: YoutubeCellFragment
}
type Video {
	__typename: String
	cellMediaSourceFragment: Unknown
}
type ModPermissions {
	isAllAllowed: Boolean
	isAccessEnabled: Boolean
	isConfigEditingAllowed: Boolean
	isFlairEditingAllowed: Boolean
	isMailEditingAllowed: Boolean
	isPostEditingAllowed: Boolean
	isWikiEditingAllowed: Boolean
	isChatConfigEditingAllowed: Boolean
	isChatOperator: Boolean
	isChannelsEditingAllowed: Boolean
	isCommunityChatEditingAllowed: Boolean
}
type Content {
	__typename: String
	markdown: String
	html: String
	preview: String
	richtext: Unknown
	typeHint: ContentType
	translationInfo: TranslationInfo
	richtextMediaFragment: RichtextMediaFragment
}
type Icon {
}
type Icon {
}
type CommunityGold {
	__typename: String
	communityGoldFragment: CommunityGoldFragment
}
type AdLlmPostSuggestionsCellFragment {
	__typename: String
	id: String
	relatedPosts: [Unknown]
	summary: String
}
type LegacyIcon {
	__typename: String
	mediaSourceFragment: Unknown
}
type Description1 {
	markdown: String
	richtext: Unknown
	preview: String
}
type Awarding {
	__typename: String
	awardingByCurrentUser: [Unknown]
	awardingTotalFragment: AwardingTotalFragment
}
type Subreddit {
	__typename: String
	onSubreddit: OnSubreddit
}
type PostRequirements {
	__typename: String
	communityPostRequirements: CommunityPostRequirements
}
type ChatMessage {
	__typename: String
	chatChannelMessageFragment: ChatChannelMessageFragment
}
type OnUnavailableDestination {
	reason: String
}
type Awarding {
	__typename: String
	awardingByCurrentUser: [Unknown]
	awardingTotalFragment: AwardingTotalFragment
}
type TranslationInfo {
	isTranslated: Boolean
	translatedLanguage: String
}
type OnAchievementUnavailableCollectibleReward {
	title: String
	message: String
	image: Image1
	footer: String
}
type Item {
	media: Media
}
type Modifier {
	__typename: String
	searchDropdownModifier: SearchDropdownModifier
	searchNavigationListModifierFragment: SearchNavigationListModifierFragment
}
type PageInfo {
	endCursor: String
	hasNextPage: Boolean
}
type Node {
	__typename: String
	gqlStorefrontArtistWithListings: GqlStorefrontArtistWithListings
}
type Comment {
	__typename: String
	commentTreeFragment: CommentTreeFragment
}
type FullImage {
}
type Edge {
	node: Node
}
type Recipient {
	id: String
	displayName: String
}
type RecommendationContext {
	recommendationSource: ChatChannelRecommendationSource
	seedSubreddit: SeedSubreddit
}
type Breakdown6 {
	metric: String
}
type LegacyVideoCellFragment {
	id: String
	media: Media
	preview: Preview
	isGif: Boolean
	packagedMedia: PackagedMedia
	videoAuthInfo: VideoAuthInfo
	isLiveVideoPostOrCrosspost: Boolean
	isAdPost: Boolean
	isAutoplayAllowed: Boolean
	isVideoButtonExpanded: Boolean
	isOverlayControlHidden: Boolean
	subredditVisualName: String
	videoIdentifier: String
	type: CellVideoType
	callToAction: String
	title: String
	subredditId: String
}
type TaggedTopic {
	name: String
}
type Still {
	content: Unknown
}
type CommentInfo {
	__typename: String
	postInfo: PostInfo1
	commentFragmentWithPost: CommentFragmentWithPost
}
type Post {
	__typename: String
	id: String
	title: String
	createdAt: Unknown
	isNsfw: Boolean
	onSubredditPost: OnSubredditPost
}
type AdBusinessFragment {
	id: String
	name: String
}
type Thumbnail {
	__typename: String
	onCellMedia: OnCellMedia
	onLinkCell: OnLinkCell
}
type OnSubredditPost {
	content: Content1
	thumbnail: Thumbnail
	subreddit: Subreddit
}
type RichtextMedium {
	__typename: String
	mediaAssetFragment: MediaAssetFragment
}
type ReportNextStep {
	__typename: String
	onReportNextStepOpenUrl: OnReportNextStepOpenUrl
	onReportNextStepSubmit: OnReportNextStepSubmit
	onReportNextStepOpenFlow: OnReportNextStepOpenFlow
	onReportNextStepSubredditRules: OnReportNextStepSubredditRules
	onReportNextStepSupportingEvidence: OnReportNextStepSupportingEvidence
}
type OnUnavailableRedditor {
	name: String
}
type LeaderboardRankingPageFragment {
	edges: [Unknown]
	pageInfo: PageInfo
}
type GqlPricePackage {
	id: String
	externalProductId: String
	requiredPaymentProviders: [Unknown]
	currency: Currency
	price: String
	quantity: String
}
type Button {
	text: String
	clickAction: [Unknown]
	clickEvent: ClickEvent
	completionText: String
}
type MediaDimensions {
}
type DirectMessages {
	count: BadgeStyle
}
type Subreddit {
	__typename: String
	recapSubredditFragment: RecapSubredditFragment
}
type PostFlairTemplate {
	__typename: String
	postComposerFlairTemplate: Unknown
}
type OnRedditor {
	profile: Profile
	snoovatarIcon: SnoovatarIcon
}
type DevPlatformInstalledApp {
	name: String
	slug: String
}
type Dimensions {
}
type Profile2 {
	__typename: String
	profileFragment: ProfileFragment
}
type PreviousActionsModActionFragment {
	id: String
	action: ModActionType
	actionCategory: ModActionCategory
	actionNotes: String
	details: String
	moderatorInfo: ModeratorInfo
}
type Dimensions {
}
type CommentForestTreesFragment {
	trees: [Unknown]
}
type IconSmall {
	__typename: String
	mediaSourceFragment: Unknown
}
type Content {
	__typename: String
	subredditRuleContent: SubredditRuleContent
}
type AdEvent {
	__typename: String
	adEventFragment: AdEventFragment
}
type WelcomePageFlagsFragment {
	isEnabled: Boolean
	isEnabledOnJoin: Boolean
}
type AvatarUtility {
	__typename: String
	gqlUtilityFragment: Unknown
}
type OnPostInfo {
	id: String
}
type PostInfo {
	__typename: String
	recapPostFragment: RecapPostFragment
}
type Profile {
	__typename: String
	profileFragment: ProfileFragment
}
type Xlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type PricePackage {
	__typename: String
	gqlPricePackage: GqlPricePackage
}
type Rule {
	name: String
	content: Content
}
type LegacyIcon {
}
type AuthInfo {
	__typename: String
	mediaAuthInfoFragment: MediaAuthInfoFragment
}
type CarouselPostInfoFragment {
	__typename: String
	title: String
	id: String
	createdAt: Unknown
	score: Unknown
	commentCount: Unknown
	onPost: OnPost
}
type TaxonomyTopic1 {
	id: String
	displayName: String
}
type Icon_48 {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnCellGroup {
	__typename: String
	groupId: String
	payload: String
	crosspostCells: [Unknown]
	cellGroupFragment: CellGroupFragment
}
type TheaterCardPost {
	__typename: String
	titleFragment: TitleFragment
}
type RecapCardDataTextFragment {
	text: String
}
type OnRedditorInfo {
	displayName: String
}
type OnRedditor {
	id: String
	name: String
	prefixedName: String
	accountType: AccountType
	iconSmall: IconSmall
	snoovatarIcon: SnoovatarIcon
}
type Mp4_xxlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type DurationFragment {
	amount: DurationUnit
}
type OnModUserNoteComment {
	label: ModUserNoteLabel
}
type BackgroundImage {
}
type TaxonomyTopic {
	__typename: String
	taxonomyTopic: TaxonomyTopic1
	onSubredditTaxonomyRelation: OnSubredditTaxonomyRelation
}
type OnReportNextStepSubmit {
	isSubmit: Boolean
}
type Subreddit {
	id: String
	isNsfw: Boolean
	isQuarantined: Boolean
	name: String
}
type WelcomeMessage {
	body: Body
	buttonCtaText: String
	isEnabled: Boolean
	isRenderedOnJoin: Boolean
}
type TitleCell {
	__typename: String
	titleCellFragment: TitleCellFragment
}
type Subreddit {
	prefixedName: String
}
type TemporaryEventConfigFull {
	id: String
	name: String
	contributionMessage: String
	labels: [Unknown]
	createdBy: CreatedBy
	subredditId: String
	fields: Fields
	status: TemporaryEventConfigStatus
	createdAt: Unknown
	updatedAt: Unknown
}
type Dimensions {
}
type CalendarWidgetFragment {
	id: String
	shortName: String
	isTimeShown: Boolean
	isDescriptionShown: Boolean
	isTitleShown: Boolean
	isDateShown: Boolean
	events: [Unknown]
}
type PromotedPost {
	__typename: String
	adPromotedUserPostCellItemFragment: AdPromotedUserPostCellItemFragment
}
type LinearCardPost {
	__typename: String
	titleFragment: TitleFragment
	snapPostContentFragment: SnapPostContentFragment
	linearPostCardComments: LinearPostCardComments
}
type AnalyticsInfo {
	recommendationAlgorithm: String
}
type AuthorInfo {
	__typename: String
	highlightedPostAuthorInfoFragment: HighlightedPostAuthorInfoFragment
}
type TitleCell {
	__typename: String
	titleCellFragment: TitleCellFragment
}
type CrosspostCellFragment {
	id: String
}
type Medium {
	__typename: String
	mediaSourceFragment: Unknown
}
type CallToActionCell {
	__typename: String
	callToActionCellFragment: Unknown
}
type ObfuscatedImage {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnAchievementUnavailableReward {
	title: String
	message: String
	image: Image
}
type Subreddit {
	__typename: String
	subredditFragment: SubredditFragment
}
type ErrorInputArg {
	variableName: String
	value: String
}
type LegacyIcon {
}
type ThumbnailV2 {
	image: Image
}
type Availability2 {
	__typename: String
	creatorStatsAvailabilityFragment: CreatorStatsAvailabilityFragment
}
type OnAchievementBadge {
	image: Image
	label: String
	accessibilityLabel: String
}
type AuthorInfo {
	__typename: String
	authorInfo: AuthorInfo
}
type AuthorFlair {
	__typename: String
	authorFlairFragment: AuthorFlairFragment
}
type Profile {
	__typename: String
	profileFragment: ProfileFragment
}
type PostsRemovedByAdminAndMods {
	metric: Unknown
	delta: Unknown
}
type More {
	count: Int
	cursor: String
	isTooDeepForCount: Boolean
}
type Utility {
	__typename: String
	gqlStorefrontUtilityType: GqlStorefrontUtilityType
}
type Destination {
	__typename: String
	onTopicDestination: OnTopicDestination
	onUnavailableDestination: OnUnavailableDestination
	onSubredditListDestination: OnSubredditListDestination
}
type SnoovatarIcon {
}
type Breakdown9 {
	metric: String
}
type UsersAvatar {
}
type Item {
	__typename: String
	postGalleryItemFragment: Unknown
}
type Gallery {
	items: [Unknown]
}
type TranslationInfo {
	isTranslated: Boolean
}
type LegacyIcon {
}
type FullImage1 {
}
type AnswerOption {
	__typename: String
	id: String
	answerText: String
	isMutuallyExclusive: Boolean
	onContentRatingSurveyBranchAnswer: OnContentRatingSurveyBranchAnswer
	onContentRatingSurveyLeafAnswer: OnContentRatingSurveyLeafAnswer1
}
type Media {
	__typename: String
	mediaAssetFragment: MediaAssetFragment
}
type OriginalContent {
	__typename: String
	mediaSourceFragment: Unknown
}
type MutedSubredditFragment {
	id: String
	name: String
	styles: Styles
}
type Description3 {
	markdown: String
	richtext: Unknown
	preview: String
}
type Content {
	richtext: Unknown
	preview: String
	markdown: String
}
type SnoovatarIcon {
}
type Icon_72 {
	__typename: String
	mediaSourceFragment: Unknown
}
type Award {
	staticIcon: StaticIcon
}
type PdsBasicPostInfoFragment {
	__typename: String
	id: String
	moderationInfo: ModerationInfo
	title: String
	onSubredditPost: OnSubredditPost
	onProfilePost: OnProfilePost
}
type SearchPersonFragment {
	__typename: String
	prefixedName: String
	isFollowed: Boolean
	isAcceptingFollowers: Boolean
	karma: Karma
	profile: Profile
	searchRedditorFragment: SearchRedditorFragment
}
type Content {
	preview: String
	richtext: Unknown
	markdown: String
}
type Dimensions {
}
type OnModUserNotePost {
	label: ModUserNoteLabel
}
type ModQueueReasonsFragment {
	modQueueReasons: [Unknown]
}
type Post {
	__typename: String
	id: String
	title: String
	onPost: OnPost
	onSubredditPost: OnSubredditPost
}
type YearInReviewSettings {
	isEnabled: Boolean
	isEligible: Boolean
}
type OnReportTextPlain {
	text: String
}
type SecondarySection {
	__typename: String
	econEducationalUnitSectionsFragment: EconEducationalUnitSectionsFragment
}
type AuthorInfo {
	__typename: String
	searchPersonFragment: SearchPersonFragment
}
type SubredditKarmaContributions {
	topKarmaContributions: [Unknown]
}
type Template {
	backgroundColor: String
	id: String
	isEditable: Boolean
	isModOnly: Boolean
	text: String
	textColor: FlairTextColor
	type: String
	richtext: Unknown
}
type RichtextMedium {
	__typename: String
	mediaAsset: MediaAsset
}
type StickyPost {
	__typename: String
	onPostInfo: OnPostInfo
}
type OnModQueueReasonModReport {
	title: String
	description: Description1
	icon: ModQueueReasonIcon
	actor: Actor
}
type Posts {
	__typename: String
	edges: [Unknown]
	postConnectionFragment: PostConnectionFragment
}
type OnSubreddit {
	isNsfw: Boolean
	styles: Unknown
}
type DeletedCommentFragment {
	isInitiallyCollapsed: Boolean
	createdAt: Unknown
	moderationInfo: ModerationInfo
}
type Content {
	richtext: Unknown
	html: String
	typeHint: ContentType
	preview: String
	richtextMedia: [Unknown]
}
type Obfuscated_xxxlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnSubreddit {
	title: String
	subscribersCount: Boolean
	styles: Unknown
	publicDescriptionText: String
	taxonomy: Taxonomy
}
type OnTopicDestination {
	topic: Topic
	schemeName: String
}
type AdUserTargeting {
	interests: [Unknown]
	gender: AccountGenderCategory
	locations: [Unknown]
	targetingCriteria: [Unknown]
}
type Actor {
	__typename: String
	id: String
	displayName: String
	onRedditor: OnRedditor
}
type SnoovatarIcon {
}
type Flair {
	__typename: String
	postFlairFragment: PostFlairFragment
}
type Thumbnail {
	__typename: String
	onCellMedia: OnCellMedia
	onLinkCell: OnLinkCell
}
type Subreddit {
	id: String
	name: String
	prefixedName: String
	allowedMediaInComments: [Unknown]
	isQuarantined: Boolean
	tippingStatus: TippingStatus
	styles: Unknown
}
type PinnedPostsTitleWithThumbnailCellFragment {
	id: String
	post: Post
}
type InventoryItemFragment {
	id: String
	name: String
	tags: [Unknown]
	serialNumber: String
	owner: Owner
	artist: Artist
	benefits: Benefits
	drop: Drop
	nft: Unknown
}
type AuthorFlair {
	type: String
	richtext: Unknown
	text: String
	template: Unknown
}
type ModeratorWidgetFragment {
	id: String
	shortName: String
	moderators: [Unknown]
}
type Preview {
	__typename: String
	cellMediaSourceFragment: Unknown
}
type RedditorInfo1 {
	__typename: String
	modmailRedditorInfoFragment: ModmailRedditorInfoFragment
}
type IndicatorsCell {
	__typename: String
	indicatorsCellFragment: IndicatorsCellFragment
}
type Message {
	richtext: Unknown
	markdown: String
}
type LeaderboardRedditorFragment {
	user: User
	maskedUser: MaskedUser
}
type TitleWithThumbnailCollapsedCellFragment {
	id: String
	titleCell: TitleCell
	thumbnail: Thumbnail
	indicatorsCell: IndicatorsCell
}
type PostComposerCommunityFragment {
	id: String
	type: SubredditType
	name: String
	prefixedName: String
	postFlairTemplates: [Unknown]
	postFlairSettings: PostFlairSettings
	modPermissions: ModPermissions
	postRequirements: PostRequirements
	allowedPostCapabilities: [Unknown]
	allowedPostType: SubredditAllowedPostType
	allAllowedPostTypes: [Unknown]
	isCrosspostDestination: Boolean
	isCrosspostingAllowed: Boolean
	isContributor: Boolean
	isPostingRestricted: Boolean
	isPostGuidanceAvailable: Boolean
	publicDescriptionText: String
	styles: Unknown
	isSpoilerAvailable: Boolean
	detectedLanguage: String
	isUserBanned: Boolean
	postingEligibilityCriteria: PostingEligibilityCriteria
	karma: Karma
	activeCount: Unknown
	subscribersCount: Boolean
	createdAt: Unknown
	isNsfw: Boolean
	communityGold: CommunityGold
}
type OnRedditor {
	isBlocked: Boolean
	icon: Icon
	snoovatarIcon: SnoovatarIcon
}
type AuthorFlairSettings {
	isEnabled: Boolean
	isSelfAssignable: Boolean
}
type Image {
	__typename: String
	cellMediaSourceFragment: Unknown
}
type Item {
	id: String
	name: String
	drop: Drop
	images: [Unknown]
}
type Option {
	__typename: String
	nextStep: NextStep
	reportReasonFields: ReportReasonFields
}
type ReactedFrom {
	id: String
}
type NextStep {
	__typename: String
	reportNextStep: ReportNextStep
}
type ContentFiltered {
	metric: Unknown
	delta: Unknown
	breakdown: [Unknown]
}
type Confidence {
	confidenceLevel: ModQueueReasonConfidenceLevel
	confidenceLevelText: String
}
type ProfileListItemFragment {
	redditorInfo: RedditorInfo
	id: String
	name: String
	styles: Unknown
	isSubscribed: Boolean
	isFavorite: Boolean
	isNsfw: Boolean
}
type TaxonomyTopicsFeedElementFragment {
	title: String
	schemeName: String
	topics: [Unknown]
}
type ConversationCellFragment {
	id: String
	metadataCell: MetadataCell
	titleCell: TitleCell
	comments: [Unknown]
}
type Obfuscated_still {
	__typename: String
	obfuscatedStillMediaFragment: ObfuscatedStillMediaFragment
}
type Media {
	__typename: String
	cellMediaSourceFragment: Unknown
}
type OverriddenFields {
	__typename: String
	temporaryEventFieldsFull: TemporaryEventFieldsFull
}
type ApplicablePlatform {
	platform: Platform
	minimumVersion: String
}
type Color {
	color: String
}
type Expression {
	id: String
	name: String
	assets: [Unknown]
	size: AvatarExpressionSize
	position: AvatarExpressionPosition
	perspective: AvatarExpressionPerspective
}
type MomentsFeatures {
	arenaEntrypoint: MomentsFeatureFlag
}
type Edge {
	node: Unknown
}
type Type {
	__typename: String
	gqlUtilityTypeFragment: GqlUtilityTypeFragment
}
type AppStoreInfo {
	appName: String
	appIcon: String
	category: String
	downloadCount: String
	appRating: String
}
type Image4 {
}
type Gif_xxxlarge {
	__typename: String
	mediaSourceFragment: Unknown
}
type Icon {
}
type ProfileInfo {
	redditorInfo: RedditorInfo1
}
type OnRedditor {
	prefixedName: String
}
type RedditorInfo {
	__typename: String
	onRedditor: OnRedditor
}
type AuthorInfo {
	__typename: String
	id: String
	authorInfoFragment: AuthorInfoFragment
}
type CommunityRecommendation {
	recommendationSource: String
	subreddit: Subreddit
	posts: Posts
}
type OnMediaAsset {
	__typename: String
	onImageAsset: OnImageAsset
}
type LegacyIcon {
}
type Item {
	__typename: String
	postGalleryItemFragment: Unknown
}
type HighlightedPostThumbnailFragment {
	attribution: String
	isObfuscatedDefault: Boolean
	obfuscatedImage: ObfuscatedImage
	image: Image
}
type Automation1 {
	id: String
	name: String
}
type RedditorInfo {
	id: String
}
type OnSubredditPost {
	thumbnailV2: ThumbnailV2
}
type AuthorInfo {
	__typename: String
	authorInfoFragment: AuthorInfoFragment
}
type UnavailableSubredditFragment {
	id: String
	name: String
	createdAt: Unknown
	publicDescriptionText: String
	isQuarantined: Boolean
	forbiddenReason: SubredditForbiddenReason
	banTitle: String
	banMessage: String
	banMessageContent: BanMessageContent
	isEmailRequiredForQuarantineOptin: Boolean
	quarantineMessage: QuarantineMessage
	interstitialWarningMessage: InterstitialWarningMessage
	isContributorRequestsDisabled: Boolean
}
type ListStyleCommunityRecommendationsFragment {
	id: String
	model: String
	title: String
	version: String
	destination: Destination
	communityRecommendations: [Unknown]
}
type Thumbnail {
}
type CrowdControlPostsFiltered {
	metric: Unknown
	delta: Unknown
	breakdown: [Unknown]
}
type Post {
	id: String
	isNsfw: Boolean
	isSpoiler: Boolean
	title: String
}
type Campaign {
	id: String
}
type GqlStorefrontPriceBounds {
	priceLowerBound: PriceLowerBound
	priceUpperBound: PriceUpperBound
}
type LegacyIcon {
}
type LegacyIcon {
	__typename: String
	mediaSourceFragment: Unknown
}
type ContentMessage2 {
	stringFeature: AutomationStringFeature
	rtjsonText: Unknown
}
type FeedSurveyQuestionFragment {
	text: String
	buttons: [Unknown]
	viewEvent: ViewEvent
}
type CrosspostRoot {
	post: Post
}
type StringCondition {
	features: [Unknown]
	values: [Unknown]
}
type Community {
	__typename: String
	type: SubredditType
	onSubreddit: OnSubreddit
}
type RichtextMedium {
	__typename: String
	mediaAssetFragment: MediaAssetFragment
}
type PreviousActionsModerationInfoFragment {
	previousActions: PreviousActions
	modQueueReasons: [Unknown]
	isReportingIgnored: Boolean
}
type Subreddit1 {
	__typename: String
	subredditFragment: SubredditFragment
}
type Dimensions {
}
type SearchElementTelemetryFragment {
	trackingContext: TrackingContext
	events: [Unknown]
}
type Post {
	__typename: String
	crosspostContentFragment: CrosspostContentFragment
}
type MetadataCell {
	__typename: String
	metadataCellFragment: Unknown
}
type Post {
	id: String
}
type TippingStatus {
	isEnabled: Boolean
}
type Still {
	content: Unknown
}
type OnRedditor {
	icon: Icon
	snoovatarIcon: SnoovatarIcon
	profile: Profile
}
type RedditorInfo {
	__typename: String
	onRedditor: OnRedditor
}
type FeedElementEdgeFragment {
	node: Node
}
type LegacyIcon {
}
type Item {
	__typename: String
	cardImage: CardImage
	onSubredditExploreFeaturedItem: OnSubredditExploreFeaturedItem
}
type Media {
	still: Still
	typeHint: MediaType
}
type LinearPostCardFragment {
	id: String
	cells: [Unknown]
	postInfo: PostInfo
}
type Profile {
	isQuarantined: Boolean
}
type IndicatorsCell {
	__typename: String
	indicatorsCellFragment: IndicatorsCellFragment
}
type Icon_32 {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnSubredditListDestination {
	subredditIds: [Unknown]
}
type EmptyContentCellFragment {
	id: String
}
type Description2 {
	markdown: String
	richtext: Unknown
	preview: String
}
type Details {
	__typename: String
	onBanEvasionTriggerDetails: OnBanEvasionTriggerDetails
}
type Medium {
	__typename: String
	mediaSourceFragment: Unknown
}
type Icon_144 {
	__typename: String
	mediaSourceFragment: Unknown
}
type AvatarFragment {
	id: String
	accountId: String
	accessoryIds: [Unknown]
	backgroundInventoryItem: BackgroundInventoryItem
	fullImage: Unknown
	headshotImage: Unknown
	lastRenderAt: Unknown
	lastUpdateAt: Unknown
	styles: [Unknown]
	tags: [Unknown]
}
type FlairCellFragment {
	id: String
	flair: Flair
}
type Medium {
	__typename: String
	mediaSourceFragment: Unknown
}
type Profile {
	id: String
	name: String
}
type SubredditImage {
	__typename: String
	cellMediaSourceFragment: Unknown
}
type CrosspostRoot {
	postInfo: PostInfo
}
type Large {
	__typename: String
	mediaSourceFragment: Unknown
}
type Obfuscated_small {
	__typename: String
	mediaSourceFragment: Unknown
}
type AuthorInfo {
	__typename: String
	onRedditor: OnRedditor
}
type PreviousActionsRedditorInfoFragment {
	__typename: String
	displayName: String
	onRedditor: OnRedditor
}
type OnModQueueReasonFilter {
	title: String
	description: Description3
	icon: ModQueueReasonIcon
	confidence: Confidence
	isSafetyFilter: Boolean
}
type PostInfo {
	__typename: String
	id: String
	title: String
	isNsfw: Boolean
	onSubredditPost: OnSubredditPost
	onProfilePost: OnProfilePost
	onDeletedSubredditPost: OnDeletedSubredditPost
}
type Media {
	__typename: String
	cellMediaSourceFragment: Unknown
}
type MetadataCell {
	__typename: String
	classicMetadataCellFragment: Unknown
}
type AuthorFlairFragment {
	text: String
	richtext: Unknown
	textColor: FlairTextColor
	template: Unknown
}
type Content {
	preview: String
	richtextMedia: [Unknown]
}
type CarouselPost {
	__typename: String
	onCarouselTextPostComponent: OnCarouselTextPostComponent
	onCarouselThumbnailPostComponent: OnCarouselThumbnailPostComponent
}
type Dimensions {
}
type Content2 {
	__typename: String
	mediaSourceFragment: Unknown
}
type OnSubredditPost {
	subreddit: Subreddit
}
type Breakdown2 {
	metric: String
}
type Dimensions {
}
type Subreddit {
	__typename: String
	id: String
	name: String
	onSubreddit: OnSubreddit
}
type PriceLowerBound {
	__typename: String
	gqlStorefrontPriceInfo: GqlStorefrontPriceInfo
}
type OnImageAsset {
	url: Int
	height: Int
}
type Title {
	markdown: String
}
type OnAutomationBlockOutcome {
	__typename: String
	automation: Automation
	contentMessages: [Unknown]
}
type Karma {
}
type Breakdown {
	metric: String
}
type Benefits {
	avatarOutfit: AvatarOutfit
	avatarUtilities: [Unknown]
}
type AuthorFlair1 {
	richtext: Unknown
}
type Dimensions1 {
}
type LauncherIconUiModel {
	id: String
	previewIconRes: String
	isLimitedTime: Boolean
	isLocked: Boolean
}
type ElementDismissedTelemetryEvent {
	referringSubredditId: String
	referringPostId: String
}
type CommunitySubscribeChangedTelemetryEvent {
	referringSubredditId: String
	referringPostId: String
	community: Community
}
type LocaleAwareImageModel {
	url: String
}
type RecommendationChainingHidden {
	linkKindWithId: String
	data: RecommendationChainingData
}
type CommunityClickedTelemetryEvent {
	referringSubredditId: String
	referringPostId: String
	community: Community
}
type ElementUndoDismissTelemetryEvent {
	referringSubredditId: String
	referringPostId: String
}
type OnSubredditClickEvent {
	linkId: String
	uniqueId: String
	promoted: Unknown
	subredditName: String
}
type NotifyUXTSEvent {
	experience: Unknown
	action: Unknown
}
type LeaderboardAward {
	id: String
	name: String
	icon: String
	animatedIcon: String
	flatIcon: String
	goldPrice: String
	isLimited: Boolean
	isCommunityAward: Boolean
	isSubscriberAward: Boolean
	awardFlairType: Unknown
}
type RecommendationChainingUnhidden {
	linkKindWithId: String
	data: RecommendationChainingData
}
type LeaderboardData {
	totalAwardCount: [Unknown]
}
type ElementViewedTelemetryEvent {
	referringSubredditId: String
	referringPostId: String
}
type RecommendationChainingTelemetryEvent {
	trackingEvent: Unknown
}
type LeaderboardAwarder {
	rank: String
	awarderDisplayName: String
	awarderProfileIconUrl: String
	awarderSnoovatarIconUrl: String
	awarderProfileIsNsfw: Boolean
	awarderIsAnonymous: Boolean
}
type GuidesQueryResponse {
	postIds: [Unknown]
	subredditIds: [Unknown]
	suggestedPrompts: [Unknown]
	content: String
	status: Unknown
}
type Loader {
	id: String
	viewId: String
}
type TranslationViewState {
	displayTitle: String
	displayBody: String
	displayImages: Unknown
	analyticsPost: Unknown
}
type Dragging {
}
type CommentUnitState {
	author: String
	comment: String
	commentId: String
	maxLines: Boolean
}
type AvatarViewState {
	name: String
	prefixedName: String
	icon: Unknown
	id: String
}
type VoteViewState {
	voteDirection: Unknown
	voteLabel: String
	accessibilityVoteLabel: String
	count: Unknown
}
type ActionMenuItemUiState {
	iconType: Unknown
	text: String
	onClick: Unknown
}
type ActionMenuViewState {
	isOpen: Boolean
	menuItems: Unknown
}
type CommentViewState {
	label: String
	accessibilityLabel: String
	count: String
}
type FullBleedViewState {
	media: Unknown
	initialPageIndex: Boolean
	commentsState: CommentsState
	videoListener: Unknown
	scrollToPosition: Int
	downloadMediaAfterPermissionGranted: Unknown
	captionsSettingsEnabledByUser: Boolean
	uiPrefetchingEnabled: Unknown
	isHorizontalChainingEnabled: Unknown
	swipeTutorial: SwipeTutorial
	hasShownMedia: Boolean
	lastSharedImageViaAccessibilityActionUrl: String
	isAwardEntryPointEnabled: Boolean
	showAwardEntryPointOnAds: Boolean
	awardSheetVisibilityState: Unknown
	heartbeatAnalyticsEvent: Unknown
}
type CommentsState {
	showOnEnter: Boolean
	hasBeenShown: Boolean
	visibilityState: Unknown
	commentsModal: Unknown
}
type ShareViewState {
	count: Int
	label: String
	accessibilityLabel: String
	shareIconRes: Int
}
type AdsViewState {
	showAdsUi: Boolean
	adsCallToAction: String
}
type AwardViewState {
	count: String
	isAwardedByCurrentUser: Boolean
	isGildable: Boolean
	awardId: String
}
type FullBleedScreenDependencies {
	fbpParams: FullBleedPlayerParams
	fbpDataSourceParams: FullBleedDataSourceParams
	commentParams: CommentsParams
	sourcePage: String
	analyticsPageType: String
}
type ImageGallery {
	postId: String
	viewId: String
	images: Unknown
	selectedImagePosition: Boolean
	isZoomingIn: Boolean
	orientation: Unknown
	chrome: FullBleedChromeState
	eventProperties: EventProperties
	isSaved: Boolean
	isAuthorBlocked: Boolean
	actionMenuViewState: ActionMenuViewState
	isPromoted: Boolean
	awardsCount: Boolean
	postAnalyticsModel: Unknown
	postAnalyticsModelPost: Post
	isTranslatable: Boolean
}
type FullBleedChromeState {
	userViewState: AvatarViewState
	title: String
	bodyText: String
	caption: String
	outboundUrl: String
	isTitleAndBodyTextExpanded: Boolean
	communityViewState: AvatarViewState
	displayCommunity: Boolean
	voteViewState: VoteViewState
	shareViewState: ShareViewState
	commentViewState: CommentViewState
	showModButton: Boolean
	adsViewState: AdsViewState
	isVisible: Boolean
	hideUserInfoAndActionBar: Boolean
	useCloseIcon: Boolean
	isBrandAffiliate: Boolean
	isMoreButtonFixEnabled: Boolean
	awardViewState: AwardViewState
	commentUnitState: CommentUnitState
}
type Video {
	viewId: String
	videoMetadata: VideoMetadata
	id: String
	chrome: FullBleedChromeState
	playbackState: PlaybackState
	isSaved: Boolean
	isAuthorBlocked: Boolean
	actionMenuViewState: ActionMenuViewState
	isPromoted: Boolean
	awardsCount: Boolean
	postAnalyticsModel: Unknown
	postAnalyticsModelPost: Post
	isTranslatable: Boolean
	downloadUrl: String
	thumbnail: String
	redditVideo: Unknown
	referringAdData: ReferringAdData
	referringAdLinkModel: AdsLinkPresentationModel
}
type PlaybackState {
	currentTimeMs: Int
	playing: Boolean
	currentPlaybackProgress: Int
	remainingTimeLabel: String
	isBuffering: Boolean
	isMuted: Boolean
	hasCaptions: Boolean
	isSeeking: Boolean
	progressStateHolder: Unknown
}
type Image {
	url: String
	width: String
	caption: String
	isGif: Boolean
	previewPresentationModel: ImageLinkPreviewPresentationModel
	mediaId: String
}
type GifDetailResponseDataModel {
	data: GifItemDataModel
}
type GifResponseDataModel {
	data: [Unknown]
}
type GifUserDataModel {
	username: String
	displayName: String
	profileUrl: String
}
type GifItemDataModel {
	id: String
	images: Unknown
	user: GifUserDataModel
}
type GifImageDataModel {
	width: String
	height: String
	url: String
	mp4: String
}
type Loaded {
	educationalUnitUiModel: EducationalUnitUiModel
}
type EducationalUnitBottomSheetExplainerScreenDependencies {
	params: EducationalUnitParams
	onCompletionBlock: Unknown
	onDismiss: Unknown
}
type OnPageViewed {
	pageId: String
}
type SimplifiedSubredditDependencies {
	subredditKindWithId: String
	isUserSubscriber: Boolean
	userIsModerator: Boolean
}
type Tap {
}
type CommentActionsBottomSheetScreenDependencies {
	simplifiedSubredditDependencies: SimplifiedSubredditDependencies
	actionCompletedListener: Unknown
	commentBottomSheetMenuListener: Unknown
	modCache: Unknown
	comment: Unknown
	isAdmin: Boolean
	analyticsPageType: String
}
type Content {
	menu: CommentBottomSheetDevPlatMenu
	commentModerationInfo: CommentModerationInfo
	hideBottomSheet: Boolean
}
type CommentModerationInfo {
	approvedCommentItemEnabled: Boolean
	approvedCommentItemTitle: String
	removeCommentItemEnabled: Boolean
	removeSpamItemEnabled: Boolean
	lockCommentItemVisible: Boolean
	unlockCommentItemVisible: Boolean
	stickyCommentItemVisible: Boolean
	distinguishCommentItemVisible: Boolean
	distinguishCommentItemTitle: Boolean
	distinguishAdminCommentItemVisible: Boolean
	distinguishAdminCommentItemTitle: Boolean
	unstickyCommentItemVisible: Boolean
	viewReportsItemVisible: Boolean
	ignoreReportsItemVisible: Boolean
}
type Item {
	id: String
	icon: Unknown
	selected: Boolean
	subtitle: String
	extras: Unknown
}
type CommentBottomSheetDevPlatMenu {
	items: [Unknown]
}
type AwardReportingParameters {
	awardId: String
	subredditId: String
	postId: String
	commentId: String
	origin: Unknown
}
type AwardConfirmScreenDependencies {
	params: AwardConfirmParameters
}
type AwardSelection {
	navigationDirection: Unknown
}
type Leaderboard {
	navigationDirection: Unknown
	params: LeaderboardParameters
}
type AuthorAvatarState {
	userIconUrl: String
	isDefaultIconUrl: Boolean
	snoovatarFullBodyUrl: String
}
type NavigateBack {
	userDismissed: Boolean
	goldPacks: [Unknown]
}
type AwardSuccessParameters {
	animationUrl: String
	postId: String
	commentId: String
	analytics: GoldAnalyticsBaseFields
	awardTarget: AwardTarget
	position: MarketplaceAward
}
type NavigateToLeaderboard {
	params: LeaderboardParameters
}
type NavigateToGoldPurchase {
	params: GoldPurchaseParameters
}
type Loaded {
	uiModel: LeaderboardUiModel
}
type GoldPurchase {
	navigationDirection: GoldPurchaseParameters
}
type BaseBottomSheetScreenDependencies {
	params: AwardsSheetParameters
	bottomSheetNavigationEvent: Unknown
	onDismiss: Unknown
}
type LeaderboardParameters {
	correlationId: String
	postType: String
	subredditId: String
	postId: String
	commentId: String
	type: Unknown
	clearBackStack: Boolean
}
type OnTabSelected {
	tabId: String
}
type AwardSuccessScreenDependencies {
	params: AwardSuccessParameters
	giveAwardListener: Unknown
}
type AwardConfirmParameters {
	award: MarketplaceAward
	communityGoldBalance: Boolean
}
type OnOverflowClicked {
	awardId: String
}
type ErrorCannotAwardScreen {
	navigationDirection: Unknown
}
type OnReportAwardClicked {
	awardId: String
}
type PlayAnimation {
	animationUrl: String
	reduceMotion: Boolean
	hapticFeedback: Boolean
}
type OnFreeAwardInfoIconViewed {
	showPopup: Boolean
	awardId: String
}
type Loading {
	shouldShowBackButton: Boolean
}
type Loaded {
	uiModel: AwardConfirmScreenUiModel
}
type Failure {
	shouldShowBackButton: Boolean
}
type AwardReportingScreenDependencies {
	params: AwardReportingParameters
}
type OnAwardSectionInfoClicked {
}
type NonAnonymous {
	input: String
	expanded: Boolean
}
type LoadedWithSections {
	uiModel: AwardsSheetScreenWithSectionsUiModel
	performanceData: ScreenPerformanceAnalyticsMetrics
}
type CommunityGoldManager {
	formattedCommunityGoldBalance: String
}
type AwardsSheetParameters {
	destination: Unknown
	recipientId: String
	recipientName: String
	subredditId: String
	postId: String
	commentId: String
	analytics: GoldAnalyticsBaseFields
	awardTarget: AwardTarget
	position: Unknown
	errorReason: Unknown
}
type Loaded {
	uiModel: AwardsSheetScreenUiModel
	performanceData: ScreenPerformanceAnalyticsMetrics
}
type OnMessageChanged {
	message: String
}
type AwardsSheetScreenUiModel {
	goldBalance: Unknown
	recipientName: String
	message: Unknown
	selectedAwardIndex: Unknown
	awardListTitleMessage: String
	reduceMotion: Boolean
	isComposePerformanceTrackerEnabled: Boolean
	isCommunityAwardsEnabled: Boolean
	specialAwardUiModel: Unknown
	includeFooterCta: Boolean
	ctaIsLoading: Boolean
}
type OnAwardClicked {
}
type AwardUiModel {
	id: String
	awardName: String
	accessibilityText: String
	goldQuantity: String
	animatedImageUrl: String
	awardBalance: String
	disclaimerText: String
	sectionTitleText: String
	sectionDescriptionText: String
	giveAwardButtonText: String
	reduceMotion: Boolean
	highlight: Boolean
	isLimited: Boolean
	isPromoted: Boolean
	isCommunityAward: Boolean
}
type OnAwardInSectionClicked {
}
type BottomSheetMenuItemUiState {
	iconType: Unknown
	text: String
}
type BottomSheetMenuViewState {
	isOpen: Boolean
	menuItems: Unknown
}
type OnAddMessageVisibilityChanged {
	show: Boolean
}
type OnAnonymousMessageSelectionChanged {
	selected: Boolean
}
type AwardsSheetScreenSectionUiModel {
	sectionIndex: Int
	id: String
	title: String
	style: Unknown
	tooltip: String
	extraAwardSectionInfo: Unknown
	awards: [Unknown]
}
type ZeroState {
	goldBalance: Boolean
}
type LockedState {
	goldBalance: Unknown
	awardsCount: Boolean
}
type TopAwardState {
	goldBalance: String
	viewAllText: String
	awardName: String
	displayTitleInTopBar: Boolean
	awards: Unknown
	awardsCount: Boolean
}
type OnLeaderboardAwardClicked {
	award: LeaderboardAward
}
type Loaded {
	awardsBestowed: [Unknown]
}
type Loaded {
	headerUiModel: Unknown
	reduceMotion: Boolean
}
type RedesignWithAwardsState {
	goldBalance: Boolean
	awards: Unknown
}
type MessageAreaContent {
	inputMessage: String
	anonymousBoxChecked: Boolean
}
type RedesignNoAwardsState {
	goldBalance: Boolean
}
type AwardsSheetScreenWithSectionsUiModel {
	goldBalance: String
	message: Unknown
	selectedSectionIndex: Unknown
	headerSections: [Unknown]
	awardSections: [Unknown]
	footerSections: [Unknown]
	awardListTitleMessage: Unknown
	activeCoachmarkForSectionIndex: Boolean
	isComposePerformanceTrackerEnabled: Boolean
	isCommunityAwardsEnabled: Boolean
	specialAwardUiModel: Unknown
	includeFooterCta: Boolean
	ctaIsLoading: Boolean
	croppedSelectionBackground: Boolean
}
type VideoPageElement {
	mediaId: String
	thumbnailUrl: String
	videoUrl: String
	width: String
	title: String
	fullScreenMode: Boolean
	subredditAvatar: AvatarViewState
	userAvatar: AvatarViewState
	startFromTheBeginning: Boolean
	portraitOrientation: Boolean
	enableVideoComposableEffectFix: Boolean
}
type Anonymous {
	input: String
	expanded: Boolean
}
type RecommendedMediaRequestKey {
	after: String
	videoContext: Unknown
	fbpMediaType: Unknown
	sort: Sort
}
type RecommendedVideosRequestKey {
	after: String
	videoContext: Unknown
	adDistance: String
	adContext: AdContext
	viewMode: Unknown
	sort: Sort
}
type HistoryKey {
	username: String
	sort: Unknown
	after: String
}
type EditLinkRemoteResponse {
	markdown: String
	html: String
	richtext: String
	mediaMetaData: Unknown
}
type LinkEditScreenDependencies {
	view: Unknown
	params: LinkParameters
}
type OnDeepLinkClick {
	url: String
	sectionId: String
}
type SuccessWithSections {
	awardSections: [Unknown]
}
type Success {
	awards: [Unknown]
}
type Success {
	awards: [Unknown]
}
type SuccessWithSections {
	awardSections: [Unknown]
}
type AwardLegacyData {
	awardParams: AwardParams
	awardResponse: AwardResponse
}
type MemoryCache {
	memoryCacheSettings: MemoryCacheSettings
	cacheKeyGenerator: Unknown
}
type Element {
	response: Unknown
}
type DataWithInfo {
	data: Unknown
	source: Unknown
}
type CacheAccessData {
	cacheStartMillis: Int
	cacheEndMillis: Int
	isCacheHit: Boolean
}
type MemoryAndSqlCache {
	sqlCacheSettings: SqlCacheSettings
	memoryCacheSettings: MemoryCacheSettings
	cacheKeyGenerator: Unknown
}
type Element {
	response: Unknown
}
type SqlCacheSettings {
	fileName: String
	clearingPeriodMs: Int
}
type Error {
	throwable: Unknown
}
type CacheAccessData {
	cacheStartMillis: Int
	cacheEndMillis: Int
	isCacheHit: Boolean
}
type SqlCacheStatistics {
	dbFileName: String
	size: Int
}
type DataWithSource {
	data: Unknown
	source: Unknown
	isLast: Boolean
}
type Comments {
	cacheConfig: MemoryCache
	debounceInFlightCalls: Unknown
	deviceTier: Unknown
	userId: Unknown
}
type MemoryCacheSettings {
	memoryCacheSizeBytes: Int
}
type ResultWithSource {
	result: Unknown
	source: Unknown
	isLast: Boolean
}
type WithMemorySqlCache {
	debounceInFlightCalls: Unknown
	deviceTier: Unknown
	cacheConfig: MemoryAndSqlCache
	userId: Unknown
}
type NoCache {
	debounceInFlightCalls: Unknown
	deviceTier: Unknown
	userId: Unknown
}
type CacheAccessData {
	cacheStartMillis: Int
	cacheEndMillis: Int
	isCacheHit: Boolean
}
type Error {
	throwable: Unknown
}
type ShareEventWrapper {
	builder: Unknown
}
type MetaCorrelation {
	id: String
}
type Media {
	mediaId: String
	orientation: String
	duration: Int
	format: String
}
type VideoErrorReport {
	errorCode: String
	mimeType: String
	networkType: String
	expectedError: Boolean
	videoStorageBytes: Int
	videoStorageFilesCount: Int
	imageStorageBytes: Int
	imageStorageFilesCount: Int
	preferencesBytes: Int
	databaseBytes: Int
}
type FileDownloadPayload {
	bitrate: Int
	domainName: String
	bytesLoaded: Int
	format: String
}
type GalleryInfo {
	position: Int
}
type CommentsMetrics {
	totalCommentsInPage: Boolean
	areAllCommentsUntranslated: Boolean
	translatableIds: Unknown
	translatedIds: Unknown
	untranslatedIds: Unknown
}
type TranslatedGalleryItem {
	id: String
	mediaId: String
	resolutions: [Unknown]
}
type Comment {
	kindWithId: String
	linkKindWithId: String
	parentId: String
	bodyText: String
	type: Unknown
	score: Int
	numberGildings: Int
	createdTimestamp: Int
	contentType: String
	depth: Int
}
type CommentSuggestion {
	selectedFeedbackOptions: [Unknown]
	comment: String
	translation: String
	translationState: Unknown
	commentText: String
}
type CannedOptions {
	selectedFeedbackOptions: [Unknown]
	comment: String
	translation: String
	suggestionEnabled: Boolean
}
type OriginalPost {
	id: String
	title: String
	html: String
	richtext: String
	preview: String
	markdown: String
	thumbnail: String
	imagePreview: Unknown
	gallery: Unknown
}
type LanguagePickerViewState {
	languages: Unknown
	selectedLanguage: String
	languageDownloadInProgress: Boolean
}
type OnLanguageSelected {
	language: String
	languageTag: String
}
type LanguagePickerScreenDependencies {
	languagePickerTarget: Unknown
}
type TranslationSettingsScreenDependencies {
	languagePickerTarget: Unknown
	pageType: Unknown
}
type OnTranslationsSwitchToggled {
	translationsActive: Boolean
}
type StringTranslationRequest {
	string: String
	targetLanguage: String
}
type PostTranslationState {
	kindWithId: String
	translationEnabled: Boolean
}
type TranslationRequest {
	id: String
	targetLanguage: String
}
type OnSelectLanguage {
	language: String
}
type TranslationSettingsViewState {
	translationsActive: Boolean
	language: String
}
type PostMetrics {
	totalPostsRequested: Boolean
	areAllPostsTitlesUntranslated: Boolean
	areAllPostsBodiesTranslated: Boolean
	areAllPostsBodiesUntranslated: Boolean
	translatableIds: Unknown
	translatedIds: Unknown
	untranslatedIds: Unknown
}
type PostSuggestion {
	selectedFeedbackOptions: [Unknown]
	comment: String
	translation: String
	authorName: String
	authorSnoovatarUrl: String
	createdAt: String
	title: String
}
type Post {
	postId: String
	title: String
	languageCode: String
	isNsfw: Boolean
	domain: String
	createdAt: Int
	url: String
	authorId: String
	subredditId: String
	subredditName: String
	postType: String
}
type TranslationSettings {
	areFullAppTranslationsEnabled: Boolean
}
type OnLanguageSelected {
	language: String
}
type MtxDdgWizardViewState {
	language: String
	username: String
	appVersion: String
	immersiveTranslationsEnabled: Boolean
	indicatorsOverflowEnabled: Boolean
	pdpCorestackEnabled: Boolean
	fctInitiatedEnabled: Boolean
	hasChanges: Boolean
}
type MtxDdgWizardScreenDependencies {
	languagePickerTarget: Unknown
}
type Subreddit {
	kindWithId: String
	name: String
	nsfw: Boolean
	publicDescription: String
}
type TranslatedLink {
	id: String
	languageTag: String
	title: String
	bodyPreview: String
	bodyRichText: String
	bodyHtml: String
	sourceTitle: String
	translatedImageSource: Unknown
	translatedImageResolutions: [Unknown]
	translatedImageGallery: [Unknown]
	markdown: String
}
type Params {
	originPageType: String
	deepLink: String
}
type MtSeo {
	targetLanguage: String
}
type TranslationAction {
	label: String
	request: Unknown
}
type OnTranslationChanged {
	suggestion: String
}
type OnRatingOptionSelected {
	rating: Unknown
}
type OnSurveyClick {
	reason: Unknown
}
type TranslationGeneralFeedbackViewState {
	selectedFeedbackOption: Unknown
	comment: String
}
type OnExperienceOptionSelected {
	experience: Unknown
}
type OnSurveyClick {
	reason: Unknown
}
type TranslationGeneralFeedbackScreenDependencies {
	pageType: Unknown
}
type RatePreTranslationDependencies {
	linkId: String
	pageType: Unknown
}
type RatePreTranslationViewState {
	selectedRatingOption: Unknown
	turnOffTranslationsState: Unknown
}
type OnCommentChanged {
	comment: String
}
type TranslationFeedbackDependencies {
	commentModel: Unknown
	linkModel: Unknown
	pageType: Unknown
}
type OnCommentChanged {
	comment: String
}
type AuthIncognitoScreenDependencies {
	view: Unknown
	params: Params
}
type RateTranslationDependencies {
	linkId: String
	pageType: Unknown
}
type PostSpotlightHeaderData {
	userName: String
	createdAt: String
	icon: String
	snoovatar: String
}
type SinglePostMetrics {
	id: String
	hasBody: Boolean
	postType: String
	titleState: Unknown
	bodyState: Unknown
	isTranslatable: Boolean
}
type BottomNavScreenDependencies {
	view: Unknown
	params: Unknown
	getCurrentScreen: Unknown
}
type ComposeBottomNavScreenDependencies {
	view: Unknown
	params: Unknown
	getCurrentScreen: Unknown
}
type PostTranslationConfirmationScreenDependencies {
	postTranslationConfirmationTarget: Unknown
}
type PostTranslationConfirmationViewState {
	doNotAskAgain: Boolean
}
type DoNotAskAgainCheckedChange {
	checked: Boolean
}
type CommentTranslationConfirmationViewState {
	doNotAskAgain: Boolean
}
type Params {
	originPageType: String
	deepLink: String
}
type DoNotAskAgainCheckedChange {
	checked: Boolean
}
type CommentTranslationConfirmationScreenDependencies {
	commentTranslationConfirmationTarget: Unknown
}
type AuthLoadingScreenDependencies {
	view: Unknown
	ssoAuthResultHandler: Unknown
	params: Params
}
type Params {
	originPageType: String
	fromExitTrigger: Boolean
	deepLinkAfterLeave: String
}
type LeaveIncognitoModeScreenDependencies {
	view: Unknown
	params: Params
}
type EmailCollectionPopupScreenDependencies {
	getActivityRouter: Unknown
	view: Unknown
	mode: Unknown
	androidIntentSender: Unknown
}
type EmailCollectionAddEmailScreenDependencies {
	view: Unknown
	mode: Unknown
	updateExistingEmail: Boolean
}
type Params {
	asyncLink: Unknown
	navigationSource: Unknown
}
type EmailCollectionConfirmationScreenDependencies {
	view: Unknown
	mode: Unknown
	params: Params
}
type Params {
	isSso: Boolean
	emailStatus: Unknown
}
type Result {
	enabled: Boolean
	username: String
	mode: Unknown
}
type Static {
	isVisible: Unknown
}
type EntrypointContext {
	activityContext: Unknown
}
type Dynamic {
	isVisible: Unknown
	exposeExperiment: Unknown
}
type EntrypointsWithVisibility {
	sortedEntrypoints: [Unknown]
	entrypointsWithVisibilityCheck: [Unknown]
	map: Unknown
}
type FbpActivityVideoParams {
	correlation: VideoCorrelation
	linkId: String
	isFromColdDeeplink: Boolean
	commentsState: Unknown
	commentsExtras: Unknown
	mediaContext: Unknown
	mediaDataSourceParams: Params
	videoNavigationSession: Unknown
	entryPointType: Unknown
	screenReferrer: Unknown
	uniqueId: String
	promoted: Boolean
	adDistance: String
	isFromCrossPost: Boolean
}
type FbpActivityImageParams {
	correlation: String
	linkId: String
	isFromColdDeeplink: Boolean
	commentsState: Unknown
	commentsExtras: Unknown
	mediaContext: Unknown
	mediaDataSourceParams: Params
	videoNavigationSession: Unknown
	entryPointType: Unknown
	screenReferrer: Unknown
	uniqueId: String
	promoted: Boolean
	onboardingCategoriesOverride: [Unknown]
	selectedImagePosition: [Unknown]
}
type GuidesPost {
	id: String
	title: String
	subredditName: String
	mediaUrl: String
	upvoteRatio: String
	commentCount: String
}
type Params {
	cacheKey: String
	sortType: Unknown
	sortTimeFrame: Unknown
}
type PopulatedDataSet {
	posts: [Unknown]
	entryPost: Unknown
}
type MediaPageSuccess {
	posts: Unknown
	hasMore: Boolean
}
type BodyEditCacheEntry {
	body: String
	bodyHtml: String
	textColor: String
	backgroundColor: String
	richTextItems: [Unknown]
}
type HorizontalChainingTutorial {
	assetName: String
	introductionLabel: String
	introductionLabelA11y: String
	message: String
	buttonLabel: String
}
type OpenOverflow {
	mediaPage: Unknown
}
type HidePost {
	mediaPage: Unknown
}
type OnBack {
	analyticsModel: Model
	postAnalyticsModel: Unknown
	isSwipeToClose: Boolean
}
type DownVote {
	linkId: String
	analyticsModel: Model
}
type ToggleCaptions {
	mediaPage: Unknown
}
type StartedScrubbing {
	id: String
}
type OnAwardGiven {
	awardImageUrl: String
}
type RequestPermissions {
	mediaPage: Unknown
}
type OnClickOutboundUrl {
	outboundUrl: String
}
type OnAdVisibilityChange {
	linkId: String
}
type OnClickShowOriginalMenuOption {
	mediaPage: Unknown
}
type FinishedScrubbing {
	id: String
}
type OnClickShare {
	linkId: String
	analyticsModel: Model
}
type OnZoomIn {
	zoomOrigin: Unknown
}
type OnShowComments {
	linkId: String
	commentsSplitViewHeight: Boolean
	analyticsModel: Model
	commentsLaunchSource: Unknown
	shouldExitFbpOnBack: Boolean
}
type OnVideoListenerRegisteredFor {
	id: String
}
type Block {
	mediaPage: Unknown
}
type Unblock {
	mediaPage: Unknown
}
type OnDismissCommentUnit {
	postAnalyticsModel: Unknown
	commentId: String
}
type UpVote {
	linkId: String
	analyticsModel: Model
}
type ToggleSubscribePost {
	mediaPage: Unknown
}
type OnClickCommentUnit {
	linkId: String
	commentsSplitViewHeight: Model
	postAnalyticsModel: Unknown
	commentId: String
}
type GiveAward {
	mediaPage: Unknown
}
type OnVideoListenerUnregisteredFor {
	id: String
}
type OnClickMod {
	linkId: String
}
type ToggleSavePost {
	mediaPage: Unknown
}
type OnCommentUnitShown {
	postAnalyticsModel: Unknown
	commentId: String
}
type Save {
	mediaPage: Unknown
	getScreen: Unknown
}
type OnShareImageAccessibilityAction {
	image: Image
}
type OnClickTranslateMenuOption {
	mediaPage: Unknown
}
type OnCreateSwipeUpToComments {
	linkId: String
	titleAndBodyTextExpanded: Unknown
	analyticsModel: Model
}
type Params {
	subredditName: String
	subredditId: String
	isModerator: Boolean
	isUserFlair: Boolean
}
type OnHideComments {
	shouldDestroyModal: Boolean
	shouldExitFbp: Boolean
}
type OnClickAdsCta {
	linkId: String
}
type OnZoomOut {
	zoomOrigin: Unknown
}
type ReportPost {
	mediaPage: Unknown
}
type OnGalleryPositionChange {
	newPosition: Unknown
}
type OnClickUserAvatar {
	linkId: String
	analyticsModel: Model
}
type OnClickAdAttribution {
	uniqueId: String
}
type OnOrientationChanged {
	orientation: Unknown
}
type OnReferringAdCtaClick {
	linkUniqueId: String
}
type OnScrollPositionChanged {
	totalItems: Unknown
}
type OnClickSubreddit {
	subredditName: String
	analyticsModel: Model
}
type GiveAwardClicked {
	linkId: String
}
type Params {
	doNotEmitInitialConnectedState: Unknown
	interval: Int
	timeUnit: Unknown
}
type SwipeTutorial {
	duration: Unknown
	type: Unknown
}
type SubredditSnoomojisUseCaseParams {
	subredditName: String
}
type UpdateSnoomojiList {
	query: String
}
type PlaybackStateProducerContainer {
	id: String
	playbackStateProducer: Unknown
	creationStage: Unknown
}
type UpdatePermissionLambda {
	downloadMediaAfterPermissionGranted: Unknown
}
type UpdateCurrentPage {
	modifier: Unknown
}
type ChromeStateModification {
	modifier: Unknown
}
type TranslationState {
	pageId: String
	newState: TranslationViewState
}
type UpdateVoteState {
	pageId: String
	newState: VoteViewState
}
type PlaybackStateModificationForId {
	id: String
	newState: PlaybackState
}
type PagerState {
	items: Unknown
	isLoading: Boolean
	hasMore: Boolean
	captionsSettingsEnabledByUser: Boolean
	selectedPageIndex: Int
	selectedPageId: String
	initialPageIndex: Int
	downloadMediaAfterPermissionGranted: Unknown
	lastSharedImageViaAccessibilityActionUrl: String
}
type AddBlockedUser {
	idsToBlock: Unknown
}
type UpdateModPermissionsState {
	pageId: String
	hasModPermissions: Boolean
}
type UpdateLastSharedImageViaAccessibilityAction {
	url: String
}
type SetSelectedPage {
	index: Unknown
}
type GuidesQueryDetailScreenDependencies {
	args: Unknown
}
type Loaded {
	responses: [Unknown]
	status: Unknown
	currentQuery: String
}
type Params {
	switchValuesMap: Unknown
	isFlairModerator: Boolean
	screenMode: Unknown
	subredditScreenArg: SubredditScreenArg
	modPermissions: Unknown
	correlationId: String
}
type UpdateQuery {
	query: String
}
type PostSuggestionClicked {
	postId: String
}
type QueryResponse {
	postIds: [Unknown]
	posts: Unknown
	subredditIds: [Unknown]
	suggestedPrompts: Unknown
	query: String
	content: String
	status: Unknown
}
type SuggestionSelected {
	suggestion: String
}
type SearchHistorical {
	query: String
	timestamp: String
}
type PostInfo {
	query: String
	timestamp: Int
}
type LinkClicked {
	link: String
}
type Loaded {
	currentQuery: String
	topics: [Unknown]
	suggestions: [Unknown]
	history: [Unknown]
}
type OnPillPromptTapped {
	prompt: String
}
type SubredditList {
	subredditIds: Unknown
	title: String
}
type Topic {
	topicId: String
	topicName: String
	schemeName: String
}
type OverflowMenu {
	overflowState: Unknown
	onOverflowMenuClosed: Unknown
}
type Unavailable {
	reason: String
}
type UpdateQuery {
	query: String
}
type OnTopicClick {
	topic: Topic
	schemeName: String
}
type OnSubredditClickEvent {
	linkId: String
	uniqueId: String
	promoted: Unknown
	subredditName: String
}
type FeaturedCommunitiesTelemetryEvent {
	trackingEvent: Unknown
}
type CommunityViewedTelemetryEvent {
	schemeName: String
	community: Community
}
type TopicClickTelemetryEvent {
	topic: Topic
}
type OnSubredditClickEvent {
	linkId: String
	uniqueId: String
	promoted: Unknown
	subredditName: String
}
type CommunitySubscribeChangedTelemetryEvent {
	community: Community
	index: Int
}
type CommunityClickedTelemetryEvent {
	community: Community
	index: Int
}
type CommunityViewedTelemetryEvent {
	community: Community
	index: Int
}
type RankedCommunityTelemetryEvent {
	trackingEvent: Unknown
}
type CommunitySubscribeChangedTelemetryEvent {
	schemeName: String
	community: Community
}
type TrackingData {
	community: Community
	index: String
	elementId: String
	model: String
	version: String
	communities: [Unknown]
	destination: Unknown
}
type CommunityClickedTelemetryEvent {
	schemeName: String
	community: Community
}
type TopicPillsGroupTelemetryEvent {
	trackingEvent: Unknown
}
type TopicViewTelemetryEvent {
	topic: Topic
}
type SubredditAboutScreenDependencies {
	view: Unknown
	analyticsPageType: String
}
type GoldPackageUiModel {
	id: String
	goldValue: String
	iconUrl: String
	accessibilityLabel: String
}
type CustomGoldPurchaseUiModel {
	purchaseInfoText: String
	purchaseInfoTextProvider: Unknown
	ctaTitle: String
	showDisclaimerMessage: Boolean
}
type GoldPurchaseParameters {
	intent: Unknown
}
type GoldPurchaseScreenUiModel {
	purchaseInfoTextProvider: Unknown
	goldPackages: Unknown
	disclaimerMessage: Unknown
	ctaTitle: String
	selectedGoldPackageId: String
	purchaseType: Unknown
	paymentFlowUiData: Feedback
	isComposePerformanceTrackerEnabled: Boolean
	newTermsEnabled: Boolean
}
type Configuration {
	view: Unknown
	screenScope: Unknown
	postAnalyticsModel: Unknown
	yOffsetAccessor: Unknown
	onRefresh: Unknown
}
type TransitionParams {
	transitionLink: Unknown
	transitionComments: CommentsLinkPagerTransitionParams
}
type OnPageSelected {
	linkId: String
	position: String
	swipeDirection: Unknown
}
type PostDetailPage {
	linkId: String
	pagerItemId: Int
	bundle: Unknown
}
type ColorFilter {
	color: Unknown
}
type PostCommentSearchEmptyResultsUiModel {
	queryText: String
}
type PostCommentSearchResultUiModel {
	viewState: CommentViewState
}
type PostCommentSearchHeaderUiModel {
	text: String
}
type ProfileImageUiModel {
	url: String
	snoovatarUrl: String
}
type Dependencies {
	view: Unknown
	params: Params
	analyticsPagerType: String
}
type CommentRecycle {
	model: Unknown
	view: Unknown
}
type CommentAdPresentationModel {
	associatedCommentId: String
	presentationModel: Unknown
	adLink: Unknown
}
type UsersReplyingCount {
}
type StickyLinkParams {
	subredditName: String
}
type Parameters {
	link: Unknown
	linkId: String
}
type CommentsOnlyPresentationParams {
	showAuthorAndTextContent: Boolean
	showTextContentExpanded: Boolean
}
type Parameters {
	commentContext: Unknown
	link: Unknown
	speedReadLocationSource: Unknown
	isNsfwFeed: Boolean
	isFromTrendingPn: Boolean
	presentationMode: Unknown
	linkId: String
	subredditId: String
	subreddit: String
	linkListingActionType: Unknown
	navigationSession: Unknown
	isCurrentScreen: Boolean
	isCommentsGqlMigrationEnabled: Boolean
	isCoreStackMigrationEnabled: Boolean
	scrollTarget: PostDetailScrollTarget
	transitionComments: CommentsLinkPagerTransitionParams
}
type PostModStatusResult {
	approved: Boolean
	removed: Boolean
	pinned: Boolean
	locked: Boolean
	markedAsSpam: Boolean
	archived: Boolean
	reported: Boolean
	modDistinguished: Boolean
	adminDistinguished: Boolean
}
type DetailScreenFooterUiModel {
	isShowRestVisible: Boolean
	isLoadingCommentsVisible: Boolean
	isEmptyCommentsVisible: Boolean
	isBackToHomeVisible: Boolean
	isBottomSpaceVisible: Boolean
	showRestButtonBackgroundColorFilter: ColorFilter
	commentComposerPresenceSpaceHeight: Unknown
	onBackToHomeButtonClicked: Unknown
	loadingCommentsBackground: Unknown
	loadingCommentsFillAvailableHeight: Unknown
}
type AchievementsBadgeModel {
	imageUrl: String
	label: String
	accessibilityLabel: String
}
type PostDetailMigrationArgs {
	postType: Unknown
	isPromoted: Boolean
	isRichTextMediaSelfPost: Boolean
}
type TranslationBannerState {
	shouldShowTranslationBanner: Boolean
	translationState: Unknown
	isBannerManualDismissed: Boolean
	isBannerAutomaticDismissed: Boolean
}
type UsersReadingCount {
}
type Theme {
}
type ContentLayoutInfo {
}
type CommentBind {
	model: Unknown
	view: Unknown
}
type Parameters {
	link: Unknown
	linkId: String
	screenReferrer: Unknown
	listingType: Unknown
}
type Parameters {
	link: Unknown
	linkId: String
}
type Parameters {
	link: Unknown
	linkId: String
	screenReferrer: Unknown
}
type ExtraTelemetryData {
	postId: String
	recommendationAlgo: String
	recommendationIds: [Unknown]
}
type LinkUpdate {
	link: Unknown
}
type Awarded {
	byCurrentUser: Boolean
	count: Boolean
}
type MoreCommentPresentationModel {
	id: String
	kindWithId: String
	parentKindWithId: String
	depth: Boolean
	nextIndentLevel: Boolean
	continuationLabel: String
	loadingLabel: String
	defaultLabel: String
	indentPresentationModel: IndentPresentationModel
	moreCommentsButtonStyle: Unknown
	showDividerAbove: Boolean
}
type AnalyticsInfo {
	createdTimeUtc: Int
	numGildings: Int
}
type Parameters {
	link: Unknown
	linkId: String
}
type Parameters {
	link: Unknown
	linkId: String
}
type Dependencies {
	view: Unknown
	params: Params
}
type Header {
	itemView: Unknown
}
type TextColor {
	color: Theme
	isFeatured: Boolean
}
type Parameters {
	link: Unknown
	linkId: String
	listingType: Unknown
}
type ChatChannelsRecommendationUiModel {
	recommendations: Unknown
	analyticsInfo: String
}
type IndentPresentationModel {
	numberOfLines: Boolean
	drawLineBelowBullet: Boolean
	fadeIndentLines: Boolean
	lastLineContinuationFromTopHeight: Boolean
}
type Parameters {
	link: Unknown
	linkId: String
	screenReferrer: Unknown
}
type Parameters {
	link: Unknown
	linkId: String
	screenReferrer: Unknown
}
type UserOnlineStatus {
	authorId: String
	isOnline: Boolean
}
type DetailScreensParams {
	appLaunchedFromDeeplink: Boolean
}
type GiphyAttribution {
	text: String
	link: String
}
type WithProvider {
	availableHeightProvider: Unknown
}
type PremiumPackage {
	pennies: String
	frequencyDays: String
	images: Images
}
type DiffListingResult {
	links: [Unknown]
	presentationModels: [Unknown]
	linkPositions: Unknown
	after: String
	adDistance: String
	diffResult: ViewDiffResult
}
type SaveMediaScreenDependencies {
	view: Unknown
	params: Params
}
type ModViewRightCommentDependencies {
	view: Unknown
}
type Params {
	asyncLink: Unknown
}
type GalleryPagerItemUiModel {
	mediaId: String
	width: Boolean
	caption: String
	outboundUrl: String
	outboundUrlDisplay: String
	url: String
}
type ExperimentInfo {
	id: Unknown
	name: Unknown
	variant: String
}
type DiffListingUseCaseParams {
	presentationModels: [Unknown]
	listingType: Unknown
	sort: Unknown
	sortTimeFrame: Unknown
	subredditName: String
	multiredditPath: String
	username: String
	geoFilter: String
	showFlair: Boolean
	isNsfwFeed: Boolean
	categoryId: String
	showSubredditHeaderInfo: Boolean
	isClassicMode: Boolean
	showOverflowMenu: Boolean
	showSubscribeButton: Boolean
	category: Unknown
	filter: Unknown
	filterNonLinkModels: Unknown
	showAwards: Boolean
	subreddit: Unknown
	showUserAvatar: Boolean
	transitionParamsProvider: Unknown
	setSourcePosition: Boolean
	flair: String
}
type AccountPickerUiModel {
	name: String
	id: String
	avatar: Unknown
	isActive: Boolean
	isGold: Boolean
}
type Feedback {
	title: String
	body: String
	icon: Int
	isAnnotatedText: Boolean
	annotatedText: Unknown
	clickableTextTag: String
	onClick: Unknown
	isDismissible: Boolean
}
type AccountPickerFragmentDependencies {
	view: Unknown
	getContext: Unknown
	params: Unknown
}
type RouteParams {
	context: Unknown
	taskId: String
	subredditId: String
	subredditName: String
}
type VoteViewPresentationModel {
	upvoteCountColor: Int
	downvoteCountColor: Int
	downvoteIconInactive: String
	upvoteIconInactive: String
	downvoteIconActive: String
	upvoteIconActive: String
	showCustomIcons: Boolean
}
type Dependencies {
	view: Unknown
	params: CommentParameters
}
type BanEvasionDetails {
	confidenceLevel: Unknown
	confidenceExplanation: String
}
type ModReason {
	type: Unknown
	modReasonGroups: [Unknown]
	banEvasionDetails: BanEvasionDetails
	hitlFilterDetails: HitlFilterDetails
}
type ParentCommentsUsedFeatures {
	parentCommentsUsedFeatures: Unknown
}
type Overridden {
	experimentName: String
	variant: String
}
type Event {
	sessionInfo: SessionInfo
	eventInfo: Unknown
}
type SessionInfo {
	userName: String
	sessionState: Unknown
}
type ExposureLogged {
	experimentName: String
	variant: String
}
type OnSetupFirstPublicChannelTapped {
	name: String
}
type ChannelClicked {
}
type ChannelCreated {
	channelId: String
	roomId: String
}
type SubredditChatChannelScreenDependencies {
	subredditId: String
	subredditName: String
	subredditChannelsTarget: Unknown
	channelCreateListener: Unknown
}
type OnChannelsLearnMorePress {
	navigateToUrlAction: Unknown
}
type SubredditChatChannelsViewState {
	refreshing: Boolean
	channelsList: Unknown
}
type Loaded {
	channels: [Unknown]
	sendImpressionEvents: Boolean
	showUpsellBanner: Boolean
	showFirstPublicChatItem: Boolean
	showCreateChatButton: Boolean
}
type ChannelViewed {
	chatChannelIndex: String
	roomName: String
}
type Error {
	cause: Unknown
}
type LogExperiment {
	experimentName: String
	variantExposed: String
}
type SubredditChannelsTabViewState {
	channels: [Unknown]
	chatChannels: [Unknown]
	channelsNavTabs: [Unknown]
}
type Result {
	enabled: Boolean
	email: String
	mode: Unknown
}
type PickImagesResult {
	imagePaths: [Unknown]
	rejectedFilePaths: [Unknown]
}
type HomePagerDependencies {
	view: Unknown
	homeScreenParams: HomePagerScreenParams
	outNavigator: Unknown
}
type TabHosts {
	hosts: Unknown
}
type PopularFeedScreenDependencies {
	analyticsScreenData: ScreenPageData
	feedType: Unknown
	screenName: Unknown
}
type OnWatchSectionTitleClick {
	linkKindWithId: String
	promoted: Boolean
	uniqueId: String
}
type WatchSection {
	data: Unknown
	videoSettings: VideoSettings
	playerResizeMode: Unknown
	playerUiOverrides: ViewModelOverride
	analyticsPageType: String
	dispatcherProvider: Unknown
	muteIsAtTheTop: Unknown
	videoImprovedOnMeasureEnabled: Unknown
	baliM3Enabled: Boolean
	reduceAdsRpsM1Enabled: Boolean
	enableVideoComposableEffectFix: Boolean
	enableUpdatedAdVisibleTracker: Boolean
}
type WatchFeedScreenDependencies {
	analyticsScreenData: ScreenPageData
	feedType: Unknown
	screenName: Unknown
}
type LatestFeedScreenDependencies {
	analyticsScreenData: ScreenPageData
	feedType: Unknown
	screenName: Unknown
}
type HomePagerScreenParams {
	trendingPushNotifDeepLinkId: String
}
type FeedNavigationMenuItem {
	feedId: String
	displayOrder: Boolean
}
type FeedPageParams {
	key: String
	initialLoad: Boolean
	adDistance: Int
}
type FeedPage {
	data: [Unknown]
	nextKey: String
	sort: Sort
	adDistance: Int
	prefetchDistance: Int
}
type ExperimentInfo {
	id: Unknown
	name: Unknown
	variant: String
}
type PostTitleWithThumbnailSection {
	linkId: String
	title: String
	isRead: Boolean
	previewText: String
	previewMaxLines: Unknown
	indicators: IndicatorsElement
	applyInset: Boolean
	feedsFeatures: Unknown
	isOutboundThumbnailNavigationEnabled: Boolean
}
type NewsProfileMetadataSection {
	data: NewsProfileMetadataElement
}
type VideoSection {
	feedElement: VideoElement
	videoSettings: VideoSettings
	playerResizeMode: Unknown
	playerUiOverrides: ViewModelOverride
	analyticsPageType: String
	applyInset: Boolean
	dispatcherProvider: Unknown
	adsFeatures: Unknown
	muteIsAtTheTop: Boolean
	videoViewModifierHeightFixEnabled: Boolean
	showExpandButton: Boolean
	adCtaIconProvider: Unknown
	roundTopCornersOnly: Boolean
	reduceAdsRpsM1Enabled: Boolean
	isAdVisibilityOptimizationEnabled: Boolean
	loopingStrategy: Unknown
	applyCrop: Boolean
	isSnapFeedVisibilityFixEnabled: Boolean
	enableVideoComposableEffectFix: Boolean
	enableUpdatedAdVisibleTracker: Boolean
}
type FeedPostScoreActionBarRedesignSection {
	data: PostActionScoreBarElement
	goldPopupDelegate: Unknown
	isGoldPopupEnabled: Unknown
	feedType: Unknown
	hideTranslationIndicatorRow: Boolean
	modModeActivated: Boolean
	isBaliShareCountFormatEnabled: Boolean
	awardEntryPointDelegate: Unknown
	showAwardBtnOnAds: Boolean
	videoResponsesLabelState: Unknown
	postVoteComponentProvider: Unknown
}
type HiddenPostSection {
	element: HiddenPostElement
}
type FeedPostAwardsBarSection {
	data: PostAwardsBarElement
}
type CrosspostSection {
	crosspostElement: CrosspostElement
	crossposted: Unknown
	baliM3Enabled: Boolean
}
type PreviewTextSection {
	data: PreviewTextElement
}
type YoutubeVideoSection {
	width: String
	linkId: String
	uniqueId: String
	shouldObfuscate: Boolean
	videoUrl: String
	previewUrl: String
	createdAtUtc: Int
	promoted: Boolean
	applyInset: Boolean
}
type NewsFeedPostHeaderSection {
	data: NewsPostHeaderElement
}
type AmaCarouselSection {
	data: AmaCarouselElement
	onView: Unknown
	onClickDismiss: Unknown
	onClickLink: Unknown
}
type FeedSurveySection {
	surveyElement: FeedSurveyElement
}
type PostFlairsSection {
	feedElement: PostFlairsElement
}
type IndicatorsSection {
	data: IndicatorsElement
	devPlatform: Unknown
}
type PostMetricSection {
	data: PostMetricElement
}
type AmaStatusBarSection {
	data: AmaStatusBarElement
}
type ClassicPostSection {
	linkId: String
	data: Unknown
	applyInset: Boolean
	showThumbnail: Boolean
	showCreatedAt: Boolean
	baliM3Enabled: Boolean
	feedType: Unknown
	isPromotedPostThumbnailNavigationFixEnabled: Boolean
	isThumbnailOutboundNavigationEnabled: Boolean
}
type RichTextRecommendationContextSection {
	data: RichTextRecommendationContextElement
}
type ImageSection {
	data: PostSelfImageElement
	applyInset: Boolean
	showExpandIndicator: Boolean
	useAspectRatioIconForExpandButton: Boolean
	roundTopCornersOnly: Boolean
}
type MetadataHeaderSection {
	data: Unknown
	longClickActionSheetMenuEnabled: Unknown
	boldTitleDesignEnabled: Boolean
	style: Unknown
	feedType: Unknown
}
type CarouselSection {
	trendingCarouselElement: TrendingCarouselElement
	applyInset: Boolean
}
type UnsupportedCellSection {
	data: UnsupportedCellElement
	unknownCellTypeTracker: Unknown
	v2AnalyticPageType: String
	feedCorrelationId: String
}
type TitleWithThumbnailCollapsedSection {
	data: TitleWithThumbnailCollapsedElement
	applyInset: Boolean
}
type FeedPostScoreActionBarSection {
	data: PostActionScoreBarElement
	awardEntryPointDelegate: Unknown
	goldPopupDelegate: Unknown
	isGoldPopupEnabled: Unknown
	feedType: Unknown
	hideTranslationFeatures: Boolean
	showAwardBtnOnAds: Boolean
	postVoteComponentProvider: Unknown
}
type UpdatedValue {
	previous: Unknown
	current: Unknown
}
type OnFlairViewed {
	linkId: String
	uniqueId: String
	promoted: Boolean
	flair: Unknown
}
type OnFlairClicked {
	linkId: String
	uniqueId: String
	promoted: Boolean
	flair: Unknown
}
type HomeFeedScreenDependencies {
	analyticsScreenData: ScreenPageData
	feedType: Unknown
	screenName: Unknown
}
type MerchandisingUnitOnDismissEvent {
	uniqueId: String
}
type MerchandisingUnitOnClickEvent {
	uniqueId: String
	url: String
}
type CommentClickEvent {
	linkId: String
	commentId: String
}
type MerchandisingUnitOnVisiblePercentChangedEvent {
	uniqueId: String
}
type MerchandisingUnitSection {
	data: MerchandisingUnitElement
	viewState: MerchandiseViewState
}
type Open {
	overflowItems: Unknown
}
type Loading {
	animate: Boolean
}
type FeedViewModelState {
	scrollToPosition: String
	scrollDirection: Unknown
	lastVisiblePosition: Int
	bounds: Unknown
	becameVisibleTimestamp: Int
	firstFetchCompleted: Boolean
	isRefreshButtonVisible: Boolean
}
type Empty {
	isRefreshing: Boolean
}
type FeedContext {
	onEvent: Unknown
	boundsProvider: Unknown
	overflowMenuState: Unknown
	parentInteractionSource: Unknown
	postUnitAccessibilityProperties: PostUnitAccessibilityProperties
	composableScope: Unknown
	feedVisibilityFlow: Unknown
	feedRefreshFlow: Unknown
	positionInFeed: Unknown
	isDraggingReleased: Boolean
	currentVisiblePosition: Unknown
	postMediaBoundsProvider: Unknown
}
type VideoSettings {
	shouldAutoplay: Boolean
	showVideoControls: Boolean
}
type VideoListenerWrapper {
	videoListener: Unknown
}
type BadgeUseCaseParams {
	newFeedCollection: Unknown
}
type Upvote {
	isUndo: Boolean
}
type MetadataHeaderGenericTitle {
	text: String
}
type ContentIndicator {
	indicator: Unknown
}
type Score {
}
type Expand {
	mediaType: Unknown
}
type Author {
	name: String
}
type ToggleJoinCommunity {
	communityName: String
	isJoined: Boolean
}
type Title {
	text: String
}
type OpenCommunity {
	communityName: String
}
type Recommendation {
	recommendationContext: String
}
type CommentCount {
}
type Domain {
	domain: String
}
type ViewsCount {
	labelA11Y: String
}
type PreviewText {
	text: String
}
type MetadataHeaderGenericSubtitle {
	text: String
}
type OpenUserProfile {
	username: String
}
type AwardCount {
}
type Link {
	label: String
}
type Timestamp {
	formattedLabel: String
}
type ShareCount {
}
type Community {
	name: String
}
type PostUnitAccessibilityProperties {
	actionsByNode: Unknown
	labelInfoByNode: Unknown
}
type OpenPostDetails {
	callToAction: String
}
type OpenLink {
	label: String
}
type Downvote {
	isUndo: Boolean
}
type FeedSurveyAccessibilityAction {
	surveyQuestion: String
	buttonText: String
}
type Crosspost {
	titleStyle: Unknown
	classicTitleStyle: Unknown
	usernameStyle: Unknown
	horizontalPadding: Unknown
	verticalSpacing: Unknown
	mediaInsetEnabled: Boolean
	showHeaderIcon: Boolean
	showOverflowIcon: Boolean
	allowPostReadStatus: Boolean
	allowPostFlairs: Boolean
	actionBarStyle: Unknown
	metadataHeaderStyle: Unknown
	joinButtonStyle: Unknown
}
type Community {
	url: String
}
type ValueProposition {
	icon: Unknown
}
type GallerySection {
	data: GalleryElement
	applyInset: Boolean
	showExpandIndicator: Boolean
	enableSwipeFix: Boolean
	useAspectRatioIconForExpandButton: Boolean
	useBaliGalleryCropLogic: Boolean
}
type ContentLayoutInfo {
}
type RichTextSection {
	data: RichTextElement
	richTextRetriever: Unknown
	sourceScreen: String
	clickHandler: Unknown
	isRichTextMigrationEnabled: Boolean
	richTextComposeElements: Unknown
}
type FeedPostSection {
	linkId: String
	sections: Unknown
	uniqueId: String
	promoted: Boolean
	recommended: Boolean
	removed: Boolean
	isFeedToPdpTransitionAnimationEnabled: Boolean
	isSubredditFeed: Boolean
	showCoachmark: Boolean
}
type SelfImage {
	mediaPreview: CellMediaSourceElement
	linkId: String
	uniqueId: String
	promoted: Boolean
}
type FeedMediaContentLinkSection {
	data: PostMediaWebsiteElement
}
type UiComponentSize {
}
type Video {
	mediaPreview: CellMediaSourceElement
	linkId: String
	uniqueId: String
	promoted: Boolean
}
type Link {
	mediaPreview: CellMediaSourceElement
	linkBarLabel: String
	link: String
	linkId: String
	uniqueId: String
	promoted: Boolean
	showLinkBar: Boolean
}
type FeedPostTitleSection {
	data: PostTitleElement
	denseDesignEnabled: Unknown
	ifRecommended: Unknown
}
type ListVisibilityItem {
	index: Boolean
}
type AccountChatPreferences {
	invitePolicy: Unknown
}
type AppEngageError {
}
type ChatRequirementsViewState {
	chatRequirements: Unknown
	allowUserInput: Boolean
}
type RequirementConfirmed {
	rank: CommunityChatPermissionRank
}
type Confirmation {
	header: String
	body: String
}
type ChatRequirements {
	availableLevels: [Unknown]
	currentLevel: CommunityChatPermissionRank
}
type ParseError {
	message: String
}
type SelectRequirement {
	chatRequirementLevel: ChatRequirementLevel
}
type IoError {
	message: String
}
type ChatRequirementLevel {
	rank: CommunityChatPermissionRank
	name: String
	description: String
	confirmation: Confirmation
}
type BannedUserActionsViewState {
	user: User
}
type CustomFilters {
	content: Unknown
}
type ShowConfirmationSheet {
	confirmation: Unknown
}
type OnSaveCustomFiltersButtonPress {
	uiModel: Unknown
}
type BannedContent {
	filters: Unknown
}
type OnSheetConfirmation {
	confirmation: Unknown
}
type OnSaveAdvancedSettingsButtonPress {
	uiModel: Unknown
}
type MutableDualState {
	initial: Unknown
}
type AdvancedSettings {
	content: Unknown
}
type TextFilterUiModel {
	id: String
	label: String
	isSelected: MutableDualState
}
type OnTextFilterPress {
	textFilter: TextFilterUiModel
}
type OnBannedUserClick {
	user: User
}
type Loaded {
	bannedUsers: [Unknown]
}
type OnUserUnbanSuccess {
	user: User
}
type Loaded {
	bannedUsers: [Unknown]
	after: String
}
type MediaSize {
	width: Int
	height: Int
}
type Emote {
	id: String
	packId: String
	imagePath: String
	imageType: String
	emojiSize: EmoteSize
	stickerSize: EmoteSize
}
type Loaded {
	rules: Unknown
}
type GetParams {
	correlationId: String
	subredditId: String
	title: String
	content: String
	url: String
	flairText: String
}
type Rule {
	id: String
	reason: String
	rank: String
	isPolicy: Boolean
	isHelpline: Boolean
}
type FtueScreenDependencies {
	params: FtueParams
}
type CommunityAwardGroup {
	name: String
	style: String
	awards: [Unknown]
}
type FtueViewState {
	communityBadgePageUiModel: CommunityBadgePageUIModel
	communityInfoUIModel: CommunityInfoUIModel
	communityAwardPageUIModel: CommunityAwardPageUIModel
}
type OnToggleBadgeVisibility {
	value: Boolean
}
type CommunityAward {
	name: String
	awardType: String
	awardIcon: String
	tags: [Unknown]
}
type FtueParams {
	subredditId: String
}
type SubredditBenefit {
}
type CommunityInfoSummary {
	communityName: String
	iconUrl: String
	goldBalance: [Unknown]
}
type OnListItemClick {
	item: SubscriptionListItemUiModel
}
type SubscriptionListItemUiModel {
	id: String
	primaryText: String
	secondaryText: String
	icon: Unknown
	cost: String
}
type Category {
	label: String
	items: Unknown
}
type OnBadgeVisibilitySettingChanged {
	badgeVisibility: Unknown
}
type SubscriptionListViewState {
	knownSubscriptions: Unknown
}
type SubscriptionDetailLineItem {
	type: Unknown
	title: String
	value: String
	onClickEvent: Unknown
}
type ErrorMessage {
	header: String
	body: String
}
type CommunitySubscriptionDetailUiModel {
	title: String
	iconUrl: String
	subredditId: String
	subscriptionDetails: Unknown
	error: ErrorMessage
	valuePropositions: Unknown
	managementMethod: Unknown
	badgeVisibility: Unknown
}
type SubscriptionDetailViewState {
	subscriptionInfo: Unknown
	showBadgeVisibilitySettingSheet: Boolean
}
type SubscriptionDetailDependencies {
	subscriptionId: String
}
type Url {
	url: String
	inApp: Boolean
}
type OnManageSubscriptionPress {
	managementMethod: Unknown
}
type CommunitySubscription {
	productId: String
	externalProductId: String
	basePrice: String
	baseCurrency: String
	isProdPayment: Boolean
}
type CommunitySubscriptionListing {
	subredditInfo: SubredditInfo
	products: Unknown
}
type PurchaseViewState {
	valuePropState: Unknown
	purchaseState: Unknown
}
type PurchaseDependencies {
	subredditKindWithId: String
}
type Idle {
	subredditInfo: SubredditInfo
	subscribeButtonLabel: String
	purchaseProductParams: PurchaseProductParams
	valuePropositions: Unknown
}
type OnSubscribeButtonPress {
	purchaseProductParams: PurchaseProductParams
}
type Error {
	canRetry: Boolean
}
type AllComments {
	commentKindWithId: String
	context: Int
}
type Truncated {
	res: Unknown
}
type Comments {
	comments: [Unknown]
	presentationModels: [Unknown]
	collapsedComments: Unknown
}
type Full {
	res: Unknown
}
type Error {
}
type Comments {
	comments: Unknown
	models: [Unknown]
	modelsMap: Unknown
	collapsedModels: Unknown
}
type CommentTreeData {
	models: Unknown
}
type Loading {
	params: Unknown
}
type AnalyticsInfo {
	v2AnalyticsPageType: String
	recommendationContext: RecommendationContext
}
type CommentLink {
	id: String
	uniqueId: String
	score: Int
	url: String
	name: String
	title: String
	author: String
	domain: String
	pinned: Boolean
	createdUtc: Int
	numComments: Int
	subreddit: String
	promoted: Boolean
	isOver18: Boolean
	postSetCount: Int
	kindWithId: String
	subredditId: String
	isSpoiler: Boolean
	upvoteRatio: Boolean
	isTranslatable: Boolean
	isTranslated: Boolean
	analyticsPostType: String
	showAwards: Boolean
	userIsModerator: Boolean
	authorIsModerator: Boolean
	removed: Boolean
	subredditIconImage: String
	userIsBannedFromSubreddit: Boolean
	isUserSubscribedToSubreddit: Boolean
	isUserPaidSubscriber: Boolean
	authorSnoovatarUrl: String
	authorIconUrl: String
	subredditUserPostEditingAllowed: Boolean
	permalink: String
	isContestMode: Boolean
	isScoreHidden: Boolean
	eventType: Unknown
	eventCollaboratorIds: [Unknown]
	eventStartUtc: Int
	suggestedSort: String
	namedEntities: [Unknown]
}
type AllCommentsPreTranslated {
	languageTag: String
	commentKindWithId: String
	context: Int
}
type Success {
	comments: [Unknown]
	sortType: Unknown
	performanceTraceId: String
	isTruncated: Boolean
	moreCommentIndex: Int
	loadMoreCommentId: String
	isFromCache: Boolean
	commentScreenContext: Unknown
	models: [Unknown]
}
type SingleComment {
	commentKindWithId: String
	context: Int
	shouldOpenReplyScreen: Boolean
}
type ReloadComment {
	commentKindWithId: String
}
type LoadParent {
	parentCommentKindWithId: String
}
type CommentsLoadErrorWithSource {
	localData: Unknown
	error: Unknown
}
type LoadPostCommentsParams {
	linkId: String
	commentId: String
	postIsPromoted: Boolean
	sortType: Unknown
	limit: Int
	context: Int
	includeCategories: Boolean
	subredditName: String
	loadOnlyTruncated: Boolean
	trackingContext: Unknown
	performanceTraceId: String
	after: String
	preTranslate: Boolean
	preTranslationTargetLanguage: String
	mtSeoDeepLink: Boolean
	loadType: Unknown
	loadOnlyFull: Boolean
	truncate: CommentTreeFilter
	isAdEligible: Boolean
	includePostsBelowCommentsInSct: Boolean
}
type Error {
	isTruncated: Boolean
	hasLocalData: Boolean
	models: [Unknown]
	sortType: Unknown
	isFromCache: Boolean
	comments: [Unknown]
	loadMoreCommentId: String
}
type ParentComment {
	comment: Unknown
	hasParent: Boolean
}
type RecommendationContext {
	id: String
	subredditId: String
	subredditName: String
}
type ReloadedComment {
	comment: Unknown
}
type CommentsParams {
	linkKindWithId: String
	commentsHost: Unknown
	analyticsInfo: AnalyticsInfo
	commentScreenContext: Unknown
	correlationId: String
	navigationSession: Unknown
	deeplink: String
	applyTopPadding: Boolean
	bodyContentExpanded: Boolean
	isContinuation: Boolean
	searchImpressionId: String
}
type Prefetched {
	comments: [Unknown]
	sortType: Unknown
	performanceTraceId: String
	isTruncated: Boolean
	moreCommentIndex: Int
	loadMoreCommentId: String
	isFromCache: Boolean
	commentScreenContext: Unknown
	models: [Unknown]
}
type CommunityWelcomeScreenDependencies {
	subredditName: String
	subredditId: String
	promptType: Unknown
	postSubmittedTarget: Unknown
}
type CommunityWelcomeViewState {
	headerColor: String
}
type SubredditDependencies {
	params: SubredditListParams
	eventSource: Unknown
}
type CommunitiesTabModification {
	subredditIdsWithSubscriptionPending: Unknown
}
type SubredditListParams {
	subredditIds: [Unknown]
}
type TopicFeedParams {
	topicId: String
	schemeName: String
}
type TopicParams {
	schemeName: String
	topicId: String
}
type TopicDependencies {
	params: TopicParams
	eventSource: Unknown
}
type Content {
	isRefreshing: Boolean
	data: Unknown
}
type CommunityView {
	position: Community
	topicName: String
}
type CommunityClick {
	community: Community
	position: String
	source: Subreddit
}
type JoinButtonClick {
	community: Community
	position: String
}
type ParentTopicBrowseScreenDependencies {
	analyticsScreenData: ScreenPageData
	feedType: Unknown
	screenName: Unknown
	sourcePage: Unknown
	topicFeedParams: TopicFeedParams
}
type Topic {
	id: String
	name: String
	isRanked: Boolean
	schemeName: String
}
type Subreddit {
	id: String
	name: String
	description: String
	usersCount: String
	primaryColor: String
	taxonomyDescription: String
	taxonomyTopicName: String
}
type ExploreScreenDependencies {
	analyticsScreenData: ScreenPageData
	feedType: Unknown
	screenName: Unknown
}
type SubredditChannelsEnabled {
	isChatEnabled: Boolean
	isPostEnabled: Boolean
}
type SubredditDayZero {
	module: SubredditDayZeroModule
}
type SubredditDayZeroModule {
	id: String
	displayText: String
	description: String
	isLastAvailable: Boolean
	progress: SubredditDayZeroProgress
	tasks: [Unknown]
}
type MatrixChat {
	roomId: String
}
type SubredditChannel {
	id: String
	subredditName: String
	label: String
	type: Unknown
	isRestricted: Boolean
	permalink: String
	richtext: String
}
type SubredditTaxonomyTopicInfo {
	id: String
	name: String
	displayName: String
}
type LinksLoadDataParams {
	username: String
	hideNsfwLinks: Boolean
	after: String
	correlationId: String
	sort: Unknown
	sortTimeFrame: Unknown
}
type SubredditDayZeroTask {
	id: String
	iconIdentifier: String
	title: String
	status: Unknown
	progress: SubredditDayZeroProgress
	bodyContent: String
	primaryButton: String
}
type SubredditDayZeroProgress {
}
type GifUser {
	username: String
	displayName: String
	profileUrl: String
}
type Gif {
	id: String
	downsizedImage: GifImage
	image: GifImage
	previewImage: GifImage
	user: GifUser
}
type GqlRequestRecordEntity {
	id: Int
	operationName: String
	hashedVariables: String
}
type GifImage {
	width: Int
	height: Int
	gifUrl: String
	mp4Url: String
}
type GetRecommendationChainingQuery {
	subredditId: String
	useCase: Present
	includePostsIn7Days: Present
}
type RelatedCommunityRecommendations {
	modelVersion: String
	recommendations: [Unknown]
}
type Recommendation {
	id: String
	name: String
	title: String
	publicDescriptionText: String
	postsIn7Days: Int
	subscribersCount: Unknown
	isSubscribed: Boolean
	styles: Unknown
}
type Data {
	relatedCommunityRecommendations: RelatedCommunityRecommendations
}
type LegacyIcon {
}
type GoldBalance {
	earnedBalance: Balance
	spendableBalance: Balance
}
type OnSortDropdownClicked {
	currentSort: Sort
}
type Subreddit {
	subredditId: String
}
type Balance {
}
type OnViewModeOptionClicked {
	currentViewMode: Unknown
}
type GoldAnalyticsBaseFields {
	correlationId: String
	contentFields: GoldAnalyticsContentFields
	streamingFields: GoldAnalyticsStreamingFields
}
type GoldAnalyticsStreamingFields {
	streamId: String
}
type Channel {
	channelId: String
	roomId: String
}
type AnalyticsGoldPurchaseFields {
	source: String
	type: String
	contentType: String
	currency: String
	amountInSmallestDenomination: Int
	awardId: String
	awardName: String
	awardTypeValue: String
	awardIsTemporary: Boolean
	offerContext: String
	offerType: String
}
type GoldAnalyticsContentFields {
	subredditId: String
	subredditName: String
	postKindWithId: String
	postType: String
	postTitle: String
	commentId: String
	contentAuthorId: String
}
type FeedModificationContext {
	feed: Unknown
}
type FeedPagerState {
	items: Unknown
	sections: Unknown
	loadingState: Unknown
	sort: Sort
	prefetchDistance: Int
}
type RedditPostEntity {
	id: String
	actionLinkUrl: String
	post: Post
	profile: Profile
	upvotes: Interaction
	comments: Interaction
}
type Post {
	image: Image
	text: String
}
type Image {
	imageUri: String
	imageHeightInPixel: String
}
type Interaction {
	image: [Unknown]
	count: String
	label: String
}
type RecommendationCluster {
	title: String
	redditPostEntityList: [Unknown]
	subtitle: String
	actionUri: String
	actionText: String
}
type Profile {
	name: String
	additionalText: String
	avatar: Image
	additionalImage: Image
}
type Parameters {
	args: Unknown
	postType: Unknown
	isRichTextMediaPost: Boolean
	isPromoted: Boolean
	eventHandler: Unknown
	commentScreenAdsActions: Unknown
}
type PipArgs {
	cx: String
	cy: String
	px: String
	timestamp: String
}
type CommunityAvatarEvent {
	subredditName: String
	embeddedUrl: String
}
type LinkMutationDataModel {
	parentLinkId: String
	isRead: Boolean
	readTimestampUtc: Int
	isHidden: Boolean
	isSubscribed: Boolean
	isSaved: Boolean
	isFollowed: Boolean
}
type ListingDataModel {
	id: Int
	sort: Unknown
	sortTimeFrame: Unknown
	beforeId: String
	afterId: String
	adDistance: String
	subredditName: String
	multiredditPath: String
	geoFilter: String
	categoryId: String
	topicSlug: String
	listingType: Unknown
	prune: Boolean
	flair: String
}
type PrefixedSubreddit {
	prefix: String
	subredditNameWithoutPrefix: String
}
type FeaturedCommunitiesElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	title: String
	schemeName: String
	featuredCommunities: Unknown
}
type Params {
	originPageType: String
}
type AuthConfirmIncognitoScreenDependencies {
	view: Unknown
	params: Params
}
type BlockedUser {
	unblockedBlurType: Unknown
}
type Poll {
	textContent: PostUnitGenericTextContent
	isHighlighted: Boolean
	richTextItems: Unknown
}
type CustomPost {
	customPosts: Unknown
	link: Unknown
}
type PostUnitAdSupplementaryText {
	disclaimerTextUiModel: DisclaimerTextUiModel
}
type PostUnitActionBar {
	comments: Comments
	vote: VoteUiModel
	award: Award
	animateCounts: Boolean
	shareCount: Int
	formattedShareCount: String
	dynamicShareIcon: PostUnitDynamicShareIcon
	goldPopup: GoldPopup
	displayBottomDivider: Boolean
	isCommentIconEligible: Boolean
	canModPost: Boolean
}
type Follow {
	state: Unknown
}
type ModReasonGroup {
	title: String
	reasons: String
}
type PostUnitTitle {
	title: String
	isExpanded: Boolean
}
type PostUnitAdPromotedUserPostCollection {
	pupUiModel: PromotedUserPostCollectionUiModel
}
type Subreddit {
	id: String
	name: String
	displayName: String
	avatarUrl: String
	primaryColor: Int
	shouldShowNsfwAvatar: Boolean
	communityStatus: Unknown
	userHasManageSettingsPermission: Boolean
}
type Flair {
	items: Unknown
	isLightTextColor: Boolean
	backgroundColor: String
	text: String
}
type PostUnitAmaStatus {
	statusViewState: AmaStatusBarViewState
}
type Join {
	state: Unknown
}
type Enabled {
}
type MediaSelfPostDetails {
	postId: String
	subredditId: String
	subredditName: String
	kindWithId: String
	over18: Boolean
	promoted: Boolean
	domain: String
	eventCorrelationId: String
	mediaData: Unknown
	analyticsPageType: String
	postCreatedAt: Int
	postTitle: String
	callToAction: String
}
type GoldPopup {
	showGoldPopup: Boolean
	params: Unknown
}
type Self {
	textContent: PostUnitGenericTextContent
	mediaSelfPostDetails: MediaSelfPostDetails
	isHighlighted: Boolean
	richTextItems: Unknown
	isAuthorBlocked: Boolean
}
type PostUnitMetadata {
	author: Author
	subreddit: Subreddit
	timePosted: String
	timePostedContentDescription: String
	status: PostStatus
	promoted: Boolean
	join: Join
	joinButton: Unknown
	linkUrl: String
	linkIdWithKind: String
	contentTags: ContentTags
	flair: Flair
	isContestModeEnabled: Boolean
}
type PostUnitAdCallToAction {
	ctaUiModel: Unknown
}
type ContentTags {
	nsfw: Boolean
	spoiler: Boolean
	quarantined: Boolean
	app: Boolean
}
type PostUnitGenericTextContent {
	rtjson: String
	html: String
	text: String
}
type Crosspost {
	parentId: String
	parentTitle: String
	parentAuthor: String
	parentSubredditName: String
	parentTimestamp: String
	parentScore: String
	parentComments: String
	parentContent: Unknown
	textContent: PostUnitGenericTextContent
	isHighlighted: Boolean
	richTextItems: Unknown
}
type Join {
	showJoinButton: Boolean
	state: Unknown
}
type PostUnitModeration {
	isModerator: Boolean
	canModeratePost: Boolean
	canDistinguishPost: Boolean
	moderationReasons: Unknown
	isApproved: Boolean
	isRemoved: Boolean
	isSpam: Boolean
	isLocked: Boolean
	showDistinguish: Boolean
	isDistinguished: Boolean
	isSpoiler: Boolean
	modVerdict: ModVerdict
	reportCount: Int
	removalReason: ModRemovalReasonViewState
	hasModVerdict: Boolean
}
type PostUnitDynamicShareIcon {
	dynamicShareIconState: Unknown
	shareIconResId: Int
}
type MediaGallery {
	postId: String
	items: Unknown
	hasCaptionsOrLinks: Boolean
	redesignImageCroppingBias: Unknown
	isBlockedAuthor: Boolean
	selectedItemIndex: PostUnitGenericTextContent
	isHighlighted: Boolean
	richTextItems: Unknown
}
type Comments {
	count: Int
	countLabel: String
}
type PostUnitAdPromotedCommunityPost {
	pcpUiModel: PromotedCommunityPostUiModel
}
type Award {
	awardIcon: String
	awardTitle: String
	awardCount: Boolean
	showButton: Boolean
	redditAwardsEntryPointDelegate: Unknown
}
type PostUnitViewState {
	metadata: PostUnitMetadata
	awards: PostUnitAwards
	title: PostUnitTitle
	content: Unknown
	moderation: PostUnitModeration
	actionBar: PostUnitActionBar
	adCallToAction: PostUnitAdCallToAction
	adSupplementaryText: PostUnitAdSupplementaryText
	adPromotedCommunityPost: PostUnitAdPromotedCommunityPost
	adPromotedUserPostCollection: PostUnitAdPromotedUserPostCollection
	adFloatingCta: PostUnitFloatingCta
	postRemovedRetry: PostUnitRemovedPostRetry
	postStats: PostUnitStats
	amaStatus: PostUnitAmaStatus
	achievementsBadge: AchievementsBadgePillViewState
	videoResponseLabelState: Unknown
}
type GifAndVideo {
	videoMetadata: VideoMetadata
	videoWidth: Boolean
	resizeMode: Unknown
	enforceSingleVideoPlayback: Boolean
	loop: Boolean
	loopingStrategy: Unknown
	textContent: PostUnitGenericTextContent
	isHighlighted: Boolean
	ctaIconRes: Int
	richTextItems: Unknown
	forceAutoPlay: Boolean
}
type Image {
	image: Unknown
	blurredImage: Unknown
	blurType: Unknown
	textContent: PostUnitGenericTextContent
	isHighlighted: Boolean
	richTextItems: Unknown
}
type PostUnitStats {
	postId: String
	viewCountLabel: String
}
type PostUnitAwards {
	awards: Unknown
	showAwards: Boolean
	animateAwardAtPositionEvent: Unknown
}
type Link {
	domain: String
	showDomain: Boolean
	image: Unknown
	blurredImage: Unknown
	blurType: Unknown
	textContent: PostUnitGenericTextContent
	isHighlighted: Boolean
	richTextItems: Unknown
}
type PostUnitFloatingCta {
	userName: String
	outboundDisplayText: String
	buttonText: String
	avatarUrl: String
}
type PostUnitRemovedPostRetry {
	kindWithId: String
	subredditName: String
	removalCategory: Unknown
}
type Author {
	id: String
	username: String
	displayName: String
	flair: Flair
	indicators: Unknown
	color: String
	userIcon: Unknown
}
type PostStatus {
	approved: Boolean
	removed: Boolean
	deleted: Boolean
	pinned: Boolean
	locked: Boolean
	spammed: Boolean
	archived: Boolean
	reported: Boolean
}
type ModReason {
	type: Unknown
	modReasonGroups: Unknown
}
type ModState {
	isModModeActive: Boolean
}
type PostUnitMediaGalleryItem {
	mediaId: String
	caption: String
	width: String
	outboundUrlDisplay: String
	image: Unknown
	blurredImage: Unknown
	blurType: Unknown
	isGif: Boolean
	adCtaUiModel: Unknown
	isPromoted: Boolean
}
type HighlyAwardedContentConfig {
	minThresholdToShowAnimation: [Unknown]
	useNewAwards: Boolean
}
type DatabaseAutoCloseSetting {
	timeout: Int
	timeUnit: Unknown
}
type DatabaseSessionData {
	userSessionType: Unknown
}
type LoggedIn {
	username: String
}
type EditUsernameFlowRequestCommentReply {
	commentKindWithId: String
	replyPosition: Unknown
}
type EditUsernameFlowRequestCreatePost {
	createPostType: Unknown
}
type Eligible {
	sortType: Unknown
}
type EducationalUnitParams {
	educationalUnit: String
	correlationId: String
}
type ParsedResult {
	id: String
	uuid: String
	snoovatarUrl: String
	rarity: Unknown
}
type ValidPricePackage {
	id: String
	externalId: String
	price: Int
	currency: String
	quantity: Int
}
type Params {
	pricePackageDataList: Unknown
}
type MerchandisingUnitElement {
	linkId: String
	uniqueId: String
	format: Unknown
	title: String
	url: String
	body: String
	cta: String
	content: CellMediaSourceElement
}
type PricePackageData {
	id: String
	requiredPaymentProviders: [Unknown]
	externalId: String
	price: Int
	currency: String
	quantity: Int
}
type UsersReadingCount {
}
type UserOnlineStatus {
	authorId: String
	isOnline: Boolean
}
type LinkUpdate {
	link: Unknown
}
type Hyperlink {
	link: String
	linkText: String
}
type All {
	linkId: String
}
type UsersReplyingCount {
}
type EndpointSignatureConfig {
	secret: String
	secretDebug: String
	appKey: String
	appKeyDebug: String
}
type InboxAnalyticsItem {
	id: String
	isViewed: Boolean
	isClicked: Boolean
	subredditId: String
	postId: String
}
type HeaderOverflowItemUiState {
	legacyIcon: Unknown
	icon: Icon
	text: String
	contentDescription: String
	onClick: Unknown
	legacyIconStyle: Unknown
	isTranslatable: Boolean
}
type Loaded {
	awarders: Unknown
}
type TopicPillsGroupElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	title: String
	schemeName: String
	topics: Unknown
	displayStyle: Unknown
}
type BatchSerializationFailure {
}
type BadRequest {
}
type NetworkError {
	networkType: Unknown
	errorMessage: String
}
type EventTooLarge {
}
type EventDeserializationFailure {
}
type FeedScrollEvent {
	elements: Unknown
	firstVisiblePosition: Unknown
}
type User {
	redditId: String
	name: String
	avatarUrl: String
	snoovatarUrl: String
}
type PostTypeSelectorPostSubmitClickEvent {
	subredditName: String
	subredditId: String
	postSubmitType: Unknown
	postType: Unknown
}
type SubredditSelectorPostSubmitClickEvent {
	subredditName: String
	subredditId: String
	postSubmitType: Unknown
	postType: Unknown
}
type DiscardPostSubmitClickEvent {
	subredditName: String
	subredditId: String
	postSubmitType: Unknown
	postType: Unknown
}
type CreatorKitClickPostEvent {
	postType: Unknown
	subredditName: String
	subredditId: String
	mediaId: String
	mediaDuration: Int
	mediaType: String
	postId: String
	postTitle: String
	flash: Boolean
	speed: Boolean
	timer: Boolean
	overlayTextLast: String
	overlayTextCount: Boolean
	voiceOver: Boolean
	numSegments: Int
	numSegmentsRecorded: Int
	numSegmentsUploaded: Int
	numPhotos: String
	pageType: String
}
type ClosePostSubmitClickEvent {
	subredditName: String
	subredditId: String
	postSubmitType: Unknown
	postType: Unknown
}
type PostSubmitClickPostEvent {
	subredditName: String
	subredditId: String
	postSubmitType: Unknown
	postType: Unknown
}
type AddTagsClickEvent {
	subredditId: String
	subredditName: String
}
type ReactAnalyticsEvent {
	source: Unknown
	action: Unknown
	noun: Unknown
	postComposer: Unknown
	actionInfo: Unknown
	media: Unknown
	reactSource: Unknown
	subreddit: Unknown
}
type CreatePostFromSubredditClickEvent {
	subredditName: String
	subredditId: String
	pageType: Unknown
	actionInfoType: String
}
type GlobalViewScreenPostEvent {
	pageType: String
}
type MediaGlobalViewScreenPostEvent {
	pageType: String
	postType: Unknown
}
type LinkIndicatorState {
	nsfwVisible: Boolean
	spoilerVisible: Boolean
	quarantinedVisible: Boolean
	appVisible: Boolean
	onAppContentTagClicked: Unknown
}
type ChatChannelFeedUnit {
	id: String
	recommendationAlgorithm: String
	channel: Unknown
	messages: Unknown
	dataSourceForExpTracking: Unknown
}
type OnModRemovePost {
	linkKindWithId: String
	userType: Unknown
}
type OnModModeClicked {
	subredditChannelsNavigationEnabled: Boolean
}
type OnModDistinguishPostAsAdmin {
	linkKindWithId: String
	subredditId: String
	how: Unknown
	shouldPersist: Boolean
}
type SccRecommendationContext {
	reason: Unknown
	seedSubreddit: ChatChannelSubredditInfo
}
type OnModDistinguishPostAsMod {
	linkKindWithId: String
	subredditId: String
	how: Unknown
	shouldPersist: Boolean
}
type HiddenImageMessage {
	id: String
	timestamp: Int
	sender: ChatChannelSender
	shouldGroup: Boolean
}
type TextMessage {
	id: String
	timestamp: Int
	sender: ChatChannelSender
	shouldGroup: Boolean
	text: String
	links: Unknown
}
type ChatChannelSender {
	id: String
	displayName: String
	profileIconUrl: String
	snoovatarIconUrl: String
	isNsfw: Boolean
}
type MultiChatChannelFeedUnit {
	id: String
	recommendationAlgorithm: String
	channels: Unknown
}
type OnModReportSpamPost {
	linkKindWithId: String
	subredditId: String
	authorId: String
	userType: Unknown
	shouldPersist: Boolean
}
type UccRecommendationContext {
	topics: Unknown
}
type SubredditChatChannel {
	id: String
	name: String
	permalink: String
	roomId: String
	description: String
	activeUsersCount: CountInfo
	recentMessagesCount: CountInfo
	subreddit: ChatChannelSubredditInfo
	roomIconUrl: String
	isNsfw: Boolean
	recommendationContext: SccRecommendationContext
}
type OnModApprovePost {
	linkKindWithId: String
	subredditId: String
	itemVisibilityStartTimeMs: Int
	userType: Unknown
	shouldPersist: Boolean
}
type OnModAssignReasonPost {
	linkKindWithId: String
	removalReason: String
}
type ChatChannelSubredditInfo {
	subredditId: String
	subredditName: String
	prefixedSubredditName: String
	icon: SubredditIcon
	isNsfw: Boolean
}
type EmailVerificationPopupUiModel {
	email: String
	error: String
}
type UserChatChannel {
	id: String
	name: String
	permalink: String
	roomId: String
	description: String
	roomIconUrl: String
	isNsfw: Boolean
	activeUsersCount: CountInfo
	recentMessagesCount: CountInfo
	recommendationContext: UccRecommendationContext
}
type SubredditIcon {
	url: String
	primaryColor: Int
}
type WelcomeIncognitoModeScreenDependencies {
	view: Unknown
	params: Params
}
type Params {
	originPageType: String
}
type EmoteSize {
}
type Keyboard {
	emotesUsedInParentComments: Boolean
}
type EmojiSet {
	isCustomSet: Boolean
	id: String
	title: String
	emojis: [Unknown]
	uploadPlaceholders: Boolean
	isAtMaxCapacity: Boolean
}
type PreProcessedFile {
	filePath: String
	mimeType: String
	width: String
}
type AvatarNudgeUiModel {
	id: String
	header: String
	title: String
	subtitle: String
	destination: Unknown
	lottieUrl: String
	isVisible: Boolean
}
type ButtonAppearanceUiModel {
	size: Unknown
	style: Unknown
}
type Image {
	url: String
	widthPercent: String
}
type EmojiDetails {
	url: String
	name: String
}
type BanEvasionFilterSettings {
	isEnabled: Unknown
	recency: Unknown
	postLevel: Unknown
	commentLevel: Unknown
}
type CommunityStatusDetails {
	description: String
	emoji: EmojiDetails
}
type CommunitySettings {
	discoverabilityTypes: [Unknown]
	isTopListingAllowed: Unknown
	isCrowdControlFilterEnabled: Unknown
	isDiscoveryAllowed: Unknown
	crowdControlLevel: Unknown
	crowdControlPostLevel: Unknown
	publicDescription: String
	hatefulContentThresholdAbuse: Unknown
	hatefulContentThresholdIdentity: Unknown
	isModmailHarassmentFilterEnabled: Unknown
	isRestrictCommentingEnabled: Unknown
	isRestrictPostingEnabled: Unknown
}
type TemporaryEventTemplatesPage {
	pageInfo: TempEventsPageInfo
	templates: Unknown
}
type MatureContentFilterSettings {
	isEnabled: Unknown
	sexualCommentContentType: Unknown
	sexualPostContentType: Unknown
	violentCommentContentType: Unknown
	violentPostContentType: Unknown
}
type CreateConfigMutationResponse {
	success: Boolean
	errorMessage: String
	configId: String
}
type DeepLink {
	url: String
}
type TemporaryEventRunsPage {
	pageInfo: TempEventsPageInfo
	eventRuns: Unknown
}
type TemporaryEventPreset {
	id: String
	title: String
	subtitle: String
	description: String
	rplIconName: String
	fields: TemporaryEventFields
	type: Unknown
}
type TemporaryEventTemplate {
	id: String
	name: String
	contributionMessage: String
	labels: [Unknown]
	authorId: String
	authorName: String
	subredditKindWithId: String
	status: Unknown
	createdAt: Unknown
	updatedAt: Unknown
	fields: TemporaryEventFields
}
type TemporaryEventFields {
	communitySettings: CommunitySettings
	matureContentFilterSettings: MatureContentFilterSettings
	banEvasionFilterSettings: BanEvasionFilterSettings
}
type TemporaryEventLabel {
	id: String
	displayName: String
	value: String
}
type Button {
	title: String
	deepLink: String
	appearance: ButtonAppearanceUiModel
}
type Space {
}
type TempEventsPageInfo {
	hasNextPage: Boolean
	startCursor: String
	endCursor: String
}
type Loaded {
	spotlightQueueItem: SpotlightQueueItem
	queuePostElement: QueuePostElement
	queueCommentParents: Unknown
	queueCommentElement: QueueCommentElement
	queueCommentChildren: Unknown
}
type TemporaryEventMutationResponse {
	success: Boolean
	errorMessage: String
}
type QuestionUIModel {
	id: String
	questionText: Unknown
	answers: [Unknown]
	progressUiModel: SurveyProgressUiModel
	isNextEnabled: Boolean
}
type TemporaryEventRun {
	id: String
	status: Unknown
	startAt: Unknown
	endAt: Unknown
	contributionMessage: String
	labels: [Unknown]
	config: TemporaryEventTemplate
	overriddenFields: TemporaryEventFields
}
type Text {
	content: String
	appearance: TextAppearanceUiModel
}
type TextAppearanceUiModel {
	fontType: Unknown
	alignment: Unknown
}
type Item {
	text: String
}
type AnswerUIModel {
	id: String
	text: String
	isSelected: Boolean
	isMutuallyExclusive: Boolean
}
type TagUIModel {
	titleText: String
	showTitleInActionBar: Boolean
	showExplanation: Boolean
	showPending: Boolean
	pendingText: String
	subreddit: Subreddit
	ratingTagIconUrl: String
	ratingTagName: String
	ratingTagDescription: String
	reasons: Unknown
	showSubmitButton: Boolean
	showStartButton: Boolean
	showRetakeBlock: Boolean
	showMessageModSupport: Boolean
}
type NewEventConfigDetails {
	templateName: String
	labels: [Unknown]
	fields: TemporaryEventFields
	communityStatusDetails: CommunityStatusDetails
}
type Header {
	text: String
}
type Subreddit {
	bannerBackgroundColor: String
	communityIcon: Unknown
	communityName: String
}
type StateTransitionFailure {
	fromState: Unknown
	onEvent: Unknown
}
type StateTransition {
	fromState: Unknown
	onEvent: Unknown
	toState: Unknown
	sideEffect: Unknown
}
type RecentModActivityElement {
	recentModActivitySubreddit: RecentModActivitySubreddit
	activeModerators: Unknown
	recentModActionsElements: [Unknown]
}
type EventData {
	state: Unknown
	event: Unknown
}
type Transition {
	toState: Unknown
	sideEffect: Unknown
}
type Edge {
	doTransition: Unknown
}
type Node {
	edges: Unknown
}
type LastModActionElement {
	id: String
	moderator: Moderator
	timeAgo: String
	actionNameStringResourceId: Int
	description: String
	details: String
	authorDisplayName: String
	postTitle: String
	isPost: Boolean
	isComment: Boolean
	contentPreview: String
}
type StateMap {
	stateMapBuilder: Unknown
}
type Rules {
	actions: [Unknown]
}
type DomainModeratorInfo {
	id: String
	displayName: String
}
type Subreddit {
	id: String
	name: String
}
type Unknown {
	message: String
}
type UnavailableRedditor {
	id: String
	displayName: String
}
type ModLogResult {
	data: Unknown
	startCursor: String
	endCursor: String
	hasNextPage: Boolean
}
type Unknown {
	actions: [Unknown]
}
type DeletedSubredditPost {
	id: String
	title: String
}
type Settings {
	actions: [Unknown]
}
type Comments {
	actions: [Unknown]
}
type PostsAndComments {
	actions: [Unknown]
}
type Comment {
	commentId: String
	postId: String
	postTitle: String
	content: String
	userName: String
	userId: String
}
type ModTeam {
	actions: [Unknown]
}
type CrowdControl {
	actions: [Unknown]
}
type SubredditPost {
	id: String
	title: String
	content: String
	userName: String
	userId: String
}
type DomainModLogEntry {
	id: String
	createdAt: Int
	actionType: Unknown
	actionCategory: Unknown
	actionNotes: String
	details: String
	deletedContent: String
	takedownContent: DomainTakedownContent
	moderator: DomainModeratorInfo
	target: Unknown
}
type Wiki {
	actions: [Unknown]
}
type Members {
	actions: [Unknown]
}
type ChatEvent {
	roomId: String
	eventId: String
	userName: String
	textContent: String
}
type DeletedRedditor {
	id: String
	displayName: String
}
type DomainTakedownContent {
	title: String
	body: String
	violatedContentPolicyRule: Unknown
}
type DeletedComment {
	commentId: String
	postId: String
	postTitle: String
}
type Redditor {
	id: String
	displayName: String
}
type Apps {
	actions: [Unknown]
}
type Awards {
	actions: [Unknown]
}
type Chat {
	actions: [Unknown]
}
type Posts {
	actions: [Unknown]
}
type FabDependencies {
	internalNavigator: Unknown
	tooltipLock: Unknown
	visibilityProvider: Unknown
}
type WelcomeMessageUserFlairSelect {
	isEnabled: Boolean
	title: String
	description: String
}
type OperationError {
	message: String
}
type HeaderSettings {
	isIconEnabled: Boolean
	isSubredditNameEnabled: Boolean
}
type CuratedPosts {
	isEnabled: Boolean
	postIds: [Unknown]
}
type WelcomeMessageText {
	messageWithoutTemplating: String
}
type WelcomeMessageContent {
	subredditId: String
	version: String
	subredditName: String
	subredditNamePrefixed: String
	communityIcon: String
	communityPrimaryColor: String
	communityBannerBackgroundImage: String
	isEnabled: Boolean
	isEnabledOnJoin: Boolean
	header: WelcomeMessageHeader
	userFlairSelect: WelcomeMessageUserFlairSelect
	resources: WelcomeMessageResources
	authorFlair: AuthorFlair
	userIsModerator: Boolean
	isUserFlairEnable: Boolean
	userCanAssignOwnFlair: Boolean
	curatedPosts: CuratedPosts
}
type WelcomeMessageAsset {
	id: String
	mimetype: String
	width: Int
	height: Int
	status: Unknown
}
type WelcomeMessageImage {
	url: String
	dimensions: WelcomeMessageDimensions
}
type AuthorFlair {
	authorFlair: String
	authorFlairTemplateId: String
	authorFlairRichTextObject: [Unknown]
	authorFlairBackgroundColor: String
	authorFlairTextColor: String
}
type WelcomeMessageResource {
	url: String
	title: String
}
type WelcomeMessageHeader {
	image: WelcomeMessageImage
	asset: WelcomeMessageAsset
	message: String
	isIconEnabled: Boolean
	isSubredditNameEnabled: Boolean
	mediaSelection: Unknown
	messageWithoutTemplating: String
}
type WelcomeMessageDimensions {
	width: Int
	height: Int
}
type HeaderImage {
	mediaId: String
	imageUri: String
	mediaSelection: Unknown
}
type CacheError {
	message: String
}
type RenderableError {
	message: String
}
type NoImage {
	mediaSelection: Unknown
	imageUri: String
}
type WelcomeMessageResources {
	isEnabled: Boolean
	resources: [Unknown]
}
type NetworkError {
	message: String
}
type CacheBatchReaderData {
	data: Unknown
}
type Preloaded {
	subredditKindWithId: String
	subredditName: String
	communityStatus: CommunityStatus
}
type Fetch {
	subredditKindWithId: String
}
type Image {
	url: String
	widthInPx: String
}
type Post {
	postKindWithId: String
	subredditKindWithId: String
	title: String
	postFlair: PostFlair
	expiresAt: Int
	labelType: Unknown
	authorIcon: String
	isNsfw: Boolean
	thumbNailV2: Thumbnail
	isTranslatable: Boolean
}
type CustomPost {
	postKindWithId: String
	subredditKindWithId: String
	title: String
	postFlair: PostFlair
	expiresAt: Int
	labelType: Unknown
	authorIcon: String
	isNsfw: Boolean
	thumbNailV2: Thumbnail
	isTranslatable: Boolean
	customData: CustomData
}
type CustomData {
	markDown: String
	richText: String
	isSelf: Boolean
}
type RemainingTime {
}
type Thumbnail {
	obfuscatedImage: Image
	defaultImage: Image
}
type PostFlair {
	text: String
	textColor: String
	backgroundColor: String
	templateId: String
	richTextObject: [Unknown]
}
type Fetch {
	subredditKindWithId: String
	communityStatusSource: Unknown
}
type Preloaded {
	subredditKindWithId: String
	communityStatusSource: Unknown
	subredditName: String
	communityStatus: CommunityStatus
	userHasManageSettingsPermission: Boolean
}
type AnnouncementOptOuts {
	title: String
	authors: Unknown
}
type AnnouncementAuthor {
	id: String
	name: String
	iconData: IconData
}
type Participant {
	id: String
	displayName: String
}
type IconData {
	snoovatarIcon: String
	profileIcon: String
	isNsfw: Boolean
}
type NotificationAnnouncement {
	id: String
	author: Participant
	recipient: Participant
	subject: String
	body: Body
	icon: Unknown
	sentAt: Unknown
	readAt: Unknown
	deeplinkURL: String
	flags: Unknown
}
type Comment {
	contentKindWithId: String
}
type Confidence {
	level: Unknown
	levelText: String
}
type ModAction {
	typeAccessibilityStringResId: Int
	createdAt: Int
	category: Unknown
	modActionType: Unknown
	details: String
	notes: String
	redditor: Redditor
}
type Post {
	contentKindWithId: String
}
type Body {
	richText: String
	text: String
}
type Redditor {
	iconUrl: String
	username: String
}
type ReportAction {
	actionId: String
	title: String
	typeAccessibilityStringResId: Int
	createdAt: Int
	category: Unknown
}
type InboxMenuItemClickEvent {
	menuItem: Unknown
	kindWithId: String
	awardingInfo: AwardingInfo
	username: String
	userId: String
	isAnonymousAward: Boolean
	latestMessageId: String
}
type InboxItemUiModel {
	threadId: String
	firstItem: MessageItem
	lastItem: MessageItem
	isNew: Boolean
}
type QueueContentModificationEvent {
	contentType: Unknown
	actionType: Unknown
	queueUserType: Unknown
}
type DiscoverNavigationData {
	navigationRecommendations: Unknown
}
type NetworkError {
	message: String
}
type QueueFooterSection {
	uniqueId: String
	data: QueueFooterElement
}
type Order {
}
type RuleItemUiState {
	id: String
	displayPositionType: Unknown
	name: String
	description: String
	editEnabled: Boolean
}
type DomainSubredditRule {
	ruleId: String
}
type SavedResponseResult {
	hasErrored: Boolean
	isLoading: Boolean
	responses: [Unknown]
	rules: [Unknown]
}
type ActionReportReasonUiModel {
	title: String
	body: String
	icon: Icon
}
type LastActionUiModel {
	title: String
	body: String
	icon: Icon
}
type Mod {
	iconUrl: String
}
type ActionHistoryPostInfoUiModel {
	lastAction: LastActionUiModel
	reports: Unknown
	safetyFilters: Unknown
	reportsIgnored: Boolean
}
type Admin {
	iconUrl: String
}
type PostFollowPromptEligibilityArgs {
	postId: String
	postCreationDate: Int
	numCommentsOnPost: Int
	isSubscribedToPost: Boolean
	isPostAuthor: Boolean
}
type JsonEncodedString {
	jsonEncodedString: String
}
type HostModeBottomSheetParams {
	channelId: String
	roomId: String
	roomType: Unknown
	roomName: String
}
type Value {
	value: Unknown
}
type SubredditInfo {
	id: String
	name: String
}
type NetworkError {
	message: String
}
type Header {
	context: Unknown
}
type ItemClicked {
}
type DeleteRulePressed {
}
type ShowRemoveMenuEvent {
	linkId: String
	subredditId: String
	subredditName: String
	authorId: String
	itemVisibilityStartTimeMs: Int
}
type OnModPostFlairClicked {
	linkId: String
	uniqueId: String
	promoted: Boolean
}
type And {
	operands: Unknown
}
type BPossibleTypes {
	possibleTypes: Unknown
}
type BVariable {
	name: String
}
type Present {
	value: Unknown
}
type DeferredFragmentIdentifier {
	path: [Unknown]
	label: String
}
type Element {
	value: Unknown
}
type CompiledCondition {
	name: String
	inverted: Boolean
}
type NotVerified {
	email: String
}
type TierInfo {
	tier: Unknown
}
type ContributorStatus {
	karma: Unknown
	tiersInfo: [Unknown]
}
type GoogleBillingVerificationResponse {
	errors: [Unknown]
	ok: Boolean
	fallbackRequired: Boolean
}
type GoldSender {
	id: String
	displayName: String
	snoovatarIcon: String
}
type GqlApiError {
	message: String
	errorCode: String
	canRetry: Boolean
}
type RedditGoldProfile {
	summary: Summary
	contributorStatus: ContributorStatus
	receivedGoldList: Unknown
	receivedPayouts: Unknown
}
type ReceivedPayout {
	earnings: Unknown
	gold: String
	status: Unknown
}
type ReceivedGold {
	gold: String
	goldSender: GoldSender
	goldIcon: String
}
type Verified {
	email: String
}
type VerificationStatus {
	overallVerificationStatus: Unknown
	emailVerificationStatus: Unknown
	bankAndTaxInfoVerificationStatus: Unknown
	personalInfoVerificationStatus: Unknown
	personaOnboardingUrl: String
}
type Summary {
	currentGoldBalance: String
}
type Stateful {
	activatedIcon: Icon
	inactiveIcon: Icon
	iconDescriptionResId: Int
	enabled: Boolean
	hidden: Boolean
	activated: Boolean
	actioning: Boolean
	activatedActionStringResId: Int
	inactiveActionAccessibilityStringResId: Int
	activatedActionEvent: Unknown
	inactiveActionEvent: Unknown
}
type Stateless {
	icon: Icon
	iconDescriptionResId: Int
	enabled: Boolean
	hidden: Boolean
	actionStringResId: String
	actionEvent: Unknown
	actionAccessibilityStringResId: Int
}
type KeyEvent {
	nativeKeyEvent: Unknown
}
type Key {
	theme: Unknown
}
type ImageVectorEntry {
	imageVector: Unknown
}
type LinkInfo {
	url: String
	start: Unknown
}
type UccChannelSetupCapabilities {
	editChannelAvatar: Boolean
	setupManageChannel: Boolean
	setupDiscovery: Boolean
}
type GifStub {
	id: String
}
type UrlPreviewDataImageSize {
}
type Topic {
	name: String
	id: String
}
type Chat {
	room: RoomSummary
	icon: String
	subredditName: String
	myUserId: String
	lastMessageSender: Unknown
}
type ChannelContentRestrictions {
	isImagesRestricted: Boolean
	isGifsRestricted: Boolean
	isStickersRestricted: Boolean
}
type Image {
	path: String
	width: Int
	height: Int
	size: Int
}
type ChatGif {
	id: String
	title: String
	url: String
}
type LegacyUserChatChannel {
}
type ReportedMessageInfo {
	eventId: String
	threadId: String
}
type WithTimestamp {
	data: GifsPage
	timestamp: Int
}
type RichText {
	richTextElements: Unknown
	linkUrls: Unknown
}
type Subreddit {
	subredditId: String
	avatarUrl: String
	displayName: String
}
type Reported {
	reasons: Unknown
}
type GifsPage {
	gifs: [Unknown]
	hasNextPage: Boolean
	provider: String
	endCursor: String
}
type Disabled {
	roomId: String
	roomName: String
	channelId: String
	roomType: Unknown
}
type RoomShortSummary {
	id: String
	name: String
	description: String
	avatarUrl: String
	typeInfo: Unknown
}
type Enabled {
	roomId: String
	roomName: String
	channelId: String
	roomType: Unknown
}
type LinkPreview {
	replaceContentWithLinkPreview: Boolean
	linkPresentationModel: Unknown
}
type StartChatResult {
	matrixRoomId: String
	userId: String
}
type UrlPreviewData {
	previewImageUrl: String
	previewImageSize: UrlPreviewDataImageSize
	imageType: Unknown
	linkUrl: String
	linkUrlToDisplay: String
	title: String
	description: String
	topic: String
	metadata: String
}
type FromSubreddit {
	management: Boolean
	moderation: Boolean
}
type ModmailChat {
}
type Redditor {
	matrixUserId: String
	displayName: String
}
type RedditLinkPreview {
	link: Unknown
}
type FromPowerLevel {
}
type Query {
	name: String
	id: String
}
type GroupChat {
}
type Me {
	matrixUserId: String
	displayName: String
}
type RedditUser {
	redditId: String
	matrixId: String
	name: String
	profileIconUrl: String
	snoovatarIconUrl: String
	isNsfw: Boolean
	totalKarma: Int
	cakeday: Int
	isBlocked: Boolean
	isAcceptingChats: Boolean
}
type MatrixChatReaction {
	key: String
	imageUrl: String
	altText: String
	matrixUrl: String
}
type SubredditChatChannel {
	channelId: String
	subredditId: String
	subredditName: String
}
type CheckPhoneNumberErrorUiModel {
	reason: String
	explanation: String
}
type ModeratorsListScreenDependencies {
	view: Unknown
}
type Success {
	userKindWithId: String
	sessionCookie: String
}
type CheckPhoneNumberSuccessUiModel {
	jwt: String
}
type CheckPhoneNumberAccessErrorUiModel {
	httpCode: Boolean
}
type PhoneRegisterV2Result {
	sessionCookie: String
}
type NewUser {
	jwt: String
	sessionCookie: String
}
type Country {
	id: String
	shortName: String
	code: String
	mask: String
}
type PhoneNumber {
	rawValue: String
	country: Country
}
type ModeratorDisplayItem {
	userId: String
	userName: String
	userIconUrl: String
	moddedAt: String
	permissionsLabel: String
	isActive: Boolean
	source: Unknown
}
type SuggestUserNameAfterEmailFlow {
	email: String
	password: String
	emailDigestState: Boolean
	verificationTokenId: String
}
type ModState {
	id: String
	name: String
	modModeActivated: Boolean
}
type Post {
	subredditKindWithId: String
	postKindWithId: String
}
type CommentAward {
	subredditKindWithId: String
	postKindWithId: String
	commentKindWithId: String
	awardId: String
}
type Comment {
	subredditKindWithId: String
	postKindWithId: String
	commentKindWithId: String
}
type ModRemovalReasonFilter {
	title: String
	markdown: String
	richtext: Unknown
	preview: String
	icon: Unknown
	modIconSmall: String
	modSnoovatarIcon: String
}
type Verdict {
	verdictType: Unknown
	verdictBy: Author
}
type ModVerdict {
	queueContentType: Unknown
	isActioned: Boolean
	modQueueReason: ModRemovalReasonViewState
	reportCount: Int
	verdictType: Unknown
	modQueueType: Unknown
	removalReason: String
	canAddRemovalReason: Boolean
	subredditWithKindId: String
	subredditName: String
	authorName: String
	icon: String
	snoovatar: String
}
type PostAward {
	subredditKindWithId: String
	postKindWithId: String
	awardId: String
}
type ModRemovalReasonViewState {
	title: String
	markdown: String
	preview: String
	icon: Unknown
	modIconSmall: String
	modSnoovatarIcon: String
	isModRemovalReasonFilter: Boolean
}
type Author {
	id: String
	icon: String
	snoovatar: String
	username: String
	isDeleted: Boolean
	isUnavailable: Boolean
	flair: Unknown
}
type ModRemovalReasonReport {
	title: String
	markdown: String
	richtext: Unknown
	preview: String
	icon: Unknown
	modIconSmall: String
	modSnoovatarIcon: String
}
type External {
	exoPlayerCacheInBytes: Int
	exoPlayerCacheFilesCount: Int
	downloadsInBytes: Int
	picturesInBytes: Int
	moviesInBytes: Int
}
type Internal {
	cacheSizeInBytes: Int
	filesSizeInBytes: Int
	dataSizeInBytes: Int
	preferencesInBytes: Int
	databasesInBytes: Int
	glideCacheInBytes: Int
	glideCacheFilesCount: Int
	exoPlayerCacheInBytes: Int
	exoPlayerCacheFilesCount: Int
}
type Volume {
	appSize: Int
	cacheSize: Int
	dataSize: Int
	externalCache: Int
}
type FairChoiceBottomSheetDependencies {
	subredditName: String
	selectedUserFlair: Unknown
	entryType: Unknown
	flairSelectedId: String
}
type StorageInfo {
	internalStorageInfo: Internal
	externalStorageInfo: External
	volumes: [Unknown]
}
type Url {
	url: String
}
type AttachLinkPreviewError {
	messageId: String
	failure: Unknown
}
type FoundUsername {
	username: String
}
type BidiRun {
	start: Boolean
}
type MatrixErrorUiModel {
	localizedMessage: String
	canRetry: Boolean
	isRateLimitError: Boolean
	shouldRemoveFromTimeline: Boolean
	learnMoreLink: String
}
type SubredditCreatedChannel {
	label: String
	description: String
	icon: Unknown
	channelId: String
	subredditName: String
	canSeeDeleteButton: Boolean
	canSeeManageChannelButton: Boolean
	canSeeNotificationsButton: Boolean
	canEditNameAndDescription: Boolean
}
type GroupChat {
	label: String
	canSeeInviteButton: Boolean
	canSeeMembersListButton: Boolean
	canSeeRenameButton: Boolean
	members: MemberCount
}
type DirectChat {
	redditUser: RedditUser
}
type MemberCount {
}
type ModmailChat {
	name: String
}
type DomainModPermissions {
	isAllAllowed: Boolean
	isAccessEnabled: Boolean
	isConfigEditingAllowed: Boolean
	isFlairEditingAllowed: Boolean
	isMailEditingAllowed: Boolean
	isPostEditingAllowed: Boolean
	isWikiEditingAllowed: Boolean
	isChatConfigEditingAllowed: Boolean
	isChatOperator: Boolean
	isChannelsEditingAllowed: Boolean
	isCommunityChatEditingAllowed: Boolean
}
type GenericSelectionParams {
	title: String
	selectionOptions: [Unknown]
	showCloseButton: Boolean
}
type DomainSubreddit {
	id: String
	name: String
	icon: String
	modPermissions: DomainModPermissions
}
type DomainModerator {
	id: String
	name: String
}
type CountryModel {
	name: String
	countryCode: String
}
type EditShowcaseCardUiModel {
	inventoryItemId: String
	name: String
	collectionSize: Int
	imageUrl: String
	selectionIndex: Int
}
type RemovalReasonSelected {
	removalReason: Unknown
}
type VerifyPhoneV2Success {
	jwt: String
}
type TokenCredentialsSignUp {
	idToken: String
	optionalUserData: OptionalUserData
}
type SubredditContribution {
	commentCount: String
}
type Comment {
	postKindWithId: String
	commentKindWithId: String
}
type AuthorFlair {
	authorFlair: String
	authorFlairTemplateId: String
	authorFlairRichTextObject: [Unknown]
	authorFlairBackgroundColor: String
	authorFlairTextColor: String
}
type CommunityChat {
	channelId: String
	messageId: String
}
type OverallInfo {
	isVerifiedEmail: Boolean
	isApprovedUser: Boolean
	banExpirationTime: Int
	muteExpirationTime: Int
}
type History {
	overallInfo: OverallInfo
	subredditInfo: SubredditInfo
	contributionsInfo: ContributionsInfo
	allRedditInfo: AllRedditInfo
}
type Post {
	postKindWithId: String
}
type AllRedditInfo {
}
type UsercardInfo {
	userIconUrl: String
	displayName: String
	prefixedUsername: String
	cakeday: String
	userIsModerator: Boolean
	totalPostKarma: Int
	totalCommentKarma: Int
	isUserFlairEnable: Boolean
	userCanAssignOwnFlair: Boolean
	isMuted: Boolean
	isBanned: Boolean
	isApproved: Boolean
	isBlocked: Boolean
	isChatEnabled: Boolean
	authorFlair: AuthorFlair
	userPublicContributorTier: String
	history: History
}
type SubredditInfo {
}
type UsernamePasswordCredentialsSignIn {
	username: String
	password: String
}
type OptionalUserData {
	name: String
	email: String
	avatarUrl: String
}
type TokenCredentialsSignIn {
	idToken: String
}
type Approved {
	subredditKindWithId: String
	contentType: Unknown
}
type IgnoredAndApproved {
	subredditKindWithId: String
	contentType: Unknown
}
type Removed {
	subredditKindWithId: String
	contentType: Unknown
}
type Unignored {
	subredditKindWithId: String
	contentType: Unknown
}
type Mail {
	subredditKindWithId: String
	subredditName: String
	subredditIconUrl: String
	mailboxCategory: String
}
type InlineModerationBarViewState {
	isApproved: Boolean
	isRemoved: Boolean
	isSpam: Boolean
	isLocked: Boolean
	isSpoiler: Boolean
	showDistinguish: Boolean
	isDistinguished: Boolean
}
type Removed {
	reason: String
}
type Removed {
	reason: String
}
type Removed {
	reason: String
	authorIcon: String
	authorSnoovatar: String
}
type Approved {
	authorIcon: String
	authorSnoovatar: String
}
type Log {
	subredditKindWithId: String
	subredditName: String
	subredditIconUrl: String
}
type AuthenticationResult {
	credentials: AuthenticationCredentials
}
type SelectedSubreddits {
	subredditKindWithId: String
	subredditName: String
	subredditIcon: String
}
type AuthenticationCredentials {
	username: String
	tokenScope: Unknown
	accessToken: String
	sessionCookie: String
}
type Content {
	title: String
	leftCount: Int
	rightCount: Int
	postType: Unknown
	postId: String
	commentId: String
}
type DeletedComment {
	commentId: String
	postId: String
}
type ContributionsInfo {
	subredditContributions: Unknown
}
type Stateful {
	activatedIcon: Icon
	inactiveIcon: Icon
	iconDescriptionResId: Int
	enabled: Boolean
	hidden: Boolean
	activated: Boolean
	actioning: Boolean
	activatedActionStringResId: Int
	inactiveActionAccessibilityStringResId: Int
	activatedActionEvent: Unknown
	inactiveActionEvent: Unknown
}
type Stateless {
	icon: Icon
	iconDescriptionResId: Int
	enabled: Boolean
	hidden: Boolean
	actionStringResId: Int
	actionLabel: String
	actionEvent: Unknown
}
type PopToTag {
	tag: String
}
type MnemonicPhrase {
	wordList: [Unknown]
}
type Address {
	value: Unknown
}
type ProtectVaultState {
	address: Address
	completionAction: Unknown
	forRegistration: Boolean
	showRedditBackup: Boolean
	showManualBackup: Boolean
	allowBack: Boolean
	showSkipButton: Boolean
}
type Credentials {
	mnemonicPhrase: MnemonicPhrase
	privateKey: Unknown
	publicKey: Unknown
	address: Address
}
type SecureVaultState {
	completionAction: Unknown
	showSkipButton: Boolean
	entryPoint: Unknown
}
type CryptoContract {
	userId: String
	active: Boolean
	address: Address
}
type Signature {
	r: Unknown
	s: Unknown
	v: Unknown
}
type CreatedVault {
	address: Address
	createdAt: Unknown
}
type Icon {
}
type W3ReportingPolicy {
	reportingGroups: [Unknown]
	reportingPolicies: Unknown
}
type ReportingEndpoint {
	url: String
}
type ReportingGroup {
	group: String
	maxAgeSeconds: Int
	includeSubdomains: Boolean
	endpoints: [Unknown]
}
type ReportingPolicy {
	reportTo: String
	maxAgeSeconds: Int
	successFraction: Float
	failureFraction: Float
}
type OutfitAnalyticsClickData {
	inventoryItemId: String
	inventoryItemName: String
	outfitId: String
	listingId: String
	listingPriceCents: Int
	listingCurrency: String
	listingNftStatus: String
}
type PriceLocalized {
	priceFormatted: String
	price: String
}
type UtilityType {
	id: String
	iconUrl: String
	title: String
}
type StorefrontListingPresentationType {
	isComfy: Boolean
}
type PricePackage {
	id: String
	externalProductId: String
}
type StorefrontListingsFilterModel {
	ids: [Unknown]
	artistIds: [Unknown]
	theme: Unknown
	status: Unknown
	priceLowerBound: Int
	priceUpperBound: Int
	totalInventoryLowerBound: Int
	totalInventoryUpperBound: Int
	percentInventoryRemainingLowerBound: Int
	percentInventoryRemainingUpperBound: Int
	tags: [Unknown]
	textMatch: String
	utilityType: String
	releasedWithinDays: Int
}
type ArtistWithListings {
	artist: StorefrontArtist
	listings: [Unknown]
}
type StorefrontArtist {
	id: String
	presentedName: String
	isNsfw: Boolean
	iconUrl: String
	snoovatarFullBodyUrl: String
	username: String
	description: String
}
type StorefrontArtistReduced {
	id: String
	presentedName: String
	isNsfw: Boolean
	iconUrl: String
	snoovatarFullBodyUrl: String
}
type InitialStorefrontData {
	priceFilters: [Unknown]
	utilityTypes: [Unknown]
	status: Unknown
	components: [Unknown]
	dynamicLayoutMetadata: DynamicLayoutMetadata
}
type StorefrontListingPriceLookupInfo {
	listingId: String
	externalProductId: String
	originalPriceUsdCents: Int
}
type StorefrontListing {
	id: String
	name: String
	artistId: String
	foregroundImageUrl: String
	backgroundImageUrl: String
	totalQuantity: Int
	soldQuantity: Int
	status: Unknown
	pricePackage: PricePackage
	priceLocalized: PriceLocalized
	expiresAt: Unknown
	inventoryItemId: String
	outfitId: String
	badges: Unknown
	isSandboxOnly: Boolean
	utilityBadges: Unknown
	tags: [Unknown]
}
type CategoryDetail {
	id: String
	title: String
	description: String
	imageUrl: String
	filter: StorefrontListingsFilterModel
}
type UtilityBadge {
	iconUrl: String
	title: String
}
type NftMetadata {
	ownership: NftOwnership
}
type ShareableSnoovatarModel {
	shareUrl: String
}
type CategoryModel {
	id: String
	name: String
	sections: [Unknown]
}
type ColorSelectionModel {
	hasCustomColor: Boolean
	associatedCssClass: String
	defaultRgbValues: [Unknown]
}
type Error {
	message: String
}
type NftOwnership {
	tokenId: String
	contractAddress: String
	walletAddress: String
}
type SnoovatarSourceInfo {
	source: Unknown
	sourceAuthorId: String
}
type AccessoryExpiryModel {
	isUrgent: Boolean
	text: String
}
type AccessoryAssetModel {
	id: String
	zIndex: String
}
type AccessoryModel {
	id: String
	sectionId: String
	isPremium: Boolean
	state: Unknown
	cssColorClasses: [Unknown]
	assets: [Unknown]
	tags: [Unknown]
	expiryModel: AccessoryExpiryModel
	outfitModel: AccessoryOutfitModel
}
type SectionModel {
	id: String
	title: String
	colorSelections: [Unknown]
	accessories: [Unknown]
}
type NftBackgroundModel {
	outfitId: String
	inventoryItemId: String
	name: String
	backgroundUrl: String
	outfitAccessoryIds: [Unknown]
}
type SnoovatarModel {
	userKindWithId: String
	styles: Unknown
	accessories: Unknown
	backgroundInventoryId: String
}
type Error {
	message: String
}
type ImageUrl {
	url: String
}
type AccessoryOutfitModel {
	componentAccessories: [Unknown]
	metadata: OutfitMetadata
	nftMetadata: NftMetadata
}
type BackgroundSelected {
	isAutoSelected: Boolean
	outfitId: String
	inventoryItemId: String
	backgroundUrl: String
}
type RunwayItemModel {
	title: String
	imageUrl: String
	isPremium: Boolean
	colorSelections: [Unknown]
	accessories: [Unknown]
}
type Remote {
	imageUrl: String
	accessoryIds: [Unknown]
}
type ClosetModel {
	accessoryIds: Unknown
	maxSlots: Unknown
}
type RunwayModel {
	id: String
	title: String
	items: Unknown
}
type BatchUpdate {
	relatedUserKindWithId: String
	styles: Unknown
	accessories: Unknown
	justTheOutfit: Boolean
}
type OutfitMetadata {
	title: String
	fullName: String
	backgroundImageUrl: String
	inventoryItemId: String
	artistName: String
}
type CatalogModel {
	runways: Unknown
	categories: [Unknown]
	defaultAccessories: Unknown
	closet: ClosetModel
	outfits: Unknown
	pastOutfits: Unknown
	nftOutfits: [Unknown]
	accessories: Unknown
	backgrounds: Unknown
}
type AccountModel {
	id: String
	avatarId: String
	styles: Unknown
	accessoryIds: Unknown
	snoovatarUrl: String
	eventUris: Unknown
	backgroundInventoryId: String
}
type HttpHeader {
	name: String
	value: String
}
type MediaPicker {
	name: String
	icon: Unknown
}
type RecentFolderItemUiModel {
	name: String
}
type FolderItemUiModel {
	name: String
	bucketId: String
}
type Item {
	filePath: String
	selected: Boolean
	size: Int
	width: Int
	height: Int
	date: Int
	contentDescription: String
	selectionOrderIndex: String
}
type Folder {
	name: String
}
type CommunityAccessRequestData {
	id: String
	name: String
	accessType: Unknown
	restrictionType: Unknown
	communityDescription: String
	bannerUrl: String
	communityIcon: String
}
type ChatRoomConfig {
	isImageMessagesAvailable: Boolean
	isMessageReactionAvailable: Boolean
	isSnoomojiMessagesEnabled: Boolean
	isGiphyAvailable: Boolean
	threadsAllowed: Boolean
	messagesGroupTimeWindow: Boolean
	isMessageSendAvailable: Boolean
	isDeleteAvailable: Boolean
}
type FormatterCacheKey {
	locale: Unknown
	pattern: String
}
type QueueTagsSection {
	data: QueueTagsElement
}
type QueueAwardCommentSection {
	commentAward: CommentAward
	subredditWithKindId: String
	subredditName: String
	preview: String
	sections: Unknown
	isActioned: Boolean
	isHighlighted: Boolean
	canSwipe: Boolean
	isQuickCommentRemoveEnabled: Boolean
	awardImageUrl: String
}
type QueuePostContentSection {
	data: QueuePostContentElement
}
type QueueAwardCommentContentSection {
	data: QueueAwardCommentContentElement
	isComposePreview: Boolean
	showPostTitle: Boolean
}
type UnBan {
	channelId: String
}
type QueueAwardPostContentSection {
	data: QueueAwardPostContentElement
	isComposePreview: Boolean
}
type UserActionsInfo {
	isYou: Boolean
	user: RedditUser
	roomName: String
	actions: [Unknown]
}
type QueueCommentSection {
	comment: Comment
	subredditWithKindId: String
	subredditName: String
	preview: String
	sections: Unknown
	isActioned: Boolean
	isHighlighted: Boolean
	canSwipe: Boolean
	isQuickCommentRemoveEnabled: Boolean
}
type QueueAwardPostSection {
	postAward: PostAward
	preview: String
	sections: Unknown
	isActioned: Boolean
	canSwipe: Boolean
	subredditWithKindId: String
	subredditName: String
	awardImageUrl: String
}
type QueueCommentContentSection {
	data: QueueCommentContentElement
	isComposePreview: Unknown
	showPostTitle: Boolean
}
type QueueHeaderSection {
	data: QueueHeaderElement
	showOverflowMenu: Boolean
	isQuickCommentRemoveEnabled: Boolean
}
type QueuePostSection {
	post: Post
	preview: String
	sections: Unknown
	isActioned: Boolean
	canSwipe: Boolean
	subredditWithKindId: String
	subredditName: String
}
type AdPreferences {
	isAdBasedOnActivityPreferenceShown: Boolean
	isAdBasedOnActivityAllowed: Boolean
	isAdBasedOnPartnersAllowed: Boolean
}
type SensitiveAdPreferences {
	isAlcoholAllowed: Boolean
	isDatingAllowed: Boolean
	isGamblingAllowed: Boolean
	isPoliticsAllowed: Boolean
	isPregnancyAndParentingAllowed: Boolean
	isReligionAllowed: Boolean
	isWeightLossAllowed: Boolean
}
type MtSeo {
	targetLanguage: String
}
type PremiumBenefitUiModel {
	title: String
	description: String
	imageResource: Boolean
	titleWithAsterisk: Boolean
	analyticsId: String
	informationUrl: String
	isHighlightedBanner: Boolean
	onClickAction: Unknown
}
type Toggle {
	enabled: Boolean
	switch: Unknown
}
type Present {
	id: String
	postId: String
	body: String
}
type Deleted {
	id: String
	postId: String
}
type Redditor {
	id: String
	displayName: String
}
type Post {
	id: String
	title: String
	score: Int
	postType: Unknown
}
type Ban {
	channelId: String
}
type ReplayCaptureMetrics {
	viewCount: Int
	encodingTimeMs: Int
}
type Params {
	subredditId: String
	subredditName: String
	postId: String
	postType: String
	postTitle: String
	commentId: String
}
type ScreenshotCaptureMetrics {
	screenshotTimeMs: Int
	screenshotAllocationByteCount: Int
}
type SessionReplayConfiguration {
	categorizers: Unknown
}
type Post {
	subredditKindWithId: String
	postKindWithId: String
	isModModeEnabled: Boolean
	pane: Unknown
	postActionBarState: Unknown
}
type Comment {
	subredditKindWithId: String
	postKindWithId: String
	commentKindWithId: String
	isModModeEnabled: Boolean
	pane: Unknown
}
type SessionChange {
	isSignUp: Boolean
	clearBackstack: Boolean
	keepHomeUnderDeeplink: Boolean
	incognitoSessionTimedOut: Boolean
	incognitoSessionKickedOut: Boolean
	incognitoExitReason: String
	deeplinkIntent: Unknown
	showPasswordReset: Boolean
}
type Create {
	subredditKindWithId: String
}
type SessionStateTransition {
	newSession: Unknown
	sourceMode: Unknown
	sessionEvent: InternalSessionEvent
	previousUsername: String
}
type SessionTokenRequest {
	session: Unknown
	loId: String
	deviceId: String
}
type Params {
	question: Unknown
	selectedOptionIds: [Unknown]
	questionNumber: Int
	questionsTotalCount: Int
}
type ReorderConfirmationViewState {
	reason: String
	confirmations: Unknown
	isSubmitEnabled: Boolean
	helperText: String
	shouldHide: Boolean
	isLoading: Boolean
}
type OnModMoved {
	id: String
}
type ConfirmationInfo {
	text: String
	isChecked: Boolean
}
type Loaded {
	moderators: [Unknown]
	firstDraggableModeratorIndex: Boolean
}
type OnConfirmationSelection {
}
type OnReasonUpdated {
	text: String
}
type Order {
}
type RemovalReasonItemUiState {
	id: String
	displayPositionType: Unknown
	title: String
	message: String
	editEnabled: Boolean
	initialTooltipEnabled: Boolean
	isRemovalReasonSubmitLoading: Boolean
}
type RemovalReasonEditUiState {
	id: String
	title: String
	message: String
}
type RemovalReasonsStickyModel {
	userId: String
	subredditId: String
	notifyUserVia: Unknown
	sendMessageAs: Unknown
	lockComment: Boolean
	contentType: Unknown
	toggleState: Boolean
}
type AndroidVectorParser {
	xmlParser: Unknown
}
type Search {
	query: String
}
type GifStubUiModel {
	id: String
}
type ChatGifUiModel {
	id: String
	url: String
	width: String
}
type Gifs {
	gifType: Unknown
	gifs: [Unknown]
}
type SelectGifScreenState {
	content: Unknown
	gifsProvider: String
	clearTextButtonVisible: Boolean
}
type SelectGifScreenStateUiModel {
	gifs: Unknown
	gifType: Unknown
	showErrorView: Boolean
	showEmptyView: Boolean
	clearTextButtonVisible: Boolean
	searchHint: String
}
type TimedForwarderEip712 {
	timedForwarderAddress: Address
	timedForwarderRequestParams: Unknown
}
type FileDownloadPayload {
	bitrate: Int
	domainName: String
	bytesLoaded: Int
	format: String
}
type VideoErrorReport {
	errorCode: String
	mimeType: String
	networkType: String
}
type ReceivedNotificationDataModel {
	correlationId: String
	timestamp: Int
}
type SubredditInfo {
	id: String
	name: String
}
type VideoCorrelation {
	id: String
}
type Anchored {
	title: String
	showChevron: Boolean
	indicator: Unknown
	clickListener: Unknown
	anchoringDirection: Unknown
	tailGravity: Unknown
	maxWidth: Int
	verticalInset: Boolean
	background: Unknown
	tailTint: Int
	titleGravity: Int
	marginHorizontalInDp: Int
}
type SoftKeyboardState {
	isOpened: Boolean
	height: Int
}
type ModNoteLabel {
	noteLabel: Unknown
}
type Lottie {
	name: String
	url: String
}
type Cakeday {
	text: Int
	textColor: Int
}
type RecordForKey {
	key: String
	record: String
}
type RecordsForKeys {
	key: String
	record: String
}
type ULongArray {
	storage: Unknown
}
type UShortArray {
	storage: Unknown
}
type UByteArray {
	storage: Unknown
}
type MediaVanillaProps {
	ownerId: String
	mediaData: Preview
	surfaceName: String
}
type Preview {
	thumbnailUrl: String
	mediaId: String
	status: Unknown
}
type LeaderboardPreloadData {
	tabs: Unknown
}
type TrophyUiModel {
	id: String
	awardId: String
	name: String
	description: String
	iconUrl: String
	url: String
}
type Flair {
	items: [Unknown]
	isLightTextColor: Boolean
	backgroundColor: String
	accessibilityText: String
}
type MagicLinkExperiment {
	experimentId: Int
	experimentName: String
	experimentVariant: String
}
type Post {
	isNsfw: Boolean
	title: String
	backgroundImage: BackgroundImage
	eventData: Data
	type: Unknown
}
type BackgroundImage {
	imageUrl: String
}
type CustomPost {
	isNsfw: Boolean
	title: String
	backgroundImage: BackgroundImage
	eventData: Data
	type: Unknown
	isSelf: Boolean
	richText: String
	markdown: String
}
type Author {
	iconUrl: String
}
type GenericError {
	message: String
}
type ErrorReportRequest {
	message: String
	details: String
}
type Event {
	happeningLbl: String
}
type LeaderboardTab {
	id: String
	isActive: Boolean
	availableSorting: Unknown
}
type AvatarModel {
	redditorId: String
	profileIconUrl: String
	snoovatarIconUrl: String
	isNsfw: Boolean
}
type ModActionState {
	kindWithId: String
	verdict: Unknown
	distinguished: Unknown
	sticky: Unknown
	highlight: Unknown
	lock: Unknown
	nsfw: Unknown
	spoiler: Unknown
	flair: Unknown
}
type Leaderboard {
	tabs: [Unknown]
	currentSorting: LeaderboardSorting
	description: String
	learnMoreUrl: String
	items: Cursor
	updateIntervalLabel: String
	lastUpdatedLabel: String
	currentUserRank: Unknown
	requirementLabel: String
}
type LeaderboardSorting {
	value: String
	id: String
}
type PositionChangeInfo {
	text: String
}
type Divider {
	icon: String
	label: String
}
type Id {
	personId: String
	uniqueId: String
}
type PersonViewState {
	id: Id
	iconUrl: String
	username: String
	statistics: String
	karmaAccessibilityLabel: String
	userAgeAccessibilityLabel: String
	isFollowing: Boolean
	showFollowState: Boolean
	markAsNsfw: Boolean
	isDividerFixEnabled: Boolean
}
type ObservableProperty {
	value: Unknown
}
type DeltaCounter {
}
type Text {
	id: String
	timestamp: Unknown
	body: String
	links: Unknown
}
type HiddenImage {
	id: String
}
type DeepLink {
	url: String
}
type RoomSummaryViewState {
	roomId: String
	inviterId: String
	displayName: String
	isDirect: Boolean
	directUserId: String
	threadHighlightCount: Unknown
	isMembershipChanging: Boolean
	roomType: Unknown
	subredditInfo: SubredditInfo
	joinedMembersCount: Int
}
type FormatterCacheKey {
	locale: Unknown
	pattern: String
}
type InputFieldViewState {
	isEnabled: Boolean
	value: String
	inputStatus: Unknown
	errorMessage: String
	showTrailingIcon: Boolean
}
type ModAwardFeed {
	modAwardItems: [Unknown]
}
type CommunityGoldDetail {
	id: String
	name: String
	iconUrl: String
	communityGold: CommunityGold
}
type Comment {
	postKindWithId: String
	commentKindWithId: String
	permaLink: String
	author: ContentAuthor
	postTitle: String
	content: ContentTexts
	createdAt: Unknown
}
type CommunityGold {
	balance: Unknown
}
type ModAwarderInfo {
	id: String
	displayName: String
}
type ModAwardItem {
	id: String
	award: ModAwardInfo
	awarder: ModAwarderInfo
	awardedContent: Unknown
}
type Transaction {
	type: Unknown
	amount: Currency
}
type ContentAuthor {
	id: String
	displayName: String
	isBlocked: Boolean
	iconUrl: String
	snoovatarIconUrl: String
}
type MonthlyTransactionGroup {
	year: Unknown
	transactions: Unknown
}
type Post {
	postKindWithId: String
	author: ContentAuthor
	postTitle: String
	content: ContentTexts
	isPoll: Boolean
	isNsfw: Boolean
	isSpoiler: Boolean
	thumbnailImageUrl: String
	mediaType: Unknown
	createdAt: Unknown
}
type ContentTexts {
	preview: String
	richtext: String
	markdown: String
}
type ModAwardInfo {
	id: String
	name: String
	goldPrice: String
	awardedAt: Unknown
}
type ActionHistory {
	subredditName: String
}
type RemovalReason {
	subredditWithKindId: String
	subredditName: String
	contentCacheKey: String
	bypassRemoval: Boolean
	isSwipe: Boolean
}
type PostFlairChanged {
	selectedFlair: Unknown
}
type PostAward {
	subredditKindWithId: String
	postKindWithId: String
	awardId: String
}
type QueueAwardCommentContentElement {
	comment: CommentAward
	postTitle: String
	richtext: String
	preview: String
	createdAt: String
	subredditName: String
	isExpanded: Boolean
	media: Unknown
	filterReasons: Unknown
	reportReasons: Unknown
	awardImageUrl: String
}
type QueueAwardPostContentElement {
	post: PostAward
	title: String
	richtext: String
	preview: String
	createdAt: String
	subredditName: String
	isExpanded: Boolean
	isNsfw: Boolean
	isSpoiler: Boolean
	blurNsfw: Boolean
	media: Unknown
	postFlair: QueueFlair
	flairUtil: Unknown
	filterReasons: [Unknown]
	reportReasons: [Unknown]
	awardImageUrl: String
}
type AssignReason {
	removalReason: Unknown
}
type Mod {
	iconUrl: String
}
type Approved {
	subredditKindWithId: String
	isSwipe: Boolean
}
type QueueHeaderElement {
	queueContentType: Unknown
	subredditWithKindId: String
	subredditName: String
	subredditNamePrefixed: String
	isMultiSelect: Boolean
	isLocked: Boolean
	isPinned: Boolean
	userWithKindId: String
	userName: String
	createdAt: String
	text: String
	modNote: Unknown
	distinguishTagType: Unknown
	flair: QueueFlair
	icon: String
	snoovatar: String
	communityIconUrl: String
	communityPrimaryColor: String
	isQuickCommentRemoveEnabled: Boolean
	showOverflowMenu: Boolean
}
type Removed {
	subredditKindWithId: String
	isSwipe: Boolean
	removalReason: Unknown
}
type QueuePostContentElement {
	post: Post
	title: String
	richtext: String
	preview: String
	createdAt: String
	subredditName: String
	isExpanded: Boolean
	isNsfw: Boolean
	isSpoiler: Boolean
	blurNsfw: Boolean
	media: Unknown
	postFlair: QueueFlair
	flairUtil: Unknown
	filterReasons: [Unknown]
	reportReasons: [Unknown]
}
type Admin {
	iconUrl: String
}
type QueueFlair {
	items: [Unknown]
	isLightTextColor: Boolean
	backgroundColor: String
	accessibilityText: String
}
type Post {
	subredditKindWithId: String
	postKindWithId: String
}
type Comment {
	subredditKindWithId: String
	postKindWithId: String
	commentKindWithId: String
}
type UserCard {
	subredditWithKindId: String
	subredditName: String
	userWithKindId: String
	userName: String
	isAvatarSource: Boolean
}
type ModAction {
	subredditWithKindId: String
	subredditName: String
	text: String
	isLongClick: Boolean
	showTutorial: Boolean
}
type QueueAwardPostElement {
	post: PostAward
	subredditWithKindId: String
	subredditName: String
	awardImageUrl: String
	preview: String
	feedElements: Unknown
	isActioned: Boolean
}
type CommentAward {
	subredditKindWithId: String
	postKindWithId: String
	commentKindWithId: String
	awardId: String
}
type ModNote {
	noteItem: Unknown
}
type QueueCommentContentElement {
	comment: Comment
	postTitle: String
	richtext: String
	preview: String
	createdAt: String
	subredditName: String
	isExpanded: Boolean
	media: Unknown
	filterReasons: [Unknown]
	reportReasons: [Unknown]
}
type QueueAwardCommentElement {
	comment: CommentAward
	subredditWithKindId: String
	subredditName: String
	awardImageUrl: String
	preview: String
	feedElements: Unknown
	isActioned: Boolean
	isHighlighted: Boolean
	isQuickCommentRemoveEnabled: Boolean
}
type SubredditDetail {
	subredditName: String
	subredditPrefixedName: String
	isAvatarSource: Boolean
}
type QueueTagsElement {
	queueContentType: Unknown
	subredditName: String
	isNsfw: Boolean
	isSpoiler: Boolean
	isOriginal: Boolean
	isQuarantined: Boolean
	isPollIncluded: Boolean
	isLive: Boolean
	isDevPlatformApp: Boolean
}
type QueueFooterElement {
	queueContentType: Unknown
	isActioned: Boolean
	modQueueReason: Unknown
	reportCount: Int
	verdictType: Unknown
	modQueueType: Unknown
	removalReason: String
	canAddRemovalReason: Boolean
	subredditWithKindId: String
	subredditName: String
	authorName: String
	icon: String
	snoovatar: String
}
type QueueCommentElement {
	comment: Comment
	subredditWithKindId: String
	subredditName: String
	preview: String
	feedElements: Unknown
	isActioned: Boolean
	isHighlighted: Boolean
	isQuickCommentRemoveEnabled: Boolean
}
type QueuePostElement {
	post: Post
	subredditWithKindId: String
	subredditName: String
	preview: String
	feedElements: Unknown
	isActioned: Boolean
}
type UpdateModSafetySettingsMutation {
	input: SetModSafetySettingsInput
}
type CreateMultireddit {
	ok: Boolean
	multireddit: Unknown
	errors: [Unknown]
}
type Error {
	message: String
}
type Field {
	name: String
	value: String
}
type Error {
	message: String
}
type Data {
	setSocialLinks: SetSocialLinks
}
type OwnerInfo {
	id: String
	displayName: String
}
type Error {
	code: String
	message: String
}
type Error {
	message: String
}
type UpdateChannelMutation {
	input: UpdateChannelInput
}
type ModActionDistinguishCommentMutation {
	input: UpdateCommentDistinguishStateInput
}
type Error {
	message: String
}
type Data {
	declineSubredditModeratorInvite: DeclineSubredditModeratorInvite
}
type SubredditChannelsDisableChannelsMutation {
	input: DisableChannelInSubredditInput
}
type Content {
	__typename: String
	markdown: String
	html: String
	richtext: Unknown
	richtextMediaFragment: RichtextMediaFragment
}
type SubmitMediaMutation {
	mediaID: String
	redditID: String
}
type Data {
	reportPost: ReportPost
}
type SocialLink {
	__typename: String
	socialLinkFragment: Unknown
}
type PinMessagesToSubredditChannel {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	processNftTransfer: ProcessNftTransfer
}
type Data {
	createRemovalReason: CreateRemovalReason
}
type UpdateCommentFollowStateMutation {
	input: UpdateCommentFollowStateInput
}
type ReplyPrivateMessage {
	ok: Boolean
	errors: [Unknown]
}
type GenerateCustomEmojiUploadLease {
	ok: Boolean
	s3UploadLease: S3UploadLease
	errors: [Unknown]
}
type CreateSubredditChannelMutation {
	input: CreateSubredditChannelInput
}
type Data {
	updatePostNsfwState: UpdatePostNsfwState
}
type Data {
	reorderSubredditRules: ReorderSubredditRules
}
type SendAndroidTestPushNotification {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	updatePost: UpdatePost
}
type UpdatePostMutation {
	input: UpdatePostInput
	includeMediaAuth: Unknown
	includeExtendedVideoAsset: Unknown
}
type Error {
	message: String
	code: String
}
type FieldError {
	field: String
	message: String
}
type UpdateProfileFollowStateMutation {
	input: UpdateProfileFollowStateInput
}
type ReorderHighlightedPostsMutation {
	input: ReorderHighlightedPostsInput
}
type Data {
	createTemporaryEventConfig: CreateTemporaryEventConfig
}
type Data {
	createCustomEmoji: CreateCustomEmoji
}
type Error {
	code: String
	message: String
}
type UpdateSubredditPostFlairSettings {
	ok: Boolean
	errors: [Unknown]
}
type RemoveHighlightedPost {
	ok: Boolean
	errors: [Unknown]
}
type UpdateAccountGender {
	ok: Boolean
	errors: [Unknown]
}
type UnbanUserFromChatChannelMutation {
	input: UnbanChatChannelUserInput
}
type UpdateCommercialCommunicationState {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	code: String
	message: String
}
type Data {
	reportModmailMessage: ReportModmailMessage
}
type Data {
	updatePostDistinguishState: UpdatePostDistinguishState
}
type RequestToJoinCommunity {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	enableChannelsInSubreddit: EnableChannelsInSubreddit
}
type CreateSubredditPostMutation {
	input: CreateSubredditPostInput
}
type CreateStandaloneScheduledPostMutation {
	input: CreateScheduledPostInput
	includeMediaAuth: Unknown
	includeExtendedVideoAsset: Unknown
}
type Error {
	message: String
	code: String
}
type Data {
	updateCommercialCommunicationState: UpdateCommercialCommunicationState
}
type Error {
	message: String
}
type Data {
	removeHighlightedPost: RemoveHighlightedPost
}
type UpdateSubredditMuteSettings {
	ok: Boolean
	errors: [Unknown]
}
type UpdatePostSetMutation {
	input: UpdatePostSetInput
}
type Data {
	sendMessageToSubreddit: SendMessageToSubreddit
}
type Data {
	deleteCustomEmoji: DeleteCustomEmoji
}
type UpdateSocialLinksMutation {
	input: UpdateSocialLinksInput
}
type UpdateUserSubredditFlairEnabledStatus {
	ok: Boolean
	errors: [Unknown]
}
type UpdateAutomationRank {
	ok: Boolean
	errors: [Unknown]
}
type DeleteComment {
	ok: Boolean
	errors: [Unknown]
}
type AuthorInfo {
	id: String
}
type Error {
	message: String
}
type FieldError {
	field: String
	message: String
}
type UpdatePostHideState {
	ok: Boolean
}
type UpdateSubredditMuteSettingsMutation {
	input: UpdateSubredditMuteSettingsInput
}
type ApplyRemovalReason {
	ok: Boolean
	errors: [Unknown]
}
type OnSubredditChatChannel {
	roomId: String
}
type ErrorInputArg {
	variableName: String
	value: String
}
type CreateSubredditStructuredStylesUploadLeaseMutation {
	input: CreateSubredditStructuredStylesUploadLeaseInput
}
type GenerateCustomEmojiUploadLeaseMutation {
	input: GenerateCustomEmojiLeaseInput
}
type OnSubreddit {
	id: String
}
type ModActionRemoveContentMutation {
	input: ModRemoveInput
}
type Data {
	createSavedResponse: CreateSavedResponse
}
type DeleteUserChannel {
	ok: Boolean
	errors: [Unknown]
}
type ProcessNftTransfer {
	ok: Boolean
	errors: [Unknown]
	transferId: String
	status: TransferStatus
	transactionHash: String
}
type UpdateSubredditAuthorFlairSettingsMutation {
	input: UpdateSubredditUserFlairSettingsInput
}
type Data {
	copyMultireddit: CopyMultireddit
}
type CreateAvatar {
	shareUrl: Boolean
	errors: [Unknown]
}
type AcceptModeratorInviteMutation {
	input: AcceptModeratorInviteInput
}
type Subreddit {
	__typename: String
	onSubreddit: OnSubreddit
}
type Data {
	requestCommunitySettingsChange: RequestCommunitySettingsChange
}
type Error {
	code: String
	message: String
}
type UpdateUserChannel {
	ok: Boolean
	errors: [Unknown]
	fieldErrors: [Unknown]
}
type Error {
	message: String
}
type BlockAwarder {
	ok: Boolean
}
type Error {
	message: String
	code: String
}
type CreateModUserNoteMutation {
	input: CreateModUserNoteInput
	includeSubredditInPosts: Unknown
	includeAwards: Unknown
	includeEconPromos: Unknown
	includePostStats: Unknown
	includeCurrentUserAwards: Unknown
	includeCommentsHtmlField: Unknown
	includeStillMediaAltText: Unknown
	includeMediaAuth: Unknown
	includeIsGildable: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
	includePaidSubscriberBadge: Unknown
}
type Data {
	setModSafetySettings: SetModSafetySettings
	updateSubredditSettings: UpdateSubredditSettings
}
type Data {
	createProfilePost: Unknown
}
type Data {
	claimFreeNft: ClaimFreeNft
}
type Data {
	reportAward: ReportAward
}
type CreateUccChatChannelMutation {
	input: CreateUserChatChannelInput
}
type Error {
	message: String
	code: String
}
type Error {
	code: String
	message: String
}
type UpdateInboxNotificationPreferences {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	message: String
	code: String
}
type UpdateActiveUserMute {
	ok: Boolean
	errors: [Unknown]
}
type UpdateNotificationPreferences {
	ok: Boolean
	errors: [Unknown]
}
type ClearPostFlair {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	message: String
}
type UpdateCommentSendRepliesState {
	ok: Boolean
	errors: [Unknown]
	sendRepliesState: CommentsSendRepliesState
}
type StoreUxTargetingAction {
	ok: Boolean
}
type UpdateSubredditModeratorState {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	updatePostHideState: UpdatePostHideState
}
type UpdateSubredditAchievementsSettingsMutation {
	subredditId: String
	isCommunityAchievementsEnabled: Unknown
	achievements: [Unknown]
}
type Data {
	updateSubredditBannerStyles: UpdateSubredditBannerStyles
}
type ApproveRedditorMutation {
	input: ApproveOrDisapproveRedditorInput
}
type ErrorInputArg {
	variableName: String
	value: String
}
type Data {
	updateInboxNotificationPreferences: UpdateInboxNotificationPreferences
}
type Data {
	hideInboxAnnouncements: HideInboxAnnouncements
}
type UpdateRecommendationPreferencesMutation {
	input: UpdateRecommendationPreferencesInput
}
type UpdateChatChannelUserRolesMutation {
	input: UpdateChatChannelUsersRolesInput
}
type Data {
	updateUserSubredditFlairEnabledStatus: UpdateUserSubredditFlairEnabledStatus
}
type Error {
	code: String
	message: String
}
type Data {
	updateSubredditIcon: UpdateSubredditIcon
}
type DeleteChannelMutation {
	input: DeleteChannelInput
}
type Error {
	code: String
	message: String
}
type Error {
	message: String
}
type UpdatePostVoteState {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	message: String
}
type Item {
	id: String
	name: String
	benefits: Benefits
}
type Data {
	updateSubredditSettings: UpdateSubredditSettings
}
type UpdatePostReminderState {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	redditorInfoByName: RedditorInfoByName
}
type UpdateTopicPreferencesMutation {
	input: TopicPreferencesInput
}
type UnmuteMember {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	createAwardOrder: CreateAwardOrder
}
type ReportMarketplaceAwardMutation {
	thingId: String
	awardId: String
}
type Data {
	createCustomPostSnapshot: CreateCustomPostSnapshot
}
type UpdateShowcaseStateMutation {
	state: DisplayedCollectibleItemsState
}
type SetModmailConversationsHighlightStatusMutation {
	input: SetModmailConversationsHighlightStatusInput
}
type Data {
	updateNotificationPreferences: UpdateNotificationPreferences
}
type Error {
	message: String
}
type Error {
	message: String
}
type DeletePost {
	ok: Boolean
}
type Error1 {
	message: String
}
type DeleteSubredditRuleMutation {
	input: DeleteSubredditRuleInput
}
type Chat {
	roomID: String
}
type UpsertBanEvasionSettings {
	ok: Boolean
	errors: [Unknown]
}
type ReportAwardOnContent {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	message: String
	code: String
}
type Error {
	message: String
	code: String
	errorInputArgs: [Unknown]
}
type Data {
	deleteMultireddit: DeleteMultireddit
}
type Error {
	message: String
	code: String
}
type CommentInfo {
	__typename: String
	onComment: OnComment
}
type OnUpdateSubredditSubscriptionPayload {
	subreddit: Subreddit
	state: SubscriptionState
	ok: Boolean
}
type ReorderRemovalReasons {
	ok: Boolean
	errors: [Unknown]
	removalReasons: [Unknown]
}
type ErrorInputArg {
	variableName: String
	value: String
}
type Data {
	readNotificationLoggedOut: ReadNotificationLoggedOut
}
type Data {
	updatePost: UpdatePost
}
type GetUserIdByNameQuery {
	userName: String
}
type UpdatePostSendRepliesStateMutation {
	input: UpdatePostSendRepliesStateInput
}
type CreateSubredditRule {
	ok: Boolean
	rule: Rule
	errors: [Unknown]
}
type SetModmailConversationsArchiveStatusMutation {
	input: SetModmailConversationsArchiveStatusInput
}
type Error {
	message: String
	code: String
}
type UpdateBanEvasionFilterSettingsMutation {
	subredditId: String
	input: UpsertBanEvasionSettingsInput
	modSafetySettings: Present
	includeModmailBanEvasion: Present
}
type RetractChatChannelUserRoleInvitationMutation {
	input: RetractChatChannelUserRoleInput
}
type Checkout {
	errors: [Unknown]
	order: Order
}
type Data {
	deleteAutomation: DeleteAutomation
}
type Error {
	message: String
	code: String
}
type UnMuteSubredditUserMutation {
	input: UnmuteMemberInput
}
type Error {
	message: String
}
type Data {
	updatePostVoteState: UpdatePostVoteState
}
type Error {
	code: String
	message: String
}
type Data {
	setSubredditYearInReviewAvailability: SetSubredditYearInReviewAvailability
}
type UpdateEventMutation {
	input: UpdatePostInput
}
type AcceptSubredditModeratorInvite {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	message: String
}
type Error {
	message: String
	code: String
}
type Error {
	message: String
}
type Data {
	showCrowdControlledComment: ShowCrowdControlledComment
}
type Data {
	approveRedditor: ApproveRedditor
}
type Error {
	message: String
}
type Data {
	createAvatar: CreateAvatar
}
type ReportPrivateMessage {
	ok: Boolean
}
type Error {
	message: String
	code: String
}
type ReorderSavedResponsesMutation {
	input: ReorderSavedResponsesInput
}
type Error {
	code: String
	message: String
}
type StickerIcon {
	url: String
}
type Error {
	message: String
	code: String
}
type UpdateCommunityContributionSettingsMutation {
	input: UpdateSubredditSettingsInput
}
type Data {
	updateChannelModerationSettings: UpdateChannelModerationSettings
}
type CreateUserChannel {
	ok: Boolean
	errors: [Unknown]
	channel: Channel
	fieldErrors: [Unknown]
}
type UpdateInboxActivitySeenStateMutation {
	input: UpdateInboxActivitySeenStateInput
}
type Data {
	updateShowCommentRemovalReasonPromptSetting: UpdateShowCommentRemovalReasonPromptSetting
}
type DeleteAchievementNotificationsMutation {
	ids: [Unknown]
}
type Error {
	message: String
}
type SubmitInquiryIdForUserVerificationMutation {
	inquiryId: String
}
type DeletePostMutation {
	input: DeletePostInput
}
type CreateAwardOrderMutation {
	input: CreateAwardOrderInput
}
type Data {
	markPrivateMessageAsRead: MarkPrivateMessageAsRead
}
type ShowCrowdControlledComment {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	message: String
}
type UpdateSocialLinks {
	socialLinks: [Unknown]
	ok: Boolean
	errors: [Unknown]
}
type DeleteSubredditCustomMobileIconMutation {
	input: DeleteSubredditCustomMobileIconInput
}
type UpdateSubredditAchievementsSettings {
	ok: Boolean
}
type Data {
	updateSpokenLanguagesPreference: UpdateSpokenLanguagesPreference
}
type Data {
	deleteSubredditMuteSettings: DeleteSubredditMuteSettings
}
type Data {
	updateSubredditSettings: UpdateSubredditSettings
}
type Rule {
	__typename: String
	rule: Rule
}
type UpdateCommentSendRepliesStateMutation {
	input: UpdateCommentSendRepliesStateInput
}
type UpdateRedditorBlockState {
	ok: Boolean
}
type Data {
	updateAccountGender: UpdateAccountGender
}
type ReportTalkMutation {
	input: ReportTalkInput
}
type Data {
	createSubredditRule: CreateSubredditRule
}
type ReportPost {
	ok: Boolean
}
type UpdateMatureContentSettingsMutation {
	input: SetModSafetySettingsInput
}
type Subreddit {
	__typename: String
	onSubreddit: OnSubreddit
}
type UpdateSubredditIcon {
	ok: Boolean
	errors: [Unknown]
}
type UpdateDisplayedCollectibleItems {
	ok: Boolean
}
type Data {
	setModSafetySettings: SetModSafetySettings
}
type CheckoutPrice {
	amount: Currency
}
type FieldError {
	field: String
	message: String
}
type OnSubreddit {
	__typename: String
	subredditCountryFragment: SubredditCountryFragment
}
type RequestCommunityTypeChangeMutation {
	input: RequestCommunitySettingsChangeInput
}
type UpdateShowcaseMutation {
	input: UpdateDisplayedCollectibleItemsInput
}
type DeleteSavedResponseMutation {
	input: DeleteSavedResponseInput
}
type SetModSafetySettings {
	ok: Boolean
	errors: [Unknown]
}
type SendMessageToSubreddit {
	ok: Boolean
	errors: [Unknown]
	chat: Chat
}
type Error {
	message: String
	code: String
	errorInputArgs: [Unknown]
}
type CreateProfilePost {
	websocketUrl: [Unknown]
	errors: [Unknown]
}
type DeleteMultiredditMutation {
	input: DeleteMultiredditInput
}
type Data {
	createMediaUploadLease: CreateMediaUploadLease
}
type Data {
	acceptSubredditModeratorInvite: AcceptSubredditModeratorInvite
}
type Data {
	updateAutomation: UpdateAutomation
}
type Error {
	__typename: String
	code: String
	message: String
}
type UpdatePostSaveStateMutation {
	input: UpdatePostSaveStateInput
}
type AddModmailMessageMutation {
	input: AddModmailMessageInput
}
type UpdateSpokenLanguagesPreference {
	ok: Boolean
	errors: [Unknown]
}
type UpdateScheduledPost {
	ok: Boolean
	errors: [Unknown]
	scheduledPost: ScheduledPost
}
type CreateAutomationMutation {
	input: CreateAutomationInput
}
type Data {
	updateModPnSettingStatus: UpdateModPnSettingStatus
}
type ModActionIgnoreReportsContentMutation {
	input: IgnoreReportsInput
}
type Request {
	fromAddress: Unknown
	toAddress: Unknown
	value: Unknown
	gas: Unknown
	nonce: Unknown
	data: Unknown
	validUntilTime: Unknown
}
type Data {
	updateChatChannelUserRolePromotion: UpdateChatChannelUserRolePromotion
}
type UpdatePostSet {
	ok: Boolean
	errors: [Unknown]
	fieldErrors: [Unknown]
}
type Error {
	message: String
}
type Data {
	createScheduledPost: CreateScheduledPost
}
type Data {
	updateSubredditFlairTemplate: UpdateSubredditFlairTemplate
}
type CreateCustomPostSnapshotMutation {
	input: CreateCustomPostSnapshotInput
}
type DeleteAchievementNotifications {
	ok: Boolean
}
type Data {
	updatePostFlair: UpdatePostFlair
}
type ModActionStickyCommentMutation {
	input: UpdateCommentStickyStateInput
}
type CreateAwardOrder {
	ok: Boolean
	errors: [Unknown]
	awarding: Awarding
}
type Data {
	updateRecommendationPreferences: UpdateRecommendationPreferences
}
type SetModSafetySettings {
	ok: Boolean
	errors: [Unknown]
}
type DisapproveRedditor {
	ok: Boolean
	errors: [Unknown]
}
type Order {
	id: String
	environment: Environment
	items: [Unknown]
}
type CreateStorefrontOrder {
	ok: Boolean
	errors: [Unknown]
	order: Order
}
type UpdateAchievementTrophy {
	ok: Boolean
}
type UpdateSubredditSettings {
	ok: Boolean
	errors: [Unknown]
}
type DeleteSavedResponse {
	ok: Boolean
	errors: [Unknown]
}
type UpdateAchievementTrophyIsNewMutation {
	trophyId: String
}
type Subreddit {
	isNsfw: Boolean
	type: SubredditType
	isCommentingRestricted: Boolean
	isContributorRequestsDisabled: Boolean
	isPostingRestricted: Boolean
}
type Error {
	code: String
}
type Error {
	message: String
}
type UpdateSubredditUserFlairSettings {
	ok: Boolean
	errors: [Unknown]
}
type UpdateSubredditPostFlairSettingsMutation {
	input: UpdateSubredditPostFlairSettingsInput
}
type DisapproveRedditorMutation {
	input: ApproveOrDisapproveRedditorInput
}
type UpdateRemovalReason {
	ok: Boolean
	removalReason: RemovalReason
	errors: [Unknown]
}
type Data {
	updateChatUserSettings: UpdateChatUserSettings
}
type CreateRemovalReasonMutation {
	input: CreateRemovalReasonInput
}
type Rule {
	__typename: String
	rule: Rule
}
type OnSubreddit {
	__typename: String
	subredditFragment: SubredditFragment
}
type Post {
	id: String
}
type Data {
	retractChatChannelUserRoleInvitation: RetractChatChannelUserRoleInvitation
}
type UpdateProfileStylesMutation {
	input: UpdateProfileStylesInput
}
type DeleteSubredditMuteSettings {
	ok: Boolean
	errors: [Unknown]
}
type CommunityUpdateSubredditIconMutation {
	input: UpdateSubredditIconInput
}
type Data {
	reorderRemovalReasons: ReorderRemovalReasons
}
type Data {
	createProfilePost: CreateProfilePost
}
type Data {
	createShareUrl: CreateShareUrl
}
type Data {
	updatePostVoteState: UpdatePostVoteState
}
type UpdateMultiredditMutation {
	input: UpdateMultiredditInput
}
type Subreddit {
	__typename: String
	subredditFragment: SubredditFragment
}
type Data {
	createRandomAvatar: CreateRandomAvatar
}
type Error {
	code: String
	message: String
}
type MarkPrivateMessageAsReadMutation {
	input: MarkPrivateMessageAsReadInput
}
type Error {
	message: String
}
type CreateModUserNote {
	ok: Boolean
	createdNote: CreatedNote
	errors: [Unknown]
}
type ErrorInputArg {
	variableName: String
	value: String
}
type UpdateActiveUserMuteMutation {
	input: UpdateActiveUserMuteInput
}
type HideInboxAnnouncementsMutation {
	input: HideInboxAnnouncementsInput
}
type Error {
	message: String
	code: String
}
type Data {
	storeUxTargetingAction: StoreUxTargetingAction
}
type SubmitGooglePaymentReceipt {
	ok: Boolean
}
type Error {
	message: String
}
type Data {
	createAutomation: CreateAutomation
}
type CreateRandomAvatarMutation {
	input: AvatarRandomGenerationInput
}
type SubmitUserContactForAdMutation {
	input: UserContactForAd
}
type UpdateSensitiveAdsPreferencesMutation {
	input: UpdateSensitiveAdsPreferencesInput
}
type Error {
	message: String
}
type Data {
	claimGamificationReward: ClaimGamificationReward
}
type Error {
	message: String
	code: String
	errorInputArgs: [Unknown]
}
type Data {
	updateSubredditChannel: UpdateSubredditChannel
}
type Error {
	code: String
	message: String
}
type Content {
	markdown: String
	richtext: Unknown
}
type Error {
	message: String
}
type DeleteAutomationMutation {
	input: DeleteAutomationInput
}
type UpdateOptInToQuarantinedSubredditMutation {
	input: UpdateSubredditQuarantineOptInStateInput
}
type ModActionNSFWPostMutation {
	input: UpdatePostNSFWStateInput
}
type DeleteSubredditCustomMobileIcon {
	ok: Boolean
	errors: [Unknown]
}
type UpdateMultireddit {
	ok: Boolean
	errors: [Unknown]
	multireddit: Unknown
}
type ModApprove {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	message: String
}
type ExposeExperimentBatch {
	payloads: [Unknown]
}
type CreateRandomAvatar {
	imageUrl: [Unknown]
	ok: Boolean
	errors: [Unknown]
}
type UpdateSubredditSubscriptions {
	ok: Boolean
	errors: [Unknown]
	payloads: [Unknown]
}
type FieldError {
	field: String
	message: String
}
type UpdateUccChannelMutation {
	input: UpdateUserChatChannelInput
}
type Data {
	updateSubredditMuteSettings: UpdateSubredditMuteSettings
}
type Payload {
	__typename: String
	onUpdateSubredditSubscriptionPayload: OnUpdateSubredditSubscriptionPayload
}
type Data {
	createSubredditPost: Unknown
}
type Order {
	id: String
	orderedProduct: OrderedProduct
}
type ValidatePostGuidanceRules {
	triggeredRules: [Unknown]
}
type Data {
	deleteModUserNote: DeleteModUserNote
}
type Emoji {
	id: String
	name: String
	emojiIcon: EmojiIcon
	stickerIcon: StickerIcon
}
type ReadNotificationLoggedInMutation {
	input: ReadNotificationLoggedInInput
}
type HandleGoogleBillingEvent {
	ok: Boolean
	errors: [Unknown]
	isFallbackRequired: Boolean
}
type UpdateSavedResponse {
	ok: Boolean
	errors: [Unknown]
}
type UpdatePostSetPostVoteStateMutation {
	input: UpdatePostVoteStateInput
}
type DeleteInboxNotificationsMutation {
	input: DeleteInboxNotificationsInput
}
type Error {
	message: String
}
type Data {
	updateInboxActivitySeenState: UpdateInboxActivitySeenState
}
type UpdatePost {
	content: Content
	ok: Boolean
	errors: [Unknown]
}
type Error {
	__typename: String
	operationErrorFragment: OperationErrorFragment
}
type UpdatePostStickyState {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	setDefaultEmailPreferences: SetDefaultEmailPreferences
}
type ReportModmailMessageMutation {
	input: ReportModmailMessageInput
}
type Error {
	message: String
}
type Data {
	updatePostCrowdControlFilter: UpdatePostCrowdControlFilter
}
type Data {
	downloadAvatar: Unknown
}
type SendTestNotificationMutation {
	input: SendAndroidTestPushNotificationStateInput
}
type EmojiIcon {
	url: String
}
type Error {
	message: String
}
type Error {
	message: String
}
type Error {
	message: String
	code: String
}
type Error {
	__typename: String
	operationErrorFragment: OperationErrorFragment
}
type Error {
	code: String
	message: String
}
type Error {
	message: String
	code: String
}
type Error {
	code: String
	message: String
}
type SetSocialLinksMutation {
	input: SetSocialLinksInput
}
type CreateEconOrderMutation {
	input: CreateOrderInput
}
type Error {
	__typename: String
	operationErrorFragment: OperationErrorFragment
}
type Data {
	createSubredditStructuredStylesUploadLease: CreateSubredditStructuredStylesUploadLease
}
type Error {
	message: String
	code: String
}
type Data {
	reportPrivateMessage: ReportPrivateMessage
}
type BanChatChannelUser {
	ok: Boolean
}
type CreateSubredditFlairTemplate {
	ok: Boolean
	flairTemplate: Unknown
	errors: [Unknown]
}
type ReadNotificationLoggedIn {
	ok: Boolean
	errors: [Unknown]
}
type Channel {
	__typename: String
	id: String
	name: String
	onSubredditChatChannel: OnSubredditChatChannel
}
type Data {
	setModmailConversationsArchiveStatus: SetModmailConversationsArchiveStatus
}
type TriggeredRule {
	guidanceId: String
	name: String
	validationMessage: ValidationMessage
	triggeredLocation: PostGuidanceRuleLocationType
	actionType: PostGuidanceRuleActionType
}
type Data {
	createUserChannel: CreateUserChannel
}
type DeleteInboxNotifications {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	updatePostCrowdControlLevel: UpdatePostCrowdControlLevel
}
type EndPostEvent {
	ok: Boolean
	errors: [Unknown]
	content: Content
	fieldErrors: [Unknown]
}
type UpdateOptOutAnnouncementMutation {
	input: UpdateInboxAnnouncementOptOutsInput
}
type UpdateRecommendationPreferences {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	message: String
}
type OwnerInfo {
	id: String
	displayName: String
}
type Error {
	message: String
	code: String
}
type DeleteUccChannelMutation {
	input: DeleteChatChannelInput
}
type RetractChatChannelUserRoleInvitation {
	ok: Boolean
	errors: [Unknown]
}
type UpdatePostSendRepliesState {
	ok: Boolean
	errors: [Unknown]
	sendRepliesState: SendRepliesState
}
type DeleteScheduledPostMutation {
	input: DeleteScheduledPostInput
}
type DeleteSubredditChannelMutation {
	input: DeleteSubredditChannelInput
}
type Content {
	markdown: String
	html: String
	preview: String
	richtext: Unknown
}
type Error {
	message: String
	code: String
}
type CommunityUpdateSubredditBannerMutation {
	input: UpdateSubredditBannerStylesInput
}
type Data {
	createModUserNote: CreateModUserNote
}
type CheckoutMutation {
	input: CheckoutInput
}
type Item {
	product: Product
	checkoutPrice: CheckoutPrice
}
type Data {
	unbanSubredditUser: UnbanSubredditUser
}
type PollVoteMutation {
	input: UpdatePostPollVoteStateInput
}
type UpdateSensitiveAdsPreferences {
	ok: Boolean
	errors: [Unknown]
}
type UpdateHighlightedPostMutation {
	input: UpdateHighlightedPostInput
}
type RegisterMobilePushToken {
	ok: Boolean
}
type UpdatePostSpoilerState {
	ok: Boolean
	errors: [Unknown]
}
type CreateProfileStructuredStylesUploadLease {
	ok: Boolean
	errors: [Unknown]
	uploadLease: UploadLease
	websocketUrl: String
}
type UpdateModPnSettingStatus {
	ok: Boolean
	errors: [Unknown]
}
type UpdateSubredditFlairPromptSettings {
	ok: Boolean
}
type ReorderSubredditRules {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	updatePostPollVoteState: UpdatePostPollVoteState
}
type Data {
	createSubredditChannel: CreateSubredditChannel
}
type SetSubredditYearInReviewAvailability {
	ok: Boolean
	errors: [Unknown]
}
type UpdateChatChannelUserRolePromotion {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	reorderModerators: ReorderModerators
}
type Data {
	deletePost: DeletePost
}
type ReportTalk {
	ok: Boolean
}
type SetModmailConversationsFilterStatus {
	ok: Boolean
	errors: [Unknown]
}
type ClearPostFlairMutation {
	input: ClearPostFlairInput
}
type UploadLeaseHeader {
	header: String
	value: String
}
type Data {
	updatePostLockedState: UpdatePostLockedState
}
type CreateSubredditPostWithVideoMutation {
	input: CreateSubredditPostInput
}
type Data {
	enrollInGamification: EnrollInGamification
}
type Data {
	setModmailConversationsHighlightStatus: SetModmailConversationsHighlightStatus
}
type SubredditChannelsEnableChannelsMutation {
	input: EnableChannelsInSubredditInput
}
type BanSubredditUser {
	ok: Boolean
	errors: [Unknown]
}
type UploadLeaseHeader {
	header: String
	value: String
}
type UpdateHighlightedPost {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	endPostEvent: EndPostEvent
}
type UpdateSubredditFlairPromptSettingsMutation {
	subredditId: String
	isEnabled: Boolean
}
type OnUserChatChannel {
	id: String
	roomId: String
}
type Data {
	checkoutDevvitProducts: CheckoutDevvitProducts
}
type Data {
	createStorefrontOrder: CreateStorefrontOrder
}
type UpdateSubredditRule {
	ok: Boolean
	rule: Rule
	errors: [Unknown]
}
type UpdateWelcomeMessageStateMutation {
	input: UpdateSubredditWelcomePageStateInput
}
type Error {
	message: String
}
type DeclineSubredditSubscriberInviteMutation {
	input: DeclineSubscriberInviteInput
}
type UpdateProfilePrivacyPreferencesMutation {
	input: UpdateProfilePrivacyPreferencesInput
}
type OwnerInfo {
	id: String
	displayName: String
}
type Data {
	updateSensitiveAdsPreferences: UpdateSensitiveAdsPreferences
}
type Subreddit {
	id: String
	name: String
}
type AuthorInfo {
	id: String
}
type IgnoreReports {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	updateAccountPreferences: UpdateAccountPreferences
}
type Error {
	message: String
}
type Data {
	createSubreddit: CreateSubreddit
}
type ModActionUnignoreReportsContentMutation {
	input: UnignoreReportsInput
}
type UpdateChatUserSettings {
	ok: Boolean
}
type UnbanSubredditUser {
	ok: Boolean
	errors: [Unknown]
}
type DeleteRemovalReasonMutation {
	input: DeleteRemovalReasonInput
}
type Data {
	updateMultiredditSubscriptionState: UpdateMultiredditSubscriptionState
}
type Error {
	message: String
}
type Error {
	message: String
}
type UploadLeaseHeader {
	header: String
	value: String
}
type TemporaryEventRun {
	startAt: Unknown
	endAt: Unknown
}
type HideInboxAnnouncements {
	ok: Boolean
	errors: [Unknown]
}
type DeleteCustomEmoji {
	ok: Boolean
	errors: [Unknown]
}
type ExposeExperimentsMutation {
	inputs: [Unknown]
}
type Error {
	message: String
	code: String
}
type UpdatePostFlair {
	ok: Boolean
	errors: [Unknown]
	text: String
}
type Error {
	message: String
}
type Data {
	disableChannelInSubreddit: DisableChannelInSubreddit
}
type BadgeIndicators {
	__typename: String
	badgeIndicatorsFragment: BadgeIndicatorsFragment
}
type SetSubredditYearInReviewAvailabilityMutation {
	input: SetSubredditYearInReviewAvailabilityInput
}
type CopyMultireddit {
	ok: Boolean
	errors: [Unknown]
	multireddit: Unknown
}
type ModActionDistinguishPostMutation {
	input: UpdatePostDistinguishStateInput
}
type UpdatePostHideStateMutation {
	input: UpdatePostHideStateInput
}
type UpdateRedditorBlockStateMutation {
	redditorId: String
	blockState: BlockState
}
type Data {
	setModmailConversationsFilterStatus: SetModmailConversationsFilterStatus
}
type Data {
	updateRedditorBlockState: UpdateRedditorBlockState
}
type Data {
	updateSubredditFavoriteState: UpdateSubredditFavoriteState
}
type Error {
	message: String
}
type InitiateNftTransfer {
	ok: Boolean
	errors: [Unknown]
	transferId: String
	params: Params
}
type Data {
	createSubredditPost: Unknown
}
type Data {
	setModmailConversationsReadStatus: SetModmailConversationsReadStatus
}
type Error {
	message: String
	code: String
}
type FieldError {
	field: String
	message: String
}
type UpdateSubredditWelcomePageContent {
	ok: Boolean
	version: String
	errors: [Unknown]
	fieldErrors: [Unknown]
}
type Data {
	pinMessagesToSubredditChannel: PinMessagesToSubredditChannel
}
type UpdateInboxAnnouncementOptOuts {
	ok: Boolean
	errors: [Unknown]
}
type DeleteChannel {
	ok: Boolean
	errors: [Unknown]
}
type UpdateSubredditSettings {
	ok: Boolean
	errors: [Unknown]
	fieldErrors: [Unknown]
	subreddit: Subreddit
}
type Error {
	message: String
}
type Data {
	updateCommentSendRepliesState: UpdateCommentSendRepliesState
}
type Error {
	message: String
	code: String
	errorInputArgs: [Unknown]
}
type UpdateUserFlairMutation {
	input: UpdateUserFlairInput
}
type OnSubreddit {
	__typename: String
	subredditDataFragment: SubredditDataFragment
}
type ErrorInputArg {
	variableName: String
	value: String
}
type Option {
	id: String
	text: String
	voteCount: Int
}
type Data {
	setNotificationsPushTokenActive: SetNotificationsPushTokenActive
}
type Error {
	message: String
}
type UpdateShowCommentRemovalReasonMutation {
	input: UpdateShowCommentRemovalReasonPromptSettingInput
}
type UpdateModPnSettingThreshold {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	updateInboxAnnouncementOptOuts: UpdateInboxAnnouncementOptOuts
}
type Error {
	message: String
}
type FieldError {
	message: String
	code: String
}
type InviteSubredditSubscriberMutation {
	input: InviteSubscriberInput
}
type Error {
	message: String
	code: String
}
type DeleteScheduledPost {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	updateCommentDistinguishState: UpdateCommentDistinguishState
}
type FieldError {
	field: String
	message: String
	code: String
}
type Data {
	updateSubredditPostFlairSettings: UpdateSubredditPostFlairSettings
}
type CreateStorefrontOrderMutation {
	input: CreateStorefrontOrderInput
}
type CreateCommentMutation {
	input: CreateCommentInput
	includeAwards: Unknown
	includeCommentsHtmlField: Unknown
	includeIsGildable: Unknown
	includeMediaAuth: Unknown
	includeExtendedVideoAsset: Unknown
	includePaidSubscriberBadge: Unknown
}
type SendRemovalReasonsMutation {
	input: ApplyRemovalReasonInput
}
type Data {
	updateCommentVoteState: UpdateCommentVoteState
}
type DeleteSubredditFlairTemplateMutation {
	input: DeleteSubredditFlairTemplateInput
}
type VerifyGooglePaymentReceiptMutation {
	input: SubmitGooglePaymentReceiptInput
}
type Data {
	addModmailMessage: AddModmailMessage
}
type UpdatedSettings {
	isNsfw: Boolean
	type: SubredditType
}
type SetModmailConversationsReadStatusMutation {
	input: SetModmailConversationsReadStatusInput
}
type Error {
	code: String
	message: String
}
type Data {
	createMultireddit: CreateMultireddit
}
type Channel {
	__typename: String
	onUserChatChannel: OnUserChatChannel
}
type UpdateProfileStyles {
	ok: Boolean
	errors: [Unknown]
}
type UpdateSpokenLanguagesMutation {
	input: UpdateSpokenLanguagesPreferenceInput
}
type CreateRemovalReason {
	ok: Boolean
	removalReason: RemovalReason
	errors: [Unknown]
}
type FieldError {
	field: String
	message: String
	code: String
}
type DeleteSubredditChannel {
	ok: Boolean
	errors: [Unknown]
}
type UpdatePostNsfwStateMutation {
	input: UpdatePostNSFWStateInput
}
type Data {
	submitMedia: SubmitMedia
}
type UpdateHarassmentFilterSettingsMutation {
	input: UpdateSubredditSettingsInput
}
type SetModmailConversationsArchiveStatus {
	ok: Boolean
	errors: [Unknown]
}
type UpdateChatUserSettingsMutation {
	input: UpdateChatUserSettingsInput
}
type Data {
	updateAchievementTrophy: UpdateAchievementTrophy
}
type BanSubredditUserMutation {
	input: BanSubredditUserInput
}
type Data {
	setModSafetySettings: SetModSafetySettings
}
type UpdateSubredditNotificationSettings {
	ok: Boolean
	errors: [Unknown]
}
type ModActionLockPostMutation {
	input: UpdatePostLockedStateInput
}
type Data {
	reportTalk: ReportTalk
}
type Data {
	reorderSocialLinks: ReorderSocialLinks
}
type VerifyUserIdentity {
	ok: Boolean
	errors: [Unknown]
	identityVerificationStatus: IdentityVerificationStatus
}
type ChangeRequest {
	isAutoApproved: Boolean
}
type PinMessagesToSubredditChannelMutation {
	input: PinMessagesToSubredditChannelInput
}
type Data {
	updatePostReminderState: UpdatePostReminderState
}
type Error {
	message: String
	code: String
}
type BlockAwarderByAwardingIdMutation {
	awardingId: String
}
type ErrorInputArg {
	variableName: String
	value: String
}
type Data {
	clearUserFlair: ClearUserFlair
}
type Data {
	updateSubredditSettings: UpdateSubredditSettings
}
type DeleteSubredditFlairTemplate {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	updateSavedResponse: UpdateSavedResponse
}
type DescriptionContent {
	richtext: Unknown
}
type ComposePrivateMessageMutation {
	input: ComposeMessageInput
}
type ComposeMessage {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	verifyUserIdentity: VerifyUserIdentity
}
type Error {
	message: String
}
type Error {
	message: String
}
type Error {
	message: String
	code: String
	errorInputArgs: [Unknown]
}
type UnBanSubredditUserMutation {
	input: UnbanSubredditUserInput
}
type CreateSavedResponse {
	ok: Boolean
	savedResponse: SavedResponse
	errors: [Unknown]
}
type UpdateSubredditFavoriteState {
	ok: Boolean
	errors: [Unknown]
}
type UpdateSubredditNotificationSettingsMutation {
	input: UpdateSubredditNotificationSettingsInput
}
type ReorderHighlightedPosts {
	ok: Boolean
	errors: [Unknown]
}
type ReorderSubredditRulesMutation {
	input: ReorderSubredditRulesInput
}
type Data {
	deleteSubredditChannel: DeleteSubredditChannel
}
type UpdateSubredditCountrySiteSettings {
	ok: Boolean
	errors: [Unknown]
	subreddit: Subreddit
}
type DeclineSubredditModeratorInviteMutation {
	input: DeclineModeratorInviteInput
}
type FieldError {
	message: String
	code: String
}
type Error {
	message: String
}
type Error {
	message: String
}
type Data {
	createModmailConversationV2: CreateModmailConversationV2
}
type CreateTemporaryEventConfig {
	ok: Boolean
	errors: [Unknown]
	temporaryEventConfig: TemporaryEventConfig
}
type Domain {
	chainId: String
	name: String
	verifyingContract: String
	version: String
}
type UpdateCommentStickyState {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	declineSubredditSubscriberInvite: DeclineSubredditSubscriberInvite
}
type Error {
	message: String
}
type Data {
	updateUserChannel: UpdateUserChannel
}
type Data {
	updateSubredditUserFlairSettings: UpdateSubredditUserFlairSettings
}
type ValidatePostGuidanceRulesMutation {
	subredditId: String
	postTitle: String
	postBody: Unknown
	onOrAfterSubmit: Unknown
}
type Content {
	markdown: String
}
type Error {
	message: String
	code: String
}
type Data {
	updateModPnSettingThreshold: UpdateModPnSettingThreshold
}
type Error {
	message: String
}
type AddSubredditsToMultiredditMutation {
	input: AddSubredditsToMultiredditInput
}
type UpdatePostReminderStateMutation {
	input: UpdatePostReminderStateInput
}
type Error {
	message: String
}
type UnbanChatChannelUser {
	ok: Boolean
}
type UpdateUserFlair {
	ok: Boolean
	errors: [Unknown]
	text: String
}
type Data {
	updateAchievementTrophy: UpdateAchievementTrophy
}
type Error {
	message: String
}
type Error {
	message: String
	code: String
}
type DeleteSocialLinksMutation {
	input: DeleteSocialLinksInput
}
type Error {
	message: String
}
type UpdateCommunityStatusMutation {
	input: UpdateSubredditCommunityStatusInput
}
type Data {
	updateMultireddit: UpdateMultireddit
}
type Data {
	updateCommentSaveState: UpdateCommentSaveState
}
type DeleteMultireddit {
	ok: Boolean
	errors: [Unknown]
}
type UpdateComment {
	content: Content
	ok: Boolean
	errors: [Unknown]
	fieldErrors: [Unknown]
}
type FieldError {
	code: String
	message: String
	field: String
}
type MarkPrivateMessageAsRead {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	updateTopicPreferences: UpdateTopicPreferences
}
type Data {
	updateSubredditWelcomePageContent: UpdateSubredditWelcomePageContent
}
type Poll {
	options: [Unknown]
	totalVoteCount: Int
	votingEndsAt: Unknown
	selectedOptionId: String
}
type BanUserFromChatChannelMutation {
	input: BanChatChannelUserInput
}
type Product {
	id: String
	environment: Environment
	paymentProvider: PaymentProvider
}
type Status {
	__typename: String
	onClaimedNftInventoryStatus: OnClaimedNftInventoryStatus
}
type UpdateNotificationPreferencesMutation {
	input: UpdateNotificationPreferencesInput
}
type CreateSubreddit {
	ok: Boolean
	errors: [Unknown]
	fieldErrors: [Unknown]
	subreddit: Subreddit
}
type MarkInboxAnnouncementsReadMutation {
	input: MarkInboxAnnouncementsReadInput
}
type Data {
	initiateNftTransfer: InitiateNftTransfer
}
type RequestAppealMutation {
	input: RequestAppealInput
}
type DeleteAutomation {
	ok: Boolean
	errors: [Unknown]
}
type ReportPrivateMessageMutation {
	input: ReportPrivateMessageInput
}
type EndPostEventMutation {
	input: EndPostEventInput
}
type Data {
	modRemove: ModRemove
}
type Data {
	exposeExperimentBatch: ExposeExperimentBatch
}
type UpdatePostFollowStateMutation {
	input: UpdatePostFollowStateInput
}
type RemovalReason {
	__typename: String
	removalReason: RemovalReason
}
type Subreddit {
	__typename: String
	onSubreddit: OnSubreddit
}
type DeclineSubredditModeratorInvite {
	ok: Boolean
	errors: [Unknown]
}
type FieldError {
	field: String
	message: String
}
type UpdateModPnSettingThresholdMutation {
	input: UpdateModPnSettingThresholdInput
}
type UpdateAutomationMutation {
	input: UpdateAutomationInput
}
type SubredditInfoByName {
	__typename: String
	onSubreddit: OnSubreddit
}
type UpdateChatChannelUserRoles {
	ok: Boolean
}
type CreatedNote {
	__typename: String
	modNote: ModNote
}
type ClaimFreeNft {
	ok: Boolean
	freeNftClaimStatus: FreeNftClaimStatus
}
type UpdatePostFollowState {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	updateActiveUserMute: UpdateActiveUserMute
}
type DescriptionContent {
	richtext: Unknown
}
type GetSubredditIdByNameQuery {
	subredditName: String
}
type UpdateAchievementTrophy {
	ok: Boolean
}
type CreateSubredditRuleMutation {
	input: CreateSubredditRuleInput
}
type MarkInboxAnnouncementsRead {
	errors: [Unknown]
	ok: Boolean
}
type UpdateCommentLockedState {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	code: String
	message: String
}
type CreateCustomPostSnapshot {
	ok: Boolean
	errors: [Unknown]
}
type UpdateSubredditSettingsMutation {
	input: UpdateSubredditSettingsInput
}
type UpdateCommentVoteStateMutation {
	input: UpdateCommentVoteStateInput
}
type CreateSubredditMutation {
	input: CreateSubredditInput
}
type ScheduledPost {
	__typename: String
	scheduledPostFragment: Unknown
}
type RemovalReason {
	__typename: String
	removalReason: RemovalReason
}
type Error {
	code: String
	message: String
}
type UpdateModPnSettingStatusMutation {
	input: UpdateModPnSettingStatusInput
}
type Error {
	__typename: String
	operationErrorFragment: OperationErrorFragment
}
type UpdatePostSaveState {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	message: String
}
type TemporaryEventConfig {
	id: String
}
type FreeNftClaimStatus {
	status: NftClaimingStatus
	item: Item
}
type Error {
	message: String
}
type SetModSafetySettings {
	ok: Boolean
	errors: [Unknown]
}
type CreatePostSetMutation {
	input: CreatePostSetInput
}
type Error {
	message: String
	code: String
}
type Error {
	message: String
	code: String
}
type ClearUserFlair {
	ok: Boolean
	errors: [Unknown]
}
type UpdateCommentMutation {
	input: UpdateCommentInput
	includeCommentsHtmlField: Present
}
type DeleteRemovalReason {
	ok: Boolean
	errors: [Unknown]
}
type SetDefaultEmailPreferences {
	ok: Boolean
	errors: [Unknown]
}
type UpdateAccountPreferences {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	code: String
	message: String
}
type HandleGoogleBillingMutation {
	input: GoogleBillingEventInput
}
type Data {
	applyRemovalReason: ApplyRemovalReason
}
type Error {
	message: String
}
type Data {
	updateProfileFollowState: UpdateProfileFollowState
}
type UpdateChannel {
	ok: Boolean
	fieldErrors: [Unknown]
	errors: [Unknown]
}
type Automation {
	__typename: String
	automationFragment: AutomationFragment
}
type RequestAppeal {
	ok: Boolean
	errors: [Unknown]
}
type UpdateDisplayedCollectibleItems {
	ok: Boolean
}
type OptInToGatedSubreddit {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	reportRedditor: ReportRedditor
}
type DeleteModUserNote {
	ok: Boolean
	errors: [Unknown]
}
type FieldError {
	__typename: String
	fieldErrorFragment: FieldErrorFragment
}
type ReadNotificationLoggedOut {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	deleteScheduledPost: DeleteScheduledPost
}
type UpdatePostCrowdControlFilter {
	ok: Boolean
	errors: [Unknown]
}
type Subreddit {
	id: String
	name: String
}
type MuteSubredditUserMutation {
	input: MuteMemberInput
}
type Error {
	message: String
	code: String
}
type Data {
	modApprove: ModApprove
}
type SetModmailConversationsReadStatus {
	ok: Boolean
	errors: [Unknown]
}
type ReorderSocialLinks {
	ok: Boolean
	errors: [Unknown]
	socialLinks: [Unknown]
}
type UploadLease {
	uploadLeaseUrl: [Unknown]
}
type CreateAvatar {
	ok: Boolean
	errors: [Unknown]
}
type InviteSubredditSubscriber {
	ok: Boolean
	errors: [Unknown]
}
type CreateAvatarShareMutation {
	input: CreateAvatarInput
}
type Data {
	updatePostSet: UpdatePostSet
}
type SendMessageToSubredditMutation {
	input: SendMessageToSubredditInput
}
type UpdateChannelModerationSettingsMutation {
	input: UpdateChannelModerationSettingsInput
}
type Data {
	submitContentRatingSurvey: SubmitContentRatingSurvey
}
type Data {
	reportAwardOnContent: ReportAwardOnContent
}
type Error {
	message: String
}
type RequestCommunitySettingsChange {
	changeRequest: ChangeRequest
	ok: Boolean
	errors: [Unknown]
	updatedSettings: UpdatedSettings
}
type UploadLease {
	uploadLeaseUrl: [Unknown]
}
type ScheduleTemporaryEventRun {
	ok: Boolean
	errors: [Unknown]
	temporaryEventRun: TemporaryEventRun
}
type UpdatePostVoteStateMutation {
	input: UpdatePostVoteStateInput
}
type Error {
	message: String
}
type Data {
	updateSubredditCommunityStatus: UpdateSubredditCommunityStatus
}
type ClaimFreeNftMutation {
	input: ClaimFreeNftInput
}
type ReportComment {
	ok: Boolean
}
type CreatePostSet {
	ok: Boolean
	errors: [Unknown]
	fieldErrors: [Unknown]
}
type ModActionStickyPostMutation {
	input: UpdatePostStickyStateInput
}
type CreateModmailConversationV2Mutation {
	input: CreateModmailConversationV2Input
}
type UpdateAutomationRankMutation {
	input: UpdateAutomationRankInput
}
type Data {
	deleteSubredditCustomMobileIcon: DeleteSubredditCustomMobileIcon
}
type Error {
	message: String
	code: String
}
type Error {
	message: String
	code: String
}
type CreateScheduledPost {
	ok: Boolean
	errors: [Unknown]
	scheduledPost: ScheduledPost
}
type JoinCommunityRequestMutation {
	input: RequestToJoinCommunityInput
}
type Data {
	deleteSubredditBanner: DeleteSubredditBanner
}
type UploadLease {
	uploadLeaseUrl: [Unknown]
}
type Data {
	reportUserDetails: ReportUserDetails
}
type ModActionLockCommentMutation {
	input: UpdateCommentLockedStateInput
}
type ReorderSavedResponses {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	submitGooglePaymentReceipt: SubmitGooglePaymentReceipt
}
type Data {
	updatePostSendRepliesState: UpdatePostSendRepliesState
}
type Error {
	code: String
	message: String
}
type Error {
	code: String
	message: String
}
type Data {
	updateChatChannelUserRoles: UpdateChatChannelUserRoles
}
type UpdateTopicPreferences {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	message: String
	code: String
}
type Data {
	checkout: Checkout
}
type Data {
	updateComment: UpdateComment
}
type Error {
	code: String
	message: String
}
type UpdateCommentFollowState {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	message: String
	code: String
}
type Error {
	message: String
}
type MuteMember {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	code: String
	message: String
}
type UpdatePostCrowdControlLevelMutation {
	input: UpdatePostCrowdControlLevelInput
}
type Error {
	message: String
	code: String
}
type UpdateCommentDistinguishState {
	ok: Boolean
	errors: [Unknown]
}
type UpdateAccountPreferencesMutation {
	input: UpdateAccountPreferencesInput
}
type Error {
	message: String
	code: String
}
type UpdateOptInToGatedSubredditMutation {
	input: OptInToGatedSubredditInput
}
type Error {
	message: String
	code: String
}
type ScheduleTemporaryEventRunMutation {
	input: ScheduleTemporaryEventRunInput
}
type Data {
	reorderHighlightedPosts: ReorderHighlightedPosts
}
type UpdateCommentVoteState {
	ok: Boolean
	errors: [Unknown]
}
type UpdateCommentSaveStateMutation {
	input: UpdateCommentSaveStateInput
}
type Error {
	__typename: String
	code: String
	message: String
}
type Error {
	code: String
	message: String
}
type Data {
	updatePostStickyState: UpdatePostStickyState
}
type FieldError {
	code: String
	field: String
	message: String
}
type Data {
	updateSocialLinks: UpdateSocialLinks
}
type Error {
	code: String
	message: String
}
type ReportCommentMutation {
	input: ReportCommentInput
}
type CreateSubredditFlairTemplateMutation {
	input: CreateSubredditFlairTemplateInput
}
type UpdateSubredditFlairTemplateMutation {
	input: UpdateSubredditFlairTemplateInput
}
type AddSubredditsToMultireddit {
	ok: Boolean
	multireddit: Unknown
	errors: [Unknown]
}
type Data {
	banSubredditUser: BanSubredditUser
}
type Data {
	upsertBanEvasionSettings: UpsertBanEvasionSettings
	setModSafetySettings: SetModSafetySettings
}
type Error {
	message: String
}
type Error {
	message: String
}
type UpdatePostPollVoteState {
	ok: Boolean
	poll: Poll
	errors: [Unknown]
	fieldErrors: [Unknown]
}
type Data {
	clearPostFlair: ClearPostFlair
}
type UpdatePostLockedState {
	ok: Boolean
	errors: [Unknown]
}
type Award {
	id: String
	name: String
}
type DownloadAvatarMutation {
	input: AvatarDownloadInput
}
type FieldError {
	code: String
	field: String
	message: String
}
type UpdateCommentSaveState {
	ok: Boolean
	errors: [Unknown]
}
type DeleteModUserLogMutation {
	input: DeleteModUserNoteInput
}
type ModActionSpoilerPostMutation {
	input: UpdatePostSpoilerStateInput
}
type Data {
	blockAwarder: BlockAwarder
}
type SocialLink {
	__typename: String
	socialLinkFragment: Unknown
}
type CancelTemporaryEventRunMutation {
	input: CancelTemporaryEventRunInput
}
type Data {
	validatePostGuidanceRules: ValidatePostGuidanceRules
}
type Error {
	message: String
}
type ReportAward {
	ok: Boolean
}
type Data {
	markInboxAnnouncementsRead: MarkInboxAnnouncementsRead
}
type ReportModmailMessage {
	ok: Boolean
}
type Subreddit {
	__typename: String
	id: String
	name: String
	isSubscribed: Boolean
}
type Data {
	composeMessage: ComposeMessage
}
type Data {
	updateCommentLockedState: UpdateCommentLockedState
}
type Data {
	updateSubredditWelcomePageState: UpdateSubredditWelcomePageState
}
type DisableChannelInSubreddit {
	ok: Boolean
	errors: [Unknown]
}
type CreateTemporaryEventConfigMutation {
	input: CreateTemporaryEventConfigInput
}
type Payload {
	ok: Boolean
}
type Error {
	message: String
}
type Data {
	updateAutomationRank: UpdateAutomationRank
}
type EnrollInGamification {
	ok: Boolean
	status: GamificationEnrollmentStatus
	errors: [Unknown]
}
type UpsertModSafetySubredditSettingsMutation {
	subredditId: String
	filterSettings: Unknown
	includeModmailHarassment: Present
	isModmailHarassmentFilterEnabled: Unknown
}
type Data {
	createSubredditFlairTemplate: CreateSubredditFlairTemplate
}
type Error {
	message: String
}
type Params {
	domain: Domain
	request: Request
}
type Data {
	updateUserFlair: UpdateUserFlair
}
type Error {
	code: String
	message: String
}
type Data {
	scheduleTemporaryEventRun: ScheduleTemporaryEventRun
}
type UpdateSubredditChannel {
	ok: Boolean
	errors: [Unknown]
}
type AvatarOutfit {
	preRenderImage: PreRenderImage
	accessoryIds: [Unknown]
	id: String
}
type Data {
	muteMember: MuteMember
}
type Data {
	deleteAchievementNotifications: DeleteAchievementNotifications
}
type Error {
	message: String
}
type UpdateChannelModerationSettings {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	code: String
	message: String
}
type SocialLink {
	__typename: String
	socialLinkFragment: Unknown
}
type Error {
	__typename: String
	code: String
	message: String
}
type OrderedProduct {
	productId: String
}
type CreateProfilePostWithVideoMutation {
	input: CreatePostInput
}
type Data {
	addSubredditsToMultireddit: AddSubredditsToMultireddit
}
type ClaimGamificationReward {
	ok: Boolean
	status: Status
}
type Data {
	updatePostSaveState: UpdatePostSaveState
}
type DeleteCustomEmojiMutation {
	input: DeleteCustomEmojiInput
}
type Error {
	message: String
	code: String
}
type Error {
	message: String
	code: String
}
type Data {
	updateChannel: UpdateChannel
}
type SetModSafetySettings {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	message: String
}
type UpdateWelcomePageContentMutation {
	input: UpdateSubredditWelcomePageContentInput
}
type Data {
	createComment: CreateComment
}
type Data {
	unbanChatChannelUser: UnbanChatChannelUser
}
type CheckoutDevvitProducts {
	ok: Boolean
	errors: [Unknown]
	order: Order
}
type Error {
	message: String
}
type Post {
	__typename: String
	onSubredditPost: OnSubredditPost
	postContentFragment: Unknown
}
type RemoveHighlightedPostMutation {
	input: RemoveHighlightedPostsInput
}
type Error {
	message: String
}
type ModActionShowCrowdControlledCommentMutation {
	input: ShowCrowdControlledCommentInput
}
type UpdateCrowdControlFilterMutation {
	postId: String
	isEnabled: Boolean
}
type Error {
	message: String
	code: String
}
type FieldError {
	message: String
}
type Error {
	message: String
}
type UpdatePost {
	ok: Boolean
	fieldErrors: [Unknown]
	errors: [Unknown]
	content: Content
	startsAt: Unknown
	endsAt: Unknown
}
type FieldError {
	field: String
	message: String
	code: String
}
type UpdatePostFlairMutation {
	input: UpdatePostFlairInput
}
type Data {
	updateProfileStyles: UpdateProfileStyles
}
type Awarding {
	award: Award
}
type UpdateMultiredditSubscriptionStateMutation {
	input: UpdateMultiredditSubscriptionStateInput
}
type Error1 {
	message: String
}
type UpdateSubredditFavoriteStateMutation {
	input: UpdateSubredditFavoriteStateInput
}
type CreateCustomEmoji {
	ok: Boolean
	emoji: Emoji
	errors: [Unknown]
}
type Error {
	message: String
}
type SubmitUserContactForAd {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	replyPrivateMessage: ReplyPrivateMessage
}
type CreateCustomEmojiMutation {
	input: Unknown
}
type UpdateChatChannelUserRolePromotionMutation {
	input: UpdateChatChannelUserRolePromotionInput
}
type Error {
	message: String
}
type Order {
	id: String
}
type DeleteSubredditRule {
	ok: Boolean
	errors: [Unknown]
}
type ReportPostMutation {
	input: ReportPostInput
}
type SubmitScheduledPostNowMutation {
	input: SubmitScheduledPostInput
	includeAwards: Unknown
	includeEconPromos: Unknown
	includePostStats: Unknown
	includeCurrentUserAwards: Unknown
	includeStillMediaAltText: Unknown
	includeMediaAuth: Unknown
	includeNewPixelTrackingFields: Unknown
	includeExcludedExperimentsField: Unknown
	includeExtendedVideoAsset: Unknown
}
type Data {
	submitUserContactForAd: SubmitUserContactForAd
}
type Data {
	updateDisplayedCollectibleItems: UpdateDisplayedCollectibleItems
}
type Error {
	message: String
}
type Error {
	message: String
}
type Data {
	submitScheduledPost: SubmitScheduledPost
}
type DeleteCommentMutation {
	input: DeleteCommentInput
}
type CreateEconOrder {
	ok: Boolean
	errors: [Unknown]
	order: Order
}
type CreateMediaUploadLease {
	uploadLease: UploadLease
	ok: Boolean
	errors: [Unknown]
}
type ClaimAvatarRewardMutation {
	trophyId: String
}
type Data {
	updateSubredditAchievementsSettings: UpdateSubredditAchievementsSettings
}
type Data {
	disapproveRedditor: DisapproveRedditor
}
type Data {
	deleteInboxNotifications: DeleteInboxNotifications
}
type UpdateScheduledPostMutation {
	input: UpdateScheduledPostInput
	includeMediaAuth: Unknown
	includeExtendedVideoAsset: Unknown
}
type Error {
	message: String
}
type Error {
	message: String
}
type Data {
	registerMobilePushToken: RegisterMobilePushToken
}
type Error {
	message: String
}
type Error {
	message: String
	code: String
}
type Data {
	createAvatar: CreateAvatar
}
type Error {
	message: String
	code: String
}
type OnComment {
	__typename: String
	commentFragmentWithPost: CommentFragmentWithPost
}
type CreateShareUrl {
}
type Data {
	deleteSavedResponse: DeleteSavedResponse
}
type ProcessNftTransferMutation {
	input: ProcessNftTransferInput
}
type Error {
	message: String
}
type UpdateSubredditSubscriptionsMutation {
	input: UpdateSubredditSubscriptionsInput
}
type SetModmailConversationsHighlightStatus {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	message: String
	code: String
}
type SetModmailConversationsFilterStatusMutation {
	input: SetModmailConversationsFilterStatusInput
}
type Order {
	id: String
}
type Error {
	message: String
}
type CreateComment {
	commentInfo: CommentInfo
	ok: Boolean
	errors: [Unknown]
	fieldErrors: [Unknown]
}
type Data {
	handleGoogleBillingEvent: HandleGoogleBillingEvent
}
type Error {
	__typename: String
	operationErrorFragment: OperationErrorFragment
}
type UpdateAchievementTrophyIsPinnedMutation {
	trophyId: String
	isPinned: Boolean
}
type UnignoreReports {
	ok: Boolean
	errors: [Unknown]
}
type FieldError {
	__typename: String
	fieldErrorFragment: FieldErrorFragment
}
type CreateAutomation {
	ok: Boolean
	errors: [Unknown]
	automation: Automation
}
type Data {
	createPostSet: CreatePostSet
}
type Data {
	ignoreReports: IgnoreReports
}
type Data {
	unmuteMember: UnmuteMember
}
type EnableChannelsInSubreddit {
	ok: Boolean
	errors: [Unknown]
}
type SetSocialLinks {
	ok: Boolean
	errors: [Unknown]
	socialLinks: [Unknown]
}
type CreateSubredditStructuredStylesUploadLease {
	ok: Boolean
	websocketUrl: String
	uploadLease: UploadLease
	errors: [Unknown]
}
type Data {
	updateCommentFollowState: UpdateCommentFollowState
}
type Data {
	updateDisplayedCollectibleItems: UpdateDisplayedCollectibleItems
}
type CreateMultiredditMutation {
	input: CreateMultiredditInput
}
type UpdateCommentDistinguishStateMutation {
	input: UpdateCommentDistinguishStateInput
}
type UpdatePostDistinguishState {
	ok: Boolean
	errors: [Unknown]
}
type UpdateProfilePrivacyPreferences {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	code: String
	message: String
}
type CreateProfilePostMutation {
	input: CreatePostInput
}
type S3UploadLease {
	action: String
	fields: [Unknown]
}
type Data {
	reportComment: ReportComment
}
type UpdatePostCommercialCommunicationMutation {
	input: UpdateCommercialCommunicationStateInput
}
type Data {
	updateSubredditQuarantineOptInState: UpdateSubredditQuarantineOptInState
}
type UpdateInboxNotificationPreferencesMutation {
	input: UpdateNotificationPreferencesInput
}
type Data {
	requestAppeal: RequestAppeal
}
type ProfileStructuredStylesUploadLeaseMutation {
	input: CreateProfileStructuredStylesUploadLeaseInput
}
type StoreUxTargetingActionMutation {
	input: StorageInteractionInput
}
type Data {
	readNotificationLoggedIn: ReadNotificationLoggedIn
}
type UpdateCommentDistinguishState {
	ok: Boolean
	errors: [Unknown]
}
type UpdatePostVoteState {
	ok: Boolean
	voteState: VoteState
	errors: [Unknown]
}
type OnSubredditPost {
	subreddit: Subreddit
}
type UpdateSubredditChannelMutation {
	input: UpdateSubredditChannelInput
}
type Benefits {
	avatarOutfit: AvatarOutfit
}
type ReportAwardMutation {
	input: ReportAwardInput
}
type ReadNotificationLoggedOutMutation {
	input: ReadNotificationLoggedOutInput
}
type Data {
	cancelTemporaryEventRun: CancelTemporaryEventRun
}
type UpdateSubredditFlairEnabledStatusMutation {
	input: UpdateUserSubredditFlairEnabledStatusInput
}
type PreRenderImage {
}
type Data {
	createProfileStructuredStylesUploadLease: CreateProfileStructuredStylesUploadLease
}
type ReorderRemovalReasonsMutation {
	input: ReorderRemovalReasonsInput
}
type ModActionSetPermissionsMutation {
	input: UpdateModeratorStateInput
}
type Error {
	message: String
}
type Error {
	code: String
	message: String
}
type OnClaimedNftInventoryStatus {
	status: NftClaimingStatus
}
type SubmitMedia {
	ok: Boolean
}
type UpdateAccountGenderMutation {
	input: UpdateAccountGender
}
type Error {
	message: String
}
type Data {
	inviteSubredditSubscriber: InviteSubredditSubscriber
}
type CreateSavedResponseMutation {
	input: CreateSavedResponseInput
}
type Error {
	message: String
	code: String
	errorInputArgs: [Unknown]
}
type Error {
	code: String
	message: String
}
type DescriptionContent {
	richtext: Unknown
}
type UpdatePostCrowdControlLevel {
	ok: Boolean
	errors: [Unknown]
}
type ScheduledPost {
	__typename: String
	scheduledPostFragment: Unknown
}
type UpdateProfileFollowState {
	ok: Boolean
	errors: [Unknown]
}
type SavedResponse {
	id: String
}
type Data {
	createEconOrder: CreateEconOrder
}
type Data {
	onboardPayoutAccount: Unknown
}
type Data {
	updateSubredditCountrySiteSettings: UpdateSubredditCountrySiteSettings
}
type UpdateSubredditCountrySettingsMutation {
	input: UpdateSubredditCountrySiteSettingsInput
}
type Error {
	message: String
	code: String
}
type UpdateSubredditFlairTemplate {
	ok: Boolean
	flairTemplate: Unknown
	errors: [Unknown]
}
type Data {
	updateScheduledPost: UpdateScheduledPost
}
type ReportRedditor {
	ok: Boolean
}
type EnrollInStreaksMutation {
	input: EnrollInGamificationInput
}
type ModActionApproveContentMutation {
	input: ModApproveInput
}
type Data {
	deleteSubredditRule: DeleteSubredditRule
}
type UpdateRemovalReasonMutation {
	input: UpdateRemovalReasonInput
}
type Error {
	message: String
}
type FieldError {
	field: String
	message: String
}
type Error {
	message: String
}
type Data {
	updatePostFollowState: UpdatePostFollowState
}
type Data {
	updateSubredditFlairPromptSettings: UpdateSubredditFlairPromptSettings
}
type Error {
	message: String
}
type Data {
	updateSubredditNotificationSettings: UpdateSubredditNotificationSettings
}
type CreateMediaUploadLeaseMutation {
	input: CreateMediaUploadLeaseInput
}
type Error {
	message: String
}
type DeleteSocialLinks {
	ok: Boolean
	errors: [Unknown]
	socialLinks: [Unknown]
}
type RegisterMobilePushTokenMutation {
	authTokens: [Unknown]
	pushToken: String
	deviceId: String
	timezoneName: String
	timestamp: Unknown
	language: String
}
type SubredditRatingSurveySubmitResponseMutation {
	input: ContentRatingSurveyResponseInput
}
type SetNotificationsPushTokenActiveMutation {
	input: SetNotificationsPushTokenActiveInput
}
type Error {
	__typename: String
	message: String
	code: String
}
type UpdateSavedResponseMutation {
	input: UpdateSavedResponseInput
}
type Error {
	message: String
}
type DeleteSubredditBannerMutation {
	input: DeleteSubredditBannerInput
}
type CreateAvatarMutation {
	input: CreateAvatarInput
}
type Error {
	message: String
}
type SetNotificationsPushTokenActive {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	message: String
	code: String
}
type Data {
	banChatChannelUser: BanChatChannelUser
}
type ClearUserFlairMutation {
	input: ClearUserFlairInput
}
type Data {
	deleteSocialLinks: DeleteSocialLinks
}
type Error {
	message: String
	code: String
}
type UpdateSubredditSettings {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	message: String
}
type Error {
	message: String
}
type Data {
	updatePostNsfwState: UpdatePostNsfwState
}
type UpdateShowCommentRemovalReasonPromptSetting {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	deleteChannel: DeleteChannel
}
type UpdateSubredditCommunityStatus {
	ok: Boolean
	errors: [Unknown]
}
type SubmitContentRatingSurvey {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	message: String
}
type Error {
	message: String
}
type Error {
	message: String
	code: String
}
type Error {
	code: String
	message: String
}
type Data {
	subredditInfoByName: SubredditInfoByName
}
type ReorderModerators {
	errors: [Unknown]
	ok: Boolean
}
type Error {
	code: String
	message: String
}
type CreateSubredditChannel {
	ok: Boolean
	channel: Channel
	errors: [Unknown]
}
type Error {
	code: String
	message: String
}
type Error {
	message: String
}
type DeleteSubredditMuteSettingsMutation {
	input: DeleteSubredditMuteSettingInput
}
type Error {
	code: String
	message: String
}
type UpdateAutomation {
	ok: Boolean
	errors: [Unknown]
}
type AddModmailMessage {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	message: String
	code: String
}
type Data {
	updateProfilePrivacyPreferences: UpdateProfilePrivacyPreferences
}
type UpdateSubredditBannerStyles {
	ok: Boolean
	errors: [Unknown]
}
type UpdateModeratorHierarchyMutation {
	subredditId: String
	reason: String
	oldRanking: [Unknown]
	newRanking: [Unknown]
}
type Error {
	message: String
}
type Error {
	message: String
}
type CancelTemporaryEventRun {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	unignoreReports: UnignoreReports
}
type Error {
	message: String
}
type Error {
	code: String
}
type CreateShareUrlMutation {
	input: CreateShareUrlInput
}
type Error {
	message: String
}
type Error {
	message: String
	code: String
}
type Data {
	updateSubredditModeratorState: UpdateSubredditModeratorState
}
type UpdateInboxActivitySeenState {
	ok: Boolean
	badgeIndicators: BadgeIndicators
}
type Data {
	requestToJoinCommunity: RequestToJoinCommunity
}
type Error {
	message: String
}
type UpdateSubredditQuarantineOptInState {
	ok: Boolean
	errors: [Unknown]
}
type InitiateNftTransferMutation {
	input: InitiateNftTransferInput
}
type ReportUserDetailsMutation {
	input: ReportUserDetailsInput
}
type Error {
	code: String
	message: String
}
type Error {
	code: String
	message: String
}
type OnRedditor {
	id: String
}
type Error {
	__typename: String
	code: String
	message: String
}
type Error {
	message: String
}
type ReOrderSocialLinksMutation {
	input: ReorderSocialLinksInput
}
type ValidationMessage {
	markdown: String
	richtext: Unknown
}
type Data {
	deleteRemovalReason: DeleteRemovalReason
}
type SocialLink {
	__typename: String
	socialLinkFragment: Unknown
}
type UpdateMultiredditSubscriptionState {
	ok: Boolean
	errors: [Unknown]
}
type DeclineSubredditSubscriberInvite {
	ok: Boolean
	errors: [Unknown]
}
type DeleteSubredditBanner {
	ok: Boolean
	errors: [Unknown]
}
type UpdateSubredditWelcomePageState {
	ok: Boolean
	errors: [Unknown]
}
type ReportUserDetails {
	ok: Boolean
}
type Error {
	__typename: String
	operationErrorFragment: OperationErrorFragment
}
type DescriptionContent {
	richtext: Unknown
}
type Data {
	updateSubredditSubscriptions: UpdateSubredditSubscriptions
}
type RemovalReason {
	__typename: String
	removalReason: RemovalReason
}
type ModRemove {
	ok: Boolean
	errors: [Unknown]
}
type UpdateSubredditRuleMutation {
	input: UpdateSubredditRuleInput
}
type UpdatePostNsfwState {
	ok: Boolean
	errors: [Unknown]
}
type CopyMultiredditMutation {
	input: CopyMultiredditInput
}
type Error {
	code: String
	message: String
}
type Data {
	updateSubredditRule: UpdateSubredditRule
}
type Data {
	updatePostSpoilerState: UpdatePostSpoilerState
}
type Data {
	reorderSavedResponses: ReorderSavedResponses
}
type CheckoutDevvitProductsMutation {
	checkoutInput: CheckoutDevvitProductsInput
}
type Data {
	optInToGatedSubreddit: OptInToGatedSubreddit
}
type CreateModmailConversationV2 {
	ok: Boolean
	errors: [Unknown]
}
type Error {
	message: String
}
type Data {
	generateCustomEmojiUploadLease: GenerateCustomEmojiUploadLease
}
type Data {
	deleteUserChannel: DeleteUserChannel
}
type Error {
	message: String
}
type Error {
	message: String
}
type UpdateSubredditSettings {
	errors: [Unknown]
	fieldErrors: [Unknown]
	ok: Boolean
	subreddit: Subreddit
}
type Error {
	message: String
	code: String
}
type Error {
	code: String
	message: String
}
type Data {
	sendAndroidTestPushNotification: SendAndroidTestPushNotification
}
type Data {
	updateRemovalReason: UpdateRemovalReason
}
type Error {
	code: String
	message: String
}
type SubmitScheduledPost {
	ok: Boolean
	errors: [Unknown]
	post: Post
}
type RedditorInfoByName {
	__typename: String
	onRedditor: OnRedditor
}
type Data {
	updateHighlightedPost: UpdateHighlightedPost
}
type Data {
	updateCommentDistinguishState: UpdateCommentDistinguishState
}
type Error {
	message: String
	code: String
}
type ReplyPrivateMessageMutation {
	input: ReplyPrivateMessageInput
}
type Data {
	deleteComment: DeleteComment
}
type CreatePayoutOnboardingUrlMutation {
	input: Unknown
}
type Error {
	message: String
}
type UpdatePostNsfwState {
	ok: Boolean
	errors: [Unknown]
}
type Data {
	updateCommentStickyState: UpdateCommentStickyState
}
type ReportRedditorMutation {
	input: ReportRedditorInput
}
type Error {
	message: String
}
type ApproveRedditor {
	ok: Boolean
	errors: [Unknown]
}
type OwnerInfo {
	id: String
	displayName: String
}
type Data {
	deleteSubredditFlairTemplate: DeleteSubredditFlairTemplate
}
type Macro {
	displayString: String
	template: String
}
type GqlError {
	message: String
}
type Removals {
	contentId: String
}
type Modmail {
	recipientUsername: String
	conversationId: String
}
type InProgress {
	mediaId: String
	ownerId: String
	width: String
}
type Size {
}
type StringResource {
}
type Completed {
	mediaId: String
	ownerId: String
	width: String
	videoUrl: String
}
type InventoryItemTransferStatus {
	transferId: String
	status: Unknown
}
type ClaimDataResponse {
	distributionCampaignChoice: DistributionCampaignChoiceFragment
	drops: [Unknown]
}
type RichTextMediaUiModel {
	ownerId: String
	status: Unknown
	analyticPageType: Unknown
	width: String
	mediaId: String
	videoUrl: String
}
type ProcessedNftTransfer {
	transferId: String
	transferStatus: Unknown
}
type Failed {
	mediaId: String
	ownerId: String
	width: String
}
type VideoControlsState {
	showPlayButton: Boolean
	showReplayButton: Boolean
	showCtaButton: Boolean
	showAudioIcon: Boolean
	isMuted: Boolean
	showShadow: Boolean
}
type NftTransferMetadata {
	transferId: String
	chainId: Unknown
	verifyingContract: Address
	from: Address
	to: Address
	value: Unknown
	gas: Unknown
	nonce: Unknown
	validUntilTime: Unknown
}
type SearchSpellcheckBehaviors {
	suggestion: SearchReformulationBehavior
}
type SearchDismissBehavior {
	id: String
	telemetry: SearchTelemetryPayload
}
type DefaultPresentation {
	description: String
	displayTags: Unknown
	icon: String
	name: String
}
type SearchExternalNavigationBehavior {
	id: String
	url: String
	telemetry: SearchTelemetryPayload
}
type SearchQueryAutocomplete {
	id: String
	behaviors: Behaviors
	presentation: Unknown
	telemetry: SearchTelemetryPayload
}
type SearchCrosspostBehaviors {
	community: Unknown
	post: Unknown
	profile: Unknown
	rootCommunity: Unknown
	rootPost: Unknown
	rootProfile: Unknown
	rootThumbnail: Unknown
}
type SearchTypeaheadSuggestion {
	id: String
	behaviors: Behaviors
	presentation: DefaultPresentation
	telemetry: SearchTelemetryPayload
}
type SearchMediaNavigationBehavior {
	id: String
	telemetry: SearchTelemetryPayload
}
type SearchSpellcheck {
	id: String
	presentation: SearchSpellcheckPresentation
	behavior: SearchSpellcheckBehaviors
	telemetry: SearchTelemetryPayload
}
type SearchError {
	id: String
	presentation: SearchErrorPresentation
	behavior: SearchErrorBehavior
	telemetry: SearchTelemetryPayload
}
type SearchBannerPresentation {
	ctaText: String
	primaryText: String
	secondaryText: String
}
type SearchActivateModifierBehavior {
	id: String
	modifierId: String
	telemetry: SearchTelemetryPayload
}
type SearchProfileNavigationBehavior {
	id: String
	name: String
	telemetry: SearchTelemetryPayload
}
type SearchAdjustNsfwSettingsBehavior {
	id: String
	telemetry: SearchTelemetryPayload
}
type SearchSpellcheckPresentation {
	ctaTextFormat: String
	suggestion: String
}
type SearchListComponentBehaviors {
	header: SearchFilterBehavior
}
type SearchCommunity {
	id: String
	behaviors: Behaviors
	presentation: Unknown
	telemetry: SearchTelemetryPayload
	community: SearchCommunity
}
type Behaviors {
	collapse: CollapseSectionBehavior
	expand: ExpandSectionBehavior
}
type SearchPost {
	id: String
	presentation: Presentation
	telemetry: SearchTelemetryPayload
	behaviors: Unknown
	post: SearchPostInfo
}
type SearchBannerBehaviors {
	cta: Unknown
	dismiss: SearchDismissBehavior
}
type SearchTrendingPost {
	id: String
	telemetry: SearchTelemetryPayload
	behaviors: SearchPostBehaviors
	post: SearchPostInfo
}
type CollapseSectionBehavior {
	telemetry: SearchTelemetryPayload
}
type CommunityNavigationBehavior {
	id: String
	name: String
	telemetry: SearchTelemetryPayload
	url: String
}
type SearchCommunityNavigationBehavior {
	id: String
	name: String
	telemetry: SearchTelemetryPayload
}
type SearchPostNavigationBehavior {
	id: String
	telemetry: SearchTelemetryPayload
}
type SearchListHeaderPresentation {
	ctaText: String
	headerText: String
}
type NavigationBehavior {
	id: String
	name: String
	telemetry: SearchTelemetryPayload
}
type Presentation {
	warningTags: Unknown
}
type SearchPostBehaviors {
	community: Unknown
	post: Unknown
	profile: Unknown
	thumbnail: Unknown
}
type Behaviors {
	default: Unknown
}
type ListComponent {
	id: String
	children: [Unknown]
	presentation: Unknown
	behaviors: SearchListComponentBehaviors
}
type ExpandSectionBehavior {
	telemetry: SearchTelemetryPayload
}
type Behaviors {
	default: NavigationBehavior
}
type ProfileNavigationBehavior {
	id: String
	name: String
	telemetry: SearchTelemetryPayload
	url: String
}
type SearchErrorBehavior {
	id: String
	cta: Unknown
}
type SearchReformulationBehavior {
	id: String
	query: String
	telemetry: SearchTelemetryPayload
}
type SearchBanner {
	id: String
	presentation: SearchBannerPresentation
	telemetry: SearchTelemetryPayload
	behaviors: SearchBannerBehaviors
}
type SearchTypeaheadList {
	id: String
	children: [Unknown]
	behaviors: Behaviors
	presentation: Unknown
}
type Behaviors {
	default: SearchQueryReformulationBehavior
}
type CollapsiblePresentation {
	title: String
}
type SearchQueryReformulationBehavior {
	query: String
	telemetry: SearchTelemetryPayload
}
type SearchErrorPresentation {
	icon: String
	errorMessage: String
	explanation: String
	retryText: String
}
type ResourceFormattedStringDesc {
	stringRes: StringResource
	args: [Unknown]
}
type PluralFormattedStringDesc {
	pluralsRes: Unknown
	number: [Unknown]
}
type HmacHeaders {
	bodyHeader: String
	resultHeader: String
}
type ExpandMenu {
	commentKindWithId: String
}
type Unsticky {
	postWithKindId: String
}
type BlockAccount {
	postWithKindId: String
}
type NoOp {
	postWithKindId: String
}
type UnblockAccount {
	commentKindWithId: String
}
type DensityWithConverter {
	density: Unknown
}
type AssignReason {
	postWithKindId: String
	removalReason: Unknown
}
type DistinguishAsMod {
	commentKindWithId: String
}
type Spam {
	postWithKindId: String
}
type ModActionFlair {
	text: String
	textColor: String
	backgroundColor: String
	templateId: String
	richTextObject: [Unknown]
}
type BlockAccount {
	commentKindWithId: String
}
type ExpandMenu {
	postWithKindId: String
}
type UnstickyProfile {
	postWithKindId: String
}
type UnblockAccount {
	postWithKindId: String
}
type DistinguishAsAdmin {
	postWithKindId: String
}
type ToggleOn {
	subredditKindWithId: String
}
type ContextAction {
	postWithKindId: String
}
type CollapseMenu {
	postWithKindId: String
}
type MarkSpoiler {
	postWithKindId: String
}
type DistinguishAsMod {
	postWithKindId: String
}
type Unlock {
	postWithKindId: String
}
type SafetyFilter {
	title: String
	body: String
	icon: String
	confidenceLevel: String
}
type CollapseMenu {
	commentKindWithId: String
}
type UnignoreReports {
	postWithKindId: String
}
type SpotlightPreviewConfig {
	showSubredditInfo: Boolean
	isRemoved: Boolean
}
type Unlock {
	commentKindWithId: String
}
type Sticky {
	postWithKindId: String
}
type Share {
	commentKindWithId: String
}
type Report {
	commentKindWithId: String
}
type OnPostFlairSelected {
	postWithKindId: String
	flair: Unknown
}
type Highlight {
	postWithKindId: String
}
type ModActionAuthor {
	id: String
	displayName: String
	isBlocked: Boolean
	icon: String
}
type IgnoreAndApprove {
	commentKindWithId: String
}
type Retry {
	commentKindWithId: String
}
type AssignReason {
	commentKindWithId: String
	removalReason: Unknown
}
type UnmarkSpoiler {
	postWithKindId: String
}
type Sticky {
	commentKindWithId: String
}
type Lock {
	commentKindWithId: String
}
type Image {
	url: String
}
type Reason {
	title: String
	body: String
	icon: String
}
type Unhide {
	postWithKindId: String
}
type Report {
	postWithKindId: String
}
type UndistinguishAsMod {
	commentKindWithId: String
}
type Remove {
	commentKindWithId: String
}
type ModActionCommentAuthor {
	id: String
	displayName: String
	isBlocked: Boolean
}
type DensityImpl {
}
type StickyProfile {
	postWithKindId: String
}
type UnmarkNsfw {
	postWithKindId: String
}
type DistinguishAsAdmin {
	commentKindWithId: String
}
type UndistinguishAsMod {
	postWithKindId: String
}
type LinearFontScaleConverter {
}
type IgnoreAndApprove {
	postWithKindId: String
}
type NoOp {
	commentKindWithId: String
}
type ContextAction {
	commentKindWithId: String
}
type CopyText {
	commentKindWithId: String
}
type Unsave {
	commentKindWithId: String
}
type UndistinguishAsAdmin {
	commentKindWithId: String
}
type Unhighlight {
	postWithKindId: String
}
type ModActionPost {
	id: String
	title: String
	thumbnail: ModActionThumbnail
	permalink: String
	author: ModActionAuthor
	isApproved: Boolean
	isRemoved: Boolean
	isReportingIgnored: Boolean
	isLocked: Boolean
	isSticky: Boolean
	isHighlighted: Boolean
	isSpoiler: Boolean
	isNSFW: Boolean
	isSaved: Boolean
	isHidden: Boolean
	hasFlair: Boolean
	flair: ModActionFlair
	hasReports: Boolean
	distinguishType: Unknown
	crowdControlLevel: Unknown
	verdictAuthor: ModActionAuthor
	verdictAt: Int
	reasons: [Unknown]
	safetyFilters: [Unknown]
	isSelf: Boolean
	richText: String
	markdown: String
}
type MarkNsfw {
	postWithKindId: String
}
type Share {
	postWithKindId: String
}
type AdjustControl {
	postWithKindId: String
}
type Save {
	postWithKindId: String
}
type Retry {
	postWithKindId: String
}
type UndistinguishAsAdmin {
	postWithKindId: String
}
type Lock {
	postWithKindId: String
}
type Approve {
	postWithKindId: String
}
type Unsave {
	postWithKindId: String
}
type Remove {
	postWithKindId: String
}
type Unsticky {
	commentKindWithId: String
}
type Spam {
	commentKindWithId: String
}
type Approve {
	commentKindWithId: String
}
type UnignoreReports {
	commentKindWithId: String
}
type ModActionThumbnail {
	obfuscated: Image
	defaultImage: Image
}
type Save {
	commentKindWithId: String
}
type CopyText {
	postWithKindId: String
}
type ToggleOff {
	subredditKindWithId: String
}
type Hide {
	postWithKindId: String
}
type ModActionComment {
	id: String
	permalink: String
	author: ModActionCommentAuthor
	isApproved: Boolean
	isRemoved: Boolean
	isLocked: Boolean
	isReportingIgnored: Boolean
	isSticky: Boolean
	isSaved: Boolean
	hasReports: Boolean
	distinguishType: Unknown
	verdictAuthor: ModActionCommentAuthor
	verdictAt: Int
	reasons: [Unknown]
	safetyFilters: [Unknown]
	isQuickCommentRemoveEnabled: Boolean
}
type DisplayedText {
	raw: String
	styled: Unknown
}
type ChunkIndex {
	length: Unknown
	offsets: Unknown
	timeUs: Unknown
	durationsUs: Unknown
}
type SkuDetailsResult {
	billingResult: Unknown
	skuDetailsList: [Unknown]
}
type PurchasesResult {
	billingResult: Unknown
	purchasesList: Unknown
}
type ConsumeResult {
	billingResult: Unknown
	purchaseToken: String
}
type Data {
	joinButton: Unknown
}
type SubscribeEvent {
	subredditId: String
	subreddit: String
	linkIdWithKind: String
	hostScreen: Unknown
}
type Follow {
	state: Unknown
}
type SubscriptionState {
	subscription: Unknown
	dispatchEvent: Unknown
}
type SubscriptionsState {
	subscriptionStateById: Unknown
}
type IdentityProviderLoginV2Result {
	response: IdentityProviderLoginV2Response
	sessionCookie: String
}
type Failure {
	previousButton: Unknown
}
type Join {
	state: Unknown
}
type CheckoutPrice {
	amount: Int
	currency: String
}
type Error {
	cause: Unknown
}
type Loaded {
	items: [Unknown]
	modEnabled: Boolean
}
type SimpleEvent {
	lastMessageTime: Int
	lastMessageText: String
}
type Feed {
	id: String
	label: String
}
type CheckoutItem {
	price: CheckoutPrice
	localisedPrice: CheckoutPrice
	productId: String
	externalProductId: String
}
type GlobalProductPurchasePackage {
	id: String
	price: String
	quantity: String
	currency: Unknown
	requiredPaymentProviders: [Unknown]
	externalProductId: String
	skuList: Unknown
	baselinePrice: String
	tags: Unknown
	description: String
	bonusPercent: String
	promos: [Unknown]
}
type PriceFilterBound {
	usdCents: String
}
type SkuDuration {
	amount: Unknown
}
type ApiError {
	errorCodes: Unknown
}
type PremiumSku {
	name: String
	description: String
	kind: String
	duration: SkuDuration
	subscriptionType: String
}
type PriceFilter {
	lowerBound: PriceFilterBound
	upperBound: PriceFilterBound
	localizedPriceIsUsd: Boolean
}
type GlobalProductOffer {
	id: String
	type: String
	name: String
	description: String
	version: String
	userSpendingProfile: String
	productPurchasePackages: [Unknown]
}
type Configuration {
	isEnabled: Boolean
	isLoading: Boolean
}
type ValueInterpolator {
}
type CardParams {
	front: Unknown
	back: Unknown
}
type IsFacingFront {
	value: Boolean
}
type Processor {
}
type MatrixRoomSummaryAnalyticsData {
	roomId: String
	name: String
	chatAnalyticsType: Unknown
	joinedMembersCount: Int
	directUserId: String
	subreddit: MatrixSubredditInfoAnalyticsData
	isModerator: Boolean
	isRestricted: Boolean
}
type MatrixMessageAnalyticsData {
	messageType: Unknown
	messageId: String
	messageSenderUserId: String
	repliesCount: Int
	parentMessageId: String
	depth: Int
	body: String
	messageState: Unknown
}
type RoomData {
	openedFromPn: Boolean
	screenFirstRenderTimestamp: Int
	isNewChat: Boolean
}
type MatrixRoomMemberAnalyticsData {
	userId: String
}
type MatrixSubredditInfoAnalyticsData {
	id: String
	name: String
	isNsfw: Boolean
	isModerator: Boolean
}
type ArenaEventInfo {
	id: String
	slug: String
	name: String
	location: String
	stage: String
	startTime: Unknown
	endAt: Unknown
	tournamentName: String
	competitors: [Unknown]
}
type AvatarCtaClicked {
	ctaType: Unknown
}
type DiscoverBarPage {
	recommendationAlgorithm: String
	items: Unknown
}
type SnoovatarState {
	model: Unknown
	reduceMotion: Boolean
	showAvatarCta: Boolean
}
type Avatar {
	avatarUrl: String
}
type NetworkError {
	message: String
}
type Snoovatar {
	avatarUrl: String
	isPremium: Boolean
	nftCardUiState: Unknown
}
type Competitor {
	id: String
	name: String
	url: String
}
type ImageAvatarState {
	model: Avatar
	showAvatarCta: Boolean
}
type NftShowcaseState {
	nftCardUiState: NftCardUiModel
	userId: String
	userName: String
	showAvatarCta: Boolean
}
type LiveArenaEventUiModel {
	title: String
	subtitle: String
	isLive: Boolean
	eventId: String
}
type AvatarClicked {
	model: Unknown
}
type NftDetail {
	title: String
	value: String
	drawValueBackground: Boolean
}
type Params {
}
type Params {
}
type Params {
	image: String
}
type Level {
	label: String
	rewardIconUrl: String
	isCurrent: Boolean
	isReached: Boolean
}
type AchievementsTimelineViewState {
	levels: Unknown
	currentDay: String
	currentDayCompleted: Boolean
	showWarningBadge: Boolean
	contentDescription: String
}
type ModAwardItem {
}
type CommunityChestUiModel {
	communityName: String
	communityImageUrl: String
	goldBalance: Unknown
}
type Title {
	title: String
}
type SubscriptionItem {
}
type ColorPickerDataSet {
	selectedRgbValue: String
	hasCustomColor: Boolean
	defaultRgbValues: [Unknown]
}
type Read {
	readAt: Unknown
}
type WorkGenerationalId {
	workSpecId: String
}
type WorkInfoPojo {
	id: String
	state: Unknown
	output: Unknown
	initialDelay: Int
	intervalDuration: Int
	flexDuration: Int
	constraints: Unknown
	runAttemptCount: Unknown
	backoffDelayDuration: Int
	lastEnqueueTime: Int
	periodCount: Int
	stopReason: [Unknown]
	progress: [Unknown]
}
type Preference {
	key: String
	value: Int
}
type SystemIdInfo {
	workSpecId: String
}
type IdAndState {
	id: String
	state: Unknown
}
type NotificationLocalState {
	readState: Unknown
	removedState: Unknown
}
type EventOption {
	genericSelectionOption: Unknown
	event: Unknown
}
type SearchNavigationList {
	id: String
	presentation: SearchNavigationListPresentation
	behaviors: Unknown
}
type SearchDropdown {
	id: String
	presentation: SearchFilterOptionListPresentation
	behaviors: [Unknown]
}
type PostCheckTypeOption {
	genericSelectionOption: Unknown
	postCheckType: Unknown
}
type InclusionOption {
	genericSelectionOption: Unknown
	inclusionType: Unknown
}
type PhraseTypeOption {
	genericSelectionOption: Unknown
	phraseType: Unknown
}
type ActionTypeOption {
	genericSelectionOption: Unknown
	actionType: Unknown
}
type OnStoragePermissionsGranted {
	requester: Unknown
}
type OnPostSubmitted {
	subredditName: String
	linkId: String
}
type OnActionClicked {
	action: Unknown
}
type OnActionItemClicked {
	actionItem: Unknown
}
type Subpage {
	actionItem: Unknown
}
type ShareSheet {
	shareActions: [Unknown]
	educationPromptText: Int
}
type ActionSheet {
	socialActions: Unknown
	shareActions: [Unknown]
	actionItems: [Unknown]
	educationPromptText: Int
	sheetState: Unknown
}
type FlairViewState {
	id: String
	iconUrl: String
	text: String
	isSelected: Boolean
	contentDescription: String
}
type OnFlairClick {
}
type ModQueueItemsResponse {
	content: Unknown
	endCursor: String
	startCursor: String
	startPageLoadFailed: Boolean
}
type LocaleList {
	localeList: [Unknown]
}
type ShowUserInfo {
	userName: String
}
type ContentLabel {
	isPost: Boolean
	title: String
	content: String
	subredditName: String
	createdAt: String
}
type WhysLabel {
	action: String
	author: String
	reason: String
	count: Int
}
type HeaderLabel {
	userName: String
	distinguishTagType: Unknown
	modNote: Unknown
	flairText: String
}
type Lock {
	isPost: Boolean
	isLocked: Boolean
}
type TagsLabel {
	isPost: Boolean
	isSpoiler: Boolean
	isNsfw: Boolean
	isOriginal: Boolean
	isQuarantined: Boolean
	isLive: Boolean
	isPollIncluded: Boolean
}
type Thumbnail {
	url: String
	height: String
}
type UserInfo {
	userKindWithId: String
	profileIconUrl: String
	usernamePrefixed: String
	markAsNsfw: Boolean
	isMuted: Unknown
}
type ModmailParticipants {
	recipientUserName: String
	senderSubredditId: String
}
type Subreddit {
	name: String
}
type DomainModmailFullConversationAction {
	id: String
	createdAt: Int
	authorInfo: DomainModmailAuthorInfo
	conversation: DomainModmailConversation
	redditorInfo: DomainModmailAuthorInfo
	authorPrefixedName: String
	actionType: Unknown
	bannedAt: Int
	banEndsAt: Int
	mutedAt: Int
	muteEndsAt: Int
}
type SubredditInfo {
	subredditKindWithId: String
	subredditIconUrl: String
	subredditNamePrefixed: String
	markAsQuarantined: Boolean
	markAsNsfw: Boolean
	primaryColor: Int
}
type ParticipantUIModel {
	iconUrl: String
	text: String
	markAsNsfw: Boolean
	primaryColor: Int
	showIcon: Boolean
	isUser: Boolean
}
type User {
	userKindWithId: String
	name: String
	isEmployee: Boolean
}
type PageInfo {
	hasNext: Boolean
	hasPrevious: Boolean
	startCursor: String
	endCursor: String
}
type Mod {
	userKindWithId: String
	name: String
	isEmployee: Boolean
}
type ModmailRecentConversationsResult {
	conversations: Unknown
	pageInfo: PageInfo
}
type DomainModmailAuthorInfo {
	id: String
	displayName: String
	prefixedName: String
	iconUrl: String
	karma: DomainModmailKarma
	recentPostsCount: Int
	recentPosts: [Unknown]
	recentCommentsCount: Int
	recentComments: [Unknown]
	mutesCount: Int
	muteLength: Unknown
	banLength: Unknown
	isEmployee: Boolean
	isContributor: Boolean
}
type ModmailRecentConversation {
	id: String
}
type RecentPost {
	id: String
	title: String
	contentRichText: String
	contentPreview: String
	isMediaOnlyPost: Boolean
	isNsfw: Boolean
	isSpoiler: Boolean
	isRemoved: Boolean
	thumbnail: Thumbnail
}
type DomainModmailKarma {
	total: Unknown
	fromPosts: Unknown
	fromComments: Unknown
}
type ModmailConversationResult {
	data: Unknown
	startCursor: String
	endCursor: String
	hasNextPage: Boolean
}
type DomainModmailConversation {
	conversationId: Boolean
	isHighlighted: Boolean
	isUnread: Boolean
	isFiltered: Boolean
	isJoinRequest: Boolean
	isAppeal: Boolean
	messageCount: Unknown
	subject: String
	body: String
	preview: String
	subredditIcon: String
	subredditName: String
	subredditKindWithId: String
	participantIconURL: String
	lastUpdate: Int
	authors: [Unknown]
	participantId: String
	participantSubredditId: String
}
type Bounded {
	endsAt: Int
}
type ModmailResult {
	data: Unknown
	startCursor: String
	endCursor: String
	hasNextPage: Boolean
}
type Size {
}
type DomainModmailFullConversationMessage {
	id: String
	createdAt: Int
	authorInfo: DomainModmailAuthorInfo
	conversation: DomainModmailConversation
	redditorInfo: DomainModmailAuthorInfo
	authorPrefixedName: String
	message: String
	richtext: String
	conversationType: Unknown
	isInternal: Boolean
	isAuthorHidden: Boolean
}
type ManuallySelected {
	value: String
}
type ModInsightsSummariesUi {
	lastUpdatedDate: String
	dailySummaries: Unknown
	weeklySummaries: Unknown
	monthlySummaries: Unknown
	yearlySummaries: Unknown
}
type SafetyFiltersInsightsMetricUi {
	totalFiltered: String
	postsReversalRate: String
	postsReversalDescription: String
	commentsReversalRate: String
	commentsReversalDescription: String
}
type RecentComment {
	id: String
	contentRichText: String
	contentPreview: String
	parentId: String
	parentTitle: String
	isRemoved: Boolean
	isMediaOnlyComment: Boolean
}
type Breakdown {
	name: String
	metric: String
}
type RemovalReasonsStickyEntity {
	userId: String
	subredditId: String
	notifyUserVia: Unknown
	sendMessageAs: Unknown
	lockComment: Boolean
	contentType: Unknown
	toggleState: Boolean
}
type ModInsightsSummaryDataUi {
	pageViews: ModInsightsMetricsUi
	uniques: ModInsightsMetricsUi
	subscribes: ModInsightsMetricsUi
	unsubscribes: ModInsightsMetricsUi
	postsPublished: ModInsightsMetricsUi
	postsRemoved: ModInsightsMetricsUi
	commentsPublished: ModInsightsMetricsUi
	commentsRemoved: ModInsightsMetricsUi
	contentFiltered: ModInsightsMetricsUi
	contentRemovedByAll: ModInsightsMetricsUi
	commentsRemovedByAll: ModInsightsMetricsUi
	postsRemovedByAll: ModInsightsMetricsUi
	postsReports: ModInsightsMetricsUi
	commentsReports: ModInsightsMetricsUi
	contentPublished: ModInsightsMetricsUi
	contentReported: ModInsightsMetricsUi
	postsRemovedByAdminAndMods: ModRemovalInsightsMetricsUi
	postsRemovedByAdminsOnly: ModRemovalInsightsMetricsUi
	postsRemovedByAdminApprovedByMod: ModRemovalInsightsMetricsUi
	commentsRemovedByAdminsOnly: ModRemovalInsightsMetricsUi
	commentsRemovedByAdminAndMods: ModRemovalInsightsMetricsUi
	commentsRemovedByAdminApprovedByMod: ModRemovalInsightsMetricsUi
	harassingContentFiltered: SafetyFiltersInsightsMetricUi
	banEvasionContentFiltered: SafetyFiltersInsightsMetricUi
	crowdControlContentFiltered: SafetyFiltersInsightsMetricUi
}
type Adaptive {
}
type AdditionalStatCard {
	contentType: Unknown
	alignedWithModAction: ModRemovalInsightsMetricsUi
	oppositeOfModAction: ModRemovalInsightsMetricsUi
	notReviewedByMods: ModRemovalInsightsMetricsUi
}
type ModInsightsMetricsUi {
	metric: String
	deltaTrendingUp: String
	deltaTrendingDown: String
	deltaTrendingDescription: String
	delta: Unknown
	breakdown: [Unknown]
}
type ModRemovalInsightsMetricsUi {
	insightDescription: String
}
type SafetyFiltersStatCard {
	title: String
	value: String
	description: String
}
type StatCard {
	title: String
	descriptionDeltaTrendingUp: String
	descriptionDeltaTrendingDown: String
	descriptionDelta: String
	value: String
}
type Range {
	value: String
}
type PickUsernameBeforeAuth {
	idToken: String
	emailDigestSubscribe: Boolean
}
type RegisterRemoteError {
}
type AuthTransitionParameters {
	deeplinkAfterLogin: String
	forceIncognitoAfterAuth: Boolean
	getEmailDigestSubscribedState: Boolean
}
type FieldStateValue {
	value: String
	fieldState: Unknown
	showTrailingIcon: Boolean
}
type AuthContinueButtonState {
	isEnabled: Boolean
	isLoading: Boolean
}
type EmailDigestBottomsheetUiModel {
	username: String
	email: String
	avatarUrl: String
}
type AuthTextFieldState {
	value: String
	status: FieldStateValue
}
type Unknown {
}
type PickUsernameAfterAuth {
	credentials: Credentials
	userType: Unknown
}
type RegisterVerifiedRemoteError {
	httpCode: String
	errorMessage: String
}
type RangedUri {
	referenceUri: String
	start: Int
	length: Int
}
type StorefrontOutfitUiModel {
	storefrontListingId: String
	name: String
	totalQuantity: Int
	outfitImageUrl: String
	backgroundImageUrl: String
	storeState: Unknown
	badge: Badge
	testStatus: Unknown
	utilityBadges: Unknown
	reserveSpaceForUtilityBadges: Boolean
}
type CategoryDetails {
	categoryId: String
}
type OutfitCards {
	imageUrls: [Unknown]
}
type DeepLink {
	deepLink: String
}
type StorefrontArtistUiModel {
	artistId: String
	presentedName: String
	isNsfw: Boolean
	iconUrl: String
	snoovatarFullBodyUrl: String
	description: String
	prefixName: String
}
type CategoryImage {
	imageUrl: String
}
type Available {
	priceFormatted: String
}
type BannerDetails {
	contents: [Unknown]
}
type Badge {
	emoji: String
	title: String
}
type BannerDetailsContentUiModel {
	type: Unknown
	content: String
}
type CategoryCardUiModel {
	categoryId: String
	title: String
	subtitle: String
	presentation: Unknown
	categoryDetail: CategoryDetail
	utilityBadges: Unknown
	reserveSpaceForUtilityBadges: Boolean
}
type CurrentUserShowcaseResponse {
	state: DisplayedCollectibleItemsState
	items: [Unknown]
}
type MarketplaceInventoryItemAnalyticsData {
	outfitId: String
	inventoryItemId: String
	inventoryItemName: String
	contractAddress: String
	rarity: String
	walletAddress: String
	tokenId: String
}
type SubscriptionProps {
	subredditId: String
	subreddit: String
	linkIdWithKind: String
	hostScreen: Unknown
}
type MarketplaceStorefrontListingAnalyticsData {
	listingId: String
	listingCoinsPrice: Int
	listingCurrency: String
	listingQuantity: Int
	listingNftStatus: String
}
type Action {
	actionType: Unknown
	message: String
}
type NotCondition {
	regexCondition: RegexCondition
	stringCondition: StringCondition
}
type AutomationTriggeredRule {
	markDownValidationMessage: Unknown
	richTextValidationMessage: String
	triggeredLocation: Unknown
	actionType: Unknown
	guidanceId: String
	guidanceName: String
}
type Automation {
	id: String
	name: String
	trigger: Unknown
	enabled: Boolean
	action: Action
	condition: Unknown
	isSupported: Boolean
	description: String
}
type PostGuidanceTriggeredRule {
	markDownValidationMessage: String
	richTextValidationMessage: String
	triggeredLocation: Unknown
	actionType: Unknown
	guidanceId: String
	guidanceName: String
}
type RegexCondition {
	features: [Unknown]
	valueString: String
	isCaseSensitive: Boolean
}
type StringCondition {
	features: [Unknown]
	values: [Unknown]
}
type AutomationGuidanceRule {
	richTextContent: String
	type: Unknown
}
type CommentGuidanceRule {
	richTextValidationMessage: String
	guidanceId: String
	actionType: Unknown
}
type FieldGuidance {
	blockingRules: Unknown
	reportingRules: Unknown
}
type CommunityStatus {
	description: CommunityStatusDescription
	emoji: CommunityStatusEmoji
}
type CommunityStatusDescription {
	markdown: String
	richText: String
}
type CommunityStatusEmoji {
	name: String
	url: String
}
type CommunityStatusUpdate {
	description: CommunityStatusDescription
	emoji: CommunityStatusEmoji
	expiresAt: Int
}
type TrophyCategory {
	id: StreaksTimelineHeader
	categoryName: String
	progress: CategoryProgress
	trophies: [Unknown]
	categoryPill: TextIconCategoryPill
	shareInfo: Unknown
	contentDescription: String
}
type SubredditId {
	id: String
}
type ModeratorActionSection {
	data: ModeratorActionElement
	details: HitlFilterDetails
}
type AchievementSetting {
	id: String
	description: String
	enabled: Boolean
}
type CommunitiesData {
	eligible: Cursor
	unlocked: Cursor
}
type TrophyCase {
	categories: [Unknown]
}
type ToggleNotifications {
	value: String
	messageType: Unknown
	disabledConfirmationToast: Unknown
}
type Subreddit {
	nameWithoutPrefix: String
}
type TrophyImage {
	lockedUrl: String
	unlockedUrl: String
}
type CategoryProgress {
	unlocked: Int
}
type Deeplink {
	url: String
}
type UserGlobalAchievements {
}
type TrophiesUnlockedNotification {
	id: [Unknown]
	message: String
	mostRecentUnlockedAt: Unknown
}
type AchievementsSettings {
	enabled: Boolean
	eligible: Boolean
	achievements: [Unknown]
}
type UserProfile {
	prefixedName: String
}
type Cursor {
	nextPageToken: String
	data: Unknown
}
type SubredditContribution {
	subredditName: String
	color: Int
	time: Unknown
}
type Statistics {
	rarity: Unknown
	userRank: Int
	usersUnlockedCount: Int
}
type TrophyWithDetails {
	id: String
	name: String
	shortDescription: String
	longDescription: String
	unlockedAt: Unknown
	progress: Progress
	isNew: Boolean
	contributions: [Unknown]
	cta: Unknown
	additionalAction: Unknown
	shareInfo: Unknown
	statistics: Statistics
	repeatCount: Int
	isPinned: Boolean
	communities: CommunitiesData
	reward: Unknown
}
type Progress {
	done: Unknown
}
type Username {
	value: String
}
type UserCommunityAchievements {
	achievements: [Unknown]
}
type SelectOptionEditableUiModel {
	id: String
	iconId: Int
	hint: String
	currentText: String
	metadata: Notification
	selected: Boolean
	payload: Unknown
	compoundImageUrl: String
	type: Unknown
}
type LastModActionResult {
	lastModAction: LastModAction
}
type LastModAction {
	id: String
	createdAt: Int
	actionStringResourceId: Moderator
	content: Content
	details: String
}
type RecentModActivityResult {
	activeModerators: [Unknown]
	lastModActions: [Unknown]
}
type Content {
	id: String
	title: String
	markdown: String
	preview: String
	authorDisplayName: String
	isPost: Boolean
	isComment: Boolean
}
type DomainModActionSubscription {
	id: String
	subredditKindWithId: String
	moderatorId: String
	targetId: String
	targetType: Unknown
	action: Unknown
}
type RecentModActivitySubreddit {
	id: String
	name: String
	icon: String
}
type Moderator {
	id: String
	displayName: String
	iconSmallUrl: String
	iconSnoovatarUrl: String
}
type Notification {
	notificationId: String
	parentId: String
	subredditId: String
	awardingId: String
	awardId: String
	messageType: String
	isViewed: Boolean
	isClicked: Boolean
}
type SelectOptionTextUiModel {
	id: String
	iconId: Int
	title: String
	metadata: Notification
	selected: Boolean
	payload: Unknown
	compoundImageUrl: String
	type: Unknown
}
type PlayerVideoAuthorization {
	postId: String
	authToken: String
	authTokenExpiresAt: String
	authTokenId: String
}
type VideoMetadata {
	uniqueId: String
	owner: String
	videoUrls: VideoUrls
	dimensions: VideoDimensions
	videoType: Unknown
	adCallToAction: String
	positionInFeed: Int
	thumbnailUrl: String
	shouldBlur: Boolean
	videoPage: Unknown
	mediaId: String
	title: String
	adAnalyticsInfo: AdAnalyticsInfo
	eventProperties: EventProperties
	postCreatedAt: Int
	analyticsPageType: String
	captionsSettings: Unknown
	authorization: PlayerVideoAuthorization
	duration: Int
	treatGifsAsVideos: Boolean
	startFromTheBeginning: Boolean
}
type Enabled {
}
type AddEmailFlow {
	maskedCurrentPhoneNumber: String
	hasPasswordSet: Boolean
	addingEmailToRemovePhone: Boolean
	email: String
}
type AddPhoneNumberFlow {
	hasPasswordSet: Boolean
	jwt: String
}
type RemoveAccountFlow {
	maskedCurrentPhoneNumber: String
	hasPasswordSet: Boolean
	isSsoAccount: Boolean
}
type RemovePhoneNumberFlow {
	maskedCurrentPhoneNumber: String
}
type UpdatePhoneNumberFlow {
	maskedCurrentPhoneNumber: String
	hasEmailAdded: Boolean
	hasPasswordSet: Boolean
	jwt: String
}
type SelectOptionsScreenUiModel {
	sourceId: String
	title: String
	subTitle: String
	selectOptionUiModels: [Unknown]
	selectMode: Unknown
	showCloseButton: Boolean
	showHeaderDoneButton: Boolean
}
type TrendingResult {
	id: String
	queryString: String
	postTitle: String
	thumbnailUrl: String
	isPromoted: Boolean
	isBlankAd: Boolean
}
type ExternalAuthComponentDependencies {
	context: Unknown
	view: Unknown
}
type NavBarEventContext {
	eventKey: String
}
type VideoContentModel {
	thumbnail: String
	trimVideoUrl: String
	videoPath: String
	continuation: Unknown
}
type All {
	selections: [Unknown]
}
type VideoImages {
	cover: String
	thumbnail: String
}
type HubNavigable {
	screen: Unknown
	hubScreenKey: Unknown
}
type Subset {
	selections: [Unknown]
}
type Permissions {
	isAllAllowed: Boolean
	isMailEditingAllowed: Boolean
	isPostEditingAllowed: Boolean
}
type VideoItemViewState {
	thumbnail: String
	video: String
}
type HubCommunity {
	subredditKindWithId: String
	name: String
	icon: String
	permissions: Permissions
}
type Invalid {
	failureReason: Unknown
}
type VideoTrackFormat {
	width: Int
}
type FolderModel {
	name: String
	bucketId: String
}
type Single {
	selection: HubCommunity
}
type ModeratorActionElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	authorId: String
	authorName: String
	subredditId: String
	subredditName: String
	isOwnPost: Boolean
	isAdmin: Boolean
	modQueueReason: Unknown
	reportCount: Int
	verdictType: Unknown
	removalReason: String
	canAddRemovalReason: Boolean
	icon: String
	snoovatar: String
	isApproved: Boolean
	isRemoved: Boolean
	isSpam: Boolean
	modQueueTriggers: Unknown
	modReports: Unknown
	userReports: Unknown
	hasGivenFeedback: Boolean
	distinguishType: Unknown
	isModModeEnabled: Boolean
}
type VideoModel {
	filePath: String
	date: Int
}
type API {
	throwable: Unknown
}
type DefaultAssets {
	torsoAndHeadAssets: [Unknown]
	fullBodyAssets: [Unknown]
	relatedStyleNames: Unknown
}
type Network {
	throwable: Unknown
}
type WelcomeMessageFlair {
	items: [Unknown]
	isLightTextColor: Boolean
	backgroundColor: String
	accessibilityText: String
}
type Content {
	markdown: String
	richtext: String
	preview: String
	isOriginal: Unknown
	isPollIncluded: Boolean
	isQuarantined: Unknown
	isDevPlatformApp: Boolean
}
type Image {
	previewUrl: String
}
type QueueComment {
	author: Author
	createdAt: Int
	subreddit: Subreddit
	modNoteLabel: Unknown
	verdict: Verdict
	removalReason: String
	modQueueReasons: [Unknown]
	userIsBanned: Unknown
	contentKindWithId: String
	status: Status
	content: Unknown
	post: Post
	markdown: String
	bodyHtml: String
	richText: Unknown
	preview: String
	media: Unknown
}
type Subreddit {
	subredditKindWithId: String
	subredditName: String
	subredditNamePrefixed: String
	communityIcon: String
	communityPrimaryColor: String
	isQuickCommentRemoveEnabled: Boolean
}
type VideoToPrefetch {
	url: String
	authorization: PlayerVideoAuthorization
	type: Unknown
}
type UpdateModeratorStateInput {
	subredditId: String
	userId: Unknown
	userName: Unknown
	action: ModeratorStateAction
	permissions: Unknown
}
type AvatarDownloadAvatarInput {
	accessoryIds: [Unknown]
	styles: Unknown
}
type UpdateChatChannelUsersRolesInput {
	roomId: String
	roles: [Unknown]
	explicitConsentFlow: Present
}
type FilterInput {
	key: Present
	value: Unknown
}
type DistributionCampaignChoiceFilter {
	ids: Unknown
}
type TranslationContext {
	preTranslate: Unknown
	experimentOverrides: Unknown
	targetLanguage: Unknown
	usage: Unknown
}
type ReportRedditorInput {
	siteRule: Unknown
	freeText: Unknown
	fromHelpDesk: Unknown
	hostAppName: Unknown
	redditorId: String
	reason: Unknown
	subredditId: Unknown
	additionalUsers: Unknown
}
type DeletePostInput {
	postId: String
}
type ModApproveInput {
	id: String
}
type ReplyPrivateMessageInput {
	messageId: String
	responseText: String
}
type IgnoreReportsInput {
	id: String
}
type CreateAvatarInput {
	accessoryIds: [Unknown]
	styles: Unknown
	createShareUrl: Unknown
	backgroundItemId: Unknown
}
type CreateSubredditInput {
	name: String
	isNsfw: Unknown
	publicDescription: String
	type: SubredditType
	tags: Unknown
	myRedditInput: Unknown
	modSelectedTopics: Unknown
}
type SetSocialLinksInput {
	socialLinks: [Unknown]
}
type CreateSubredditPostInput {
	title: String
	isSpoiler: Unknown
	isNsfw: Unknown
	isSendReplies: Unknown
	isResubmit: Unknown
	isCommercialCommunication: Unknown
	isClubContent: Unknown
	location: Unknown
	flair: Unknown
	content: Unknown
	video: Unknown
	videoGif: Unknown
	image: Unknown
	link: Unknown
	crosspost: Unknown
	discussionType: Unknown
	RPAN: Unknown
	gallery: Unknown
	poll: Unknown
	videoReact: Unknown
	permissions: Unknown
	postSet: Unknown
	draftId: Unknown
	recaptchaToken: Unknown
	postEvent: Unknown
	targetLanguage: Unknown
	correlationId: Unknown
	subredditName: String
}
type DeleteCommentInput {
	commentId: String
}
type UpdateHighlightedPostInput {
	postId: String
	expiresAt: Present
	label: Present
}
type ReorderSubredditRulesInput {
	subredditId: String
	newRuleOrderByIds: [Unknown]
}
type UpdatePostLockedStateInput {
	postId: String
	lockedState: LockedState
}
type UpdateSocialLinksInput {
	socialLinks: [Unknown]
}
type CreateSubredditRuleInput {
	subredditId: String
	name: String
	reason: Unknown
	description: Unknown
	supportedContentTypes: Unknown
}
type UpdateSubredditUserFlairSettingsInput {
	subredditId: String
	isEnabled: Present
	isSelfAssignable: Unknown
}
type ShowCrowdControlledCommentInput {
	commentId: String
}
type CreateSubredditFlairTemplateInput {
	subredditId: String
	text: Unknown
	isEditable: Boolean
	flairType: FlairType
	textColor: Unknown
	backgroundColor: Unknown
	isModOnly: Boolean
	cssClass: Unknown
	maxEmojis: Unknown
	allowableContent: Unknown
}
type StorefrontBatchArtistsQuery {
	sectionId: String
	filter: Unknown
	sort: Unknown
	before: Unknown
	after: Unknown
	first: Unknown
	last: Unknown
}
type UpdateInboxAnnouncementOptOutsInput {
	authorIds: [Unknown]
	option: UpdateInboxAnnouncementOptOutOption
}
type DeleteSubredditCustomMobileIconInput {
	subredditId: String
}
type PreviewPostAutomationInput {
	postTitle: String
	postBody: Unknown
	previewAutomation: PreviewAutomationInput
}
type DeleteSubredditMuteSettingInput {
	subredditId: String
}
type UpsertBanEvasionSettingsInput {
	subredditId: String
	filterSettings: Present
}
type CopyMultiredditInput {
	fromLabel: String
	toLabel: Unknown
	descriptionMd: Unknown
	displayName: Unknown
}
type ReportTalkInput {
	siteRule: Unknown
	freeText: Unknown
	fromHelpDesk: Unknown
	hostAppName: Unknown
	postId: String
	subredditRule: Unknown
	customRule: Unknown
	additionalOptions: Unknown
}
type UpdatePostInput {
	postId: String
	content: Unknown
	event: Unknown
	targetLanguage: Unknown
}
type DeleteSubredditChannelInput {
	channelId: String
}
type UpdatePostReminderStateInput {
	postId: String
	reminderState: PostReminderState
}
type AutomationRegexConditionInput {
	features: [Unknown]
	value: String
	isCaseSensitive: Present
}
type AmaSettingsInput {
	postPermissions: SubredditPostPermissions
}
type UpdateSubredditNotificationSettingsInput {
	subredditId: String
	isModeratedSrEngagementPnEnabled: Unknown
	isModeratedSrMilestonePnEnabled: Unknown
	isModeratedSrContentFoundationPnEnabled: Unknown
	isSubredditUpdatesInterestingPostEnabled: Unknown
	isUpdateFromSubredditEnabled: Unknown
}
type UpdateSubredditCommunityStatusInput {
	subredditId: String
	emojiId: Unknown
	description: Unknown
	expiresAt: Unknown
}
type CreateModmailConversationV2Input {
	authorId: String
	firstMessage: ModmailMessageInput
	participantId: Unknown
	subject: String
	subredditId: String
	type: ModmailConversationTypeV2
}
type SetModmailConversationsArchiveStatusInput {
	conversationIds: [Unknown]
	archive: Boolean
}
type DeleteInboxNotificationsInput {
	notificationIds: Present
}
type CreateMultiredditInput {
	displayName: String
	descriptionMd: Unknown
	visibility: Unknown
	subredditIds: Unknown
}
type ModRemoveInput {
	id: String
	isSpam: Boolean
}
type AdContextInput {
	distance: Unknown
	layout: AdLayout
	recentSubreddits: Unknown
	isAdPersonalizationAllowed: Unknown
	isThirdPartyAdPersonalizationAllowed: Unknown
	isThirdPartySiteAdPersonalizationAllowed: Unknown
	reddaid: Unknown
	deviceAdId: Unknown
	displaySource: Unknown
	sourcePostId: Unknown
	clientSignalSessionData: Unknown
	feedSlotIndexData: Unknown
	forceAds: Unknown
	appTrackingTransparencyStatus: Unknown
}
type ImageSizeInput {
	height: Present
}
type RequestToJoinCommunityInput {
	subredditId: String
	reason: String
}
type SubredditTagInput {
	toApply: Unknown
	toCreateAndApply: Unknown
	toApplyPrimary: Unknown
}
type AddSubredditsToMultiredditInput {
	multiLabel: String
	subredditIds: [Unknown]
}
type ClientContextInput {
	pageType: Unknown
	subredditId: Unknown
	subredditName: Unknown
	postId: Unknown
	channelId: Unknown
	profileName: Unknown
	translationLanguageCode: Unknown
	cookieConsent: Unknown
}
type DeclineSubscriberInviteInput {
	subredditId: String
}
type UpdatePostSendRepliesStateInput {
	postId: String
	sendRepliesState: SendRepliesState
}
type UpdatePostEventInput {
	startsAt: Unknown
	endsAt: Unknown
	addedCollaboratorUserIds: Unknown
	removedCollaboratorUserIds: Unknown
}
type CheckoutInput {
	reference: String
	cart: [Unknown]
	provider: PaymentProvider
	checkoutMode: CheckoutMode
	environment: Present
	captcha: Unknown
}
type DeleteChannelInput {
	channelId: String
}
type ContentRatingSurveyAnswerInput {
	questionId: String
	answerIds: [Unknown]
}
type UpdateRemovalReasonInput {
	subredditId: String
	removalReasonId: String
	title: Present
	message: Present
}
type DeleteModUserNoteInput {
	subredditId: String
	userId: String
	noteId: String
	noteType: ModNoteType
}
type MarkPrivateMessageAsReadInput {
	messageId: Unknown
}
type BanChatChannelUserInput {
	targetUserId: String
	channelId: String
	duration: Unknown
	removeMessages: Unknown
}
type UpdateRecommendationPreferencesInput {
	dislikedSubredditPreference: Unknown
	dislikedSimilarSubredditSeedPreference: Unknown
	dislikedInterestTopicPreference: Unknown
}
type UpdateProfilePrivacyPreferencesInput {
	hiddenSubredditIds: [Unknown]
	isHideAllContribution: Boolean
	isHideProfileNsfw: Boolean
	isShowTopSubreddits: Boolean
	isShowFollowersCountEnabled: Unknown
}
type CreatePostSetInput {
	postIds: [Unknown]
}
type DeleteSubredditFlairTemplateInput {
	flairTemplateId: String
	subredditId: String
}
type CaptchaInput {
	token: String
}
type ApproveOrDisapproveRedditorInput {
	subredditId: Unknown
	subredditName: Unknown
	userId: Unknown
	userName: Unknown
}
type UpdateMultiredditInput {
	label: String
	descriptionMd: Unknown
	displayName: Unknown
	visibility: Unknown
}
type CAPTCHAInfo {
	recaptchaToken: Unknown
	isCheckboxMode: Unknown
}
type CreateAutomationInput {
	name: String
	trigger: AutomationTrigger
	condition: AutomationConditionInput
	actions: [Unknown]
	subredditId: String
}
type AdEligibilityInput {
	postAdEligibility: Present
	userAdEligibility: Present
	expiresAt: Unknown
}
type ReadNotificationLoggedOutInput {
	notificationId: String
	deviceId: String
}
type SendAndroidTestPushNotificationStateInput {
	accountId: String
	deviceToken: String
}
type PostPermissionInput {
	reactAllowed: Unknown
}
type CreateModUserNoteInput {
	subredditId: String
	userId: String
	redditId: Unknown
	label: Unknown
	note: String
}
type CreateScheduledPostInput {
	content: Unknown
	isPostAsMetaMod: Unknown
	isContestMode: Unknown
	isSpoiler: Unknown
	isNsfw: Unknown
	isOriginalContent: Unknown
	isModDistinguished: Unknown
	flair: Unknown
	link: Unknown
	scheduling: PostSchedulingInput
	sticky: Unknown
	isSendReplies: Unknown
	subredditId: String
	title: String
	assetIds: Unknown
	collectionId: Unknown
	discussionType: Unknown
	suggestedCommentSort: Unknown
	poll: Unknown
	creationToken: String
}
type UxTargetingAdvancedConfigurationInput {
	eligibleExperienceOverrides: Unknown
	propertyProviderOverrides: Unknown
}
type CreatePostInput {
	title: String
	isSpoiler: Unknown
	isNsfw: Unknown
	isSendReplies: Unknown
	isResubmit: Unknown
	isCommercialCommunication: Unknown
	isClubContent: Unknown
	location: Unknown
	flair: Unknown
	content: Unknown
	video: Unknown
	videoGif: Unknown
	image: Unknown
	link: Unknown
	crosspost: Unknown
	discussionType: Unknown
	RPAN: Unknown
	gallery: Unknown
	poll: Unknown
	videoReact: Unknown
	permissions: Unknown
	postSet: Unknown
	draftId: Unknown
	recaptchaToken: Unknown
	postEvent: Unknown
	targetLanguage: Unknown
	correlationId: Unknown
}
type DeleteAutomationInput {
	subredditId: Present
	automationId: String
}
type RegisterVaultAddressInput {
	provider: Unknown
	address: String
	signature: String
	referralSurface: Unknown
}
type UpdateMultiredditSubscriptionStateInput {
	label: String
	subscribeState: SubscriptionState
}
type GoogleBillingEventInput {
	transactionId: String
	productId: String
	packageName: String
	purchaseToken: String
}
type UpdatePostFlairInput {
	postId: String
	text: String
	flairTemplateId: Unknown
}
type AutomationNotConditionInput {
	regexCondition: Present
	stringCondition: Present
}
type SubredditWelcomePageWebResourcesSectionInput {
	isEnabled: Boolean
	resources: Unknown
}
type PropertyProviderValue {
	asString: Unknown
	asInt: Unknown
	asDouble: Unknown
	asBool: Unknown
}
type UpdateScheduledPostInput {
	content: Unknown
	isPostAsMetaMod: Unknown
	isContestMode: Unknown
	isSpoiler: Unknown
	isNsfw: Unknown
	isOriginalContent: Unknown
	isModDistinguished: Unknown
	flair: Unknown
	link: Unknown
	scheduling: Unknown
	sticky: Unknown
	isSendReplies: Unknown
	subredditId: Unknown
	title: Unknown
	assetIds: Unknown
	collectionId: Unknown
	discussionType: Unknown
	suggestedCommentSort: Unknown
	poll: Unknown
	id: String
}
type UpdateInboxActivitySeenStateInput {
	lastSentAt: Unknown
}
type UpdateSubredditWelcomePageContentInput {
	subredditId: String
	version: String
	header: SubredditWelcomePageHeaderInput
	userFlair: SubredditWelcomePageUserFlairSelectInput
	resources: SubredditWelcomePageWebResourcesSectionInput
	curatedPosts: SubredditWelcomePageCuratedPostsInput
}
type ReportPrivateMessageInput {
	siteRule: Unknown
	freeText: Unknown
	fromHelpDesk: Unknown
	hostAppName: Unknown
	messageId: String
	additionalOptions: Unknown
}
type DeleteScheduledPostInput {
	id: String
}
type UpdateChannelModerationSettingsInput {
	id: String
	chatPermissionRank: Unknown
	contentControlSettings: Unknown
}
type EvaluateCommentAutomationsInput {
	commentBody: String
	onOrAfterSubmit: Boolean
}
type BanEvasionFilterSettingsInput {
	isEnabled: Unknown
	recency: Unknown
	postLevel: Unknown
	commentLevel: Unknown
	modmail: Unknown
}
type TemporaryEventBanEvasionFilterSettingsInput {
	isEnabled: Unknown
	recency: Unknown
	postLevel: Unknown
	commentLevel: Unknown
}
type RequestAppealInput {
	message: String
	id: String
}
type UpdateCommentVoteStateInput {
	commentId: String
	voteState: VoteState
}
type UpdateSubredditCountrySiteSettingsInput {
	subredditId: String
	countryCode: String
	languageCode: String
}
type ModeratorEvaluatePostAutomationsInput {
	postTitle: String
	postBody: Unknown
	onOrAfterSubmit: Boolean
}
type ModSavedResponseRemovalTemplateVariables {
	contentId: Present
}
type CartItemInput {
	basePrice: ProductPriceInput
	checkoutPrice: Unknown
	productId: String
	sellerId: Unknown
	externalProductId: Unknown
}
type UpdatePostSpoilerStateInput {
	postId: String
	spoilerState: SpoilerState
}
type UnbanSubredditUserInput {
	subredditId: String
	userId: String
}
type UpdateSubredditMuteSettingsInput {
	subredditId: String
}
type ClearUserFlairInput {
	subredditId: String
	userId: Unknown
}
type ReorderHighlightedPostsInput {
	subredditId: String
	highlightOrder: [Unknown]
}
type CreateRemovalReasonInput {
	subredditId: String
	title: String
	message: String
}
type RetractChatChannelUserRoleInput {
	roomId: String
	inviteEventId: String
}
type RecommendedMediaFeedContextInput {
	seedSubredditIds: Unknown
	feedEndpoint: Unknown
	postId: Unknown
	postType: Unknown
	navigationSessionId: Unknown
	onboardingCategories: Unknown
}
type UxTargetingExperienceVariantInput {
	variantId: Unknown
	xpromoVariant: Unknown
}
type UpdateSubredditQuarantineOptInStateInput {
	subredditId: String
	optInState: OptInState
}
type UpdateAccountPreferencesInput {
	isCommunityStylingEnabled: Unknown
	isNewTabOpenedForPostView: Unknown
	postFeedLayout: Unknown
	isCommunityLayoutPreserved: Unknown
	isMarkdownDefaultEditorMode: Unknown
	acceptPrivateMessagesFrom: Unknown
	isNsfwEnabled: Unknown
	isAdPersonalizationAllowed: Unknown
	isClickTrackingEnabled: Unknown
	isBetaEnabled: Unknown
	isNsfwMediaBlocked: Unknown
	isLeftBarCollapseEnabled: Unknown
	isMessageAutoCollapseEnabled: Unknown
	isCompressedLinkDisplayEnabled: Unknown
	defaultCommentSort: Unknown
	defaultThemeSubredditId: Unknown
	isEmailDigestEnabled: Unknown
	isEmailMessagesEnabled: Unknown
	isEmailOptedOut: Unknown
	isDefaultThemesEnabled: Unknown
	geopopular: Unknown
	isAdFree: Unknown
	isDownvotedPostHidden: Unknown
	isProfileHiddenFromRobots: Unknown
	isUpvotedPostHidden: Unknown
	isControversialHighlightingEnabled: Unknown
	isNewHighlightEnabled: Unknown
	isSuggestedSortIgnored: Unknown
	isInRedesignBeta: Unknown
	isNsfwLabelShown: Unknown
	language: Unknown
	isLegacySearchPageShown: Unknown
	isDesktopNotificationsShown: Unknown
	isMessageAutoReadEnabled: Unknown
	mediaPreviewVisibility: Unknown
	minCommentScore: Unknown
	isMinCommentScoreEnabled: Unknown
	minPostScore: Unknown
	isMinPostScoreEnabled: Unknown
	isNotifiedWhenMentioned: Unknown
	isExternalLinkOpenedInNewwindow: Unknown
	isNightModeEnabled: Unknown
	defaultCommentCount: Unknown
	defaultPostCount: Unknown
	isPrivateRssEnabled: Unknown
	isVotingHistoryPublic: Unknown
	isResearchAllowed: Unknown
	isNsfwSearchEnabled: Unknown
	isAuthorFlairShown: Unknown
	isDomainDetailsEnabled: Unknown
	isGoldExpirationShown: Unknown
	isPostFlairShown: Unknown
	mediaThumbnailVisibility: Unknown
	isPublicServerSecondsShown: Unknown
	isRecentPostsShown: Unknown
	isSnoovatarShown: Unknown
	isHomefeedSpotlightBoxShown: Unknown
	isStylesheetsShown: Unknown
	isTrendingSubredditsShown: Unknown
	isTwitterLinkShownInProfile: Unknown
	isThirdPartyAdPersonalizationAllowed: Unknown
	isThirdPartySiteAdPersonalizationAllowed: Unknown
	isThirdPartySiteDataPersonalizedContentAllowed: Unknown
	isMessageThreadingEnabled: Unknown
	isModmailThreadingEnabled: Unknown
	showTopSubreddits: Unknown
	isTrackingPostVisits: Unknown
	isGlobalDefaultsUsed: Unknown
	isVideoAutoplayEnabled: Unknown
	isLegacyProfilesEnabled: Unknown
	globalCommunityPostFeedSort: Unknown
	isCommunityPostFeedSortingPreserved: Unknown
	isCustomizeFlyoutViewed: Unknown
	topContentDismissalAt: Unknown
	topContentTimesDismissed: Unknown
	isRpanDuShown: Unknown
	rpanDuDismissedAt: Unknown
	isGildRevealsUsername: Unknown
	isMessageSendWelcomeEnabled: Unknown
	isMessageSendCrosspostEnabled: Unknown
	surveyLastSeenAt: Unknown
	isLocationBasedRecommendationEnabled: Unknown
	isReduceAnimationsFromAwardsEnabled: Unknown
	isUpvotePostEmailNotificationEnabled: Unknown
	isUpvoteCommentEmailNotificationEnabled: Unknown
	isNewFollowerEmailNotificationEnabled: Unknown
	isChatRequestEmailNotificationEnabled: Unknown
	isPostReplyEmailNotificationEnabled: Unknown
	isCommentReplyEmailNotificationEnabled: Unknown
	isUsernameMentionEmailNotificationEnabled: Unknown
	isPrivateMessageEmailNotificationEnabled: Unknown
	isFeedRecommendationsEnabled: Unknown
	isThirdPartyInfoAdPersonalizationAllowed: Unknown
	isOnlinePresenceShown: Unknown
	isInferredIdRecommendationsEnabled: Unknown
	countryCode: Unknown
	enableFollowers: Unknown
	badCommentAutocollapse: Unknown
	isCommunityDiscoveryEmailNotificationEnabled: Unknown
	isNewUserWelcomeEmailNotificationEnabled: Unknown
	isWeeklyRecapEmailNotificationEnabled: Unknown
	isLiveBarRecommendationsShown: Unknown
	spokenLanguages: Unknown
	isWhatsAppNotificationsEnabled: Unknown
	displayedCollectiblesMode: Unknown
	isSmsNotificationsEnabled: Unknown
	acceptChatRequestsFrom: Unknown
	showFollowersCount: Unknown
	isMachineTranslationImmersive: Unknown
	isEnableRedditProAnalyticsEmails: Unknown
}
type ReportAwardInput {
	siteRule: Unknown
	freeText: Unknown
	fromHelpDesk: Unknown
	hostAppName: Unknown
	awardId: String
}
type UpdateSubredditSubscriptionsInput {
	inputs: [Unknown]
}
type UnbanChatChannelUserInput {
	targetUserId: String
	channelId: String
}
type FeedFiltersInput {
	flairAllowList: Unknown
}
type ReportedItem {
	itemId: String
}
type SetSocialLinkInput {
	type: SocialLinkType
	title: Unknown
	handle: Unknown
	outboundUrl: Unknown
}
type CrosspostInput {
	sourceId: String
}
type TemporaryEventMatureContentFilterSettingsInput {
	isEnabled: Unknown
	sexualCommentContentType: Unknown
	sexualPostContentType: Unknown
	violentCommentContentType: Unknown
	violentPostContentType: Unknown
}
type ClaimFreeNftInput {
	claimId: String
	distributionCampaignChoiceId: Unknown
	ikey: Unknown
}
type UpdateProfileStylesInput {
	icon: Present
	profileBanner: Present
}
type UpdatePostNSFWStateInput {
	postId: String
	nsfwState: NSFWState
}
type UpdateSubredditIconInput {
	subredditId: String
	communityIconBannerVisibility: Unknown
	communityIcon: Unknown
}
type CreateCommentInput {
	postId: Unknown
	parentId: Unknown
	content: ContentInput
	recaptchaToken: Unknown
	targetLanguage: Unknown
	video: Unknown
}
type AddVaultMetadataEventInput {
	uuid: String
	provider: Unknown
	address: String
	key: Unknown
	status: String
	createdAt: Unknown
	correlationId: Unknown
	extra: Unknown
}
type StorefrontListingsFilter {
	ids: Unknown
	theme: Unknown
	status: Unknown
	priceLowerBound: Unknown
	priceUpperBound: Unknown
	artistIds: Unknown
	totalInventoryLowerBound: Unknown
	totalInventoryUpperBound: Unknown
	percentInventoryRemainingLowerBound: Unknown
	percentInventoryRemainingUpperBound: Unknown
	tags: Unknown
	textMatch: Unknown
	utilityType: Unknown
	releasedWithinDays: Unknown
}
type PreviewCommentAutomationInput {
	commentBody: String
	previewAutomation: PreviewAutomationInput
}
type ScheduleTemporaryEventRunInput {
	configId: String
	startAt: Unknown
	endAt: Unknown
}
type UpdateModPnSettingThresholdInput {
	subredditId: String
	name: Unknown
}
type ForbiddenContentTypes {
	image: Unknown
	gif: Unknown
	sticker: Unknown
}
type HarassmentFilterSettingsInput {
	comments: Unknown
	modmail: Unknown
}
type MatureContentFilterSettingsInput {
	isEnabled: Boolean
	sexualCommentContentType: Unknown
	sexualPostContentType: Unknown
	violentCommentContentType: Unknown
	violentPostContentType: Unknown
}
type UpdatePostFollowStateInput {
	postId: String
	followState: PostFollowState
}
type UpdateUserSubredditFlairEnabledStatusInput {
	subredditId: String
	isEnabled: Boolean
}
type RecommendedPostSimilarityFeedContextInput {
	seedSubredditIds: Unknown
	postIds: Unknown
	feedEntryPoint: Unknown
	postType: Unknown
	navigationSessionId: Unknown
}
type UpdateSubredditChannelInput {
	channelId: String
	name: Unknown
	description: Unknown
	icon: Unknown
	isRestricted: Unknown
}
type CreateSubredditStructuredStylesUploadLeaseInput {
	subredditId: Present
	filepath: String
	mimetype: MimeType
	imagetype: SubredditStructuredStylesUploadType
}
type ClientSignalSessionDataInput {
	adsSeenCount: Unknown
	totalPostsSeenCount: Unknown
	sessionStartTime: Unknown
}
type TopicPreferencesInput {
	selectedOnboardingTopicIds: Unknown
	autosubscribe: Unknown
	onboardingContext: Unknown
	action: Unknown
}
type TemporaryEventFieldsInput {
	communitySettings: Present
	matureContentFilterSettings: Present
	banEvasionFilterSettings: Present
}
type ChatContentControlTextFilterInput {
	filterType: String
	isEnabled: Boolean
}
type ImageInput {
}
type ModSavedResponseModmailTemplateVariables {
	recipientUsernameOverride: Present
	modmailConversationId: Present
}
type UpdatePostStickyStateInput {
	postId: String
	sticky: Boolean
	position: Unknown
}
type ReportedEntity {
	commentId: Unknown
	accountId: Unknown
	postId: Unknown
	messageId: Unknown
	subredditId: Unknown
	modmailMessageId: Unknown
	matrixChatMessageId: Unknown
}
type RemoveHighlightedPostsInput {
	postId: String
}
type UpdateSubredditBannerStylesInput {
	subredditId: String
	bannerHeight: Unknown
	bannerPositionedImage: Unknown
	secondaryBannerPositionedImage: Unknown
	bannerPositionedImagePosition: Unknown
	bannerBackgroundColor: Unknown
	bannerBackgroundImage: Unknown
	bannerBackgroundImagePosition: Unknown
	mobileBannerImage: Unknown
}
type FlairInput {
	text: Unknown
	id: Unknown
	postId: Unknown
}
type HideInboxAnnouncementsInput {
	ids: [Unknown]
}
type StorefrontArtistsFilter {
	ids: Unknown
	withAvailableListingsOnly: Unknown
	listingPurpose: Unknown
}
type RequestCommunitySettingsInput {
	isNsfw: Unknown
	type: Unknown
}
type UpdateCommercialCommunicationStateInput {
	thingId: String
	commercialCommunicationState: Boolean
}
type ClearPostFlairInput {
	postId: String
}
type DeleteSavedResponseInput {
	subredditId: String
	savedResponseId: String
}
type ProcessNftTransferInput {
	transferId: String
	signature: String
}
type ModSavedResponseTemplateVariables {
	modmailVariables: Unknown
	removalVariables: Unknown
}
type StorageInteractionInput {
	action: ActionFormat
	source: Unknown
	eligibleExperience: Unknown
	clientContextInput: Unknown
}
type ReportCommentInput {
	siteRule: Unknown
	freeText: Unknown
	fromHelpDesk: Unknown
	hostAppName: Unknown
	commentId: String
	subredditRule: Unknown
	customRule: Unknown
	additionalOptions: Unknown
	reportedItems: Unknown
}
type UpdateCommentStickyStateInput {
	commentId: String
	sticky: Boolean
}
type AvatarRandomGenerationInput {
	skipRender: Unknown
}
type ReportUserDetailsInput {
	siteRule: Unknown
	freeText: Unknown
	fromHelpDesk: Unknown
	hostAppName: Unknown
	redditorId: String
	userDetailType: UserDetailType
}
type UpdateProfileFollowStateInput {
	state: FollowState
	accountId: String
}
type UpdateSubredditSubscriptionInput {
	subredditId: String
	subscribeState: SubscriptionState
	subscribeSource: Unknown
}
type UpdatePostCrowdControlLevelInput {
	postId: String
	level: CrowdControlLevel
}
type CommentContributionSettingsInput {
	allowedMediaTypes: Unknown
}
type UpdatePostPollVoteStateInput {
	postId: String
	optionId: String
}
type DeleteSubredditBannerInput {
	subredditId: String
}
type UpdateShowCommentRemovalReasonPromptSettingInput {
	subredditId: String
	isShowPrompt: Boolean
}
type UpdateCommentSaveStateInput {
	commentId: String
	saveState: CommentSaveState
}
type ReputationFilterCommentSettingsInput {
	isEnabled: Unknown
	confidence: Unknown
}
type ExperimentTargetingInput {
	field: String
	value: String
}
type DeclineModeratorInviteInput {
	subredditId: Unknown
	subredditName: Unknown
}
type UpdateChatChannelUserRolePromotionInput {
	roomId: String
	inviteEventId: String
	consent: ChatUserRoleConsent
}
type EnrollInGamificationInput {
	timezone: String
	gameId: Present
}
type UpdateSubredditFlairTemplateInput {
	subredditId: String
	flairTemplateId: String
	text: Unknown
	isEditable: Boolean
	flairType: FlairType
	textColor: Unknown
	backgroundColor: Unknown
	isModOnly: Boolean
	cssClass: Unknown
	maxEmojis: Unknown
	allowableContent: Unknown
}
type UpdateSocialLinkInput {
	type: SocialLinkType
	title: Unknown
	handle: Unknown
	outboundUrl: Unknown
	id: String
}
type PaymentMetadataPairInput {
	key: String
	value: String
}
type InitiateNftTransferInput {
	itemId: String
	recipientAddress: String
	iKey: Present
}
type UpdateSubredditPostFlairSettingsInput {
	subredditId: String
	isEnabled: Present
	isSelfAssignable: Unknown
}
type UpdateUserFlairInput {
	subredditId: String
	text: Unknown
	cssClass: Unknown
	flairTemplateId: Unknown
	name: Unknown
}
type PostSetInput {
	id: Unknown
	defaultPostId: Unknown
}
type ReorderSocialLinksInput {
	socialLinkIds: [Unknown]
}
type ExposeVariantInput {
	experimentName: String
	experimentVersion: Present
	targetingInputs: Present
	variant: String
}
type AcceptModeratorInviteInput {
	subredditId: Unknown
	subredditName: Unknown
}
type CreateTemporaryEventConfigInput {
	name: String
	contributionMessage: Unknown
	labels: [Unknown]
	subredditId: String
	fields: TemporaryEventFieldsInput
}
type BanEvasionFilterModmailSettingsInput {
	isEnabled: Present
}
type UpdateCommentFollowStateInput {
	commentId: String
	followState: CommentFollowState
}
type ReportFormDataInput {
	entryPoint: Unknown
	reportedEntity: ReportedEntity
}
type CreateSavedResponseInput {
	subredditId: String
	title: String
	message: String
	context: SavedResponseContext
	subredditRuleId: Unknown
}
type ProductPriceInput {
	amount: Currency
}
type ContentInput {
	markdown: Unknown
	richText: Unknown
}
type UpdatePostHideStateInput {
	postId: String
	hideState: HideState
}
type AddModmailMessageInput {
	conversationId: String
	authorId: String
	message: ModmailMessageInput
}
type UpdateSubredditWelcomePageStateInput {
	subredditId: String
	isEnabled: Boolean
	isEnabledOnJoin: Boolean
}
type CreateStorefrontOrderInput {
	listingId: String
	pricePackageId: String
	nonce: String
	paymentProvider: Unknown
	captchaInfo: Unknown
	mintToAddress: Unknown
}
type AutomationStringConditionInput {
	features: [Unknown]
	values: [Unknown]
}
type CreateSubredditValidationInput {
	name: Unknown
	isNsfw: Unknown
	publicDescription: Unknown
	type: Unknown
}
type ApplyRemovalReasonInput {
	itemId: String
	modNote: Present
	removalReason: Present
}
type AIModPredictionsForPostInput {
	title: Present
	content: Unknown
	flairText: Unknown
	url: Unknown
	predictionTypes: Present
	correlationId: Present
}
type HarassmentFilterCommentSettingsInput {
	isEnabled: Unknown
	confidence: Unknown
	permittedTerms: Unknown
	action: Unknown
}
type ActiveSubredditsInputContext {
	entryPoint: ActiveSubredditsEntryType
}
type ComposeMessageInput {
	fromSubreddit: Unknown
	recipient: String
	subject: String
	body: String
}
type UpdatePostDistinguishStateInput {
	postId: String
	distinguishState: PostDistinguishState
	distinguishType: DistinguishType
}
type ModmailMessageInput {
	content: ContentInput
	isAuthorHidden: Boolean
	isInternal: Boolean
	participatingAs: ModmailMessageParticipatingAsV2
}
type CancelTemporaryEventRunInput {
	runId: String
}
type ContentControlSettingsInput {
	blockedContent: Unknown
	blockedContentRegex: Unknown
	domainFilterType: Unknown
	allowedDomains: Unknown
	blockedDomains: Unknown
	forbiddenContentTypes: Unknown
	textFilters: Unknown
	textFiltersAllowList: Unknown
}
type ReputationFilterPostSettingsInput {
	isEnabled: Unknown
	confidence: Unknown
}
type SearchQueryModifierInput {
	includeSpellcheck: Unknown
	includeSnippet: Unknown
}
type FeedContextInput {
	enabledFeatures: Unknown
	isFullBleed: Unknown
	themeMode: Unknown
	layout: Unknown
	contentType: Unknown
	feedTopics: Unknown
	experimentOverrides: Unknown
	filterPosts: Unknown
	navigationSessionId: Unknown
	translationContext: Unknown
	isNsfwAllowed: Unknown
	feedFilters: Unknown
	recentlyCreatedPost: Unknown
}
type CreateUserChatChannelInput {
	name: String
	description: Unknown
	icon: Unknown
	isRestricted: Boolean
	discoveryPhrase: String
}
type AutomationConditionInput {
	notCondition: Unknown
	regexCondition: Unknown
	stringCondition: Unknown
}
type ForceAdsInput {
	ad: Unknown
	linkIds: Unknown
	adHash: Unknown
	clickUrl: Unknown
}
type UpdateSavedResponseInput {
	subredditId: String
	savedResponseId: String
	title: Unknown
	message: Unknown
	subredditRuleId: Unknown
}
type DeleteChatChannelInput {
	channelId: String
}
type CreateAwardOrderInput {
	nonce: Present
	awardId: String
	thingId: String
	isAnonymous: Boolean
	customMessage: Unknown
}
type UserContactForAd {
	adId: Unknown
	formId: Unknown
	campaignId: String
	postId: String
	userInformation: Unknown
	impressionId: Unknown
	encryptedUserInformation: Unknown
}
type SubmitScheduledPostInput {
	id: String
}
type EndPostEventInput {
	postId: String
	endNote: Unknown
}
type SubmitGooglePaymentReceiptInput {
	transactionId: String
	productId: String
	packageName: String
	purchaseToken: String
	orderId: String
}
type UpdatePostSaveStateInput {
	postId: String
	saveState: PostSaveState
}
type PropertyProviderValueInput {
	name: Present
	value: Present
}
type BanSubredditUserInput {
	subredditId: String
	userId: Unknown
	userName: Unknown
	message: Unknown
	contextId: Unknown
	duration: Unknown
	modNote: Unknown
	reason: Unknown
}
type SubredditWelcomePageCuratedPostsInput {
	isEnabled: Boolean
	postIds: [Unknown]
}
type EligibleExperienceInput {
	experience: UxTargetingExperience
	uxVariant: Unknown
}
type DeleteSocialLinksInput {
	socialLinkIds: [Unknown]
}
type UpdateAutomationInput {
	subredditId: Unknown
	name: Unknown
	trigger: Present
	condition: Present
	actions: Present
	automationId: String
	status: Unknown
}
type DeleteRemovalReasonInput {
	subredditId: String
	removalReasonId: String
}
type ExperimentOverrideKeyValuePair {
	experimentName: String
	experimentVariant: String
}
type MarkInboxAnnouncementsReadInput {
	ids: [Unknown]
}
type SubredditWelcomePageUserFlairSelectInput {
	isEnabled: Boolean
	title: String
	description: String
}
type UpdateChannelInput {
	channelId: String
	name: Unknown
	description: Unknown
	discoveryPhrase: Unknown
	icon: Unknown
	taggedSubredditIds: Unknown
	isRestricted: Unknown
	moderationStatus: Unknown
}
type LinkInput {
}
type AutomationReportActionInput {
	message: String
}
type CreateMediaUploadLeaseInput {
	mimetype: MimeType
}
type CreateShareUrlInput {
}
type GalleryInput {
	items: [Unknown]
}
type SendMessageToSubredditInput {
	subject: String
	body: String
	subredditId: String
}
type UpdateCommentSendRepliesStateInput {
	commentId: String
	sendRepliesState: CommentsSendRepliesState
}
type UpdateSubredditFavoriteStateInput {
	subredditId: String
	favoriteState: FavoriteState
}
type UpdateActiveUserMuteInput {
	userId: String
	subredditId: String
	reason: Present
}
type DeleteMultiredditInput {
	label: String
}
type GalleryItemInput {
	mediaId: String
	caption: Unknown
	outboundUrl: Unknown
}
type SetModmailConversationsReadStatusInput {
	conversationIds: [Unknown]
	markRead: Boolean
}
type UpdateModPnSettingStatusInput {
	subredditId: String
	name: Unknown
	status: ModPnStatus
}
type PreviewAutomationInput {
	trigger: AutomationTrigger
	condition: AutomationConditionInput
	actions: [Unknown]
}
type SetModmailConversationsHighlightStatusInput {
	conversationIds: [Unknown]
	highlight: Boolean
}
type AutomationBlockActionInput {
	message: String
}
type UnignoreReportsInput {
	id: String
}
type ExperienceOverrideInput {
	uxTargetingExperience: Unknown
	overrideEligibility: Unknown
	uxVariant: Unknown
}
type ReportPostInput {
	siteRule: Unknown
	freeText: Unknown
	fromHelpDesk: Unknown
	hostAppName: Unknown
	postId: String
	subredditRule: Unknown
	customRule: Unknown
	additionalOptions: Unknown
	reportedItems: Unknown
}
type ReputationFilterSettingsInput {
	posts: Unknown
	comments: Unknown
}
type AutomationActionInput {
	informAction: Unknown
	blockAction: Unknown
	reportAction: Unknown
}
type SubredditWelcomePageHeaderInput {
	mediaId: Unknown
	isIconEnabled: Boolean
	isSubredditNameEnabled: Boolean
	message: String
	mediaSelection: Unknown
}
type CrossPlatformContextInput {
	mwebSubredditIds: Unknown
	mwebLoid: Unknown
	ampId: Unknown
}
type UpdateAccountGender {
	genderEnum: Unknown
	customGender: Unknown
}
type UpdateSensitiveAdsPreferencesInput {
	isAlcoholAllowed: Present
	isDatingAllowed: Present
	isGamblingAllowed: Present
	isPregnancyAndParentingAllowed: Present
	isWeightLossAllowed: Present
	isPoliticsAllowed: Present
	isReligionAllowed: Present
}
type RemovalReasonInput {
	reasonId: String
	type: Unknown
	message: Unknown
	isLockComment: Boolean
}
type SubredditAchievementSettingInput {
	achievementId: String
	isEnabled: Boolean
}
type CheckoutDevvitProductsInput {
	reference: String
	cartItems: [Unknown]
	provider: PaymentProvider
	checkoutMode: CheckoutMode
	environment: Environment
	sandboxOutcome: Unknown
	metadata: Unknown
}
type UpdatePaidSubscriberStatusVisibilityInput {
	subredditId: String
	visibility: Unknown
}
type MuteMemberInput {
	userId: Unknown
	userName: Unknown
	subredditId: String
	numHours: Unknown
	reason: Unknown
	modmailConversationId: Unknown
}
type UpdateChatUserSettingsInput {
	invitePolicy: InvitePolicy
}
type UpdateAutomationRankInput {
	subredditId: String
	automationId: String
	previousAutomationId: String
}
type CreateSubredditChannelInput {
	name: String
	subredditId: String
	description: Unknown
	icon: Unknown
	type: SubredditChannelTypeEnum
	isRestricted: Boolean
}
type CreateCustomPostSnapshotInput {
	postId: String
	encodedData: String
}
type ReportModmailMessageInput {
	siteRule: RuleID
	freeText: Unknown
	fromHelpDesk: Unknown
	hostAppName: Unknown
	conversationId: Unknown
	messageId: Unknown
	subredditName: Unknown
	additionalUserNames: Unknown
	additionalOptions: Unknown
}
type UpdateDisplayedCollectibleItemsInput {
	displayedCollectibleItemsState: Present
	items: Present
}
type ModSafetySettingsInput {
	demo: Unknown
	matureContent: Unknown
	modmail: Unknown
	reputation: Unknown
	harassment: Unknown
	banEvasion: Unknown
}
type TemporaryEventCommunitySettingsInput {
	isDiscoveryAllowed: Unknown
	disabledDiscoveryTypes: Present
	isTopListingAllowed: Unknown
	crowdControlFilter: Unknown
	crowdControlLevel: Unknown
	crowdControlPostLevel: Unknown
	publicDescription: Unknown
	hatefulContentThresholdAbuse: Unknown
	hatefulContentThresholdIdentity: Unknown
	isModmailHarassmentFilterEnabled: Unknown
	isRestrictCommentingEnabled: Unknown
	isRestrictPostingEnabled: Unknown
}
type EnableChannelsInSubredditInput {
	subredditId: String
	type: Present
}
type RecommendedSubredditPreference {
	subredditId: String
	action: UpdateRecommendationPreferenceAction
}
type UpdateUserChatChannelInput {
	channelId: String
	name: Unknown
	description: Unknown
	discoveryPhrase: Unknown
	icon: Unknown
	taggedSubredditsIds: Unknown
	isRestricted: Unknown
}
type ReorderSavedResponsesInput {
	subredditId: String
	newOrderByIds: [Unknown]
	context: SavedResponseContext
}
type UnmuteMemberInput {
	userId: String
	subredditId: String
}
type AutomationInformActionInput {
	message: String
}
type PostEventInput {
	start: Unknown
	end: Unknown
	eventType: PostEventType
}
type RecommendedVideoFeedContextInput {
	seedSubredditIds: Unknown
	feedEndpoint: Unknown
	postId: Unknown
	navigationSessionId: Unknown
	onboardingCategories: Unknown
}
type DisplayedCollectibleItemInput {
	itemId: String
	isVisible: Boolean
}
type PinMessagesToSubredditChannelInput {
	roomId: String
	messageIds: Present
}
type SearchContext {
	ad: Unknown
	queryId: Unknown
	correlationId: Unknown
	originPageType: Unknown
	structureType: Unknown
	pane: Unknown
	modifiersVersion: Unknown
	isClientPrefNsfw: Unknown
}
type OptInToGatedSubredditInput {
	subredditId: Unknown
	subredditName: Unknown
}
type ReorderRemovalReasonsInput {
	subredditId: String
	newOrderByIds: [Unknown]
}
type InviteSubscriberInput {
	subredditId: String
	userId: Unknown
	userName: Unknown
	addContributor: Boolean
	inviteType: Unknown
	message: Unknown
	permissions: Unknown
}
type DeleteCustomEmojiInput {
	id: String
}
type AvatarDownloadInput {
	avatar: AvatarDownloadAvatarInput
}
type SetNotificationsPushTokenActiveInput {
	token: String
}
type VideoReactInput {
	parentPostId: String
	reactType: ReactType
}
type DisableChannelInSubredditInput {
	subredditId: String
	type: SubredditChannelTypeEnum
}
type BackUpVaultInput {
	provider: Unknown
	address: String
	createdAt: Unknown
	wallet: String
	signature: String
}
type PostSchedulingInput {
	publishAt: Unknown
	clientTimezone: String
	frequency: Unknown
	interval: Unknown
	byMonthDays: Unknown
	byWeekDays: Unknown
}
type FeedSlotSignalInput {
	postsSeenCount: Unknown
	adsSeenCount: Unknown
	feedCorrelationId: Unknown
}
type UpdatePostVoteStateInput {
	postId: String
	voteState: VoteState
}
type GenerateCustomEmojiLeaseInput {
	subredditId: String
	mimeType: String
}
type UpdatePostSetInput {
	postsToRemove: Unknown
	postsToAdd: Unknown
	postSetId: String
}
type UpdateSubredditSettingsInput {
	subredditId: String
	isNsfw: Unknown
	publicDescription: Unknown
	type: Unknown
	allowedPostType: Unknown
	isImagesAllowed: Unknown
	isVideosAllowed: Unknown
	isCrosspostingAllowed: Unknown
	isPollsAllowed: Unknown
	isGalleriesAllowed: Unknown
	isChatPostAllowed: Unknown
	isTopListingAllowed: Unknown
	isDiscoveryAllowed: Unknown
	isArchivePostsEnabled: Unknown
	isPredictionContributorsAllowed: Unknown
	isPredictionsTournamentAllowed: Unknown
	language: Unknown
	automatedReportingLevelAbuse: Unknown
	automatedReportingLevelHate: Unknown
	hatefulContentThresholdIdentity: Unknown
	hatefulContentThresholdAbuse: Unknown
	hatefulContentPermittedTerms: Unknown
	isModmailHarassmentFilterEnabled: Unknown
	banEvasionThreshold: Unknown
	welcomeMessage: Unknown
	isWelcomeMessageEnabled: Unknown
	commentContributionSettings: Unknown
	crowdControlChatLevel: Unknown
	crowdControlLevel: Unknown
	crowdControlPostLevel: Unknown
	crowdControlFilter: Unknown
	allowPredictions: Unknown
	collapseDeletedComments: Unknown
	commentScoreHideMinutes: Unknown
	disableContributorRequests: Unknown
	spamLinks: Unknown
	spamSelfposts: Unknown
	spamComments: Unknown
	spoilersEnabled: Unknown
	suggestedCommentSort: Unknown
	title: Unknown
	toxicityThresholdChatLevel: Unknown
	wikiEditMinimumAge: Unknown
	wikiEditKarma: Unknown
	wikiEditMode: Unknown
	excludeBannedModqueue: Unknown
	restrictCommenting: Unknown
	restrictPosting: Unknown
	myRedditSettings: Unknown
	discoverySettings: Unknown
	amaSettings: Unknown
}
type ReadNotificationLoggedInInput {
	notificationId: String
}
type ContentRatingSurveyResponseInput {
	subredditId: String
	version: String
	answers: [Unknown]
}
type SetSubredditYearInReviewAvailabilityInput {
	subredditId: String
	isEnabled: Boolean
}
type SetModmailConversationsFilterStatusInput {
	conversationIds: [Unknown]
	filter: Boolean
}
type DeleteSubredditRuleInput {
	subredditId: String
	subredditRuleId: String
}
type UpdateCommentDistinguishStateInput {
	commentId: String
	distinguishState: CommentDistinguishState
	distinguishType: DistinguishType
}
type UpdateSpokenLanguagesPreferenceInput {
	spokenLanguages: [Unknown]
}
type UpdateCommentInput {
	commentId: String
	content: ContentInput
	targetLanguage: Unknown
	video: Unknown
}
type CreateOrderInput {
	nonce: Unknown
	productId: String
	productVersion: Unknown
	pricePackageId: String
	currency: Currency
	price: String
	productsCount: String
	powerUps: Unknown
	userCoinsInSubreddit: Unknown
	paymentProvider: Unknown
	tipping: Unknown
	localCurrency: Unknown
	localPrice: Unknown
	captchaInfo: Unknown
}
type UpdateSubredditRuleInput {
	subredditId: String
	subredditRuleId: String
	name: Unknown
	reason: Unknown
	description: Unknown
	supportedContentTypes: Unknown
}
type UpdateCommentLockedStateInput {
	commentId: String
	lockedState: LockedState
}
type CreateProfileStructuredStylesUploadLeaseInput {
	id: Unknown
	filepath: String
	mimetype: MimeType
	imagetype: ProfileStructuredStylesUploadType
}
type ModeratorEvaluateCommentAutomationsInput {
	commentBody: String
	onOrAfterSubmit: Boolean
}
type NotificationPreferenceInput {
	isEnabled: Boolean
	messageType: Unknown
}
type UpdateRedditorAllowlistStateInput {
	redditorId: String
	allowlistState: AllowlistState
}
type AvatarClassNameStylesInput {
	className: String
	fill: Unknown
}
type ChatUserWithRoleInput {
	role: ChatUserRole
	userId: String
}
type StorefrontBatchListingsQuery {
	sectionId: String
	filter: Unknown
	sort: Unknown
	before: Unknown
	after: Unknown
	first: Unknown
	last: Unknown
}
type RequestCommunitySettingsChangeInput {
	subredditId: String
	settings: RequestCommunitySettingsInput
	reason: String
	expiresAt: Unknown
}
type UpdateNotificationPreferencesInput {
	preferences: Present
}
type SetModSafetySettingsInput {
	subredditId: String
	filterSettings: Present
}
type Flair {
	text: String
	textColor: String
	backgroundColor: String
	templateId: String
	richTextObject: [Unknown]
}
type Author {
	id: String
	icon: String
	snoovatar: String
	username: String
	isDeleted: Boolean
	isUnavailable: Boolean
	flair: Flair
}
type SpotlightQueueItem {
	spotlightQueueItemData: SpotlightQueueItemData
	isMultiSelect: Boolean
	isRemoved: Boolean
}
type Award {
	id: String
	imageUrl: String
}
type Gif {
	previewUrl: String
}
type Post {
	contentKindWithId: String
	title: String
	postFlair: Flair
	status: Status
	content: Content
	markdown: String
	media: Unknown
}
type Comment {
	status: Status
	content: Unknown
	post: Post
	markdown: String
	bodyHtml: String
	richText: Unknown
	preview: String
	media: Unknown
}
type QueueAward {
	author: Author
	createdAt: Int
	subreddit: Subreddit
	modNoteLabel: Unknown
	verdict: Verdict
	removalReason: String
	modQueueReasons: [Unknown]
	userIsBanned: Boolean
	contentKindWithId: String
	content: Unknown
	award: Award
}
type Post {
	contentKindWithId: String
	title: String
}
type SpotlightQueueItemData {
	queuePost: QueuePost
	queueCommentParents: Unknown
	queueComment: QueueComment
	queueCommentChildren: Unknown
	incompleteCommentContext: Boolean
}
type Url {
	previewUrl: String
	url: String
}
type Status {
	isLocked: Boolean
	isNsfw: Boolean
	isSpoiler: Boolean
	isStickied: Boolean
	isHighlighted: Boolean
	distinguishedAs: Unknown
}
type Status {
	isLocked: Boolean
	isStickied: Boolean
	distinguishedAs: Unknown
}
type QueuePost {
	author: Author
	createdAt: Int
	subreddit: Subreddit
	modNoteLabel: Unknown
	verdict: Verdict
	removalReason: String
	modQueueReasons: [Unknown]
	userIsBanned: Boolean
	contentKindWithId: String
	postFlair: Flair
	status: Status
	content: Content
	title: String
	markdown: String
	media: Unknown
}
type Gallery {
	previewUrl: String
}
type Binding {
	jsonName: String
	adapter: Unknown
	property: Unknown
	parameter: Unknown
}
type State {
	startTime: Unknown
	action: Unknown
}
type CommentsLoadSpan {
	type: Unknown
	startTime: Unknown
	isTruncated: Boolean
}
type StartTimeTraceCollection {
	uuid: String
	startTime: Unknown
	delegate: Unknown
}
type AdCommentsLoadSpan {
	type: Unknown
	startTime: Unknown
}
type ModInsightsSummariesQueryDates {
	startDayAt: Unknown
	startWeekAt: Unknown
	startMonthAt: Unknown
	startYearAt: Unknown
	endAt: Unknown
}
type ModInsightsSummaries {
	dailySummaries: Unknown
	weeklySummaries: Unknown
	monthlySummaries: Unknown
	yearlySummaries: Unknown
}
type ModInsightsSummariesQueryParameters {
	subredditName: String
	startDayAt: Unknown
	startWeekAt: Unknown
	startMonthAt: Unknown
	startYearAt: Unknown
	endAt: Unknown
}
type ModInsightsBreakdown {
	metric: Unknown
	name: String
}
type ModInsightsMetrics {
	metric: Unknown
	delta: Unknown
	breakdown: [Unknown]
}
type ModInsightsSummaryData {
	pageViews: ModInsightsMetrics
	uniques: ModInsightsMetrics
	subscribes: ModInsightsMetrics
	unsubscribes: ModInsightsMetrics
	postsPublished: ModInsightsMetrics
	postsRemoved: ModInsightsMetrics
	commentsPublished: ModInsightsMetrics
	commentsRemoved: ModInsightsMetrics
	contentFiltered: ModInsightsMetrics
	contentRemovedByAll: ModInsightsMetrics
	commentsRemovedByAll: ModInsightsMetrics
	postsRemovedByAll: ModInsightsMetrics
	postReports: ModInsightsMetrics
	commentReports: ModInsightsMetrics
	commentsRemovedByAdminsOnly: ModInsightsMetrics
	commentsRemovedByAdminAndMods: ModInsightsMetrics
	commentsRemovedByAdminApprovedByMod: ModInsightsMetrics
	postsRemovedByAdminsOnly: ModInsightsMetrics
	postsRemovedByAdminAndMods: ModInsightsMetrics
	postsRemovedByAdminApprovedByMod: ModInsightsMetrics
	harassingContentPostsFiltered: ModInsightsMetrics
	harassingContentCommentsFiltered: ModInsightsMetrics
	banEvasionPostsFiltered: ModInsightsMetrics
	banEvasionCommentsFiltered: ModInsightsMetrics
	crowdControlCommentsFiltered: ModInsightsMetrics
	crowdControlPostsFiltered: ModInsightsMetrics
}
type Bandwidth {
	bitrate: Int
}
type Video {
	previewUrl: String
}
type ModAwardUiModel {
	postKindWithId: String
	commentKindWithId: String
	awardedContentType: Unknown
	awarderUsername: String
	awardedGoldCount: String
	contentOwnerIcon: String
	contentTitle: String
	contentPostTime: String
	awardTime: String
	preview: String
	isNsfw: Boolean
	isSpoiler: Boolean
	blurNsfw: Boolean
	media: Unknown
	richTextElements: Unknown
}
type Param {
	subredditId: String
	postId: String
	commentId: String
}
type ArtistRow {
	listings: [Unknown]
	id: String
	artist: StorefrontArtist
}
type OutfitsRowFeatured {
	listings: [Unknown]
}
type BannerDetailsContent {
	type: Unknown
	content: String
}
type RedditDeviceToken {
	value: String
}
type AnnouncementBanner {
	id: String
	bannerImageUrl: String
	size: Unknown
	destination: Unknown
}
type OutfitsGallery {
	id: String
	listings: [Unknown]
	ctaText: String
	title: String
	dataCursor: String
}
type OutfitsRowPopular {
	listings: [Unknown]
}
type ArtistsCarousel {
	artists: [Unknown]
}
type Category {
	id: String
	title: String
	subtitle: String
	description: String
	imageUrl: String
	filter: StorefrontListingsFilterModel
	utilityBadges: Unknown
	listings: [Unknown]
}
type CategoryDetailDeepLink {
	categoryDetail: CategoryDetail
}
type CategoriesRow {
	id: String
	title: String
	ctaText: String
	size: Unknown
	categories: [Unknown]
}
type ArtistRow {
	id: String
	listings: [Unknown]
	ctaText: String
	artist: StorefrontArtist
}
type OutfitsRow {
	id: String
	listings: [Unknown]
	ctaText: String
	title: String
	dataCursor: String
	filter: StorefrontListingsFilterModel
}
type ArtistsCarousel {
	id: String
	artists: [Unknown]
	ctaText: String
	title: String
}
type DynamicLayoutTelemetryMetadata {
	header: String
	description: String
}
type OutfitsGallery {
	listings: [Unknown]
}
type BrowseAllRow {
	id: String
	title: String
	image: String
}
type DynamicLayoutMetadata {
	id: String
	telemetry: DynamicLayoutTelemetryMetadata
}
type BannerDetails {
	contents: [Unknown]
}
type SdpPostFooter {
	subredditKindWithId: String
}
type AppVersionInfo {
	name: String
}
type DeepLink {
	deepLink: String
}
type Ait {
	controlCode: String
}
type SessionAccount {
	username: String
	kindWithId: String
}
type Loaded {
	showcase: Showcase
	isRefreshing: Boolean
}
type Account {
	kindWithId: String
	snoovatarImg: String
	username: String
	subredditDisplayName: String
}
type ChangedShowcaseItem {
	inventoryItemId: String
	isVisible: Boolean
}
type Showcase {
	state: Unknown
	items: [Unknown]
}
type Id {
	userKindWithId: String
}
type Error {
	showcase: Showcase
	isRefreshing: Boolean
}
type DisplayedCollectibleItem {
	inventoryItemId: String
	name: String
	collectionSize: Int
	imageUrl: String
	isVisible: Boolean
}
type OnStoragePermissionsGranted {
	requester: Unknown
}
type ShareScreenViewState {
	actions: [Unknown]
}
type ShareDownloadableMedia {
	linkId: String
	uri: String
	mediaType: Unknown
	imageWidth: Int
	imageHeight: Int
	linkDownloadModel: LinkDownloadModel
}
type ShareActionState {
	isActionEnabled: Boolean
	isLoading: Boolean
	showBadge: Boolean
}
type ImageWithIconViewState {
	icon: String
}
type ProfileViewState {
	userIconUrl: String
}
type ImageViewState {
}
type IconViewState {
	icon: Icon
}
type ShareActionViewState {
	action: Unknown
	text: String
	drawableViewState: Unknown
	isLoading: Boolean
	showBadge: Boolean
}
type UserAccountPresentationModel {
	totalKarma: String
	postKarma: String
	commentKarma: String
	age: String
	description: String
	trophies: [Unknown]
	showStartChat: Boolean
	showAdmin: Boolean
	showPremium: Boolean
	showVerified: Boolean
	ageContentDescription: String
	isOfficialAccount: Boolean
	achievementsCount: Int
	userPublicContributorTier: String
	userGoldBalance: Int
}
type OnActionClicked {
	action: Unknown
}
type RotaryScrollEvent {
	verticalScrollPixels: Int
}
type Username {
	username: String
}
type LogConfig {
	nameResource: Unknown
}
type MailConfig {
	nameResource: Unknown
}
type QueueConfig {
	nameResource: Unknown
}
type PurchaseConfirmationPerkUiModel {
}
type Gold {
	contentType: Unknown
}
type PaymentParams {
	orderId: String
	productId: String
	pricePackageId: String
	price: String
	productVersion: Unknown
	skuDetails: Unknown
}
type Loaded {
	uiModel: ContributorProgramUiModel
}
type ContributorProgramGoldUiModel {
}
type ContributorProgramKarmaUiModel {
	currentKarma: String
	karmaThreshold: String
	goalContributorStatus: String
	currentContributorStatus: Unknown
}
type Loaded {
	uiModel: ContributorProgramUiModel
}
type ContributorProgramUiModel {
	contributorProgramKarmaUiModel: ContributorProgramKarmaUiModel
	contributorProgramGoldUiModel: ContributorProgramGoldUiModel
	currentEarning: String
	allTimeEarnings: String
	payouts: Unknown
	receivedGold: Unknown
	currentSelectedTab: Unknown
	isI18nMarketingTextEnabled: Boolean
}
type Loaded {
	receivedGoldList: Unknown
}
type ReceivedGoldListScreenDependencies {
	receivedGoldList: [Unknown]
}
type Loaded {
	payoutsList: Unknown
}
type PayoutsListScreenDependencies {
	payoutsList: [Unknown]
}
type BranchEventListItemModel {
	name: String
	date: String
}
type SuggestedUsernameScreenDependencies {
	getActivityRouter: Unknown
	navigateBack: Unknown
	getAuthCoordinatorDelegate: Unknown
	getPhoneAuthCoordinatorDelegate: Unknown
	signUpScreenTarget: Unknown
	onboardingScreenTarget: Unknown
	selectUserActionListener: Unknown
	suggestUsernameFlow: Unknown
}
type SuggestedUsernameViewState {
	username: AuthTextFieldState
	autofillState: UsernameAutofillState
	continueButton: AuthContinueButtonState
	contentState: Unknown
	suggestedNames: Unknown
}
type DomException {
	domError: String
}
type PasswordCredential {
	id: String
	password: String
}
type RegisterUnverifiedResponse {
	userKindWithId: String
	modhash: String
	sessionCookie: String
}
type LoginSuccess {
	userKindWithId: String
	modhash: String
	sessionCookie: String
}
type RecoverUsernameRequest {
	email: String
}
type RegisterVerifiedSuccess {
	userKindWithId: String
	modhash: String
	sessionCookie: String
}
type MagicLinkLoginRequest {
	token: String
	userId: String
	otp: String
	recapthaToken: String
}
type RegisterVerifiedRequest {
	username: String
	password: String
	passwordRepeat: String
	verificationTokenId: String
	reCaptchaToken: String
	appName: String
}
type DeleteRegularAccountRequest {
	username: String
	password: String
}
type UpdateEmailRequest {
	currentPassword: String
	email: String
	sendVerificationEmail: Boolean
}
type RegisterVerifiedError {
	details: RegisterVerifiedErrorDetails
}
type RedditAccessTokenData {
	subject: Unknown
	expiresAt: String
	clientId: String
	scope: String
	loid: String
	loidCreatedAt: Unknown
	accountId: String
	rootCredentialId: String
	oauthFlow: Int
	attestationStatus: Int
}
type RegisterVerifiedErrorDetails {
	errorCode: String
	errorMessage: String
	errorParams: Unknown
}
type Credentials {
	username: String
	scope: Unknown
	token: String
	sessionCookie: String
	modhash: String
}
type RegistrationSuccess {
	userKindWithId: String
	modhash: String
	sessionCookie: String
}
type RegisterRequest {
	username: String
	password: String
	email: String
	emailDigestSubscribe: String
}
type IdentityProviderLoginError {
	reason: String
	explanation: String
}
type EmailSignupSendVerificationCodeResponse {
	token: String
}
type EmailSignupSendVerificationCodeRequest {
	email: String
	verificationCode: String
}
type PhoneLoginErrorUiModel {
	reason: String
	explanation: String
}
type PhoneAuthAccessErrorUiModel {
	httpCode: Boolean
}
type DeletePhoneAccountRequest {
	username: String
	phoneToken: String
}
type NewUserUiModel {
	jwt: String
	sessionCookie: String
}
type IdentityProviderAccount {
	id: String
	name: String
	profileIcon: String
	isOtpEnabled: Boolean
}
type PhoneAuthErrorUiModel {
	reason: String
	explanation: String
}
type PhoneRemoteErrorUiModel {
}
type DeleteAccountErrorUiModel {
	reason: String
	explanation: String
}
type IdentityProviderLinkV2Request {
	idToken: String
	password: String
}
type ExistingAccountInfo {
	id: String
	name: String
	profileIcon: String
	isOtpEnabled: Boolean
}
type SsoRegistrationInput {
	username: String
	emailDigestSubscribe: Boolean
}
type IdentityProviderRemoteError {
}
type SsoAccountResponse {
	ssoEmail: String
	accounts: [Unknown]
}
type CheckLinkedIdentitiesResponse {
	accountExists: Boolean
}
type IdentityProviderLoginRequest {
	idToken: String
	createUserIfNotFound: Boolean
	username: String
	emailDigestSubscribe: Boolean
	checkExistingUser: Boolean
	accountId: String
	password: String
	otp: String
}
type SsoAccount {
	userId: String
	username: String
	profileIcon: String
	isOtpEnabled: Boolean
}
type SsoLinkInput {
	accountId: String
	password: String
	otp: String
}
type IdentityProviderLinkSuccess {
	success: Boolean
}
type IdentityProviderLinkRequest {
	idToken: String
	password: String
}
type SsoLinkSelectAccountParams {
	accounts: [Unknown]
	email: String
	idToken: String
	emailDigestSubscribe: Boolean
}
type IdentityProviderLinkRemoteError {
}
type IdentityProviderLoginSuccess {
	userKindWithId: String
	modhash: String
	sessionCookie: String
}
type PhoneLoginSuccessUiModel {
	userKindWithId: String
	modhash: String
	sessionCookie: String
}
type DeleteSsoAccountRequest {
	username: String
	token: String
}
type IdentityProviderCheckExistingUser {
	accounts: [Unknown]
	email: String
}
type IdentityProviderLoginV2Request {
	idToken: String
	checkExistingUser: Boolean
	reCaptchaToken: String
	registrationInput: SsoRegistrationInput
	linkInput: SsoLinkInput
}
type IdentityProviderUnlinkRequest {
	issuerId: String
	password: String
}
type EmailSignupVerifyRequest {
	email: String
	emailPermission: Boolean
}
type IdentityProviderLinkError {
	reason: String
	explanation: String
}
type AccessTokenError {
	reason: String
	explanation: String
}
type RemovePhoneNumberWithOtpRequest {
	jwt: String
}
type AccountData {
	username: String
}
type IdentityProviderLoginV2Response {
	responseType: String
	userId: String
	accountResponse: SsoAccountResponse
}
type AccessTokenRetrievalError {
	httpCode: Boolean
}
type RegisterUnverifiedRequest {
	username: String
	password: String
	passwordRepeat: String
	emailInput: RegisterEmailInput
	reCaptchaToken: String
	appName: String
}
type UpdateNameRequest {
	newName: String
}
type RemoteError {
}
type RemovePhoneNumberWithPasswordRequest {
	password: String
}
type LoginRequestV2 {
	identifier: String
	password: String
	reCaptchaToken: String
	appName: String
	otp: String
}
type RegisterError {
	reason: String
	explanation: String
}
type MagicLinkInitializeRequest {
	identifier: String
}
type AuthV2ErrorResponse {
	details: AuthV2ErrorDetails
}
type RegisterEmailInput {
	email: String
	emailPermission: Boolean
}
type AccessTokenSuccess {
	token: String
	expiresIn: Int
	sessionCookie: String
}
type AuthV2ErrorDetails {
	code: String
	message: String
	params: Unknown
}
type PublicKeyCredentialResponse {
	registrationResponseJson: String
}
type LoginError {
	reason: String
	explanation: String
}
type PublicKeyCredentials {
	authenticationResponseJson: String
}
type CredentialException {
	type: String
	message: String
}
type SuggestedNameClicked {
	name: String
}
type UsernameAutofillState {
	shouldSave: Boolean
	password: String
}
type UsernameChanged {
	newValue: String
}
type WelcomeScreenDependencies {
	getActivity: Unknown
	getContext: Unknown
}
type WelcomePagerPageData {
	page: Unknown
	titleText: String
	footerPromptText: String
	footerButtonText: String
}
type WelcomePagerConfig {
	initialPageIndex: Unknown
	pages: Unknown
}
type AccessTokenRequest {
}
type AuthActivityKtDependencies {
	getActivity: Unknown
	getRouter: Unknown
	getAuthCoordinatorDelegate: Unknown
	getPhoneAuthCoordinatorDelegate: Unknown
	authTransitionParameters: AuthTransitionParameters
}
type UpdatePhoneNumberWithPasswordRequest {
	jwt: String
	password: String
	smsNotificationEnabled: Boolean
}
type PhoneLoginV2Request {
	phoneNumber: PhoneNumber
	code: String
	reCaptchaToken: String
	appName: String
}
type PhoneLoginV2Response {
	responseType: String
	userId: String
	verificationToken: String
	sessionCookie: String
}
type PhoneAddEmailV2Request {
	jwt: String
	email: String
}
type CodeInputViewState {
	isEnabled: Boolean
	value: String
	inputStatus: Unknown
	errorMessage: String
	showTrailingIcon: Boolean
}
type NewPhoneNumberOtpV2Request {
	phoneNumber: PhoneNumber
	reCaptchaToken: String
	appName: String
}
type CodeValueChanged {
	value: String
}
type CodeFocusChanged {
	isFocused: Boolean
}
type ExistingPhoneNumberOtpV2Request {
	phoneNumber: String
}
type VerifyEmailResendTimerConfig {
	resendTimeoutMs: Int
	countdownStepMs: Int
}
type ContinueButtonViewState {
	isEnabled: Boolean
	showLoading: Boolean
}
type UpdatePhoneWithOtpV2Request {
	newPhoneToken: String
	currentPhoneCode: String
}
type VerifyPhoneRequest {
	phoneNumber: PhoneNumber
	code: String
}
type PhoneRegisterV2Request {
	jwt: String
	password: String
	reCaptchaToken: String
	username: String
}
type SetPasswordDependencies {
	getRouter: Unknown
	parameters: SetPasswordParameters
	navigateBack: Unknown
	hideKeyboard: Unknown
	signUpScreenTarget: Unknown
}
type CheckPhoneNumberV2Response {
	jwt: String
}
type VerifyEmailParameters {
	email: String
	isEmailPermissionGranted: Boolean
}
type VerifyEmailViewState {
	description: String
	codeInputState: CodeInputViewState
	resendBlockState: ResendBlockViewState
	continueButtonState: ContinueButtonViewState
	rateLimitBannerState: RateLimitBannerViewState
}
type CheckPhoneNumberError {
	reason: String
	explanation: String
}
type UpdatePhoneNumberWithOtpRequest {
	jwt: String
	code: String
	smsNotificationEnabled: Boolean
}
type ContinueButtonViewState {
	isEnabled: Boolean
	showLoading: Boolean
}
type PhoneAuthAccessError {
	httpCode: Boolean
}
type CodeInputState {
	isEnabled: Boolean
	value: String
	inputStatus: Unknown
	errorMessage: String
	showTrailingIcon: Boolean
}
type Params {
	deeplinkAfterLogin: String
	pageType: String
}
type TokenExpiredBannerViewState {
	isVisible: Boolean
	textMessage: String
}
type OtpRequest {
	phoneNumber: PhoneNumber
}
type AuthNsfwBottomSheetDependencies {
	getActivityRouter: Unknown
	navigateBack: Unknown
	authTransitionParameters: Params
}
type RateLimitBannerViewState {
	isVisible: Boolean
	textMessage: String
}
type CheckPhoneNumberRequest {
	phoneNumber: PhoneNumber
	code: String
}
type CheckExistingPhoneNumberRequest {
	code: String
}
type CheckPhoneNumberAccessError {
	httpCode: Boolean
}
type RateLimitBannerViewState {
	isVisible: Boolean
	textMessage: String
}
type SetPasswordViewState {
	username: String
	password: InputFieldViewState
	continueButtonState: ContinueButtonViewState
	tokenExpiredBannerState: TokenExpiredBannerViewState
	rateLimitBannerState: RateLimitBannerViewState
}
type RemovePhoneWithPasswordV2Request {
	password: String
}
type SetPasswordParameters {
	email: String
	username: String
	verificationTokenId: String
	emailDigestState: Boolean
}
type DeleteAccountSuccess {
	success: Boolean
}
type VerifyPhoneByAccountResponse {
	jwt: String
}
type DeleteAccountError {
	reason: String
	explanation: String
}
type CheckPhoneNumberSuccess {
	jwt: String
}
type PasswordChanged {
	value: String
}
type VerifyPhoneByAccountRequest {
	code: String
}
type PhoneAuthError {
	reason: String
	explanation: String
}
type DeleteAccountRequest {
	username: String
	password: String
	phoneToken: String
}
type RemovePhoneWithOtpV2Request {
	token: String
}
type UpdatePhoneWithPasswordV2Request {
	newPhoneToken: String
	password: String
}
type CheckPhoneNumberV2Request {
	phoneNumber: PhoneNumber
	code: String
	reCaptchaToken: String
	appName: String
}
type AddEmailRequest {
	email: String
	jwt: String
}
type SsoConfirmationDialogConfirm {
	emailDigestSubscribe: Boolean
	ssoAuthResult: String
	ssoProvider: Unknown
}
type EmailDigestCheckChanged {
	checked: Boolean
}
type AgreementOrPrivacyClicked {
	urlType: Unknown
}
type MagicLinkRequestErrorReported {
	error: Unknown
}
type Params {
	deeplinkAfterLogin: String
	kindWithId: String
	netzDgComment: Unknown
	titleOverride: String
	pageType: Unknown
}
type AuthBottomSheetViewState {
	title: String
	isEmailPermissionRequired: Boolean
	reportUrl: String
}
type PasswordChanged {
	value: String
}
type PagerVisibilityChanged {
	isVisible: Boolean
}
type PersistentBannerViewState {
	isVisible: Boolean
	textMessage: String
}
type IdentifierChanged {
	value: String
}
type LoginViewState {
	titleText: String
	showSsoButtons: Boolean
	showPhoneAuthButton: Boolean
	showPageLoading: Boolean
	identifier: InputFieldViewState
	password: InputFieldViewState
	continueButton: ContinueField
	persistentBannerState: PersistentBannerViewState
	showMagicLinkButtonAboveContinue: Boolean
	showMagicLinkButtonUnderForgetPassword: Boolean
}
type HyperlinkClicked {
	url: String
}
type AutofillOptionSelected {
	value: String
}
type SsoConfirmationDialogConfirm {
	emailDigestSubscribe: Boolean
	ssoAuthResult: String
	ssoProvider: Unknown
}
type ContinueField {
	continueEnabled: Boolean
	showLoading: Boolean
}
type SsoParams {
	account: ExistingAccountInfo
	idToken: String
	password: String
	emailDigestSubscribe: Boolean
}
type Params {
	identifier: String
	password: String
	ssoParams: SsoParams
	isMagicLinkRequest: Boolean
}
type AuthenticatorScreenDependencies {
	getActivityRouter: Unknown
	getAuthCoordinatorDelegate: Unknown
	authTransitionParameters: AuthTransitionParameters
	view: Unknown
	params: Params
	loginListener: Unknown
}
type SsoIdentityViewState {
	identifier: String
	showLoading: Boolean
}
type AuthBottomSheetDependencies {
	getActivityRouter: Unknown
	authBottomSheetNavigator: Unknown
	authTransitionParameters: Params
}
type Params {
	idToken: String
	email: String
	emailDigestSubscribe: Boolean
}
type OnProceedToSetPasswordAction {
	action: OnProceedToSetPassword
}
type SignUpState {
	value: String
	fieldState: Unknown
	message: String
	showTrailingIcon: Boolean
}
type SignUpScreenDependencies {
	getActivityRouter: Unknown
	getAuthCoordinatorDelegate: Unknown
	authTransitionParameters: AuthTransitionParameters
	getOnLoginListener: Unknown
	loginNavigator: Unknown
	emailDigestBottomsheetContainerView: Unknown
	shouldHideSsoSection: Boolean
	navigateBack: Unknown
	signUpScreenTarget: Unknown
	cancelAutofillContext: Unknown
}
type IdentifierValueChanged {
	value: String
}
type Error {
	errorMessage: String
}
type Success {
	accounts: Unknown
}
type ForgotPasswordViewState {
	identifierInputState: IdentifierInputViewState
	continueButtonState: ContinueButtonViewState
	persistentBannerState: PersistentBannerViewState
}
type ContinueButtonViewState {
	isEnabled: Boolean
	showLoading: Boolean
}
type IdentifierInputState {
	isEnabled: Boolean
	value: String
	inputStatus: Unknown
	errorMessage: String
	showTrailingIcon: Boolean
}
type IdentifierInputViewState {
	isEnabled: Boolean
	value: String
	inputStatus: Unknown
	errorMessage: String
	showTrailingIcon: Boolean
}
type MagicLinkHandlingViewState {
	showLoading: Boolean
	identifierInputState: IdentifierInputViewState
	continueButtonState: ContinueButtonViewState
	persistentBannerState: PersistentBannerViewState
}
type ContinueButtonViewState {
	isEnabled: Boolean
	showLoading: Boolean
}
type IdentifierFocusChanged {
	isFocused: Boolean
}
type MagicLinkHandlingParameters {
	token: String
	userId: String
	requiresOtp: Boolean
}
type PersistentBannerViewState {
	isVisible: Boolean
	textMessage: String
}
type OtpCodeEntered {
	code: String
}
type AccountState {
	id: String
	name: String
	avatarUrl: String
}
type IdentifierValidationResult {
	isValid: Boolean
	errorMessage: String
}
type TokenExpiredBannerViewState {
	isVisible: Boolean
	textMessage: String
}
type PersistentBannerViewState {
	isVisible: Boolean
	textMessage: String
}
type ContinueButtonViewState {
	isEnabled: Boolean
	showLoading: Boolean
}
type IdentifierInputViewState {
	isEnabled: Boolean
	value: String
	inputStatus: Unknown
	errorMessage: String
	showTrailingIcon: Boolean
}
type AccountSelected {
	account: AccountState
}
type NewPasswordFocusChanged {
	isFocused: Boolean
}
type UpdatePasswordParameters {
	resetPasswordToken: String
	accountId: String
	username: String
}
type IdentifierValueChanged {
	value: String
}
type InputFieldState {
	isEnabled: Boolean
	value: String
	inputStatus: Unknown
	errorMessage: String
	showTrailingIcon: Boolean
}
type NewPasswordValueChanged {
	value: String
}
type ConfirmPasswordFocusChanged {
	isFocused: Boolean
}
type IdentifierFocusChanged {
	isFocused: Boolean
}
type ResetPasswordSelectAccountViewState {
	contentState: Unknown
}
type ConfirmPasswordValueChanged {
	value: String
}
type EmailDigestSubscribeChanged {
	checked: Boolean
}
type ContinueField {
	continueEnabled: Boolean
	showLoading: Boolean
}
type Parameters {
	shouldCoverBottomNav: Boolean
	showTokenExpirationError: Boolean
	identifier: String
}
type UpdatePasswordViewState {
	username: String
	newPasswordState: InputFieldViewState
	confirmPasswordState: InputFieldViewState
	continueButtonState: ContinueButtonViewState
	tokenExpiredBannerState: TokenExpiredBannerViewState
}
type IdentifierInputState {
	isEnabled: Boolean
	value: String
	inputStatus: Unknown
	errorMessage: String
	showTrailingIcon: Boolean
}
type SignUpViewState {
	email: SignupField
	continueButton: ContinueField
	showSsoButtonGroup: Boolean
	showPhoneAuthButton: Boolean
	showPageLoading: Boolean
	showEmailCheckbox: Boolean
	rateLimitBannerState: RateLimitBannerViewState
}
type FieldStateValue {
	value: String
	fieldState: Unknown
	showTrailingIcon: Boolean
}
type SignUpScreenAction {
	action: OnSignUpSuccess
}
type SignupField {
	value: String
	state: FieldStateValue
}
type HyperlinkClicked {
	url: String
	urlType: Unknown
}
type EmailFocusChanged {
	focused: Boolean
}
type RateLimitBannerViewState {
	isVisible: Boolean
	textMessage: String
}
type EmailChanged {
	value: String
}
type SsoLinkSelectAccountScreenDependencies {
	view: Unknown
	params: Params
	getActivityRouter: Unknown
	getAuthCoordinatorDelegate: Unknown
	authTransitionParameters: AuthTransitionParameters
	getLoginListener: Unknown
	selectUserActionListener: Unknown
}
type SsoLinkConfirmPasswordScreenDependencies {
	view: Unknown
	getActivityRouter: Unknown
	getAuthCoordinatorDelegate: Unknown
	authTransitionParameters: AuthTransitionParameters
	getLoginListener: Unknown
	params: Params
}
type Params {
	account: ExistingAccountInfo
	idToken: String
	emailDigestSubscribe: Boolean
}
type MagicLinkRequestViewState {
	title: String
}
type ResetPasswordResendTimerConfig {
	resendTimeoutMs: Int
	countdownStepMs: Int
}
type MagicLinkCheckInboxViewState {
	resendBlockState: ResendBlockViewState
	rateLimitBannerState: RateLimitBannerViewState
	isIdentifierAnEmail: Boolean
	identifier: String
	hasDefaultEmailApp: Boolean
}
type RateLimitBannerViewState {
	isVisible: Boolean
	textMessage: String
}
type MagicLinkEnterEmailParameters {
	email: String
}
type IdentifierInputViewState {
	isEnabled: Boolean
	value: String
	inputStatus: Unknown
	errorMessage: String
	showTrailingIcon: Boolean
}
type ContinueButtonViewState {
	isEnabled: Boolean
	showLoading: Boolean
}
type IdentifierInputState {
	isEnabled: Boolean
	value: String
	inputStatus: Unknown
	errorMessage: String
	showTrailingIcon: Boolean
}
type IdentifierFocusChanged {
	isFocused: Boolean
}
type IdentifierValueChanged {
	value: String
}
type PersistentBannerViewState {
	isVisible: Boolean
	textMessage: String
}
type MagicLinkEnterEmailViewState {
	identifierInputState: IdentifierInputViewState
	continueButtonState: ContinueButtonViewState
	persistentBannerState: PersistentBannerViewState
}
type Parameters {
	identifier: String
	isEmail: Boolean
	showRateLimitBanner: Boolean
	hasDefaultEmailApp: Boolean
	isFromSuggestSsoLogin: Boolean
}
type RateLimitBannerViewState {
	isVisible: Boolean
	textMessage: String
}
type MagicLinkResendTimerConfig {
	resendTimeoutMs: Int
	countdownStepMs: Int
}
type Parameters {
	identifier: String
	showResetPasswordRateLimitBanner: Boolean
	hasDefaultEmailApp: Boolean
}
type ResetPasswordEmailSentViewState {
	resendBlockState: ResendBlockViewState
	rateLimitBannerState: RateLimitBannerViewState
	isIdentifierAnEmail: Boolean
	identifier: String
	hasDefaultEmailApp: Boolean
}
type MagicLinkRequestParameters {
	identifier: String
	isEmail: Boolean
	screenTarget: Unknown
}
type MagicLinkRequestScreenDependencies {
	parameters: MagicLinkRequestParameters
	navigateBack: Unknown
}
type EagerExpirationData {
	shouldEagerRefresh: Boolean
	isExpired: Boolean
	issuedAtInstant: Unknown
	expiresAtInstant: Unknown
	eagerExpirationInstant: Unknown
	expirationIntervalSeconds: Int
	ageInSeconds: Int
}
type RedditDeviceTokenDto {
	deviceToken: String
}
type RedditDeviceTokenMetaData {
	expirationSeconds: Int
	issuedAtSeconds: Int
	jwtId: String
	clientId: String
	attestationState: Int
}
type Error {
	errorMessage: String
	reason: String
}
type SelectExistingUser {
	accounts: [Unknown]
	email: String
}
type TokenError {
	errorMessage: String
	reason: String
}
type Success {
	credentials: Credentials
}
type Params {
	email: String
	username: String
	password: String
	emailDigestSubscribe: Boolean
}
type SsoAuthParams {
	idToken: String
	createUserIfNotFound: Boolean
	emailDigestSubscribe: Boolean
	username: String
	checkExistingUser: Boolean
}
type TokenSuccessResult {
	token: String
}
type Params {
	email: String
	verificationCode: String
}
type CreateNewUser {
	email: String
}
type Params {
	email: String
}
type NewUser {
	jwt: String
}
type Params {
	identifier: String
	password: String
	otp: String
}
type SignUpError {
	errorMessage: String
	reason: String
	exception: Unknown
}
type Params {
	account: Unknown
	scope: Unknown
	sessionTokenRequest: SessionTokenRequest
	currentSessionMode: Unknown
}
type Params {
	jwtToken: String
}
type Error {
	reason: String
	errorMessage: String
}
type Params {
	jwt: String
	password: String
	smsNotificationEnabled: Boolean
}
type Error {
	errorMessage: String
	isUsernameNotFound: Boolean
	invalidCredentials: Boolean
}
type RateLimitError {
	errorMessage: String
}
type Params {
	jwt: String
	code: String
	smsNotificationEnabled: Boolean
}
type Params {
	email: String
	isEmailPermissionGranted: Boolean
}
type Params {
	jwt: String
	password: String
	smsNotificationEnabled: Boolean
	username: String
}
type LinkParams {
	idToken: String
	password: String
	bearerToken: String
}
type Params {
	email: String
	password: String
}
type Params {
	phone: PhoneNumber
	code: String
}
type Error {
	errorMessage: String
	exception: Unknown
}
type Params {
	password: String
}
type Params {
	email: String
	jwt: String
}
type SsoLinkingParams {
	idToken: String
	accountId: String
	password: String
	otp: String
	emailDigestSubscribe: Boolean
}
type SignUpError {
	errorMessage: String
	exception: Unknown
}
type UnlinkParams {
	issuerId: String
	password: String
	bearerToken: String
}
type ServerError {
	errorMessage: String
}
type Params {
	username: String
	password: String
	passwordRepeat: String
	verificationTokenId: String
}
type TokenError {
	errorMessage: String
	reason: String
}
type SsoAuthSuccessResult {
	credentials: Credentials
	userType: Unknown
}
type Params {
	phone: PhoneNumber
	code: String
}
type Params {
	phone: PhoneNumber
}
type SignUpError {
	errorMessage: String
	reason: String
	exception: Unknown
}
type Params {
	code: String
}
type VerifyPasswordDependencies {
	phoneAuthFlow: Unknown
	forgotPasswordNavigatorDelegate: Unknown
}
type Confirm {
	forgotPasswordNavigatorDelegate: Unknown
}
type AddEmail {
	maskedCurrentPhoneNumber: String
	hasPasswordSet: Boolean
}
type CountryChanged {
	country: Country
}
type RemovePhoneNumber {
	maskedCurrentPhoneNumber: String
	hasPasswordSet: Boolean
}
type Back {
	source: Unknown
}
type ConfirmRemoval {
	pageType: String
	maskedCurrentPhoneNumber: String
	hasPasswordSet: Boolean
	onRemovePhoneNumberListener: Unknown
}
type EnterPhoneViewState {
	phoneInputState: Unknown
	actionNext: Unknown
	disclaimerText: String
}
type EnterPhoneDependencies {
	phoneAuthFlow: Unknown
	getRouter: Unknown
}
type VerifyPasswordViewState {
	inputField: Unknown
	actionDone: Unknown
}
type PhoneRemovalConfirmed {
	pageType: String
	maskedCurrentPhoneNumber: String
	hasEmailAdded: Boolean
	hasPasswordSet: Boolean
	onRemovePhoneNumberListener: Unknown
}
type LearnMore {
	source: Unknown
}
type Country {
	id: String
	fullName: String
	alpha2Code: String
	countryCode: String
	phoneMask: String
	emoji: String
}
type CountriesByPhase {
	phase0: [Unknown]
	phase1: [Unknown]
	phase2: [Unknown]
	phase3: [Unknown]
}
type Resend {
	pageType: String
}
type CountryId {
}
type CountryId {
	value: String
	countryCode: String
	emoji: String
}
type EnterCodeViewState {
	inputField: Unknown
	smsCodeLength: Unknown
	actionNext: Unknown
	resend: Unknown
}
type CountryPickerState {
	countries: Unknown
}
type Confirm {
	forgotPasswordNavigatorDelegate: Unknown
	onRemovePhoneNumberListener: Unknown
	pageType: String
}
type BackPressed {
	pageType: String
}
type CheckOtpDependencies {
	phoneNumber: PhoneNumber
	phoneAuthFlow: Unknown
	getRouter: Unknown
	getDelegate: Unknown
}
type VerifyWithOtpDependencies {
	phoneAuthFlow: Unknown
	getRouter: Unknown
	getDelegate: Unknown
}
type CountryPickerBottomSheetDependencies {
	countryPickerListener: Unknown
}
type SmsSetting {
	id: String
	titleRes: Boolean
}
type DeleteAccountFailedBottomSheetViewState {
	title: Unknown
	text: String
}
type DeleteAccountFailedCancelPremiumBottomSheetDependencies {
	getActivityRouter: Unknown
}
type DeleteAccountSucceededBottomSheetDependencies {
	getActivityRouter: Unknown
}
type DeleteAccountConfirmationBottomSheetDependencies {
	phoneAuthFlow: Unknown
	getActivityRouter: Unknown
	deleteAccountDelegate: Unknown
}
type DeleteAccountFailedBottomSheetDependencies {
	getActivityRouter: Unknown
	deleteAccountDelegate: Unknown
	errorMessage: String
}
type DeleteSsoConfirmed {
	token: String
}
type SmsSettingsSucceeded {
	item: SmsSettings
}
type SmsSettings {
	items: Unknown
}
type CreatePasswordViewState {
	createPassword: Unknown
	confirmPassword: Unknown
	actionSkip: Unknown
	actionNext: Unknown
}
type AddEmailViewState {
	inputField: Unknown
	actionNext: Unknown
}
type CreatePasswordChanged {
	value: String
}
type ConfirmPasswordChanged {
	value: String
}
type SmsSettingsDependencies {
	getRouter: Unknown
}
type CreatePasswordDependencies {
	jwt: String
	getRouter: Unknown
	getDelegate: Unknown
}
type AddEmailDependencies {
	addEmailFlow: AddEmailFlow
}
type SearchNavigationListPresentation {
	items: Unknown
}
type SearchFilterBehavior {
	id: String
	pane: String
	filters: [Unknown]
	isAppliedFiltersRemoved: Boolean
	telemetry: SearchTelemetryPayload
}
type FilterOption {
	text: String
	secondaryText: String
	isSelected: Boolean
}
type SearchFilterOptionListPresentation {
	id: String
	title: String
	text: String
	options: [Unknown]
	isSelected: Boolean
}
type SearchNavigationListItem {
	id: String
	text: String
	isSelected: Boolean
}
type SearchNoOpBehavior {
	id: String
}
type ButtonAppearance {
	size: Unknown
	style: Unknown
}
type Space {
}
type Deeplink {
	url: String
}
type Button {
	title: String
	deepLink: String
	appearance: ButtonAppearance
}
type Text {
	content: String
	appearance: TextAppearance
}
type AvatarNudge {
	id: String
	header: String
	title: String
	subtitle: String
	destination: Unknown
	lottieUrl: String
}
type AvatarNudgeEvent {
	isActive: Boolean
	currentViewTimes: AvatarNudge
}
type Image {
	url: String
}
type TextAppearance {
	fontType: Unknown
	alignment: Unknown
}
type PostUnitVisibilityChanged {
}
type AppliedFilter {
	key: String
	value: String
}
type Rule {
	id: String
	name: String
	description: String
	reason: String
	contentTypes: Unknown
}
type ViewDiffResult {
	diff: Unknown
}
type Partial {
	linkId: String
	uniqueId: String
	isPromoted: Boolean
	analyticsPageType: String
	triggeringSource: Unknown
}
type Full {
	isQuarantined: Boolean
	isNsfw: Boolean
	authorName: String
	isRedditGoldEnabledForSubreddit: Boolean
	isPromoted: Boolean
	authorId: String
	authorIcon: String
	thingId: String
	subredditId: String
	isAwardedRedditGold: Boolean
	isAwardedRedditGoldByCurrentUser: Boolean
	redditGoldCount: String
	analyticsPageType: String
	triggeringSource: Unknown
}
type UtilityDetailsImageUiModel {
	imageUrl: String
}
type LabeledUtilityBadgeUiModel {
	id: String
	label: String
	badge: UtilityBadgeUiModel
}
type UtilityDetailsUiModel {
	badge: LabeledUtilityBadgeUiModel
	name: String
	subtitle: String
	description: String
	image: UtilityDetailsImageUiModel
	ownership: Unknown
}
type PrimaryOwner {
	redeemingInstructions: String
	redeemCode: String
	url: String
	startDate: Unknown
	endDate: Unknown
}
type BranchEventDispatch {
	eventName: String
	timestamp: Int
}
type BanReason {
	banReason: String
}
type ResendBlockViewState {
	isResendBlockVisible: Boolean
	isResendCallPending: Boolean
	isResendButtonEnabled: Boolean
	resendDescription: String
	resendTimerLabel: String
}
type RemoteTrendingQueriesResult {
	id: String
	queryString: String
	postTitle: String
	thumbnailUrl: String
	isPromoted: Boolean
	isBlankAd: Boolean
	adInfo: RemoteTrendingAdInfo
}
type TrendingResultState {
	requestState: Unknown
	results: [Unknown]
	error: Unknown
}
type RemoteTrendingAdInfo {
	adPostId: String
	adEvents: [Unknown]
	adImpressionId: String
	encryptedTrackingPayload: String
	additionalEventMetadata: [Unknown]
}
type MagicLinkLoginResult {
	sessionCookie: String
}
type MagicLinkInitializeResult {
	hasOneAttemptLeft: Boolean
}
type SearchQueryKey {
	queryText: String
	sort: Unknown
	timeRange: Unknown
	allowNsfw: Boolean
	subredditId: String
	flair: String
	sourceScreen: String
	screenUniqueId: String
	postTypes: [Unknown]
}
type CommunityViewState {
	id: Id
	iconUrl: String
	subredditName: String
	showMemberCount: Boolean
	memberCount: String
	memberCountAccessibilityLabel: String
	description: String
	isSubscribed: Boolean
	blurIcon: Boolean
	markAsNsfw: Boolean
	markAsQuarantined: Boolean
	showTranslationInProgressShimmer: Boolean
	isDividerFixEnabled: Boolean
}
type SubredditBottomSheetActionMenu {
	id: [Unknown]
	titleRes: Int
}
type Item {
	id: String
	iconName: String
	submenuId: Int
	selected: Boolean
	subtitle: String
	extras: Unknown
}
type GeneralCarouselCollectionPresentationModel {
	title: String
	hasDescription: Boolean
	hasMetadata: Boolean
	items: [Unknown]
	carouselId: String
	uniqueID: Int
	showTitle: Boolean
	listableType: Unknown
	relativeIndex: Int
}
type Id {
	value: String
	uniqueId: String
}
type KarmaCarouselItemPresentationModel {
	item: Unknown
	color: String
	unsubscribedText: String
	metadata: String
	metadataAccessibilityLabel: String
}
type FilePathComponents {
	root: Unknown
	segments: Unknown
}
type ModeratorInfo {
	id: String
	name: String
	permissions: ModPermissions
	isCurrentUser: Boolean
	isReorderable: Boolean
	isInactive: Boolean
	commencementDate: Unknown
	userIcon: String
}
type ModPermissions {
	all: Boolean
	access: Boolean
	chatOperator: Boolean
	chatConfig: Boolean
	channelManagement: Boolean
	communityChat: Boolean
	config: Boolean
	flair: Boolean
	mail: Boolean
	posts: Boolean
	wiki: Boolean
}
type ModeratorItem {
	id: String
	name: String
	description: Unknown
	contentDescription: String
	tags: [Unknown]
	canReorder: Boolean
	iconUrl: String
}
type ModeratorMutationResponse {
	success: Boolean
	errorMessage: String
}
type CommunityStatusEmojiItem {
	name: String
	url: String
}
type CommunityStatusDisplayItem {
	emoji: CommunityStatusEmojiItem
	description: CommunityStatusDescriptionItem
}
type CommunityStatusDescriptionItem {
	markdown: String
	richText: Unknown
}
type PhoneInput {
	country: CountryUi
	phoneOnly: String
}
type Idle {
	input: PhoneInput
}
type Error {
	errorMessage: String
	input: PhoneInput
}
type CountryUi {
	dialingCode: String
	alpha2Code: String
	emoji: String
}
type FlairPromptCachedData {
	eligibility: Unknown
	lastUpdatedTime: Int
}
type GalleryItemPositionUiModel {
	postId: String
	position: String
}
type MediaGalleryUiModel {
	postId: String
	isPromotedPost: Boolean
	subredditDetail: Unknown
	items: [Unknown]
	redesignImageCroppingBias: Unknown
	adImpressionId: String
	isBlockedAuthor: Boolean
	adAnalyticsInfo: AdAnalyticsInfo
	shouldOpenExternally: Boolean
	excludedExperiments: [Unknown]
}
type MediaGalleryItemUiModel {
	caption: String
	height: String
	outboundUrl: String
	outboundUrlDisplay: String
	thumb: String
	url: String
	blurredUrl: String
	blurImages: Boolean
	blurredPreview: ImageLinkPreviewPresentationModel
	imagePreview: ImageLinkPreviewPresentationModel
	width: Boolean
	displayAddress: String
	callToAction: String
	adEvents: [Unknown]
	shouldShowAdsCTABar: Boolean
	adCtaUiModel: Unknown
	adCtaParams: GalleryItemCtaParams
	translatedImagePreview: ImageLinkPreviewPresentationModel
	showTranslation: Boolean
}
type Post {
	subredditId: String
	subredditName: String
	postId: String
	distinguishType: String
	isStickied: Boolean
	isRemoved: Boolean
	link: Unknown
}
type OnItemLongClicked {
	automation: Automation
}
type OnIsModToggle {
	isEnabled: Boolean
}
type ModInlineDistinguishViewState {
	isMod: Boolean
	isAdmin: Boolean
	isEmployee: Boolean
}
type OnPostClick {
	activeTab: Unknown
}
type PreviewViewState {
	selectedTab: Unknown
	visibleTabs: [Unknown]
	community: Community
	postPreviewTabViewState: PostPreviewTabViewState
	commentPreviewTabViewState: CommentPreviewTabViewState
	postAutomationState: PostAutomationState
	commentAutomationState: CommentAutomationState
}
type PostAutomationState {
	titleGuidance: FieldGuidance
	bodyGuidance: FieldGuidance
	hasBlockingRules: Boolean
	isOnOrAfterSubmit: Boolean
}
type Comment {
	subredditKindWithId: String
	comment: String
	automation: Automation
	isOnOrAfterSubmit: Boolean
}
type Post {
	subredditKindWithId: String
	title: String
	body: String
	automation: Automation
	isOnOrAfterSubmit: Boolean
}
type OnTabSelected {
	tab: Unknown
}
type CommentAutomationState {
	commentBodyGuidance: FieldGuidance
	hasBlockingRules: Boolean
	isOnOrAfterSubmit: Boolean
}
type OnPostTitleChange {
	title: String
}
type OnCommentBodyChange {
	body: String
}
type OnPostBodyChange {
	body: String
}
type PostPreviewTabViewState {
	title: String
	body: String
	showPreviewCoachMark: Boolean
}
type CommentPreviewTabViewState {
	body: String
}
type Community {
	name: String
	iconUrl: String
}
type OnIsAdminToggle {
	isEnabled: Boolean
}
type OnAutomationDragReleased {
	id: String
}
type OnAutomationEdit {
	automation: Automation
}
type OnTabSelected {
	tab: Unknown
}
type AutomationViewState {
	subredditName: String
	selectedTab: Unknown
	editMode: Boolean
	showEditIcon: Boolean
	postTabViewState: Unknown
	commentTabViewState: Unknown
	discoverTabViewState: Unknown
	promptViewState: PromptViewState
}
type ShowDismissDialogRecommendedAutomation {
	automation: Automation
}
type ModerationUpdate {
	targetKindWithId: String
	isApproved: Boolean
	isRemoved: Boolean
	isSpam: Boolean
	isLocked: Boolean
	isStickied: Boolean
	isSpoiler: Boolean
	isNSFW: Boolean
	distinguishState: Unknown
	removedTitle: String
	selectedFlair: Unknown
}
type Content {
	automations: Unknown
}
type OpenWebBrowser {
	id: String
}
type ShowDeleteDialogAutomation {
	automation: Automation
}
type OnNewAutomationClick {
	actionType: Unknown
	defaultTitle: String
}
type OnAutomationMove {
	id: String
}
type OnDuplicateAutomation {
	automation: Automation
}
type Comment {
	subredditId: String
	subredditName: String
	commentId: String
	postId: String
	distinguishType: String
	isStickied: Boolean
	isQuickCommentRemoveEnabled: Boolean
	link: Unknown
	pageStartTime: Int
}
type PromptViewState {
	selectedAutomation: Automation
	promptType: Unknown
}
type OnKeywordEntered {
	keyword: String
}
type ValidationResult {
	isOk: Boolean
	message: String
}
type OnUserMessageChanged {
	message: String
}
type OnRegexChanged {
	regex: String
}
type OnOptionSelected {
	option: Unknown
}
type OnAutomationEnabledTrigger {
	isEnabled: Boolean
}
type OnAutomationNameChanged {
	name: String
}
type OnKeywordEntry {
	keyword: String
}
type NewEditAutomationViewState {
	isLoading: Boolean
	showSaveChangesPrompt: Boolean
	automation: AutomationUi
}
type OnRegexCaseSensitivityTrigger {
	isEnabled: Boolean
}
type OnKeywordRemoved {
	keyword: String
}
type OnDeleteAutomation {
	id: String
}
type OnRecommendedItemLongClicked {
	automation: Automation
}
type QueueMenuAction {
	queueContentType: Unknown
	menuType: Unknown
	onItemVisibleTimestampMillis: Int
}
type UndoHITLPromptSelection {
	actionId: String
	violatingReason: String
}
type HITLPromptSelected {
	filterIsCorrect: Boolean
	violatingReason: String
	actionId: String
}
type SubjectTextAreaHasFocus {
	isFocused: Boolean
}
type ModMailComposeViewModelInput {
	modmailParticipants: ModmailParticipants
}
type OnKeyBoardStatusChange {
	isOpened: Boolean
}
type OnSenderSelected {
	subredditInfo: SubredditInfo
}
type SubjectChange {
	subject: String
}
type MessageChange {
	message: String
}
type OnSavedResponseSelected {
}
type MessageTextAreaHasFocus {
	isFocused: Boolean
}
type RecipientSelectorViewState {
	isModeratorSelected: Boolean
	selectedUserInfo: UserInfo
	selectedSubredditInfo: SubredditInfo
}
type OnRecipientSelected {
	isModeratorSelected: Boolean
	userInfo: UserInfo
	subredditInfo: SubredditInfo
}
type OnSubredditSelected {
	subredditInfo: SubredditInfo
}
type OnUserSelected {
	userInfo: UserInfo
}
type ModeratorUserSelectorViewState {
	userNameQuery: String
	validationState: Unknown
	errorMessage: String
}
type OnSubredditSelected {
	subreddit: SubredditInfo
}
type SubredditSelectorViewState {
	query: String
	searchState: Unknown
	subredditSearchResults: Unknown
}
type OnSubredditSelected {
	subreddit: SubredditInfo
}
type QueryChange {
	query: String
}
type Loaded {
	selectedSubredditId: String
	subreddits: Unknown
}
type OnQueryChange {
	newQuery: String
}
type OnSendingAsClicked {
	sendingAsMod: Boolean
}
type Asset {
	icon: Icon
}
type User {
	iconUrl: String
}
type HITLActionDisplayItem {
	actionId: String
	title: String
	hidePromptMessage: Boolean
	hideOverflowMenu: Boolean
	userTimeString: String
}
type Args {
	subredditKindWithId: String
	subredditName: String
	contentType: Unknown
}
type PreviousActionDisplayItem {
	iconType: Unknown
	title: String
	description: String
	confidence: Confidence
	userTime: UserTime
	typeDisplayStringResId: Int
}
type NavigateToHITLInformation {
	actionId: String
	violatingReason: String
}
type Loaded {
	bottomSheetEvents: Unknown
	selectedActionTypeFilters: Unknown
	intermediateActionTypeFilters: Unknown
	previousActions: Unknown
	isReportingIgnored: Boolean
	isRemoveActioning: Boolean
	isIgnoreActioning: Boolean
	isApproveActioning: Boolean
}
type SelectActionTypeFilter {
	actionTypeFilter: Unknown
}
type QueueContentAction {
	contentType: Unknown
	actionType: Unknown
	onItemVisibleTimestampMillis: Int
}
type QueueContentLaunchAction {
	queueContentType: Unknown
	media: Unknown
	queueMenuAction: QueueMenuAction
}
type DeselectActionTypeFilter {
	actionTypeFilter: Unknown
}
type UserTime {
	byUser: String
	createdAt: String
}
type OnSavedResponseSelected {
}
type ModmailInboxViewState {
	topAppBarViewState: TopAppBarViewState
	items: Unknown
	modmailListState: Unknown
	pageState: Unknown
	isSingleCommunity: Boolean
	isRefreshing: Boolean
	hasNoMailAccess: Boolean
	selectedConversationIds: [Unknown]
	bottomSheetData: Unknown
	emptyScreenState: Unknown
	shouldDisplayOnboarding: Boolean
	onboardingDemoData: [Unknown]
	isArchivable: Boolean
	onboardingStep: Unknown
	compact: Boolean
}
type RecentModmailMessagePressed {
}
type Args {
	conversationId: String
	messageId: String
	category: Unknown
	requiresInboxBackstack: Boolean
}
type OnAuthorInfoPressed {
	author: Unknown
}
type UnarchiveSwiped {
	conversationId: String
	subredditName: String
}
type ArchiveSwiped {
	conversationId: String
	subredditName: String
}
type OnNoteTextChange {
	newNoteText: String
}
type ModmailConversationModOnlyNoteViewState {
	noteText: String
}
type MarkAsReadPressed {
	conversationId: String
	subredditName: String
}
type UnhighlightPressed {
	conversationId: String
	subredditName: String
}
type MarkAsHarassmentPressed {
	conversationId: String
	subredditName: String
}
type OnItemLongPressed {
	bottomSheetData: InboxItemLongPressedEventData
}
type Quote {
	message: String
}
type ConversationItemPressed {
	item: ModMailInboxDisplayItem
}
type MarkAsUnreadSwiped {
	conversationId: String
	subredditName: String
}
type RecentCommentPressed {
	postId: String
	commentId: String
}
type MarkAsUnreadPressed {
	conversationId: String
	subredditName: String
}
type Report {
	messageId: String
	username: String
}
type ReplyMessageRequest {
	text: String
	isModReplyMode: Boolean
}
type InboxItemLongPressedEventData {
	conversationId: Boolean
	isUnread: Boolean
	isHighlighted: Boolean
	isMarkedAsHarassment: Boolean
	subredditId: String
	subredditName: String
}
type SortDetails {
	sortType: Unknown
	selectedIcon: Icon
	unselectedIcon: Icon
}
type HighlightPressed {
	conversationId: String
	subredditName: String
}
type SubredditToSubreddit {
	initiatorSubredditIconUrl: String
	recipientsSubredditIconUrl: String
}
type Search {
	query: String
}
type Subreddit {
	name: String
}
type MultiSelectModeEnabled {
	conversationId: Boolean
	isUnread: Boolean
	isHighlighted: Boolean
	isMarkedAsHarassment: Boolean
}
type CommunitiesSelected {
	communities: [Unknown]
}
type CopyText {
	message: String
}
type SortTypeFilterSelected {
	sortType: Unknown
}
type MultiSelectState {
	showArchive: Boolean
	showMarkAsRead: Boolean
	showHighlight: Boolean
	showMarkAsHarassment: Boolean
}
type RecentPostPressed {
	postId: String
}
type ConversationAddedToSelection {
}
type UnarchivePressed {
	conversationId: String
	subredditName: String
}
type MultiCommunity {
	subredditIconUrl: String
}
type Error {
	failureDetails: String
}
type InboxDetails {
	category: Unknown
	selectedIcon: Icon
	unselectedIcon: Icon
}
type SearchQuerySubmitted {
	query: String
}
type CopyLinkPressed {
	conversationId: String
	subredditName: String
}
type MailboxSelected {
	category: Unknown
}
type MarkAsReadSwiped {
	conversationId: String
	subredditName: String
}
type TopAppBarViewState {
	multiSelectState: MultiSelectState
	selectedItemCount: String
	subredditIcon: String
	mailboxLabel: String
	sortLabel: String
}
type OnReplyTextChange {
	newReplyText: String
}
type OnSavedResponseSelected {
}
type ModmailConversationReplyViewState {
	replyText: String
	replyMode: Unknown
	isRenderingTemplate: Boolean
}
type SortBy {
	currentSortType: Unknown
}
type UnmarkAsHarassmentPressed {
	conversationId: String
	subredditName: String
}
type User {
	userKindWithId: String
	name: String
	isEmployee: Boolean
}
type ArchivePressed {
	conversationId: String
	subredditName: String
}
type ModMailInboxDisplayItem {
	conversationId: Boolean
	isHighlighted: Boolean
	isArchived: Boolean
	isMarkedAsHarassment: Boolean
	timestamp: String
	replyCount: String
	message: String
	preview: String
	authors: Unknown
	conversationType: Unknown
	subredditKindWithId: String
	subredditName: String
	showAdminMessageBackground: Boolean
	messageCount: String
	participantId: String
	participantSubredditId: String
}
type ModmailConversationRedditorInfo {
	id: String
	name: String
	prefixedName: String
	totalKarma: Unknown
	postKarma: Unknown
	commentKarma: Unknown
	postsCount: Int
	commentsCount: Int
	mutesCount: Int
	muteRemaining: String
	banRemaining: String
	recentComments: [Unknown]
	recentPosts: [Unknown]
	recentMessages: [Unknown]
	isContributor: Boolean
}
type CategorySelected {
	category: Unknown
}
type Mod {
	userKindWithId: String
	name: String
	isAdmin: Boolean
}
type SingleCommunity {
	userAvatarUrl: String
}
type MailboxSelectionViewState {
	unreadCount: Unknown
	currentSelection: Unknown
}
type ModmailConversationDisplayItem {
	id: String
	date: String
	timestamp: String
	message: String
	richtext: String
	avatarUrl: String
	author: Unknown
	isModOnly: Boolean
	prefixedName: String
	isAuthorHidden: Boolean
	conversation: ModmailConversationInfo
	redditorInfo: ModmailConversationRedditorInfo
}
type ModmailConversationHeader {
	id: String
	date: String
}
type ModmailConversationDisplayActionItem {
	id: String
	date: String
	icon: Icon
	message: String
	author: Unknown
	timestamp: String
	prefixedName: String
	conversation: ModmailConversationInfo
	redditorInfo: ModmailConversationRedditorInfo
}
type ModmailConversationInfo {
	conversationId: String
	isArchived: Boolean
	isUnread: Boolean
	isHighlighted: Boolean
	isMarkedAsHarassment: Boolean
	subredditId: String
	subredditName: String
	subredditIcon: String
	participantName: String
	conversationType: Unknown
	isJoinRequest: Boolean
	isAppeal: Boolean
}
type Default {
	sort: Unknown
	category: Unknown
}
type Search {
	query: String
}
type MarkUnread {
	conversationIds: [Unknown]
}
type Archive {
	conversationIds: [Unknown]
}
type MarkHarassment {
	conversationIds: [Unknown]
}
type Unarchive {
	conversationIds: [Unknown]
}
type Highlight {
	conversationIds: [Unknown]
}
type UnmarkHarassment {
	conversationIds: [Unknown]
}
type MarkAsRead {
	conversationIds: [Unknown]
}
type Unhighlight {
	conversationIds: [Unknown]
}
type HandlePostModAction {
	subredditKindWithId: String
	postModAction: Unknown
}
type HandleCommentModAction {
	subredditKindWithId: String
	commentModAction: Unknown
}
type QueueViewState {
	domainSubreddits: Unknown
	allSubredditsSelected: Boolean
	queueTypeSelectionOption: Unknown
	contentTypeSelectionOption: Unknown
	sortTypeSelectionOption: Unknown
	emptyStateConfig: Unknown
}
type GoToCommunity {
	domainSubreddit: DomainSubreddit
}
type SelectedSubreddits {
	communities: [Unknown]
	allSelected: Boolean
}
type SelectedOption {
	genericSelectionOption: Unknown
}
type QuickCommentRemovalToggleAction {
	toggleAction: Unknown
}
type SelectorClosed {
	title: String
}
type QueueOnboardingViewState {
	currentCard: Unknown
}
type ModeratorsSelected {
	moderators: [Unknown]
}
type SubredditViewState {
	name: String
	icon: String
}
type SubrreditFilterSheet {
	searchValue: String
	selectedSubredditName: String
	moderatedSubreddits: Unknown
}
type ActionSheetState {
	displaySheet: Boolean
	filterSheetType: Unknown
}
type HeaderViewState {
	subredditViewState: SubredditViewState
	noteFilter: Unknown
}
type PostActionPressed {
	postId: String
}
type Data {
	items: [Unknown]
	isApplyButtonEnabled: Boolean
}
type CategoryDeselected {
	category: Unknown
}
type SubredditInfo {
	subredditKindWithId: String
	subredditName: String
	subredditIcon: String
}
type RedditorPress {
	redditorId: String
	redditorName: String
}
type CommentActionPressed {
	commentKindWithId: String
	postId: String
}
type CategorySelected {
	category: Unknown
}
type SelectActionsViewState {
	uiState: Unknown
}
type CommunitySelected {
	domainSubreddit: DomainSubreddit
}
type ActionDeselected {
	action: Unknown
}
type ActionsFilterSelected {
	actions: [Unknown]
}
type ActionCategory {
	category: Unknown
	displayName: String
	selection: Unknown
}
type ModLogViewState {
	items: Unknown
	modLogListState: Unknown
	filterBar: ToolbarViewState
	pageState: Unknown
	compact: Boolean
}
type ActionSelected {
	action: Unknown
}
type ChatMessagePressed {
	roomId: String
	eventId: String
}
type ToolbarViewState {
	subredditName: String
	subredditIcon: String
	filterByActionLabel: String
	filterByActionSelected: Boolean
	filterByModeratorLabel: String
	filterByModeratorSelected: Boolean
}
type HeaderViewState {
	userName: String
	submitEnabled: Boolean
	submitLoaderEnabled: Boolean
}
type UserLogsViewState {
	userName: String
	headerViewState: HeaderViewState
	notesViewState: Unknown
	actionSheetState: ActionSheetState
	shouldHandleBack: Boolean
}
type ModAction {
	action: Unknown
	displayName: String
	isSelected: Boolean
}
type AddUserNoteViewState {
	headerViewState: HeaderViewState
	noteContentViewState: NoteContentViewState
	selectedNoteLabel: Unknown
	previewState: PreviewState
	displaySheet: Boolean
	shouldHandleBack: Boolean
}
type PreviewState {
	linkSelected: Boolean
	contentPreviewUiModel: Unknown
}
type NoteFilterSheet {
	selectedNoteFilter: Unknown
	noteFilters: [Unknown]
	logCountsLoadState: Unknown
}
type LoadedState {
	noteFilter: Unknown
	notes: Unknown
}
type NoteContentViewState {
	maxChars: Unknown
	value: String
}
type HubViewState {
	loadState: Unknown
	dropdownViewState: DropdownViewState
	selectedScreenConfig: Unknown
	hubScreenConfigs: [Unknown]
	navigables: [Unknown]
	hubActions: [Unknown]
	recentModActivityViewState: RecentModActivityViewState
	shouldDisplayAvatarCoachmark: Boolean
	shouldDisplayUnifiedHeaderTooltip: Boolean
}
type ScreensCreated {
	navigables: [Unknown]
}
type ScreenSelected {
	screen: Unknown
}
type OnRecentModActivity {
	recentModActivityElement: RecentModActivityElement
}
type DropdownViewState {
	menuState: Unknown
}
type OnActiveModAvatarClick {
	recentModActivitySubreddit: RecentModActivitySubreddit
}
type Retry {
	hubScreenConfigs: [Unknown]
}
type SingleSubreddit {
	subredditKindWithId: String
	subredditName: String
	subredditIcon: String
}
type CancelEventConfirmationViewState {
	isCancelling: Boolean
	shouldDismiss: Boolean
}
type PresetReviewSheetDependencies {
	sheetArgs: Unknown
}
type OnSelectDuration {
	duration: Unknown
}
type OnEmojiSelected {
	emojiName: String
	emojiUrl: String
}
type MainSectionState {
	currentScreen: Unknown
	shouldDismiss: Boolean
}
type OnCustomHoursSelected {
}
type OnCustomOptionSelected {
	option: Unknown
}
type OnCustomEndTimeSelected {
	endTime: Unknown
}
type CommunityStatusBottomSheetDependencies {
	args: Unknown
	requestTarget: Unknown
	communityStatusEmojiTarget: Unknown
}
type CommunityStatusViewState {
	communityDescription: String
	emojiDetails: EmojiDetails
	isSaveEnabled: Boolean
	shouldDismiss: Boolean
}
type OnScheduleStartTimeSelected {
	startTime: Unknown
}
type CustomSectionState {
	currentScreen: Unknown
	shouldDismiss: Boolean
	timeInfo: EventTimeInfo
	hours: Int
	option: Unknown
	isButtonEnabled: Boolean
	isButtonLoading: Boolean
	errorText: String
	durationLength: Unknown
}
type OnScheduleEndDateSelected {
	endDate: Int
}
type EventTimeInfo {
	time: Unknown
	timeLabel: String
	date: Int
	dateLabel: String
}
type OnScheduleEndTimeSelected {
	endTime: Unknown
}
type StartEventBottomSheetDependencies {
	args: Unknown
	requestTarget: Unknown
}
type OnEditDescription {
	description: String
}
type ConfigCallback {
	templateName: String
	templateId: String
}
type ScheduleSectionState {
	currentScreen: Unknown
	shouldDismiss: Boolean
	startInfo: EventTimeInfo
	endInfo: EventTimeInfo
	isButtonEnabled: Boolean
	isButtonLoading: Boolean
	errorText: String
}
type DurationOptionInfo {
	duration: Unknown
	label: String
}
type DurationSectionState {
	currentScreen: Unknown
	shouldDismiss: Boolean
	durationOptions: [Unknown]
	selectedDuration: Unknown
	isButtonEnabled: Boolean
	isButtonLoading: Boolean
	errorText: String
}
type OnScheduleStartDateSelected {
	startDate: Int
}
type OnCustomEndDateSelected {
	endDate: Int
}
type OnPresetSelected {
	preset: TemporaryEventPreset
}
type TempEventPresetScreenDependencies {
	args: Unknown
}
type PresetReviewViewState {
	presetDescription: String
	sections: [Unknown]
}
type CancelEventConfirmationSheetDependencies {
	args: Unknown
	requestTarget: Unknown
}
type PresetsLoaded {
	presets: [Unknown]
}
type TemporaryEventReviewScreenDependencies {
	args: Unknown
	requestTarget: Unknown
}
type LabelField {
	id: String
	label: String
	isSelected: Boolean
	value: String
}
type OnCommunityStatusEdited {
	communityStatusDetails: CommunityStatusDetails
}
type TempEventsMainScreenDependencies {
	args: Unknown
	tempEventScheduledTarget: Unknown
}
type OnEndCurrentEvent {
	eventId: String
	eventName: String
}
type OnUpcomingEventClicked {
	eventId: String
}
type Content {
	events: Unknown
}
type CurrentEventBanner {
	eventId: String
	eventName: String
	title: String
	subtitle: String
}
type OnTemplateClicked {
	templateName: String
	templateId: String
}
type ToolbarColors {
}
type TempEventInfo {
	eventId: String
	title: String
	subtitle: String
	runtime: String
	a11yDescription: String
}
type ToolbarColors {
}
type TempMainScreenViewState {
	eventBanner: CurrentEventBanner
	currentTab: Unknown
	templateInfo: Unknown
	upcomingEvents: Unknown
	pastEvents: Unknown
	isActiveEventCanceled: Boolean
	isRefreshing: Boolean
}
type OnPastEventClicked {
	eventId: String
}
type Content {
	templates: Unknown
}
type ReviewItem {
	title: String
	subtitle: String
}
type TemplateInfo {
	templateId: String
	title: String
	subtitle: String
	a11yDescription: String
}
type TempEventConfigDetailScreenDependencies {
	args: Unknown
	tempEventScheduledTarget: Unknown
	eventLabelsTarget: Unknown
	communityStatusTarget: Unknown
}
type Loaded {
	eventName: String
	communityDescription: String
	eventLabelField: String
	a11yEventLabelField: String
	labels: Unknown
	areCtasEnabled: Boolean
	saveTemplateState: Unknown
	eventLabelsSheetState: Unknown
	errorMessage: String
	communityStatusEnabled: Boolean
	containsCommunityStatus: Boolean
}
type ViewCurrentEventDetails {
	eventId: String
}
type OnTabSelected {
	tab: Unknown
}
type OnEventLabelSelected {
	labelField: LabelField
}
type ReviewSection {
	title: String
	items: [Unknown]
}
type OnEventNameUpdated {
	name: String
}
type Content {
	eventName: String
	reviewType: Unknown
	sections: [Unknown]
}
type OnCommunityDescriptionUpdated {
	description: String
}
type OnCancelEvent {
	eventName: String
}
type EventLabelsBottomSheetDependencies {
	args: Unknown
	requestTarget: Unknown
}
type Params {
	subredditId: String
	userId: String
	redditId: String
	label: Unknown
	note: String
}
type RecentNoteSuccessData {
	note: Unknown
	totalLogs: Int
}
type Params {
	subredditId: String
	userId: String
	noteId: String
	noteType: Unknown
}
type OnQueryChange {
	newQuery: String
}
type Params {
	subredditId: String
	userId: String
}
type Loaded {
	isSearchEnabled: Boolean
	isSearchState: Boolean
	searchQuery: String
	categories: Unknown
	scrollTo: Unknown
	shouldScrollToSectionHeader: Boolean
}
type OnActionClick {
	action: Unknown
}
type SavedResponseSelectionViewState {
	items: [Unknown]
	isManagementIconVisible: Boolean
	isErrorVisible: Boolean
	isLoading: Boolean
}
type SubredditRule {
	ruleId: String
}
type OnMacroSelected {
	macro: Macro
}
type OnMessageTextChanged {
	value: Unknown
}
type RuleSelected {
}
type ContextSelected {
	responseContext: Unknown
}
type OnMacroSearchRequested {
	query: String
}
type DisplayingContext {
	contexts: [Unknown]
	selectedContext: Unknown
}
type OnNameTextChanged {
	value: String
}
type Error {
}
type ItemClicked {
}
type Fetch {
	subredditKindWithId: String
	bypassRefresh: Boolean
}
type NavigateToEditResponse {
}
type MoveResponseReleased {
	model: Unknown
}
type DeleteRulePressed {
}
type Loaded {
	subredditName: String
	userHasManageSettingsPermission: Boolean
	communityStatus: CommunityStatus
}
type MoveResponse {
}
type ListData {
	items: [Unknown]
	moveableRanges: Unknown
}
type Loaded {
	communityStatus: CommunityStatus
	userHasManageSettingsPermission: Boolean
}
type Preloaded {
	subredditKindWithId: String
	subredditName: String
	communityStatus: CommunityStatus
	userHasManageSettingsPermission: Boolean
}
type OnLinkClicked {
	link: RichTextLink
}
type Loaded {
	subredditName: String
	communityStatusDisplayItem: CommunityStatusDisplayItem
	communityStatusSource: Unknown
	hasPermissionToEdit: Boolean
}
type Loaded {
	subredditName: String
	emojiUrl: String
	emojiName: String
	markdown: String
	formValidationError: Unknown
	isDataChanged: Boolean
	isSaving: Boolean
	isClearing: Boolean
	isUpdateScreen: Boolean
}
type OnImageClicked {
	image: RichTextImage
}
type Args {
	subredditName: String
	pageType: String
}
type Args {
	viewMode: Unknown
	pageType: String
}
type DescriptionContentChanged {
	markdown: String
}
type Args {
	viewMode: Unknown
	pageType: String
}
type Uploading {
	imageFile: String
}
type SuccessfullyUploaded {
	mediaId: String
}
type HeaderImage {
	headerUri: String
}
type UserFlairLabelEdited {
	label: String
}
type MoveResource {
}
type Resource {
	title: String
	url: String
}
type WelcomeMessageViewState {
	text: String
	isRequestInFlight: Boolean
}
type EditResourceViewState {
	title: String
	url: String
	isRequestInFlight: Boolean
	errorMessage: String
}
type HeaderLayoutSelected {
	headerLayoutOption: Unknown
}
type WelcomeMessageEdited {
	message: String
}
type HeaderImage {
	viewState: HeaderImageViewState
}
type ExistingResourceEdited {
	title: String
	url: String
}
type EditResource {
	viewState: EditResourceViewState
}
type HeaderImageViewState {
	selection: Unknown
	hasSubredditBanner: Boolean
	isRequestInFlight: Boolean
	headerImage: HeaderImage
}
type WelcomeMessageSettingsViewState {
	isWelcomeMessageEnabled: Boolean
	isShowOnJoinEnabled: Boolean
	bottomSheetData: Unknown
}
type HeaderLayout {
	viewState: HeaderLayoutViewState
}
type ImageSelected {
	selection: Unknown
}
type UserFlairSelection {
	viewState: UserFlairSelectionViewState
}
type EditResourceClicked {
}
type NewResourceViewState {
	title: String
	url: String
	isRequestInFlight: Boolean
	errorMessage: String
}
type ManageResources {
	viewState: ResourcesViewState
}
type WelcomeMessage {
	viewState: WelcomeMessageViewState
}
type ResourcesViewState {
	resources: [Unknown]
	isRequestInFlight: Boolean
}
type NewResourceEdited {
	title: String
	url: String
}
type OnImagePicked {
	filePath: String
}
type UserFlairSelectionViewState {
	isEnabled: Boolean
	flairLabel: String
	userCanAssignOwnFlair: Boolean
	isRequestInFlight: Boolean
}
type HeaderLayoutViewState {
	selected: Unknown
	isRequestInFlight: Boolean
	error: Unknown
}
type NewResource {
	viewState: NewResourceViewState
}
type Loaded {
	headerImageWidth: Int
	headerImageHeight: Int
	isHeaderSubredditIconVisible: Boolean
	isHeaderSubredditTitleVisible: Boolean
	headerImageUrl: String
	headerMessage: String
	isResourcesEnabled: Boolean
	resources: [Unknown]
	isUserFlairEnabled: Boolean
	userFlairTitle: String
	communityName: String
	communityIconUrl: String
	communityPrimaryColor: String
	userName: String
	userIconUrl: String
	userFlair: WelcomeMessageFlair
}
type OnResourceClick {
	url: String
}
type EmojiSelected {
	emojiName: String
	emojiUrl: String
}
type Loaded {
	subredditName: String
	subredditEmojiList: Unknown
	redditEmojiList: Unknown
}
type EmojiClicked {
	emojiItem: CommunityStatusEmojiItem
}
type Params {
	target: Unknown
	inviter: String
	subredditId: String
	subredditName: String
	subredditType: String
	subredditPrimaryColor: Int
	invitedAsModerator: Boolean
}
type CommunityInviteContextualReminderV2ScreenDependencies {
	params: Params
	dismiss: Unknown
}
type OnMessageUpdated {
	userMessage: String
}
type UserActionSuccessful {
	stringRes: String
}
type UnMuteModal {
	showUnMuteModal: Boolean
}
type LaunchNoteComment {
	postKindWithId: String
	commentKindWithId: String
}
type RequestWithTextInput {
	id: String
	communityName: String
	bannerUrl: String
	communityIcon: String
	description: String
	accessNote: String
	type: Unknown
	hideDismissButton: Boolean
	dismissButtonText: String
	dismissIcon: Icon
	inputHint: String
	userInput: String
	showInputError: Boolean
	inputErrorMessage: String
	primaryButtonText: String
	isSendingRequest: Boolean
}
type ContributionsInfoState {
	subredditContributions: [Unknown]
}
type SubredditContributionState {
	contributionCount: String
	totalKarma: String
	subredditPrefixedName: String
}
type UnApproveModal {
	showUnApproveModal: Boolean
}
type DeleteNote {
	noteId: String
	noteType: Unknown
}
type CommunityAccessRequestDependencies {
	args: Unknown
}
type DeleteNoteModal {
	showDeleteNoteModal: Unknown
	noteId: String
	noteType: Unknown
}
type LaunchNotePost {
	postKindWithId: String
}
type MessageMods {
	accessType: Unknown
}
type OverallInfoState {
	isVerifiedEmail: Boolean
	isApprovedUser: Boolean
	banExpirationTime: String
	muteExpirationTime: String
}
type OptionState {
	isAvailable: Boolean
	isEnabled: Boolean
}
type RequestApproval {
	id: String
	accessType: Unknown
}
type SubredditInfoState {
	subredditDisplayName: String
	totalKarma: String
	postCount: String
	commentCount: String
	banCount: String
	muteCount: String
	submissionRemovedCount: String
}
type DeleteNoteModalState {
	noteId: String
	noteType: Unknown
	showDeleteNoteModal: Boolean
}
type UpdateBlockedStatus {
	isBlockedState: Boolean
}
type HistoryState {
	overallInfo: OverallInfoState
	subredditInfo: SubredditInfoState
	contributionsInfo: ContributionsInfoState
	allRedditInfo: AllRedditInfoState
}
type Loaded {
	userIconUrl: String
	displayName: String
	prefixedUsername: String
	cakeday: String
	redditAge: String
	userIsModerator: Boolean
	totalPostKarma: String
	totalCommentKarma: String
	modNoteUiModel: ModNoteUiModel
	totalNotes: String
	isUserFlairEnable: Boolean
	muteOptionState: OptionState
	banOptionState: OptionState
	isAddModeNoteAvailable: Boolean
	isSendModMailEnabled: Boolean
	approveOptionState: OptionState
	userActionViewState: UserActionViewState
	showUnApproveModal: Boolean
	showUnBanUserModal: Boolean
	showUnMuteModal: Boolean
	deleteNoteModalState: DeleteNoteModalState
	showOverFlowButton: Boolean
	userContributorTier: String
	userGoldBalance: String
	historyState: HistoryState
	historySubredditPostCommentCountsEnabled: Boolean
	tabViewState: Unknown
	redditAgeFixEnabled: Boolean
}
type Error {
	throwable: Unknown
}
type UnBanModal {
	showUnBanModal: Boolean
}
type AllRedditInfoState {
	totalKarma: String
}
type SelectTab {
	tab: Unknown
}
type RequestWithoutTextInput {
	id: String
	communityName: String
	bannerUrl: String
	communityIcon: String
	description: String
	accessNote: String
	hideDismissButton: Boolean
	dismissButtonText: String
	dismissIcon: Icon
	type: Unknown
}
type UserActionViewState {
	isBlocked: Boolean
	isChatEnabled: Boolean
	showBlockModal: Boolean
	prefixedUsername: String
	isInviteCommunityEnabled: Boolean
	isBlockEnabled: Boolean
	isModmailChat: Boolean
}
type OnSecondaryButtonClicked {
	accessType: Unknown
}
type Confirmation {
	accessType: Unknown
}
type MessageTextAreaHasFocus {
	isFocused: Boolean
}
type BanLengthSelectionChanged {
	state: Unknown
}
type SelectionViewState {
	includeState: Unknown
	banLengthSelection: Unknown
}
type OnModeratorClick {
	userName: String
}
type TabSwitch {
	tab: Unknown
}
type ConfirmDeletePrompt {
	item: UserDisplayItem
}
type TabsViewState {
	selectedTab: Unknown
	tabs: Unknown
}
type OnQueryChange {
	newQuery: String
}
type OnMoreClick {
	item: ModeratorDisplayItem
}
type OnQueryChange {
	newQuery: String
}
type ConfirmDeletePrompt {
	userName: String
}
type OnTogglePermission {
	permission: Unknown
}
type OnQueryChange {
	newQuery: String
}
type ModeratorsAddViewState {
	isEdit: Boolean
	userName: String
	validationState: Unknown
	errorMessage: String
	initialPermissions: Unknown
	permissions: Unknown
}
type OnModeratorEditPermissionClick {
	item: ModeratorDisplayItem
}
type BanRuleChanged {
	content: String
}
type IncludeMessageChanged {
	state: Unknown
}
type OnEditableQueryChange {
	newQuery: String
}
type OnUserEditClick {
	item: UserDisplayItem
}
type BanUserViewState {
	isEdit: Boolean
	userName: String
	validationState: Unknown
	errorMessage: String
	banRuleSelection: String
	banLengthDay: Int
	messageToUser: String
	modNote: String
	selectionViewState: SelectionViewState
	applyEnabled: Boolean
	loading: Boolean
	contentPreviewUiModel: Unknown
}
type ContentPreviewClicked {
	postId: String
	commentId: String
}
type UpdateSheetVisibility {
	isVisible: Boolean
}
type OnMoreClick {
	item: UserDisplayItem
}
type OnUserRemoveClick {
	item: UserDisplayItem
}
type BanMessageToUserChanged {
	content: String
}
type OnUserAdded {
	userName: String
}
type MuteLengthSelectionChanged {
	selection: Unknown
}
type OnQueryChange {
	newQuery: String
}
type OnUserClick {
	userName: String
}
type BanLengthDayChanged {
	content: String
}
type OnModeratorRemoveClick {
	userName: String
}
type ApproveUserViewState {
	userName: String
	validationState: Unknown
	errorMessage: String
	approveRequestInFlight: Boolean
}
type OnQueryChange {
	newQuery: String
}
type OnKeyBoardStatusChange {
	isOpened: Boolean
}
type MuteUserViewState {
	isEdit: Boolean
	userName: String
	validationState: Unknown
	errorMessage: String
	modNote: String
	selectedMuteLength: Unknown
	banRequestInFlight: Boolean
	muteLengthDialogVisible: Boolean
}
type SubjectTextAreaHasFocus {
	isFocused: Boolean
}
type SubjectChange {
	subject: String
}
type OnQueryChange {
	newQuery: String
}
type BanModNoteChanged {
	content: String
}
type ModNoteChanged {
	content: String
}
type MessageChange {
	message: String
}
type BlockModal {
	showBlockModal: Boolean
}
type Loaded {
	description: String
}
type OnLastModActionElementReceived {
	lastModActionElement: LastModActionElement
}
type Data {
	postKindWithId: String
	subredditKindWithId: String
}
type AdditionalInfo {
	subredditKindWithId: String
	subredditName: String
	canManageCommunityHighlights: Boolean
}
type Approve {
	commentId: String
}
type UndistinguishAsMod {
	commentId: String
}
type IgnoreAndApprove {
	postWithKindId: String
}
type AdjustControl {
	postWithKindId: String
}
type Approve {
	postWithKindId: String
}
type UndistinguishAsMod {
	postWithKindId: String
}
type BlockAccount {
	postWithKindId: String
}
type CopyText {
	postWithKindId: String
	text: String
}
type ContextAction {
	postWithKindId: String
	extras: Unknown
}
type DistinguishAsAdmin {
	postWithKindId: String
}
type DistinguishAsMod {
	postWithKindId: String
}
type StickyProfile {
	postWithKindId: String
}
type TopModActionViewStates {
	removeState: Stateless
	lockState: Stateful
	shareState: Stateless
	approveState: Stateless
}
type Highlight {
	postWithKindId: String
}
type UnstickyProfile {
	postWithKindId: String
}
type ModActionViewStates {
	reportState: Stateless
	ignoreReportState: Stateful
	stickyProfileState: Stateful
	highlightsState: Stateful
	flairState: Stateless
	markNsfwState: Stateful
	markSpoilerState: Stateful
	copyState: Stateless
	adjustState: Stateless
	modDistinguishState: Stateful
	adminDistinguishState: Stateful
	blockAccountState: Stateful
	saveState: Stateful
	hideState: Stateful
	contextActionsState: Unknown
}
type Report {
	postWithKindId: String
}
type Share {
	postWithKindId: String
}
type Unhighlight {
	postWithKindId: String
}
type MarkSpoiler {
	postWithKindId: String
}
type Loaded {
	isLoading: Boolean
	topModActionState: TopModActionViewStates
	modActionStates: ModActionViewStates
	previewState: Unknown
}
type UndistinguishAsAdmin {
	postWithKindId: String
}
type ContextAction {
	commentId: String
	extras: Unknown
}
type Share {
	commentId: String
}
type Unhide {
	postWithKindId: String
}
type Lock {
	postWithKindId: String
}
type BlockAccount {
	commentId: String
}
type UnmarkSpoiler {
	postWithKindId: String
}
type Report {
	commentId: String
}
type Unsave {
	commentId: String
}
type MarkNsfw {
	postWithKindId: String
}
type Unsave {
	postWithKindId: String
}
type UnblockAccount {
	commentId: String
}
type Unlock {
	postWithKindId: String
}
type Remove {
	commentId: String
}
type Save {
	postWithKindId: String
}
type Loaded {
	isLoading: Boolean
	topModActionState: TopModActionViewStates
	modActionStates: ModActionViewStates
	previewState: Unknown
}
type UnignoreReports {
	commentId: String
}
type Lock {
	commentId: String
}
type Remove {
	postWithKindId: String
}
type UnmarkNsfw {
	postWithKindId: String
}
type UnblockAccount {
	postWithKindId: String
}
type UnignoreReports {
	postWithKindId: String
}
type CopyText {
	commentId: String
	text: String
}
type Hide {
	postWithKindId: String
}
type Unsticky {
	commentId: String
}
type ChangePostFlair {
	postWithKindId: String
	flair: Unknown
}
type UndistinguishAsAdmin {
	commentId: String
}
type DistinguishAsAdmin {
	commentId: String
}
type TopModActionViewStates {
	removeState: Stateless
	lockState: Stateful
	shareState: Stateless
	approveState: Stateless
}
type ModActionViewStates {
	reportState: Stateless
	ignoreReportState: Stateful
	stickyState: Stateful
	copyState: Stateless
	modDistinguishState: Stateful
	adminDistinguishState: Stateful
	blockAccountState: Stateful
	saveState: Stateful
	contextActionsState: Unknown
}
type Save {
	commentId: String
}
type DistinguishAsMod {
	commentId: String
}
type Sticky {
	commentId: String
}
type IgnoreAndApprove {
	commentId: String
}
type ActionHistoryViewState {
	loadState: Unknown
	actionHistoryPostInfoUiModel: ActionHistoryPostInfoUiModel
}
type Loaded {
	highlightedItems: Unknown
	canManage: Boolean
	expanded: Boolean
}
type Loading {
	expanded: Boolean
}
type HighlightedItemAppContentTagClick {
	data: Data
}
type RecentModActivityViewState {
	loadState: Unknown
	lastModActionElement: LastModActionElement
	recentModActivityElement: RecentModActivityElement
}
type CommunityHighlightsResult {
	communityHighlights: [Unknown]
	additionalInfo: AdditionalInfo
	isLoading: Boolean
	isError: Boolean
}
type DisplayLabelType {
	list: Unknown
	selectedLabel: Unknown
}
type Args {
	subredditKindWithId: String
	postKindWithId: String
	analyticsPageType: String
}
type Delete {
	id: String
}
type Loaded {
	highlightedPosts: Unknown
	intermediateHighlightedPosts: Unknown
	isLoading: Boolean
	deleteConfirmDialogId: String
	blurNsfw: Boolean
}
type DeleteConfirmDialog {
	id: String
}
type Edit {
	id: String
}
type ManageCommunityHighlightsDependencies {
	args: Unknown
}
type MoveCommunityHighlight {
	id: String
}
type DisplayExpiresAt {
	list: [Unknown]
	selectedExpiresAt: Unknown
}
type UpdateCommunityHighlightViewState {
	subredditId: String
	postId: String
	isNfsw: Boolean
	title: String
	postFlair: PostFlair
	authorIcon: String
	image: Image
	highlightingOptions: HighlightingOptions
	bottomSheetState: Unknown
	isLoading: Boolean
	flairUtil: Unknown
	isUpdateScreen: Boolean
	isDataChanged: Boolean
}
type UpdateCommunityHighlightDependencies {
	args: Unknown
	updateCommunityHighlightScreenTarget: Unknown
}
type HighlightingOptions {
	labelType: Unknown
	expiresAt: Unknown
}
type HighlightedItemClick {
	data: Data
}
type Parameters {
	recentModActivitySubreddit: RecentModActivitySubreddit
}
type Error {
	expanded: Boolean
}
type OnRecentModActivityElementReceived {
	recentModActivityElement: RecentModActivityElement
}
type RulesResult {
	isLoading: Boolean
	rulesAction: Unknown
	rules: [Unknown]
	isFailure: Boolean
}
type PromptCreateIfNeeded {
}
type MoveRule {
	id: String
}
type NameContentChanged {
	content: String
}
type EditRuleViewState {
	editMode: Boolean
	name: String
	nameMaxChars: Unknown
	description: String
	descriptionMaxChars: Unknown
	reason: String
	reasonMaxChars: Unknown
	contentTypes: Unknown
	saveEnabled: Boolean
	saveLoading: Boolean
	showDiscardDialog: Boolean
	shouldHandleBack: Boolean
}
type PromptDeleteIfNeeded {
	id: String
}
type ReasonContentChanged {
	content: String
}
type MoveRuleReleased {
	id: String
}
type ContentTypesListChanged {
	list: [Unknown]
}
type Edit {
	id: String
	name: String
	description: String
	reason: String
	contentTypes: Unknown
}
type ContentTypesListInitialize {
	list: [Unknown]
}
type Delete {
	id: String
}
type LoadedState {
	editing: Boolean
	showMaxRulesDialog: Boolean
	deleteConfirmDialogId: String
	rules: Unknown
	rulesAction: Unknown
	reorderable: Boolean
	savedResponseEntryToRulesFixEnabled: Boolean
}
type Fetched {
	data: [Unknown]
	ruleSelected: String
}
type DescriptionContentChanged {
	content: String
}
type ReasonSelectionClickable {
	rule: String
}
type Unlock {
	commentId: String
}
type ModInsightsScreenDependencies {
	args: Args
	updateTarget: Unknown
}
type SelectModeratorsViewState {
	uiState: Unknown
}
type ModeratorDeselected {
	userName: String
}
type SubredditDisplayModel {
	id: String
	subredditName: String
	iconUrl: String
	isSelected: Boolean
	modPermissions: DomainModPermissions
}
type CommunityRecapViewState {
	isRecapEnabled: Boolean
}
type SubredditSelected {
	subredditId: String
	subredditName: String
}
type Data {
	modsList: Unknown
}
type InsightsDetailClicked {
	timeFrame: Unknown
	insightsViewSelection: Unknown
}
type GenericSelectionViewState {
	selectedOption: Unknown
	config: GenericSelectionParams
}
type CommunityRecapEnableChanged {
	isEnabled: Boolean
}
type OnOptionSelected {
	option: Unknown
}
type ModeratorSelected {
	userName: String
}
type TimeFrameSelected {
	timeFrame: Unknown
}
type ModeratorsDisplayModel {
	userName: String
	isSelected: Boolean
}
type OnChangeInsightsViewFromBottomSheetSelected {
	insightsViewSelection: Unknown
	timeFrame: Unknown
	event: Unknown
}
type ModInsightsDetailViewState {
	content: Unknown
	timeFrames: Unknown
	selectedTimeFrame: Unknown
	load: Unknown
	insightsViewSelection: Unknown
}
type OnInsightsViewSelected {
	selectedInsightsView: Unknown
}
type Args {
	subredditKindWithId: String
	subredditName: String
	isRecapEligible: Boolean
	isRecapEnabled: Boolean
}
type ModInsightsViewState {
	content: Unknown
	timeFrames: Unknown
	selectedTimeFrame: Unknown
	load: Unknown
	communityRecapViewState: CommunityRecapViewState
	isParityWorkEnabled: Boolean
}
type TimeFrameSelected {
	timeFrame: Unknown
}
type ModInsightsSummaries {
	modInsightsSummariesUi: ModInsightsSummariesUi
}
type ScreenViewAnalytics {
	subredditId: String
	subredditName: String
}
type SubredditDeselected {
	subredditInfo: SubredditDisplayModel
}
type SelectCommunityViewState {
	uiState: Unknown
}
type Data {
	subredditList: Unknown
}
type SubredditSelectionDismissed {
	defaultDomainSubreddit: DomainSubreddit
}
type SubredditSelected {
	subredditInfo: SubredditDisplayModel
}
type SelectCommunitiesViewState {
	uiState: Unknown
	isApplyButtonEnabled: Boolean
}
type Data {
	subredditList: Unknown
}
type SubredditSelected {
	domainSubreddit: DomainSubreddit
}
type Content {
	dataUi: ModInsightsSummaryDataUi
	insightsViewSelection: Unknown
}
type Args {
	subredditName: String
	subredditKindWithId: String
	formerList: [Unknown]
	updatedList: [Unknown]
}
type KeySizePair {
	key: String
}
type BundleMetrics {
	className: String
	argsSize: [Unknown]
	instanceStateSize: [Unknown]
	instanceStateDepth: KeySizePair
	largestBSSRLevel1EntryCount: Int
	largestBSSRLevel2Entry: KeySizePair
	largestBSSRLevel2ValueType: String
}
type ModReorderConfirmationDependencies {
	args: Args
	requestTarget: Unknown
}
type ModReorderListScreenDependencies {
	args: Unknown
	screenTarget: Unknown
}
type CurrentCommunityTypeSettingsDependencies {
	args: Unknown
	requestTarget: Unknown
	contributionTypeChangeTarget: Unknown
}
type NewTypeSelected {
	type: Unknown
}
type UpdateRestrictionType {
	restrictionType: Unknown
}
type ToggleContributorRequests {
	allowRequests: Boolean
}
type ShowRequestApprovedToast {
	updatedNsfwSetting: Boolean
	updatedVisibilitySetting: Unknown
}
type Loading {
	visibilityType: Unknown
	visibilityTypeA11y: Unknown
	visibilityDescription: String
	visibilityIcon: Icon
	currentNsfwSetting: String
	currentNsfwSettingA11y: Unknown
	currentNsfwSentiment: Unknown
	currentNsfwIcon: Icon
	alterationsEnabled: Unknown
	areContributionRequestsEnabled: Boolean
}
type OperationError {
	errorMessage: String
}
type ShowRequestError {
	errorMessage: String
}
type Loaded {
	visibilityType: Unknown
	visibilityTypeA11y: String
	visibilityDescription: String
	visibilityIcon: Icon
	currentNsfwSetting: String
	currentNsfwSettingA11y: String
	currentNsfwSentiment: Unknown
	currentNsfwIcon: Icon
	alterationsEnabled: Boolean
	areContributionRequestsEnabled: Boolean
	contributionSettings: ContributionSettings
	requestError: Unknown
}
type ContributionSettings {
	currentRestrictionType: Unknown
	typeLabel: String
	description: String
	allowRequests: Boolean
	isRequestToggleEnabled: Boolean
	privacyType: Unknown
}
type SelectRestrictionType {
	currentRestrictionType: Unknown
}
type CommunityTypeVisibilitySettingsDependencies {
	args: Unknown
	requestTarget: Unknown
}
type TypeDetails {
	privacyType: Unknown
	header: Unknown
	description: String
	icon: Icon
}
type CommunityTypeMatureSettingsDependencies {
	args: Unknown
	requestTarget: Unknown
}
type CommunityTypeVisibilitySettingsViewState {
	currentTypeDetails: TypeDetails
	selectedType: Unknown
	remainingTypeDetails: [Unknown]
}
type EditRemovalReasonViewState {
	editMode: Boolean
	title: String
	titleMaxChars: Unknown
	message: String
	messageMaxChars: Unknown
	saveEnabled: Boolean
	saveLoading: Boolean
	showDiscardDialog: Boolean
}
type OnQuickCommentRemovalOff {
	subredditKindWithId: String
}
type Loaded {
	removalReasons: Unknown
	removalReasonsAction: Unknown
	showManageRemovalReasonsBtn: Boolean
	shouldDisplayShowStickySettingsOffTooltip: Boolean
	shouldDisplayShowStickySettingsOnTooltip: Boolean
	savedStickySettings: Unknown
	selectedReasonId: String
}
type NotifySelectionChanged {
	state: Unknown
}
type SelectionViewState {
	notifySelection: Unknown
	sendMessage: Unknown
	lockState: Unknown
}
type LockStateChanged {
	state: Unknown
}
type FooterViewState {
	submitEnabled: Boolean
	submitLoaderEnabled: Boolean
}
type OnItemClicked {
	id: String
	title: String
	message: String
}
type TextChanged {
	message: String
}
type Empty {
	showManageRemovalReasonsBtn: Boolean
	subredditDisplayName: String
}
type RemovalReasonsDetailViewState {
	title: String
	subredditName: String
	subredditIcon: String
	modTeamName: String
	userName: String
	avatarUiModel: Unknown
	messageViewState: MessageViewState
	selectionViewState: SelectionViewState
	footerViewState: FooterViewState
	loadingTemplateViewState: Boolean
	saveSettingsAsDefault: Boolean
	shouldDisplayNoMessageCoachmark: Boolean
}
type SendMessageStateChanged {
	state: Unknown
}
type StickySettingsTooltipDismissed {
	isToggled: Boolean
}
type MessageViewState {
	maxChars: Unknown
	value: String
}
type OnQuickCommentRemovalOn {
	subredditKindWithId: String
}
type TitleContentChanged {
	content: String
}
type MessageContentChanged {
	content: String
}
type LoadedState {
	postsPermissionGranted: Boolean
	quickCommentRemoveEnabled: Boolean
}
type CommunityTypeMatureSettingsViewState {
	headerText: Unknown
	descriptionText: String
	icon: Icon
}
type OnUserTextInput {
	input: String
}
type ContributionTypeBottomSheetDependencies {
	args: Unknown
	requestTarget: Unknown
}
type CommunityTypeRequestBottomSheetDependencies {
	args: Unknown
	requestTarget: Unknown
}
type RestrictionItem {
	restrictionType: Unknown
	label: String
	description: String
	isSelected: Boolean
	contentDescription: String
}
type OnRestrictionSelected {
	restrictionType: Unknown
}
type ContributionTypeViewState {
	selectedRestrictionType: Unknown
	isSaveButtonEnabled: Boolean
	isLoading: Boolean
	dismissBottomSheet: Boolean
	restrictionItems: [Unknown]
}
type RequestWithTextInput {
	communityIcon: String
	header: String
	description: Unknown
	descriptionHint: String
	primaryCta: String
	isCtaEnabled: Boolean
	shouldHideSheet: Boolean
	showLoadingState: Boolean
	hint: String
	hintA11yInfo: String
	userInput: String
	showInputError: Boolean
	inputErrorText: String
}
type OnLearnMoreClicked {
	item: String
}
type CommunityTypeConfirmationBottomSheetDependencies {
	args: Unknown
}
type BadgeIndicator {
	style: Unknown
}
type BadgeIndicators {
	messageTab: BadgeIndicator
	chatTab: BadgeIndicator
	activityTab: BadgeIndicator
	appBadge: BadgeIndicator
	directMessages: BadgeIndicator
	inboxTab: BadgeIndicator
}
type SearchHistoryRecord {
	query: String
	searchingTimestamp: Int
}
type CachedNudgeEvents {
	cachedTimestampMillis: Int
	events: [Unknown]
}
type Disabled {
	userItem: UserAvatar
}
type LoadShowcase {
	hardRefresh: Boolean
	loadToken: String
}
type Empty {
	userItem: UserAvatar
}
type Showcase {
	items: Unknown
	showViewAll: Boolean
}
type NftClick {
	inventoryId: String
}
type ViewShowcaseContentState {
	userNftState: Unknown
	username: String
	userDisplayName: String
	items: Unknown
	analyticsData: ViewShowcaseAnalyticsData
}
type WearingNft {
	avatarUrl: String
	backgroundUrl: String
}
type OnCollectibleClicked {
	inventoryItemId: String
}
type ViewShowcaseState {
	contentState: Unknown
	showEditButton: Boolean
	isComfyEnabled: Boolean
}
type ViewShowcaseParams {
	userIdentifier: Unknown
	analyticsReason: Unknown
}
type OnComfySwitched {
	newValue: Boolean
}
type Loading {
	userItem: UserAvatar
}
type Uninitialized {
	userItem: UserAvatar
}
type UserNft {
	nftInventoryId: String
	imageUrl: String
	backgroundImageUrl: String
}
type InitializeShowcase {
	loadToken: String
}
type UserAvatar {
	nftInventoryId: String
	imageUrl: String
	backgroundImageUrl: String
}
type ErrorInitializing {
	userItem: UserAvatar
}
type ShowcaseItemUiModel {
	name: String
	collectionSize: Int
	inventoryItemId: String
	imageUrl: String
}
type ErrorLoading {
	userItem: UserAvatar
}
type ViewShowcaseAnalyticsData {
	userId: String
	username: String
	userHasSnoovatar: Boolean
	userIsWearingNft: Boolean
}
type UserAvatar {
	nftViewState: Unknown
}
type EditShowcaseViewState {
	content: Unknown
	showFirstTimeUsePopup: Boolean
}
type EditShowcaseContentState {
	items: Unknown
	isComfyEnabled: Boolean
	isSelectAllEnabled: Boolean
	isDeselectAllEnabled: Boolean
	displayOnProfile: Boolean
	isSaving: Boolean
}
type OnComfySwitched {
	newValue: Boolean
}
type InitialEditShowcaseData {
	showcase: Showcase
	isUserWearingCollectible: Boolean
}
type OnItemClicked {
	inventoryItemId: String
}
type UserNft {
	nftViewState: Unknown
}
type VisibilityProviderHolder {
	visibilityProvider: Unknown
}
type OnDeepLinkClick {
	url: String
}
type ExplainerScreenDependencies {
	nudgeId: String
}
type InventoryItemTransferStatusData {
	transferId: String
	status: Unknown
}
type Loaded {
	items: Unknown
}
type Loaded {
	contentItems: [Unknown]
}
type Analytics {
	paneName: Unknown
	pageType: Unknown
	source: Unknown
}
type CarouselInput {
	userProfileNftInventoryId: String
	userProfileNftName: String
	userProfileNftUrl: String
	userProfileNftBackgroundUrl: String
	userId: String
	userName: String
	allowDataPersistence: Boolean
	refreshContentOnBecomingVisible: Boolean
	animateItemPlacement: Boolean
	avatarClickNavigation: Unknown
	analytics: Analytics
}
type OnDisplayOnProfileSwitched {
	newValue: Boolean
}
type ApiError {
	errorCodes: Unknown
}
type CreateOrderException {
	reason: Unknown
}
type Unknown {
	canRetry: Boolean
}
type Success {
	redditOrderId: String
}
type VerificationException {
	reason: Unknown
}
type Params {
	storefrontListingId: String
	pricePackageId: String
	sku: Unknown
	storefrontListing: Listing
	inventoryItem: InventoryItem
}
type ErrorMapping {
	errorMessage: String
	exception: Unknown
}
type DebugOptions {
	prePaymentOptions: [Unknown]
	prePaymentSelectedOption: Unknown
	paymentOptions: [Unknown]
	paymentSelectedOption: Unknown
	postPaymentOptions: [Unknown]
	postPaymentSelectedOption: Unknown
	debugPaymentDataSelected: Unknown
	paymentDataList: [Unknown]
}
type Loaded {
	address: Address
}
type ShowVault {
	vaultAddress: String
}
type NftTransferError {
	message: String
}
type CacheItem {
	request: Request
	showcase: Showcase
}
type Start {
	request: Request
}
type Done {
	request: Request
	showcase: Showcase
}
type ListingItemPaymentData {
	redditSkuDetails: Unknown
	pricePackageId: String
	listingId: String
}
type StorefrontInventory {
	cardUiModel: NftCardUiModel
	title: String
	description: String
	benefits: [Unknown]
	outfitId: String
	nftStatusTag: [Unknown]
	nftArtist: NftArtist
	utilities: [Unknown]
	listing: Listing
}
type TransferResultUiModel {
	title: String
	icon: Unknown
}
type Loaded {
	screenTitle: NftCardUiModel
	contentType: Unknown
	actionButton: ActionButtonUiModel
}
type OnItemPositionChange {
	position: NftDropUiModel
}
type ClaimDependencies {
	claimCallback: Unknown
	vaultEventListener: Unknown
	params: Params
}
type OnGenerateClick {
	selectedDrop: NftDropUiModel
}
type CardState {
}
type Params {
	navigationOrigin: Unknown
	claimId: String
}
type Args {
	navigationOrigin: Unknown
	itemId: String
	outfitId: String
	isOwnedByUser: Boolean
	price: String
	isAvailable: Boolean
	totalQuantity: Int
	inventoryItemAnalytics: MarketplaceInventoryItemAnalyticsData
	listingAnalytics: MarketplaceStorefrontListingAnalyticsData
	deepLinkParams: DeepLink
	isMinted: Boolean
	listingStatus: Unknown
}
type CtaUiState {
	ctaConfig: Unknown
	isSaveNftAvatarLoading: Boolean
	isClaimNftLoading: Boolean
	isMakeItYourAvatarLoading: Boolean
	isViewYourNftLoading: Boolean
	isDynamicClaimNftLoading: Boolean
}
type VaultEventReceived {
	event: Unknown
}
type ScreeAnimationState {
	introVideoState: Unknown
	introVideoDuration: Unknown
	revealVideoDuration: Boolean
	shouldStartRevealAnimation: Boolean
	shouldStartFinalAnimation: Boolean
}
type Intro {
	pageContext: String
	imageUrl: String
	header: String
	description: String
	ctaText: String
	screenMetadata: NftScreenMetadata
	isGenerateButtonLoading: Boolean
	isGenerateButtonEnabled: Boolean
}
type AnalyticsParams {
	reason: Unknown
	choiceId: String
	selectionCount: Int
	selectedId: String
	selectedName: String
}
type Selection {
	pageContext: Unknown
	drops: [Unknown]
	initialDropPosition: String
	dropDescription: String
	ctaText: Unknown
	screenMetadata: NftScreenMetadata
	isGenerateButtonLoading: Boolean
	isGenerateButtonEnabled: Boolean
}
type NftScreenMetadata {
	backgroundImage: Local
	pdpBackgroundImage: Local
	backgroundRevealAnimationUri: Unknown
}
type SectionInfoUiModel {
	text: Unknown
}
type RevealNft {
	imageUrl: String
	nftCardUiModel: NftCardUiModel
	screenMetadata: NftScreenMetadata
}
type ActionButtonUiModel {
	enabled: Boolean
	type: Unknown
}
type Failed {
	recoverable: Boolean
}
type BlockchainLinksUiModel {
	explorer: String
	ipfs: String
	ipfsMetadata: String
}
type Inventory {
	cardUiModel: NftCardUiModel
	title: String
	description: String
	benefits: [Unknown]
	outfitId: String
	nftStatusTag: [Unknown]
	nftArtist: NftArtist
	utilities: [Unknown]
}
type ActionClick {
	type: Unknown
}
type TransferInitializationError {
	idempotencyKey: String
}
type AwaitingTransferFinish {
	transferId: String
	recipientAddress: String
	targetUserId: String
}
type Loaded {
	inventoryItemAnalytics: MarketplaceInventoryItemAnalyticsData
	nftCardUiModel: NftCardUiModel
	availableTransferAmount: Boolean
}
type InputAddressUiModel {
	inputValue: String
	validationType: Unknown
	trailingIcon: Int
	validationText: Int
	showTrailingLoading: Boolean
	userProfileImage: String
	validationTextColor: Unknown
	sectionInfo: SectionInfoUiModel
	isTransferInputEnabled: Boolean
	isLinkTextFixEnabled: Boolean
}
type UiState {
	inventoryItem: Unknown
	blockchainLinks: BlockchainLinksUiModel
	shareUrl: String
	showSecureYourNft: Boolean
	showViewContent: Boolean
	backgroundRes: Unknown
	showLoadingSpinner: Boolean
	isOwnedByUser: Boolean
	isDebugOptionAvailable: Boolean
}
type LastSuccessfulResult {
	storefrontListing: Listing
	inventoryItem: InventoryItem
}
type InventoryItemId {
	id: String
	customBackground: Unknown
	navigationOrigin: Unknown
	analyticsOrigin: Unknown
}
type Listing {
	id: String
	isAvailable: Boolean
	status: Unknown
	totalQuantity: Int
}
type NftTransferDependencies {
	itemId: String
	nftTransferUpdateListener: Unknown
}
type InputValueChange {
	value: String
}
type NftUrl {
	url: String
	navigationOrigin: Unknown
	analyticsOrigin: Unknown
}
type DeepLink {
	chainId: String
	contractAddress: String
	tokenId: String
	deeplinkType: Unknown
	navigationOrigin: Unknown
	analyticsOrigin: Unknown
}
type StorefrontListingId {
	id: String
	navigationOrigin: Unknown
	analyticsOrigin: Unknown
	galleryPreviewTypeAnalytics: String
}
type CompletePurchaseViewState {
	vaultAddress: Address
}
type Error {
	request: Request
}
type Request {
	numItems: [Unknown]
}
type Initial {
	isCtaEnabled: Boolean
	ctaInfo: Unknown
	isI18nMarketingTextEnabled: Boolean
}
type OnPageLoaded {
	url: String
}
type OnVerifyEmailClicked {
	email: String
}
type TaxAndBankInfoVerificationStartedState {
	url: String
	showLoadingIndicator: Boolean
}
type OnboardingDependencies {
	verificationStatus: VerificationStatus
	urlChangeListener: Unknown
}
type OnActivityResult {
	requestCode: Unknown
}
type OnUrlChanged {
	url: String
}
type PendingVerification {
	email: String
}
type Verified {
	email: String
}
type CarouselItem {
	text: String
	icon: [Unknown]
}
type BankAndTaxInfoVerification {
	url: String
	urlToDisplayHeader: String
	showLoadingIndicator: Boolean
	webViewClient: Unknown
}
type OnPermissionResult {
	requestCode: [Unknown]
}
type PersonalInfoVerificationStartedState {
	url: String
	showLoadingIndicator: Boolean
}
type PersonalInfoVerification {
	url: String
	urlToDisplayOnHeader: String
	showLoadingIndicator: Boolean
	webViewClient: Unknown
}
type Initial {
	emailVerificationStatus: Unknown
	taxAndBankVerification: Unknown
	personalInfoVerificationStatus: Unknown
	isPersonaIdvEnabled: Boolean
	isi18nEnabled: Boolean
	isAwardsEnabled: Boolean
}
type MarketingScreenDependencies {
	verificationStatus: VerificationStatus
}
type Found {
	nudge: AvatarNudge
}
type NotificationSettings {
	enabled: Boolean
	soundEnabled: Boolean
	badgeEnabled: Boolean
	overrideDnd: Boolean
}
type Params {
	initialTab: Unknown
}
type ComposedNotification {
	notificationBuilder: Unknown
	tag: String
	group: String
}
type PostFollowViewState {
	showBackButton: Boolean
}
type PostFollowBottomSheetScreenDependencies {
	followPostFunc: Unknown
}
type DismissClick {
	bannerName: String
}
type MissingData {
	missingNotificationsCount: [Unknown]
	afterCursor: String
}
type OptionSelected {
	optionUiModel: Unknown
}
type NotNowClick {
	bannerName: String
}
type NotificationActionClick {
	id: String
}
type OverflowIconClicked {
	notificationId: String
}
type TurnOnClick {
	bannerName: String
}
type NotificationClick {
	id: String
}
type OptionsScreenShown {
	uiModel: SelectOptionsScreenUiModel
}
type NotificationView {
	id: String
}
type SecondaryCtaClick {
	banner: InboxBannerNotification
}
type View {
	banner: InboxBannerNotification
}
type Click {
	banner: InboxBannerNotification
}
type NotificationsViewState {
	items: [Unknown]
	showLoadingFooter: Boolean
	loadMoreErrorMessage: String
	showSwipeToRefresh: Boolean
	key: String
}
type DismissClick {
	banner: InboxBannerNotification
}
type NotificationsScreenState {
	notifications: NotificationsViewState
	emptyLayout: Unknown
	errorMessage: String
	showLoadingSnoo: Boolean
	authContainer: Boolean
	missingNotificationsCount: Int
}
type PrimaryCtaClick {
	banner: InboxBannerNotification
}
type View {
	bannerName: String
}
type Data {
	notifications: [Unknown]
	afterCursor: String
	bannerNotifications: [Unknown]
	notificationUpsellBanner: Unknown
}
type MessageThreadErrorEvent {
	errorMessage: String
}
type ComposeMessageSuccess {
	requestId: String
	response: Unknown
}
type ComposeMessageFailure {
	requestId: String
	exception: Unknown
}
type NotificationSettingsViewState {
	shouldHide: Boolean
	title: String
	rows: Unknown
	showBackButton: Boolean
}
type OnSettingsOptionClick {
	option: Unknown
}
type NotificationSettingsDependencies {
	options: NotificationSettingsOptionsRow
}
type InboxActionsBottomSheetScreenDependencies {
	markReadCallback: Unknown
}
type InboxItemActionsViewState {
	shouldHide: Boolean
	showNotificationSettingsOption: Boolean
	models: Unknown
}
type InboxItemActionsBottomSheetScreenDependencies {
	model: SelectOptionsScreenUiModel
	selectOptionHandler: Unknown
	showNotificationSettingsOption: Boolean
	mailroomMessageType: String
}
type InboxActionsViewState {
	shouldHide: Boolean
}
type OnManageItemNotificationSettingsClick {
	selectOptionUiModel: SelectOptionTextUiModel
}
type InboxDetails {
	category: String
	subTitle: String
	icon: Icon
	option: Unknown
	selected: Boolean
}
type OnNotificationPermissionResult {
	isGranted: Boolean
}
type PrePromptBottomSheetScreenDependencies {
	promptStyle: Unknown
	showBackButton: Unknown
	navigateBack: Unknown
}
type OnScreenIsVisible {
	areSystemNotificationsEnabled: Boolean
}
type OnNotificationPermissionResult {
	isGranted: Boolean
}
type PrePromptScreenDependencies {
	promptStyle: Unknown
	showBackButton: Boolean
	navigateBack: Unknown
	promptCallback: Unknown
}
type PrePromptViewState {
	isSkippable: Unknown
	showBackButton: Boolean
}
type NotificationReEnablementArgs {
	entryPoint: Unknown
	promptStyle: Unknown
	enablementType: Unknown
	isFixedEventHandlingEnabled: Boolean
}
type ScheduleParams {
	notificationId: String
	delayInMillis: Int
	useDifferentRequestCode: Boolean
	shouldSendCancelEvent: Boolean
}
type Parameters {
	isNotification: Boolean
	notificationId: String
	notificationType: Unknown
	isNew: Boolean
}
type SendSuppressedReceiveEvent {
	suppressReason: String
}
type Success {
	gameTitle: String
	gameSubtitle: String
}
type OnCardVisible {
	eventId: String
}
type OnEventClick {
	eventId: String
}
type Success {
	events: Unknown
}
type Completed {
	inquiryId: String
}
type Record {
	value: NotificationAnnouncement
	timestamp: Int
}
type NotificationAnnouncementActionsBottomSheetViewState {
	displayOptions: DisplayOptions
}
type LaunchActionsScreen {
	notificationAnnouncementId: String
	deepLink: String
	isHideDisplayed: Unknown
	optFlags: Unknown
	authorId: String
	authorName: String
}
type AnnouncementText {
	richTextElements: Unknown
	plainText: String
}
type NotificationAnnouncementItemViewState {
	subject: String
	from: ParticipantViewState
	to: ParticipantViewState
	date: Unknown
	text: AnnouncementText
	isRead: Boolean
}
type Success {
	notificationAnnouncement: NotificationAnnouncementItemViewState
}
type Interactions {
	onBack: Unknown
}
type NotificationAnnouncementViewInput {
	announcementId: String
}
type OnParticipantClick {
	participant: ParticipantViewState
}
type OnRichLinkClick {
	link: RichTextLink
}
type ParticipantViewState {
	name: String
	id: String
}
type OnRemoveAuthor {
	author: AnnouncementAuthor
}
type DisplayOptions {
	isHideDisplayed: Boolean
	isTurnOffDisplayed: Boolean
}
type Loaded {
	title: String
	authors: Unknown
	error: Unknown
}
type AnnouncementData {
	authorId: String
	notificationAnnouncementId: String
	authorName: String
}
type Input {
	announcementData: AnnouncementData
	deepLink: String
	isHideDisplayed: Boolean
	optFlags: [Unknown]
}
type Exited {
	inquiryId: String
}
type Failed {
	inquiryId: String
}
type QueryResult {
	query: String
	tokens: [Unknown]
	action: Unknown
}
type SearchTokenPresentationModel {
	textColor: String
	transparentBackground: Boolean
}
type RichData {
	uiModels: [Unknown]
	richItems: [Unknown]
}
type LiveBarViewed {
	roomIds: Unknown
}
type ScreenFirstContent {
	timestamp: Int
}
type OnSubredditClick {
	subredditName: String
}
type ThreadsViewScreenDependencies {
	messageActionsListener: Unknown
	closeScreenFunction: Unknown
}
type OnMessageClick {
	thread: ThreadUIModel
	position: Message
	openKeyboard: Boolean
	isRootMessage: Boolean
}
type ShareMessage {
	permalink: String
	message: Message
}
type OnThreadMessageClick {
	thread: ThreadUIModel
	message: Message
}
type OnChatClick {
	roomId: String
}
type LiveBarDependencies {
	visibilityProviderHolder: VisibilityProviderHolder
	excludeRoomIds: Unknown
	tooltipLock: Unknown
}
type OnReadThread {
	threadUIModel: ThreadUIModel
}
type Loaded {
	showViewAllButtonCoachmark: Boolean
	items: Unknown
}
type OnReadThreadError {
	error: Unknown
}
type VisibilityProviderHolder {
	visibilityProvider: Unknown
}
type LiveBarItemClicked {
	item: Unknown
}
type ScreenFirstRender {
	timestamp: Int
}
type OnMessageEvent {
	event: Unknown
}
type Threads {
	threads: Unknown
	expandedMessages: Unknown
	session: Unknown
	reactions: Unknown
	unreadThreads: Unknown
}
type LiveBarItemViewed {
	item: Unknown
}
type Loaded {
	threads: Unknown
}
type CopyMessage {
	message: Message
	text: Unknown
}
type OnMenuButtonPress {
	channelId: String
	roomType: Unknown
	roomId: String
	roomName: String
}
type ChatsViewState {
	session: Unknown
	chatsList: Unknown
	chatsType: Unknown
	selectedChatFilters: Unknown
	showFilters: Boolean
	showDiscoverAllChatsUsp: Boolean
	invitesCount: MatrixChatConfig
	connectionState: Unknown
	threads: Unknown
	spamRequests: SpamRequestsState
}
type OnBannedAccountsPress {
	channelId: String
}
type SpamRequestsState {
	isVisible: Boolean
}
type Loaded {
	spamRequests: [Unknown]
	isPaginating: Boolean
	hasMoreToLoad: Boolean
}
type OnBannedAccountsPress {
	channelId: String
}
type RoomHostSettingsScreenDependencies {
	roomId: String
	closeScreenFunction: Unknown
	chatAnalyticsType: Unknown
	unhostListener: Unknown
	userActionsListener: Unknown
	addListener: Unknown
}
type OnCrowdControlPress {
	channelId: String
}
type OnUnhostUserButtonPress {
	user: RedditUser
	isInvite: Boolean
}
type OnProfileViewButtonPress {
	name: String
}
type OnUnhostUserConfirmed {
	user: RedditUser
	isSelf: Boolean
}
type OnHostsAdded {
	users: Unknown
}
type OnUnhostSelfButtonPress {
	userId: String
}
type Scc {
	settings: SubredditCreatedChannel
}
type OnContentControlsPress {
	subredditId: String
}
type Ucc {
	hostsList: Unknown
	invitedHostsList: Unknown
	settings: UserCreatedChannel
}
type OnCrowdControlPress {
	subredditId: String
}
type Loaded {
	result: Unknown
}
type SubredditCreatedChannel {
	channelId: String
	subredditId: String
	showCrowdControlButton: Unknown
	showBannedAccountsButton: Boolean
}
type NotSupported {
	roomType: Unknown
}
type UserCreatedChannel {
	channelId: String
	myUserId: String
	myMandate: Unknown
	showInviteButton: Boolean
	showStopHostingButton: Boolean
	showCrowdControlButton: Boolean
	showBannedAccountsButton: Boolean
	showBlockedContentButton: Boolean
}
type OnHostPress {
	myUserId: String
	myMandate: Unknown
	user: Unknown
	isInvited: Boolean
}
type OnEnterHostModePress {
	channelId: String
	roomId: String
	roomName: String
	roomType: Unknown
}
type OnUninviteHost {
	user: RedditUser
}
type OnContentControlsPress {
	channelId: String
}
type OnPreviousButtonPress {
	roomId: String
	channelId: String
}
type CallToAction {
	channelId: String
	reportCount: Unknown
	roomId: String
	roomName: String
}
type OnRemoveMessagePress {
	roomId: String
	eventId: String
	channelId: String
	userId: String
	roomName: String
	roomType: Unknown
	source: Unknown
}
type OnApproveMessagePress {
	roomId: String
	eventId: String
	channelId: String
	userId: String
	roomName: String
	roomType: Unknown
	source: Unknown
}
type OnExitHostModePress {
	channelId: String
	roomId: String
	roomName: String
	roomType: Unknown
}
type DisplayMessage {
	eventId: String
	threadId: String
}
type Enabled {
	roomId: String
	roomName: String
	channelId: String
	reportCount: Unknown
	isTooltipVisible: Boolean
	previousButtonState: Unknown
	nextButtonState: Unknown
	currentMessage: ReportedMessageInfo
}
type OnNextButtonPress {
	roomId: String
	channelId: String
}
type CountInfo {
	raw: String
}
type Loaded {
	items: Unknown
	allSubredditsSelected: Boolean
	searchedQuery: String
}
type SearchQueryChanged {
	searchInput: String
}
type ChannelSubredditTaggingScreenInput {
	channelId: String
	roomId: String
}
type DiscoveryPhrase {
	channelId: String
	discoveryPhrase: String
}
type TaggingWithDiscoveryPhrase {
	channelId: String
	discoveryPhrase: String
	subredditIds: [Unknown]
}
type Loaded {
	searchQuery: String
	searchState: Unknown
	canAddMore: Boolean
	selectedSubreddits: Unknown
	banner: Unknown
}
type SubredditTaggingConfig {
}
type MaxRecommendationsReachedSideEffect {
}
type SubredditItem {
	id: String
	name: String
	iconUrl: String
	primaryColor: String
}
type SubredditSelected {
	subreddit: SubredditItem
}
type SubredditDeselected {
	subreddit: SubredditItem
}
type SearchResult {
	taggedSubreddits: [Unknown]
	searchQuery: String
}
type UserChatChannelUiModel {
	roomId: String
	roomName: String
	roomIconUrl: String
	facepileIconUrls: Unknown
	activeUsersCount: CountInfo
	recentMessagesCount: CountInfo
	description: String
	topics: Unknown
}
type DiscoverAllChatsScreenInput {
	referrer: String
	discoverChatsRecommendation: Unknown
}
type SubredditChatChannelUiModel {
	roomId: String
	roomName: String
	roomIconUrl: String
	facepileIconUrls: Unknown
	activeUsersCount: CountInfo
	recentMessagesCount: CountInfo
	description: String
	subredditId: String
	subredditName: String
	subredditNamePrefixed: String
}
type CropRequest {
	originalUri: String
	destination: Unknown
}
type NavigationItemSelected {
	discoverChatsRecommendation: Unknown
}
type AllChats {
	allChatsData: DiscoverAllChatData
}
type DisplayRecommendedData {
	recommendations: Unknown
	navigationState: Unknown
	refreshingProgress: ProgressBarState
}
type SeeAllCategories {
	queryItems: Unknown
	topicItems: Unknown
}
type OnSectionClicked {
	recommendation: Unknown
}
type StaticRecommendations {
	staticData: RecommendedData
}
type ItemClicked {
	item: Unknown
}
type BottomSheetItemSelected {
	discoverChatsRecommendation: Unknown
}
type NotificationSettingsDependencies {
	roomId: String
}
type ProgressBarState {
	loading: Boolean
	error: Boolean
}
type State {
	data: Unknown
	navigationItems: Unknown
	errorCode: String
	refreshingProgress: ProgressBarState
}
type Loaded {
	settings: Unknown
	loadingToggles: Unknown
	pushNotificationBannerViewState: Unknown
}
type ItemViewed {
	item: Unknown
}
type OnSwitchToggled {
	which: Unknown
	newValue: Boolean
}
type Loaded {
	items: Unknown
	seeAllButtonIsVisible: Boolean
}
type CloseButtonPress {
	closeAction: Unknown
}
type NotificationSettingsViewState {
	settingsState: Unknown
}
type DisplayAllChatsData {
	items: DiscoverAllChatData
	navigationState: Unknown
	refreshingProgress: ProgressBarState
}
type Failure {
	cause: Unknown
}
type CreateChatFabViewInput {
	analayticsSource: Unknown
}
type CreateChatFabViewState {
	isTooltipVisible: Boolean
}
type NetworkError {
	message: String
}
type OnBlockConfirmed {
	user: RedditUser
}
type ShowDirectChatUserActionSheet {
	redditUser: RedditUser
}
type OnProfileClick {
	user: RedditUser
}
type ModmailChat {
	roomSettings: ModmailChat
	notificationsEnabled: Boolean
	pushNotificationBannerViewState: Unknown
}
type GroupChat {
	roomSettings: GroupChat
	notificationsEnabled: Boolean
	pushNotificationBannerViewState: Unknown
}
type DirectChat {
	roomSettings: DirectChat
	notificationsEnabled: Boolean
	pushNotificationBannerViewState: Unknown
}
type OnManageChannelButtonPress {
	analyticsChatType: Unknown
}
type UserCreatedChannel {
	roomSettings: Unknown
	isIconLoading: Boolean
	hostModeState: Unknown
}
type OnImagesPicked {
	paths: [Unknown]
}
type ChatScreenParams {
	roomId: String
	threadId: String
	userId: String
	subredditName: String
	eventId: String
	roleHint: String
	fromSubreddit: Boolean
	isFromNotification: Boolean
	viewSource: Unknown
	notifyReason: Unknown
	closeScreen: Unknown
}
type PickImages {
	selection: Unknown
}
type OnboardingCtaClick {
	cta: Unknown
}
type OnDistinguishAsAdmin {
	message: Message
	isDistinguished: Boolean
}
type AnchorToBottom {
	id: String
	immediateScroll: Boolean
}
type GenericUrlPreview {
	urlPreviewData: UrlPreviewData
}
type ChatViewState {
	session: Unknown
	room: RoomSummaryViewState
	content: ContentViewState
	reactions: Unknown
	info: Unknown
	typingUsers: TypingUsersViewState
	chatConfig: ChatRoomConfig
	connectionState: Unknown
	messageSendState: MessageSendViewState
	showBlockedUsersWarning: Boolean
	showMessageShare: Boolean
	mentions: MentionsViewState
	blurImages: Unknown
	useNewActionBarStyle: Boolean
	isTapOnTitleToOpenSettingsEnabled: Boolean
	invitationState: Unknown
	hostModeViewState: Unknown
	onboardingCarouselState: Unknown
	isScrollToBottomEnabled: Boolean
	pushNotificationBannerViewState: Unknown
}
type Modmail {
	myUserMatrixId: String
	subredditData: SubredditData
}
type OnMessagePinRequest {
	message: Message
}
type Direct {
	inviterName: String
}
type OnChannelBanConfirmed {
	message: Message
	redditUserId: String
	redditUsername: String
	removeAllMessages: Boolean
}
type ShowReactionAuthors {
	reactionKey: String
	roomId: String
	eventId: String
	reactionData: ReactionData
	isMod: Boolean
}
type PinnedMessageState {
	thumbnailUrl: String
	text: String
	canHide: Boolean
	messageId: String
}
type OnChannelUnbanConfirmed {
	message: Message
	redditUserId: String
	redditUsername: String
}
type ContentViewState {
	messages: [Unknown]
	expandedMessages: Unknown
	threadMessage: Message
	threadNotificationState: Unknown
	hasMoreToLoadForward: Boolean
	hasMoreToLoadBackward: Boolean
	unreadIndicatorEventId: String
	scrollAnchor: Unknown
	pinnedMessage: PinnedMessageState
	setupCapabilities: ChannelSetupViewState
	collapsedMessagesState: Unknown
}
type OnChannelBanClicked {
	message: Message
	redditUserId: String
	redditUsername: String
}
type MentionsViewState {
	mentions: Unknown
	showMentions: Boolean
}
type AnchorInput {
	messages: [Unknown]
	unreadIndicatorEventId: String
}
type CropImage {
	originFileUri: String
	destination: Unknown
}
type Message {
}
type ChannelSetupViewState {
	editChannelAvatar: Boolean
	setupManageChannel: Boolean
	setupDiscovery: Boolean
}
type OnHidePinnedMessage {
	eventId: String
}
type ReactionsViewState {
	reactions: Unknown
	autoStartAnimatable: Boolean
}
type ReactionTabSwitch {
	reactionKey: String
}
type ReactionTab {
	reaction: Reaction
	lazyItems: Unknown
}
type AuthorClick {
	reactionAuthor: ReactionAuthor
}
type ReactionAuthorsViewState {
	selectedTabKey: String
	reactionTabs: Unknown
}
type UnbanConfirmation {
	subredditName: String
	chatType: Unknown
	messagePreviewState: MessagePreviewState
	username: String
}
type ChatSheetActionsDependencies {
	listener: Unknown
	dismiss: Unknown
	message: Message
	contentOptions: ContentOptions
	redditUser: RedditUser
	sheetMode: Unknown
}
type AddHostConfirmation {
	chatType: Unknown
	messagePreviewState: MessagePreviewState
	username: String
}
type OnBanConfirm {
	removeAllMessages: Boolean
}
type ContentOptions {
	blurImages: Unknown
	isAdmin: Boolean
	showShareAction: Boolean
	showReplyAction: Boolean
	showDeleteAction: Boolean
	showAddHostAction: Boolean
	showRemoveUrlPreviewAction: Boolean
	pinOptions: Unknown
	showBanActions: Boolean
	channelId: String
	subredditName: String
	chatType: Unknown
	permalink: String
	showDistinguishAsHostAction: Boolean
	showDistinguishAsAdminAction: Boolean
	showRemoveAction: Boolean
	canKick: Boolean
	reactionsAvailable: Boolean
}
type OnDistinguishAsHost {
	isDistinguished: Boolean
}
type OnCopy {
	text: Unknown
}
type User {
	redditUser: RedditUser
	messageReportData: MatrixChatMessageReportData
}
type OnDistinguishAsAdmin {
	isDistinguished: Boolean
}
type BanConfirmation {
	subredditName: String
	chatType: Unknown
	messagePreviewState: MessagePreviewState
	username: String
}
type Reactions {
	reactions: Unknown
	autoStartAnimatable: Boolean
	messagePreviewState: MessagePreviewState
	chatType: Unknown
	username: String
}
type GeneralUser {
	showHostActions: Boolean
	showBanActions: Boolean
	showAddHostAction: Boolean
	isUserBanned: Boolean
	showDistinguishAction: Boolean
	canKick: Boolean
	canRemoveMod: Unknown
	isUserBlocked: Boolean
	chatType: Unknown
	username: String
	redditUser: RedditUser
}
type MessagePreviewState {
	blurImages: Unknown
	isAdmin: Boolean
	message: Message
	session: Unknown
}
type ReactionAuthorsViewModelParams {
	eventId: String
	reactionKey: String
	roomId: String
	reactionData: ReactionData
	isMod: Boolean
	onUserClick: Unknown
	onClose: Unknown
}
type GeneralMessage {
	message: Message
	reactions: Unknown
	autoStartAnimatableReactions: Boolean
	showHostActions: Boolean
	showShare: Boolean
	showDelete: Boolean
	showRemoveUrlPreviewAction: Boolean
	showPin: Boolean
	showUnpin: Boolean
	showReply: Boolean
	showBanActions: Boolean
	showAddHostAction: Boolean
	isUserBanned: Boolean
	showDistinguishAsHostAction: Boolean
	showDistinguishAsAdminAction: Boolean
	showRemoveAction: Boolean
	chatType: Unknown
	messagePreviewState: MessagePreviewState
	username: String
}
type Reaction {
	summary: ReactionAggregatedSummary
	matrixChatReaction: MatrixChatReaction
}
type ReactionData {
	reactionList: [Unknown]
}
type OnReactionClick {
	reaction: MatrixChatReaction
}
type MatureContentBottomSheetScreenParams {
	messageId: String
}
type MessageMode {
	message: Message
}
type ReactionsSheetParams {
	useMessageReactions: Boolean
}
type ReactionSourceCache {
	pages: Unknown
	countReachedPage: Unknown
	loadedReactionIdsByKey: Unknown
}
type ReactionAuthor {
	id: String
	redditUser: RedditUser
}
type ReactionAuthorData {
	senderId: String
	reactionKey: String
	redditUser: RedditUser
}
type ReactionContentRelatesTo {
	key: String
}
type PagedInternalData {
	chunks: [Unknown]
	nextBatch: String
}
type ReactionContentJson {
	relates: ReactionContentRelatesTo
}
type SubredditData {
	id: String
	subredditName: String
	iconUrl: String
}
type OnPinnedMessageClick {
	eventId: String
}
type Group {
	displayName: String
	inviterId: String
}
type Show {
	items: Unknown
}
type Host {
	displayName: String
	inviterId: String
}
type OnMessagePinConfirm {
	message: Message
}
type OnMessageUnpinned {
	message: Message
}
type TypingUsersViewState {
	show: Boolean
	formattedText: Unknown
	users: Unknown
}
type HostModeEvent {
	event: Unknown
}
type ShowUnpinWarning {
	message: Message
}
type PushNotificationAnalyticsData {
	source: Unknown
	roomAnalytics: MatrixRoomSummaryAnalyticsData
}
type PinnedMessageRoomData {
	localUserIsHost: Boolean
	blurImages: Unknown
	roomThreadId: String
}
type ThreadNotificationAccessibilityLabels {
	stateLabel: String
	label: String
	actionLabel: String
}
type Subreddit {
	iconUrl: String
}
type Avatar {
	matrixUserId: String
}
type LazyListDataSnapshot {
	messages: [Unknown]
	expandedMessages: Unknown
	scrollAnchor: Unknown
}
type ChatComposableDependencies {
	chatFeatures: Unknown
}
type MessageParams {
	drawDate: Boolean
	drawAvatar: Boolean
	groupWithNext: Boolean
}
type Show {
	dismissible: Boolean
}
type OnDistinguishAsHost {
	message: Message
	isDistinguished: Boolean
}
type MessageSendViewState {
	isPendingDirectInvite: Boolean
	inputFieldValue: Unknown
	maxMentions: Boolean
	canSendMessage: Boolean
	sendMessageError: Unknown
	isChannelDeactivated: Boolean
	isAttachEnabled: Boolean
	isSnoomojiMessagesEnabled: Boolean
	isGiphyAvailable: Boolean
	composerMediaPreviewViewState: Unknown
}
type OnRemoveUrlPreview {
	message: Message
}
type OnboardingCtaVisible {
	cta: Unknown
}
type OnChannelUnbanClicked {
	message: Message
	redditUserId: String
	redditUsername: String
}
type OnEditNameAndDescriptionPress {
	channelId: String
	name: String
	description: String
}
type OnHostModeToggle {
	roomId: String
	roomName: String
	roomType: Unknown
	channelId: String
	enableHostMode: Boolean
}
type OnBlockClick {
	user: RedditUser
}
type OnUserClick {
	redditUser: RedditUser
}
type OnEditNameAndDescriptionPress {
	channelId: String
	name: String
	description: String
}
type OnChannelTaggingPress {
	channelId: String
}
type ChatNameChanged {
	name: String
}
type OnNamePress {
	subredditName: String
}
type OnEditIconPress {
	channelId: String
	powerLevel: Unknown
}
type OnMuteNotificationPress {
	newValue: Boolean
}
type CreateChatButtonViewState {
	enabled: Boolean
}
type OnStopHostingConfirmed {
	user: RedditUser
}
type CropImage {
	originFileUri: String
	destination: Unknown
}
type Users {
	cachedUsers: Unknown
	missingIds: [Unknown]
}
type OnUnblockClick {
	user: RedditUser
}
type SubredditCreatedChannel {
	roomSettings: SubredditCreatedChannel
	hostModeState: Unknown
}
type NewChatScreenParams {
	inviteToRoomId: String
	inviteAsMod: Boolean
	startGroupWithUser: RedditUser
	inviteType: Unknown
}
type Message {
	eventId: String
	position: String
	threadId: String
}
type Continuation {
	value: String
}
type OnTextUpdated {
	newName: String
}
type NewChatUiDependencies {
	avatarResolver: Unknown
	dateUtilDelegate: Unknown
	chatFeatures: Unknown
	presentationMode: Unknown
}
type RedditUserEntity {
	redditId: String
	matrixId: String
	name: String
	profileIconUrl: String
	snoovatarIconUrl: String
	isNsfw: Boolean
	totalKarma: Int
	cakeday: Int
	isBlocked: Boolean
	isAcceptingChats: Boolean
	insertTimestamp: Int
}
type NewChatViewState {
	chatOptions: Unknown
	foundUsers: Unknown
	selectedUsers: Unknown
	activeUsers: Unknown
	bannedUsersIds: Unknown
	creatingChat: Boolean
	showEmptySearchResult: Boolean
	myUserId: String
	createChatButtonState: CreateChatButtonViewState
	chatName: String
}
type ReportedMessagesPage {
	messages: [Unknown]
	nextCursor: String
}
type Loaded {
	current: String
	charLimit: Boolean
	isSaveButtonEnabled: Boolean
}
type RecommendedData {
	recommendationAlgorithm: String
	recommendations: Unknown
}
type Group {
	roomName: String
}
type ExitError {
}
type Modmail {
	roomName: String
}
type Scc {
	roomName: String
	channelId: String
	deleteRoom: Boolean
}
type LeaveRoomScreenParams {
	isDeletingRoom: Boolean
}
type Direct {
	roomName: String
}
type UnBan {
	channelId: String
}
type Ucc {
	roomName: String
	channelId: String
	leaveMethod: Unknown
}
type Ban {
	channelId: String
	removeAllMessages: Unknown
}
type MatrixAvailableStickersResponse {
	stickers: [Unknown]
}
type UnhostThenLeave {
	userRedditId: String
}
type OnLeaveConfirmed {
	roomState: Unknown
}
type Complete {
	successMessageRes: Int
}
type UserActionsInfoUiModel {
	isYou: Boolean
	user: RedditUser
	roomName: String
	actions: Unknown
}
type OnActionClick {
	action: Unknown
	user: RedditUser
}
type MatrixStickerDataModel {
	key: String
	url: String
}
type UserActionsViewState {
	baseState: Unknown
	pendingAction: Unknown
}
type OnActionConfirm {
	action: Unknown
	user: RedditUser
}
type Args {
	roomId: String
	userId: String
}
type MatrixChatSlowActionsConfig {
	actionsThreshold: Unknown
}
type MatrixChatConfig {
	isStartChatAvailable: Boolean
	isImageMessagesAvailable: Boolean
	isMessageReactionAvailable: Boolean
	isChatSettingsAvailable: Boolean
	isRichMessagesAvailable: Boolean
	isTypingIndicatorsAvailable: Boolean
	isSnoomojiMessagesEnabled: Boolean
	isGiphyAvailable: Boolean
	isRequestsPillAvailable: Boolean
	syncTimeoutSeconds: [Unknown]
	messagesGroupTimeWindow: Boolean
	isSyncIndicatorAvailable: Boolean
	isUnreadIndicatorAvailable: Boolean
	maxInitialChatMembersCount: Unknown
	maxPeekedChats: Boolean
	previewUsernamesInGroup: Boolean
	previewUsernamesInChannel: Boolean
	hideRedactedMessagesInGroupChats: Boolean
	hideRedactedMessagesInChannels: Boolean
	uccTaggingMaxSubredditSelectionCount: Int
}
type GifDetails {
	id: String
	title: String
	url: String
}
type ChannelInfo {
	channelId: String
	permalink: String
	subredditId: String
	subredditName: String
	isSubredditNsfw: Boolean
	subredditPermissionLevel: String
	subredditType: String
	isRestricted: Boolean
	icon: String
	restrictedContentTypes: [Unknown]
}
type Message {
	moderationStatus: Unknown
	timelineEvent: TimelineEvent
	isDirect: Boolean
	isOut: Boolean
	links: Unknown
	sendError: MatrixErrorUiModel
	distinguishAsMod: Boolean
	distinguishAsAdmin: Boolean
	isRedactedContent: Boolean
	aggregateWithMessages: Unknown
	displayableSender: Unknown
	localContentPath: String
	richText: RichText
}
type SubredditInfo {
	id: String
	name: String
	subredditIcon: String
}
type Result {
	myUserId: String
	roomSummary: RoomSummary
	userMandate: Unknown
}
type BitsICareAbout {
	membership: Unknown
	isHidden: Boolean
	hasBeenVisible: Boolean
}
type Request {
	ids: Unknown
	result: Unknown
}
type NellieError {
	events: [Unknown]
	cause: Unknown
}
type Histogram {
	name: String
	value: Float
	labels: Unknown
}
type Counter {
	name: String
	value: Float
	labels: Unknown
}
type Nel {
	url: String
	elapsedTime: Int
	method: String
	phase: String
	protocol: String
	referrer: String
	serverIp: String
	statusCode: Unknown
}
type Gauge {
	name: String
	value: Float
	labels: Unknown
}
type TabsViewState {
	selectedTab: Unknown
	tabs: Unknown
	tabsEnabled: Boolean
}
type W3ReportingBody {
	name: String
	samplingFraction: Unknown
	labels: Unknown
	value: Float
	type: Unknown
}
type DescriptionInputChanged {
	value: String
}
type Scc {
	chatId: String
	channelId: String
	name: String
	description: String
}
type Ucc {
	createButtonState: Unknown
	nameState: FieldState
	discoverPhraseState: FieldState
	descriptionState: FieldState
	errorBannerState: Unknown
}
type Error {
	fieldError: Unknown
}
type NameInputChanged {
	value: String
}
type Scc {
	createButtonState: Unknown
	nameState: FieldState
	descriptionState: FieldState
	errorBannerState: Unknown
}
type Ucc {
	chatId: String
	channelId: String
	name: String
	description: String
}
type CharsCountError {
}
type FieldState {
	value: String
	enabled: Boolean
	validationState: Unknown
}
type Event {
	type: Unknown
	ageInMilliseconds: Unknown
	url: String
	userAgent: String
	body: Unknown
}
type NelBody {
	elapsedTime: Int
	method: String
	phase: String
	protocol: String
	referrer: String
	samplingFraction: Unknown
	serverIp: String
	statusCode: Unknown
}
type CreateChannelData {
	name: String
	discoveryPhrase: String
	description: String
}
type Report {
	nellieEvent: Unknown
	reportingEvent: Event
}
type CreateChannelScreenDependencies {
	onChannelCreatedListener: Unknown
	mode: Unknown
	closeScreenFunction: Unknown
	actionBarManager: Unknown
	presentationMode: Unknown
	openWebUrl: Unknown
}
type DiscoveryPhraseInputChanged {
	value: String
}
type Ucc {
	createButtonState: Unknown
	nameState: FieldState
	descriptionState: FieldState
	errorBannerState: Unknown
}
type ScreenActions {
	closeScreen: Unknown
	closeKeyboard: Unknown
}
type CreateButtonViewState {
	enabled: Boolean
	isLoading: Boolean
}
type TabSwitch {
	tab: Unknown
}
type CreateChatViewState {
	tabsViewState: TabsViewState
	createButtonViewState: CreateButtonViewState
}
type W3ReportingPolicyResponse {
	reportingGroups: [Unknown]
	reportingPolicies: Unknown
}
type UnknownError {
	throwable: Unknown
	hasGqlErrors: Boolean
	httpCode: Boolean
}
type NetworkError {
	throwable: Unknown
	hasGqlErrors: Boolean
	httpCode: Boolean
}
type DelegatingControllerChangeListenerShim {
	delegateListener: Unknown
}
type NavEntryRouterTransactionShim {
	navEntry: NavEntry
}
type SchedulePostScreenDependencies {
	view: Unknown
	parameters: Unknown
	scheduleUpdatedTarget: Unknown
}
type SchedulePostUiModel {
	is24HourMode: Boolean
	startsDate: String
	startsTime: String
	repeatText: String
	repeatChecked: Boolean
	showClearButton: Boolean
}
type ArchivePostsScreenDependencies {
	view: Unknown
	params: Params
}
type Params {
	subredditId: String
}
type NavEntry {
	screen: Unknown
	transparent: Boolean
	transitionSpec: Unknown
	tag: String
}
type EntryPredictiveBackState {
	isBackDestination: Boolean
}
type EditScheduledPostScreenDependencies {
	view: Unknown
	updateScheduledPostData: Unknown
	editScheduledPostTarget: Unknown
}
type AddBannedUserScreenDependencies {
	view: Unknown
	params: Params
	sourcePage: String
	analyticsPageType: Unknown
	screenReferrer: Unknown
	listingPostBoundsProvider: Unknown
}
type Params {
	subredditId: String
	subredditName: String
	commentId: String
	asyncLink: Unknown
	isNewBan: Boolean
	chatChannelId: String
}
type ExternalCommunityChat {
	subredditId: String
	subredditName: String
	username: String
	chatChannelId: String
	messageId: String
	pageType: String
}
type New {
	subredditId: String
	subredditName: String
}
type ExternalLink {
	subredditId: String
	subredditName: String
	username: String
	commentId: String
	link: Unknown
	sourcePage: String
}
type Divider {
	id: String
}
type AdjustCrowdControlBottomSheetViewState {
	selectedCrowdControlLevel: Unknown
	filterCommentsEnabled: Boolean
}
type ListHeaderItem {
	type: Unknown
}
type ScheduledPostListingScreenDependencies {
	view: Unknown
	params: Params
}
type OnFilterCommentsEnabledChange {
	filterCommentsEnabled: Boolean
}
type ScheduledPost {
	type: Unknown
	id: String
	title: String
	body: String
	richTextBody: [Unknown]
	contentType: Unknown
	mediaMetaData: Unknown
	subredditId: String
	subredditName: String
	publishInfo: String
	frequency: Unknown
	isSticky: Boolean
	isDistinguishedAsMod: Boolean
	isOriginalContent: Boolean
	isSpoiler: Boolean
	isNSFW: Boolean
	owner: String
}
type Params {
	subreddit: SubredditScreenArg
}
type OnCrowdControlLevelSelected {
	selectedCrowdControlLevel: Unknown
}
type PostTypeOptionUIModel {
	id: String
	name: String
	longName: String
	description: String
}
type Params {
	selectedOptions: Unknown
	switchValuesMap: Unknown
	subredditScreenArg: SubredditScreenArg
	modPermissions: Unknown
	target: Unknown
}
type PostTypesScreenDependencies {
	view: Unknown
	params: Params
}
type SubredditScheduledPostUiModel {
	posts: Unknown
}
type OptionsPicker {
	id: String
	title: String
	subtitle: String
	selectedOption: PostTypeOptionUIModel
}
type Switch {
	id: String
	title: String
	subtitle: String
	checked: Boolean
}
type External {
	subredditId: String
	subredditName: String
	username: String
	commentId: String
}
type BannedCommentModel {
	id: String
	kindWithId: String
	linkId: String
	author: String
	distinguished: String
	parentId: String
	authorCakeday: Boolean
	bodyHtml: String
	rtjson: Unknown
	subredditId: String
	subreddit: String
}
type Edit {
	subredditId: String
	subredditName: String
	commentId: String
	username: String
	reason: String
	modNote: String
	duration: Int
	banMessage: String
}
type ExternalComment {
	subredditId: String
	subredditName: String
	username: String
	commentId: String
	comment: BannedCommentModel
}
type Parameters {
	subredditName: String
	subredditId: String
}
type Available {
	enabled: Boolean
}
type ToggleGiphyGifs {
	enabled: Boolean
}
type ChannelCreated {
	channelId: String
}
type ChannelUpdate {
	channelName: String
	channelId: String
	privacyType: String
	subredditId: String
	subredditName: String
}
type EditChannel {
	channel: Unknown
}
type ChannelCreateScreenDependencies {
	subredditId: String
	subredditName: String
	numberOfChannels: String
	showModTools: Boolean
	listener: Unknown
}
type ChannelDetailsViewState {
	channelId: String
	channelName: String
	updatedChannelName: String
	showChannelNameValidationHint: Boolean
	showSaveLoader: Boolean
}
type ChannelsDeleteBottomSheetDependencies {
	channelId: String
	channelName: String
	listener: Unknown
}
type CreateChannel {
}
type ChannelsManagementScreenDependencies {
	subredditId: String
	subredditName: String
}
type UpdateChannelName {
	channelName: String
}
type OnDeleteConfirm {
	channelId: String
}
type UpdateChannelType {
	channelType: Unknown
}
type Loaded {
	channels: [Unknown]
}
type ChannelsViewState {
	refreshing: Boolean
	state: Unknown
}
type Error {
	cause: Unknown
}
type ChannelCreate {
	channel: Unknown
	privacyType: String
	numChannels: String
	subredditName: String
}
type ChannelDetailsScreenDependencies {
	channelId: String
	roomId: String
	channelName: String
	channelPrivacy: Unknown
	subredditId: String
	subredditName: String
}
type ChannelCreateViewState {
	channelName: String
	channelType: Unknown
	showChannelNameValidationHint: Boolean
	showCreateLoader: Boolean
	showModTools: Boolean
}
type ChannelsDeleteBottomSheetViewState {
	hideBottomSheet: Boolean
	channelId: String
	channelName: String
}
type ChannelError {
	channelName: String
	channelId: String
	error: String
	subredditId: String
	subredditName: String
}
type UpdateChannelName {
	newChannelName: String
}
type ChannelDelete {
	channelName: String
	channelId: String
	privacyType: String
	numChannels: String
	subredditName: String
	roomId: String
}
type Header {
	text: String
}
type MediaInCommentsViewState {
	isLoading: Boolean
	giphyGifsEnabled: Boolean
	userUploads: UserUploadsViewState
}
type ToggleUploadingVideos {
	enabled: Boolean
}
type UserUploadsViewState {
	imagesEnabled: Boolean
	gifsEnabled: Boolean
	videoViewState: Unknown
}
type Item {
	id: String
	name: String
	isChecked: Boolean
}
type Params {
	selectedLanguageId: String
	navigationAvailabilityUiModel: NavigationAvailabilityUiModel
	subredditScreenArg: SubredditScreenArg
	analyticsModPermissions: Unknown
}
type ToggleUploadingGifs {
	enabled: Boolean
}
type ToggleUploadingImages {
	enabled: Boolean
}
type PrimaryLanguageScreenDependencies {
	view: Unknown
	params: Params
}
type Params {
	subredditScreenArg: SubredditScreenArg
	ratingSurvey: Unknown
	startSurveyOnOpen: Boolean
	uiModel: Unknown
	target: Unknown
}
type Params {
	subredditScreenArg: SubredditScreenArg
	ratingSurveyResponse: Unknown
	isEligible: Boolean
}
type Params {
	menuItems: [Unknown]
	scrollTo: Unknown
	shouldScrollToSectionHeader: Boolean
}
type CommunityInviteModeratingCommunityUiModel {
	id: String
	kindWithId: String
	displayName: String
	displayNamePrefixed: String
	icon: Unknown
	selected: Boolean
	isPrivate: Boolean
	isRestricted: Boolean
	nsfw: Boolean
	isChannelsEnabled: Boolean
}
type Params {
	inviteeUsername: String
}
type OnAwardedContentClicked {
	item: ModAwardUiModel
}
type CommunityChestScreenDependencies {
	params: CommunityChestParams
}
type CommunityChestParams {
	subredditId: String
}
type Zero {
	uiModel: CommunityChestUiModel
}
type Loaded {
	awardedContents: [Unknown]
}
type OnModAwardListItemClicked {
	modAwardTransactionUiModel: Unknown
}
type Loaded {
	uiModel: CommunityChestUiModel
}
type CommunityInviteScreenDependencies {
	view: Unknown
	params: Params
}
type ModToolsActionsDependencies {
	view: Unknown
	params: Params
	getContext: Unknown
	getActivity: Unknown
	navigable: Unknown
	settingsChangedTarget: Unknown
	subreddit: Unknown
	modPermissions: Unknown
}
type Params {
	subredditScreenArg: SubredditScreenArg
	richText: String
	isPreview: Boolean
}
type WelcomeMessageScreenDependencies {
	view: Unknown
	params: Params
	welcomeMessageTarget: Unknown
}
type Params {
	subredditScreenArg: SubredditScreenArg
}
type WelcomeMessageRulesScreenDependencies {
	view: Unknown
	params: Params
}
type Params {
	subredditScreenArg: SubredditScreenArg
}
type EditWelcomeMessageUiModel {
	infoLabel: String
	warningLabel: String
	welcomeMessage: String
	isErrorVisible: Boolean
	hasTextChanged: Boolean
}
type Params {
	subredditScreenArg: SubredditScreenArg
	markdown: String
}
type EditWelcomeMessageScreenDependencies {
	view: Unknown
	params: Params
	editWelcomeMessageTarget: Unknown
}
type WelcomeMessageSettingsScreenDependencies {
	view: Unknown
	params: Params
}
type CompoundFailure {
	failures: Unknown
	hasGqlErrors: Boolean
}
type CacheMissFailure {
	throwable: Unknown
	hasGqlErrors: Boolean
	httpCode: Unknown
	isLast: Boolean
}
type UpstreamError {
	throwable: Unknown
	hasGqlErrors: Unknown
	httpCode: Unknown
	isLast: Boolean
}
type RetryAlgorithmTag {
	retryAlgo: Unknown
}
type OperationNameRequestTag {
	name: String
}
type FeedParamsFirstPageRequestTag {
	isFirstPage: Boolean
}
type GqlResponseSourceTag {
	source: Unknown
}
type Error {
	errorType: Unknown
	errorMessage: String
}
type Approved {
	updatedNsfwSetting: Boolean
	updatedVisibilitySetting: Unknown
}
type VisibilityUpdate {
	setToType: Unknown
	subredditKindWithId: String
	reason: String
}
type NsfwUpdate {
	setToEnabled: Boolean
	subredditKindWithId: String
	reason: String
}
type ContributionTypeUpdate {
	restrictionType: Unknown
	subredditKindWithId: String
}
type Error {
	errorType: Unknown
	errorMessage: String
}
type ContributorRestrictionUpdate {
	disableContributorRequests: Boolean
	subredditKindWithId: String
}
type CurrentCommunityTypeSettings {
	isNsfw: Boolean
	privacyType: Unknown
	isPostingRestricted: Boolean
	isCommentingRestricted: Boolean
	isContributorRequestsDisabled: Boolean
}
type CachedValue {
	value: Unknown
	expiresAt: Unknown
}
type Success {
	isCommentingRestricted: Boolean
	isContributorRequestsDisabled: Boolean
	isPostingRestricted: Boolean
	isNsfw: Boolean
	privacyType: Unknown
}
type Message {
}
type AmbassadorSubreddit {
	subreddit: String
}
type ClickableCommunity {
	contentRes: String
}
type NewEmptyInboxViewState {
	titleRes: Unknown
}
type AccountStats {
	formattedKarma: String
	formattedRedditAge: String
	achievementsCount: Int
}
type StructParam {
	name: String
	type: Unknown
}
type Eip712Payload {
	message: Unknown
	domain: Unknown
	primaryType: String
}
type UserIcon {
	userIconUrl: String
}
type Nsfw {
	nsfwIconUrl: String
}
type SnoovatarUiModel {
	imageUrl: String
	isPremium: Boolean
	disableParticlesAndLeaveGlow: Boolean
}
type NftSnoovatar {
	url: String
}
type Snoovatar {
	snoovatarFullBodyUrl: String
}
type CreateSnoovatarCtaModel {
	showIcon: Boolean
	isCurrentUserProfile: Boolean
}
type EmailVerificationTokenId {
	value: String
}
type EditSnoovatarCtaModel {
	showIcon: Boolean
}
type NftDropUiModel {
	id: String
	title: String
	description: String
	imageUrl: String
}
type Epic {
	count: Int
}
type Show {
	nftCard: NftCardUiModel
}
type PlayerCreated {
	poolSize: Int
}
type NftCardUiModel {
	id: String
	name: String
	rarity: Unknown
	serialNumber: String
	series: String
	seriesSize: Int
	minted: String
	owner: String
	nftUrl: String
	nftBackgroundUrl: String
	displayName: Boolean
}
type SourceChanged {
	uri: String
}
type HasAudioChanged {
	hasAudio: Boolean
}
type Error {
	position: Int
	error: Unknown
	videoErrorReport: VideoErrorReport
}
type PlayerSizeChanged {
}
type AudioBitrateChanged {
	bitrate: Int
}
type VideoFileDownloadStarted {
	payload: FileDownloadPayload
}
type SettingsOverride {
	autoplay: Boolean
	loop: Boolean
	disabled: Boolean
}
type VideoFileDownloadCompleted {
	payload: FileDownloadPayload
}
type SeekClicked {
	position: Int
}
type VideoBitrateChanged {
	bitrate: Int
}
type Unknown {
	count: Int
}
type ViewModelOverride {
	settings: SettingsOverride
	idle: Unknown
	buffering: Unknown
	paused: Unknown
	playing: Unknown
	ended: Unknown
}
type VideoResolutionChanged {
}
type Legendary {
	count: Int
}
type Test {
	count: Int
}
type ChannelInfoData {
	subredditName: String
	permalink: String
	channelId: String
	icon: String
}
type ThreadUIModel {
	roomId: String
	chatName: String
	heroes: String
	moreRepliesCount: String
	blurImages: Unknown
	rootThreadMessage: Message
	threadReplies: [Unknown]
	chatType: Unknown
	hasUnread: Boolean
	channelInfoData: ChannelInfoData
}
type UtilityBadgeUiModel {
	iconUrl: String
	contentDescription: String
}
type ModeratorsResponseDataModel {
	username: String
	subredditName: String
	responseJson: String
	lastUpdateTimestamp: Int
}
type ToastPresentationModel {
	message: Unknown
	isIndefinite: Boolean
	accentColor: Unknown
	icon: Unknown
	action: Unknown
	button1: Unknown
	button2: Unknown
	matchParent: Boolean
}
type LogFileInfo {
	filePath: String
	format: Unknown
}
type SessionContextBlueprint {
	context: Unknown
	session: Unknown
	account: Unknown
	currentState: Unknown
	newState: Unknown
	resetState: Boolean
	hasChanged: Boolean
	isRestored: Boolean
	loIdManager: Unknown
	sessionDataStorage: Unknown
	deviceIdGenerator: Int
	contextCreationTimeMillis: Int
	owner: Unknown
}
type ContentData {
	authorUsername: String
	title: String
	content: String
	parentTitle: String
}
type Leaf {
	key=%s value=%s): Unknown
}
type PagedData {
	data: [Unknown]
	page: Page
}
type Page {
	prevPage: String
	nextPage: Unknown
	hasNext: Boolean
	hasPrevious: Boolean
}
type InvalidInput {
	field: Unknown
}
type ChannelTaggingInfo {
	discoveryPhrase: String
	taggedSubreddits: Unknown
}
type Host {
	inviteEventId: String
}
type Mod {
	inviteEventId: String
}
type CreatedUccChannel {
	channelId: String
	roomId: String
}
type TaggedSubreddit {
	isQuarantined: Boolean
	isUserBanned: Boolean
	id: String
	name: String
	iconUrl: String
	primaryColor: String
}
type PostValidationModel {
	isValid: Boolean
	validationMessage: String
}
type Hue {
}
type Hue {
}
type Saturation {
}
type Value {
}
type AutomationUi {
	id: String
	name: String
	event: Unknown
	phraseType: Unknown
	keywords: [Unknown]
	regex: String
	isRegexCaseSensitive: Boolean
	inclusionType: Unknown
	postCheckType: Unknown
	message: String
	keywordTyped: String
	actionType: Unknown
	isEnabled: Boolean
	isEditing: Boolean
}
type Data {
	url: String
	tracks: TracksInfo
}
type NotFound {
	url: String
}
type TracksInfo {
	hasSound: Boolean
	hasCaptions: Boolean
	format: Unknown
}
type NetworkErrorInfo {
	statusCode: Int
}
type Params {
	isSignUp: Boolean
	isLoginAfterPasswordRecovery: Boolean
}
type MediaVanillaState {
	ownerId: String
	mediaData: Preview
	surfaceName: String
}
type ModNoteUiModel {
	body: String
	username: String
	createdAt: Int
	emphasis: Unknown
	noteLabel: Unknown
	includeFooter: Boolean
	optionActions: [Unknown]
}
type ModLogItemUiModel {
	title: String
	subTitle: String
	username: String
	createdAt: Int
	logType: Unknown
	modNoteUiModel: ModNoteUiModel
	displayPreview: Boolean
	contentPreviewUiModel: Unknown
}
type ListingDetails {
	storefrontListingId: String
}
type ArtistPage {
	artistUserName: String
}
type CategoryDetails {
	categoryId: String
	deeplinkUrl: String
}
type DiscoverRecommendedChatsData {
	recommendationAlgorithm: String
	recommendations: Unknown
}
type DiscoverNavigationItem {
	discoverChatsRecommendation: Unknown
}
type DiscoverAllChatData {
	yourCommunitiesAlgorithm: String
	yourCommunities: Unknown
	recommendationAlgorithm: String
	recommendations: Unknown
}
type Rare {
	count: Int
}
type InboxBannerNotification {
	notificationName: String
	title: Unknown
	bodyText: Text
	backgroundImageUrl: String
	isDismissible: Boolean
	primaryCta: CallToAction
	secondaryCta: CallToAction
	thumbnailImageUrl: String
	deeplink: String
	maxViewCount: Int
}
type Text {
	value: String
	colorHex: String
}
type MessageItem {
	kind: String
	name: String
	created: Unknown
	type: Unknown
	showHideOption: Boolean
	showToggleTypeOption: Boolean
	showToggleRepliesOption: Boolean
	showToggleSubredditUpdatesOption: Boolean
	mailroomMessageType: String
	readableName: String
	id: String
	parentId: String
	linkTitle: String
	firstMessageName: String
	destination: String
	author: String
	bodyHtml: String
	subreddit: String
	subredditNamePrefixed: String
	distinguished: String
	subject: String
	associatedAwardingId: String
	isNew: Boolean
	isNeverViewed: Boolean
	replies: InboxItemList
}
type DeleteNotificationResult {
	errors: [Unknown]
}
type PostInfo {
	id: String
	title: String
	score: Unknown
	commentCount: Unknown
	thumbnailUrl: String
	obfuscatedUrl: String
	isNsfw: Boolean
	isSpoiler: Boolean
	isDeleted: Boolean
	isRemoved: Boolean
}
type NotificationAvatar {
	url: String
	isNsfw: Boolean
}
type Author {
	id: String
	displayName: String
}
type PushNotification {
	id: String
	type: Unknown
	title: String
	body: String
	deeplink: String
	accountId: String
	imageUrl: String
	isSilent: Boolean
	isSoundEnabled: Boolean
	encryptedPushToken: String
	cancelPnId: String
	replacementPnId: String
	ttlInMinutes: Int
	extras: PushNotificationExtras
	extrasAsString: String
	subtitle: String
	isAutoCancel: Boolean
	priority: String
	isOngoing: Boolean
	group: String
	number: Int
	badge: String
	soundUri: String
	shouldAlertOnlyOnce: Boolean
	notificationInboxId: String
	inboxMessageId: String
	topPostDeeplink: String
	awardingId: String
	postId: String
	parentCommentId: String
	chatDeeplink: String
	awardedPostDeeplink: String
	awardedCommentDeeplink: String
	isPersisted: Boolean
	postCommentType: String
	originalUserId: String
	postType: Unknown
}
type CallToAction {
	text: Text
	colors: Colors
	type: Unknown
}
type Image {
	url: String
}
type Unknown {
	rawValue: String
}
type NotificationInboxFeedItem {
	id: String
	title: String
	body: String
	deeplinkUrl: String
	icon: Unknown
	sentAtUtcMillis: Int
	readAtUtcMillis: Int
	viewedAtUtcMillis: Int
	avatar: NotificationAvatar
	postInfo: PostInfo
	isBodyHidden: Boolean
	isPostHidden: Boolean
	showHideNotificationOption: Boolean
	showToggleMessageTypeOption: Boolean
	showToggleNotificationRepliesOption: Boolean
	showToggleUpdateFromSubredditOption: Boolean
	showToggleFrequentUpdatesOption: Boolean
	mailroomMessageType: String
	replyParentId: String
	receivedAward: ReceivedAward
	subredditId: String
	subredditName: String
	notificationType: Unknown
	isReadLocally: Boolean
	flags: [Unknown]
	author: Author
}
type NotificationInboxFeedModel {
	items: [Unknown]
	hasNextPage: Boolean
	after: String
	bannerNotifications: [Unknown]
}
type Colors {
	activeHex: String
	backgroundHex: String
	borderHex: String
	hoverHex: String
}
type NotificationOperationError {
	notificationId: String
	error: String
}
type InboxItemList {
	items: [Unknown]
	after: String
}
type PushNotificationExtras {
	correlationId: String
	subredditName: String
	subredditId: String
	postId: String
	postTitle: String
	postBodyText: String
	commentId: String
	parentCommentId: String
	chatEventId: String
	chatNotifyReason: String
}
type UNDEFINED {
	value: String
}
type GoTo {
	url: String
}
type NotificationActionData {
}
type ReceivedAward {
	awardingId: String
	awarderId: String
	awardId: String
	isAwarderAcceptingChats: Boolean
	permalink: String
}
type SessionEndParams {
	deepLinkAfterEnd: String
	incognitoEndSession: Unknown
	isIncognitoTimeout: Boolean
	incognitoExitDeepLinkSource: Unknown
	isTriggeredByUser: Boolean
}
type InternalSessionEvent {
	id: String
	value: String
	deepLinkAfterChange: String
	forceIncognitoMode: Boolean
	incognitoSessionTimedOut: Boolean
	incognitoSessionKickedOut: Boolean
	incognitoExitReason: String
	deeplinkIntent: Unknown
	isTriggeredByUser: Boolean
	showPasswordReset: Boolean
}
type NotificationSettingsSection {
	id: String
	title: String
	rows: [Unknown]
}
type SaveFailure {
	option: Unknown
	messageType: String
}
type SaveSuccess {
	option: Unknown
	messageType: String
}
type NotificationSettingsOptionsRow {
	messageType: String
	displayName: String
	isEnabled: Boolean
	iconName: String
	rows: [Unknown]
}
type NotificationSettingsRow {
	messageType: String
	displayName: String
	isEnabled: Boolean
	iconName: String
}
type OptionRow {
	description: String
	option: Unknown
	displayName: String
	isSelected: Boolean
}
type NotificationSettingsLayoutAdminNotificationRow {
	displayName: String
	isEnabled: Boolean
	iconName: String
}
type NotificationSettingsLayout {
	sections: [Unknown]
}
type DataPointAtTime {
	time: Int
}
type DeepLinkInfo {
	url: String
}
type SubredditNotificationSettings {
	subredditKindWithId: String
	isSubredditUpdatesInterestingPostEnabled: Boolean
	isUpdateFromSubredditEnabled: Boolean
}
type CopyAvatarScreen {
	otherUsername: String
	initialAvatarId: String
}
type OnClick {
	behaviorToExecute: SearchFilterBehavior
}
type Error {
	billingException: Unknown
}
type Error {
	billingException: Unknown
}
type IndexedValue {
	index: Unknown
}
type Success {
	orderId: String
}
type PurchaseProductParams {
	productId: String
	pricePackageId: String
	price: String
	productVersion: Unknown
	skuDetails: Unknown
	externalProductId: String
	baseCurrency: String
	isProdPayment: Boolean
}
type Right {
}
type Left {
}
type PayoutUiModel {
	amount: String
	createdAt: String
	status: String
}
type GoldSenderUiModel {
	id: String
	displayName: String
	icon: String
}
type ReceivedGoldListUiModel {
	gold: GoldSenderUiModel
	goldIcon: String
}
type LogCounts {
	noteCount: Int
	approvalCount: Int
	removalCount: Int
	banCount: Int
	muteCount: Int
	inviteCount: Int
	spamCount: Int
	contentChangeCount: Int
	modActionCount: Int
	allCount: Int
}
type AwardIconUiModel {
	name: String
	iconUrl: String
	count: Int
	noteworthy: Boolean
	showName: Boolean
	showCount: Boolean
	iconFormat: Unknown
	allowAwardAnimations: Boolean
}
type AssociatedAwardUiModel {
	name: String
	images: AwardImagesUiModel
	priceTier: Unknown
}
type OutfitGridData {
	data: Unknown
	isComfyMode: Boolean
}
type Args {
	data: Unknown
	actions: [Unknown]
	sourcePageType: String
	shareTrigger: Unknown
	dismissOnOrientationChanged: Boolean
	showOnlyShareSheet: Boolean
	hideUsernameSharePrompt: Boolean
	feedType: Unknown
}
type ShareableProfileData {
	permalink: String
	username: String
}
type ShareableTextData {
	text: String
	contentType: String
}
type ShareTelemetryData {
	pageType: String
	action: Unknown
}
type ShareableSubredditData {
	permalink: String
	subreddit: String
}
type Args {
	data: Unknown
	sourcePageType: String
	shareTrigger: Unknown
	dismissOnOrientationChanged: Boolean
}
type ShareablePostData {
	linkId: String
	kindWithId: String
	permalink: String
	isSaved: Boolean
	isCrosspostingAllowed: Boolean
}
type ShareableFullUrlData {
	fullUrl: String
	contentType: String
}
type NetworkError {
	httpStatusCode: String
}
type ShareableImageData {
	text: String
	image: Unknown
	contentType: String
}
type ShortUrlResolution {
	url: String
	result: Unknown
}
type ShareableCommentData {
	permalink: String
	commentId: String
	postId: String
}
type SelectCountryScreenDependencies {
	view: Unknown
	selectCountryListener: Unknown
}
type ChipStyle {
	badgeText: Unknown
	labelContent: Unknown
	leadingContent: Unknown
	trailingContent: Unknown
	onLeadingClick: Unknown
	onTrailingClick: Unknown
}
type Px {
}
type DefaultLazyKey {
}
type Px {
}
type LazyItemScopeImpl {
	density: Unknown
	constraints: Int
}
type Item {
	index: Unknown
}
type PaginationIndicatorLayoutTransitionInfo {
}
type Refreshing {
	contentDescription: String
}
type Error {
	contentDescription: String
}
type TopAppBarBackgroundBrush {
	brush: Unknown
}
type Custom {
}
type TabsLayoutInfo {
	items: [Unknown]
}
type CarouselPage {
	itemIds: [Unknown]
}
type Typography {
	headingReg12: Unknown
	headingReg14: Unknown
	headingReg16: Unknown
	headingReg18: Unknown
	headingReg24: Unknown
	headingReg32: Unknown
	headingBold12: Unknown
	headingBold14: Unknown
	headingBold16: Unknown
	headingBold18: Unknown
	headingBold24: Unknown
	headingBold32: Unknown
	bodyReg10: Unknown
	bodyReg12: Unknown
	bodyReg14: Unknown
	bodyReg16: Unknown
	bodyReg18: Unknown
	bodySemi10: Unknown
	bodySemi12: Unknown
	bodySemi14: Unknown
	bodySemi16: Unknown
	bodySemi18: Unknown
	bodySemiCaps10: Unknown
	bodySemiCaps12: Unknown
	bodyTall12: Unknown
	bodyTall14: Unknown
	bodyTall16: Unknown
	bodyTall18: Unknown
}
type Full {
	visibilityFraction: Unknown
}
type Loading {
	contentDescription: String
}
type VisualTracerElement {
	instance: Unknown
}
type Downvote {
	background: Unknown
}
type CountingLabelAnimationData {
	enteringText: Unknown
	exitingText: Unknown
	isCountIncreasing: Boolean
	countTransitionData: CountingLabelCountTransitionData
}
type Error {
	description: String
	clearHelperSemantics: Boolean
}
type Loading {
	contentDescription: String
}
type CustomDark {
}
type Divider {
}
type Circle {
}
type Custom {
	color: Unknown
}
type Standard {
	contentDescription: String
	content: Unknown
}
type AnchorAnnotation {
	textRange: Boolean
	appearance: Unknown
	size: Unknown
	fontWeight: Unknown
	underline: Unknown
	visited: Boolean
	onClickLabel: String
}
type Success {
	description: String
}
type Pagination {
	paginationState: Unknown
}
type CountingLabelCountTransitionData {
	animatedEnteringCharIndices: Unknown
	animatedExitingCharIndices: Unknown
}
type BottomSheetContentAlignModifier {
}
type ToastHostLayoutChildData {
	toastId: Unknown
	position: Unknown
	actualHeightPx: Int
	isExiting: Boolean
}
type Error {
	contentDescription: String
}
type AvatarBorder {
	brush: Unknown
}
type RadioGroupItem {
	id: Unknown
	enabled: Boolean
}
type HintUiModel {
	onTopOfMainText: Boolean
	hint: Unknown
	textStyle: Unknown
}
type SegmentInfo {
	page: Unknown
}
type CustomLight {
}
type Custom {
	content: Unknown
}
type MainTextUiModel {
	prefix: Unknown
	suffix: Unknown
	enabled: Boolean
	innerTextField: Unknown
}
type SearchDynamicTrendingPostElement {
	post: SearchPostInfo
	index: SearchTelemetryPayload
	behaviors: SearchPostBehaviors
	linkId: String
}
type SearchPostElement {
	post: Unknown
	isNsfwFeed: Boolean
	isScopedSearch: Boolean
	index: String
}
type SearchSpellcheckFeedElement {
	id: String
	suggestedQuery: String
	ctaTextFormatted: String
	behaviors: SearchSpellcheckBehaviors
	hasResults: Boolean
}
type SearchHeroPostElement {
	post: Unknown
	index: String
}
type SearchPromotedHeroPostElement {
	post: Unknown
	index: String
}
type SearchFeedResultsPage {
	results: [Unknown]
	afterId: String
	sort: Unknown
	timeRange: Unknown
	queryTags: [Unknown]
	suggestedQueries: [Unknown]
	ctaTextsFormatted: [Unknown]
	localModifiers: [Unknown]
	globalModifiers: [Unknown]
	appliedState: Unknown
}
type SearchCommentElement {
	searchComment: SearchComment
	isScopedSearch: Boolean
	linkId: String
}
type SearchPersonToggleFollowElementEvent {
	personId: String
	isUserFollower: Boolean
}
type SearchNoResultsView {
	queryText: String
}
type SearchPersonView {
	personId: String
}
type SearchErrorElement {
	id: String
	icon: String
	message: String
	explanation: String
	retryText: String
	ctaBehavior: SearchErrorBehavior
	telemetry: SearchTelemetryPayload
}
type QueryAutocompleteView {
	id: String
	telemetry: SearchTelemetryPayload
}
type SearchCommentClick {
	commentId: String
	clickElement: Unknown
}
type SearchCommunityElement {
	searchCommunity: SearchCommunity
	linkId: String
}
type SearchDynamicCommunityClick {
	prefixedSubredditName: String
	communityBehavior: NavigationBehavior
}
type SearchCommunityToggleSubscribe {
	communityId: String
}
type SearchSpellcheckClick {
	searchSpellcheckBehaviors: SearchSpellcheckBehaviors
}
type TypeaheadListHeaderClick {
	id: String
	isOpen: Boolean
	behaviors: Behaviors
}
type QueryAutocompleteClick {
	id: String
	query: String
	behaviors: Behaviors
}
type OnTypeaheadSuggestionVisibilityChange {
	id: String
	isVisible: Boolean
}
type SearchPromotedPostVideoAudioToggle {
	muted: Boolean
}
type SearchPromotedPostAdVideoProgress {
	postId: String
	currentTimeMs: Int
	fullDurationMs: Int
	fromTimelineChange: Boolean
	muted: Boolean
}
type OnRevertToOriginalSearchPost {
	linkKindWithId: String
	postTitle: String
	crossPostTitle: String
}
type SearchPromotedPostAdVideoVisibilityChange {
	postId: String
}
type SearchPromotedPostSizeToggleClick {
	postId: String
}
type OnTranslationSearchPostInProgress {
	linkKindWithId: String
	postInProgress: Boolean
	crossPostInProgress: Boolean
}
type SearchCommunityView {
	communityId: String
}
type SearchPromotedPostView {
	postId: String
}
type OnTranslationSearchPostSuccess {
	linkKindWithId: String
	postTitle: String
	crossPostTitle: String
}
type TypeaheadSuggestionView {
	id: String
	telemetry: SearchTelemetryPayload
}
type SearchListHeaderView {
	telemetry: SearchTelemetryPayload
}
type SearchCommentSpoilerReveal {
	commentId: String
}
type SearchBannerClick {
	bannerId: String
	linkId: String
	clickElement: Unknown
	searchBannerBehavior: SearchBannerBehaviors
	telemetry: SearchTelemetryPayload
}
type SearchCommunityToggleSubscribeElementEvent {
	communityId: String
	isUserSubscriber: Boolean
}
type SearchListHeaderClick {
	id: String
	telemetry: SearchTelemetryPayload
	behaviors: SearchListComponentBehaviors
}
type SearchPersonToggleFollow {
	personId: String
}
type SearchCommunityClick {
	communityId: String
}
type SearchCommentView {
	commentId: String
}
type SearchPersonClick {
	personId: String
}
type SearchBannerView {
	telemetry: SearchTelemetryPayload
}
type SearchPostClick {
	postId: String
	postInfo: SearchPostInfo
	clickElement: Unknown
	clickLocation: Unknown
	listComponentId: String
	listElementId: String
	subreddit: String
	author: String
	authorId: String
	searchPostBehaviors: Unknown
	telemetry: SearchTelemetryPayload
	useControlExperience: Boolean
}
type SearchDynamicCommunityView {
	telemetry: SearchTelemetryPayload
}
type TypeaheadSuggestionClick {
	id: String
	query: String
	behaviors: Behaviors
	state: TypeaheadResultItemViewState
}
type SearchPromotedPostClick {
	postId: String
	clickLocation: Unknown
}
type SearchErrorClick {
	ctaBehavior: Unknown
}
type SearchErrorView {
	telemetry: SearchTelemetryPayload
}
type SearchPostView {
	postId: String
	telemetry: SearchTelemetryPayload
	postInfo: SearchPostInfo
	useControlExperience: Boolean
}
type SearchSpellcheckView {
	searchSpellcheckBehaviors: SearchSpellcheckBehaviors
}
type CombinedSearchResultsPage {
	feedElements: [Unknown]
	afterId: String
	sort: Unknown
	timeRange: Unknown
	queryTags: [Unknown]
	suggestedQueries: [Unknown]
	ctaTextsFormatted: [Unknown]
	localModifiers: [Unknown]
	globalModifiers: [Unknown]
	appliedState: Unknown
}
type SearchMediaPostElement {
	post: Unknown
	isNsfwFeed: Boolean
	isScopedSearch: Boolean
	index: Boolean
	preloadResources: Unknown
	linkId: String
}
type SearchPersonElement {
	searchPerson: SearchPerson
	linkId: String
}
type SearchTypeaheadSuggestionFeedElement {
	id: String
	parentId: String
	description: String
	displayTags: [Unknown]
	icon: String
	name: String
	behaviors: Behaviors
	telemetry: SearchTelemetryPayload
	query: String
	isVisible: Boolean
}
type SearchDynamicPostElement {
	post: SearchPostInfo
	tags: Unknown
	telemetry: SearchTelemetryPayload
	behaviors: Unknown
	index: Boolean
	isScopedSearch: Boolean
	listComponentId: String
	listElementId: String
	linkId: String
}
type SearchBannerElement {
	id: String
	ctaText: String
	primaryText: String
	secondaryText: String
	bannerBehaviours: SearchBannerBehaviors
	telemetry: SearchTelemetryPayload
	isDismissed: Boolean
}
type SearchQueryAutocompleteFeedElement {
	id: String
	query: String
	suggestion: String
	behaviors: Behaviors
	telemetry: SearchTelemetryPayload
}
type SearchTypeaheadListFeedElement {
	id: String
	title: String
	isCollapsible: Boolean
	behaviors: Behaviors
	isOpen: Boolean
}
type SearchListHeaderElement {
	id: String
	presentation: SearchListHeaderPresentation
	behaviors: SearchListComponentBehaviors
	telemetry: SearchTelemetryPayload
}
type TranslatableItems {
	postIds: [Unknown]
	commentIds: [Unknown]
	communityDescriptions: [Unknown]
}
type PagedResultsState {
	status: Unknown
	results: [Unknown]
	structureType: Unknown
	afterId: String
	contentReloaded: Boolean
	appliedSort: Unknown
	appliedTimeRange: Unknown
	queryTags: [Unknown]
	suggestedQueries: [Unknown]
}
type Id {
	postId: String
	uniqueId: String
}
type MediaPostAnimatedPreviewViewState {
	aspectRatio: String
	videoMetadata: VideoMetadata
	playerUiOverrides: ViewModelOverride
	shouldAutoPlay: Unknown
}
type CachedMediaRequest {
	searchQueryKey: SearchQueryKey
	filterValues: FilterValues
	searchContext: SearchContext
	posts: [Unknown]
}
type SearchBannerViewState {
	id: String
	linkId: String
	primaryText: String
	secondaryText: String
	ctaText: String
	bannerBehaviors: SearchBannerBehaviors
	telemetry: SearchTelemetryPayload
	isDismissed: Boolean
}
type OnSafeSearchUpdated {
	safeSearch: Boolean
}
type SearchErrorViewState {
	id: String
	message: String
	explanation: String
	ctaText: String
	ctaBehavior: SearchErrorBehavior
	telemetry: SearchTelemetryPayload
}
type SearchTypeaheadSuggestionViewState {
	id: String
	query: String
	isVisible: Boolean
	behaviors: Behaviors
	telemetry: SearchTelemetryPayload
	state: TypeaheadResultItemViewState
}
type SearchNavigationItemViewState {
	text: String
	isSelected: Boolean
	behaviorId: String
}
type SearchPostSection {
	postViewState: LinkPostViewState
	dynamicSerpP0Enabled: Boolean
}
type DropdownViewState {
	title: String
	buttonText: String
	items: Unknown
	modifierTypename: String
	modifierId: String
}
type Compact {
	id: String
	iconUrl: String
	subredditName: String
	memberCount: String
	memberCountAccessibilityLabel: String
	description: String
	communityBehavior: NavigationBehavior
	telemetry: SearchTelemetryPayload
	isLastCommunityUnit: Boolean
}
type OnBannerDismissed {
	bannerType: Unknown
}
type DropdownItemViewState {
	text: String
	secondaryText: String
	isSelected: Boolean
	behaviorId: String
}
type CombinedSearchResultsViewState {
	globalModifiersViewState: ModifierListViewState
	localModifiersViewState: ModifierListViewState
	spellcheckViewState: Unknown
	bannersViewState: BannersViewState
	translationViewState: TranslationViewState
	displayStyle: Unknown
	queryText: String
	bottomSheetViewStates: Unknown
	activeBottomSheet: Unknown
}
type SearchCommunitySection {
	communityViewState: CommunityViewState
}
type SearchPersonSection {
	personViewState: PersonViewState
}
type OnBannerClicked {
	bannerType: Unknown
}
type OnFilterChanged {
	filterValues: FilterValues
}
type SearchTypeaheadListViewState {
	id: String
	title: String
	isCollapsible: Boolean
	isOpen: Boolean
	behaviors: Behaviors
}
type SearchListHeaderSection {
	viewState: SearchListHeaderViewState
}
type SearchErrorSection {
	viewState: SearchErrorViewState
}
type SearchSpellcheckSection {
	viewState: SearchSpellcheckFeedViewState
}
type SearchQueryAutocompleteSection {
	viewState: SearchQueryAutocompleteViewState
}
type SearchTypeaheadListSection {
	viewState: SearchTypeaheadListViewState
}
type TypeaheadResultsScreenArgs {
	query: Unknown
	impressionIdKey: String
	contentType: Unknown
	isFromQueryReformulation: Boolean
}
type SearchBannerSection {
	viewState: SearchBannerViewState
}
type OnTranslationToggled {
	toggled: Boolean
}
type SearchTypeaheadSuggestionSection {
	viewState: SearchTypeaheadSuggestionViewState
}
type SearchResultsScreenArgs {
	query: Unknown
	sortType: Unknown
	timeRange: Unknown
	searchCorrelation: Unknown
	analyticsStructureType: Unknown
	impressionIdKey: String
	contentType: Unknown
	showContentTypeFilter: Boolean
	isFromQueryReformulation: Boolean
}
type SearchSpellcheckFeedViewState {
	id: String
	suggestedQuery: String
	ctaTextFormatted: String
	behaviors: SearchSpellcheckBehaviors
	hasResults: Boolean
}
type SearchNavigationListViewState {
	modifierTypename: String
	modifierId: String
	items: Unknown
}
type OnSpellcheckSuggestionClicked {
	suggestedQuery: String
}
type SearchHeroPostSection {
	postViewState: TrendingHeroPostViewState
}
type ResponseMetadata {
	queryTags: Unknown
	suggestedQueries: Unknown
	result: Unknown
	localModifiers: Unknown
	globalModifiers: Unknown
	isRequestingNextPage: Boolean
	ctaTextsFormatted: Unknown
}
type SearchListHeaderViewState {
	id: String
	presentation: SearchListHeaderPresentation
	behaviors: SearchListComponentBehaviors
	telemetry: SearchTelemetryPayload
}
type SearchPromotedHeroPostSection {
	postViewState: PromotedTrendingHeroPostViewState
	searchAdVisibilityEventHandler: Unknown
	searchAdClickAnalyticsDelegate: Unknown
	videoComposableEffectFixEnabled: Boolean
	enableUpdatedAdVisibleTracker: Boolean
}
type OnSpellcheckSuggestionViewed {
	suggestedQuery: String
}
type Id {
	commentId: String
	uniqueId: String
}
type OnNavigationItemClickedEvent {
	modifierTypename: String
	modifierId: String
	behaviorId: String
}
type OnSearchCommentsSelected {
	source: Unknown
}
type OnCommentViewed {
	commentId: String
}
type OnCommentAuthorClicked {
	commentId: String
}
type PostCommentSearchToolbarState {
	showSearchCommentsToolbar: Boolean
	showDimOverlay: Boolean
}
type CommentViewState {
	id: Id
	legacyIconUrl: String
	nsfwAvatar: Boolean
	commentAuthorUsername: String
	commentAuthorIsOP: Boolean
	timeSinceCommentedLabel: String
	timeSinceCommentedAccessibilityLabel: String
	bodyText: String
	bodyElements: Unknown
	post: PostContainerViewState
	upvotesCountLabel: String
	upvotesCountAccessibilityLabel: String
	isComposeRichTextEnabled: Boolean
	isDividerFixEnabled: Boolean
}
type CombinedSearchResultsScreenDependencies {
	args: SearchResultsScreenArgs
	analyticsScreenData: ScreenPageData
	feedType: Unknown
	screenName: Unknown
	sourcePage: String
}
type SearchMediaPostSection {
	mediaPostViewState: MediaPostViewState
}
type SearchCommentSection {
	commentViewState: CommentViewState
	richTextUtil: Unknown
	richTextElementMapper: Unknown
}
type Default {
	id: String
	communityViewState: CommunityViewState
	communityBehavior: NavigationBehavior
	telemetry: SearchTelemetryPayload
}
type OnDropdownItemClickedEvent {
	modifierTypename: String
	modifierId: String
	behaviorId: String
}
type SearchDynamicCommunitySection {
	viewState: Unknown
}
type OnQuerySubmitted {
	postId: String
	queryText: String
}
type OnBannerViewed {
	bannerType: Unknown
}
type OnCommentClicked {
	commentId: String
}
type ModifierListViewState {
	modifiers: Unknown
	isClickDisabled: Boolean
}
type SearchQueryAutocompleteViewState {
	id: String
	query: String
	suggestion: String
	behaviors: Behaviors
	telemetry: SearchTelemetryPayload
}
type Unknown {
	name: String
}
type OnTranslationToggleLaunched {
	contentType: Unknown
}
type OnRequestLoadMoreSearchComments {
	postId: String
}
type GalleryIndicator {
	text: String
}
type MediaPostViewState {
	id: Id
	post: Unknown
	title: String
	preview: Unknown
	subredditIcon: Unknown
	subredditName: String
	showSubredditName: Boolean
	showNsfwTag: Boolean
	showQuarantinedTag: Boolean
	showSpoilerOverlay: Boolean
	dontInflateVideoControlsEnabled: Boolean
	enableVideoComposableEffectFix: Boolean
	enableUpdatedAdVisibleTracker: Boolean
	postInfo: SearchPostInfo
}
type MediaPostImagePreviewViewState {
	aspectRatio: String
	galleryIndicator: GalleryIndicator
	showPlayButton: Boolean
}
type OnScreenAttach {
	pipHost: Unknown
}
type CommunityAvatarPipState {
	webViewUrl: String
	extraParams: Unknown
	extraHeaders: Unknown
	pipLayoutViewState: PipLayoutViewState
	isConnected: Boolean
}
type GameId {
	value: String
}
type ChannelId {
	id: String
}
type UnknownExperience {
	uxExperience: Unknown
	savedProperties: Unknown
}
type DoubleProperty {
	name: String
	value: Float
}
type Header {
	key: String
	value: String
}
type Subreddit {
	subredditId: String
}
type VideoAppLifecycleAnalyticsModel {
	metadata: VideoMetadata
	pageType: String
	postType: Unknown
	position: Int
	orientation: Unknown
	correlation: VideoPlayerVideoCorrelation
}
type BooleanProperty {
	name: String
	value: Boolean
}
type VideoPlayerVideoCorrelation {
	id: String
}
type Bitrate {
	audioBitrate: Int
	videoBitrate: Int
}
type IntProperty {
	name: String
}
type PageType {
	id: String
}
type Served {
	maxTimeServed: Int
}
type PipSizeSpec {
	videoSize: Unknown
}
type PipLayoutViewState {
	stream: Unknown
	initialAlignment: Unknown
	padding: Unknown
	pipSizeSpec: PipSizeSpec
	zoomFraction: Boolean
	isPipSnappable: Boolean
}
type Result {
	toPlay: Unknown
	toPause: [Unknown]
}
type VideoDimensions {
}
type DefaultEligibleExperience {
	uxExperience: Unknown
	savedProperties: Unknown
	variantId: String
}
type VideoUrls {
	defaultUrl: String
	urlMap: Unknown
}
type SubredditId {
	id: String
}
type VideoPlayerConfig {
	player: Unknown
	shouldStop: Boolean
}
type Chat {
	channelId: String
}
type StringProperty {
	name: String
	value: String
}
type UpdatedVideoAuthorization {
	adaptiveAuthorization: VideoAuthorizationVariant
	mp4Authorization: VideoAuthorizationVariant
	richPostAuthorization: VideoAuthorizationVariant
}
type VideoAuthorizationVariant {
	url: String
	auth: VideoAuthorization
}
type VideoAuthorization {
	postId: String
	authToken: String
	authTokenExpiresAt: Unknown
	authTokenId: String
}
type StreakExtendedToast {
}
type UnlockMomentToast {
	model: Model
}
type OnNewSessionCreated {
	newSession: Unknown
}
type RedditSessionIdData {
	sessionId: String
	sessionIdShort: String
	sessionCreatedTimestamp: Int
	sessionIdSetTimestamp: Int
}
type AccountData {
	token: String
	expiration: Int
}
type VideoCameraRollScreenDependencies {
	view: Unknown
	parameters: Unknown
	videoPickedTarget: Unknown
}
type HorizontalGranularVerticalThreshold {
	vertical: Threshold
}
type Seek {
	fraction: Float
}
type Threshold {
}
type CommunityPickerConfirmButtonState {
	selectedCommunitiesCount: Boolean
	isLoading: Boolean
	isVisible: Boolean
}
type CommunityClick {
	community: Community
}
type CommunityPickerModifications {
	selectedCommunityNames: Unknown
	selectedCommunityIds: Unknown
}
type Subreddit {
	communityIcon: Unknown
}
type CommunityVisible {
	community: Community
}
type Custom {
	iconUrl: String
}
type Content {
	url: String
	shouldTint: Boolean
}
type CommunityPickerViewState {
	items: Unknown
	confirmButton: CommunityPickerConfirmButtonState
	enableCommunitySelection: Boolean
	showSkipButton: Unknown
	appBarIcon: Unknown
	showNewPromptUI: Boolean
}
type NavbarModel {
	icon: String
	tooltip: String
	eventName: String
	deeplink: String
}
type Community {
	id: String
	subredditName: String
	displayName: String
	description: String
	icon: Unknown
	state: Unknown
}
type CommunityPickerLoadingState {
	id: String
}
type Header {
	title: String
	subtitle: String
	promptSubreddit: Community
}
type SharingPreviewBottomSheetViewState {
	preview: PreviewViewState
	includeUsernameAndAvatar: Boolean
	continueButtonState: Unknown
}
type PreviewViewState {
	defaultImageUrl: String
	noUsernameAndAvatarImageUrl: String
	contentDescription: String
}
type Content {
	screenTitle: String
	tabs: Unknown
	currentSortingText: String
	description: String
	learnMoreUrl: String
	items: Unknown
	updateIntervalLabel: String
	lastUpdatedLabel: String
	currentUserRank: CurrentUserRankViewState
	requirementLabel: String
}
type Loading {
	screenTitle: String
	tabs: Unknown
}
type Divider {
	iconUrl: String
	text: String
	label: String
}
type CurrentUserRankViewState {
	rank: String
	avatar: Unknown
	usernamePrefixed: String
	iconUrl: String
	score: String
}
type OnClaimAvatarClick {
	nftInfo: NftInfoViewState
}
type Toggle {
	isEnabled: Boolean
	action: ToggleNotifications
}
type Claimable {
	itemsLeftText: String
}
type ContributionsSection {
	headerType: Unknown
	contributions: Unknown
}
type UnlockedCommunityViewState {
	community: CommunityViewState
	unlockedLabel: String
	achievementImageUrl: String
	contentDescription: String
}
type OnLoadMoreClick {
	nextPageToken: String
}
type OnTabSelected {
	tab: Unknown
}
type CommunityViewState {
	name: String
	iconUrl: String
	color: Unknown
	leaderboardTabId: String
}
type Repeatable {
}
type CommunityViewSectionViewState {
	selectedTab: Unknown
	hasTabs: Boolean
	items: Unknown
	loadMore: Unknown
}
type AchievementDependencies {
	trophyId: Unknown
}
type AchievementPreloadData {
	artworkUrl: String
	title: String
	description: String
	shortDescription: String
	unlockedAt: Unknown
	progress: AchievementPreloadDataProgress
	isNew: Boolean
	repeatCount: String
}
type AchievementModifications {
	toggleCtaIsEnabled: Boolean
	ctaLoading: Boolean
	additionalActionToggleIsEnabled: Boolean
	additionalActionLoading: Boolean
	isPinned: Boolean
	pinCtaLoading: Boolean
	selectedTab: Unknown
	eligibleCommunitiesAppendData: Cursor
	unlockedCommunitiesAppendData: Cursor
	tabsLoadingMore: Unknown
}
type VerticalCard {
	avatarImageUrl: String
	title: String
	description: String
	rewardState: Unknown
	nftInfo: NftInfoViewState
}
type Button {
	action: Unknown
}
type OnCtaClick {
	action: Unknown
	type: Unknown
}
type OnSubredditClick {
}
type Idle {
	nextPageToken: String
}
type ProgressSection {
	progress: ProgressViewState
}
type NoneLeft {
	text: String
}
type AchievementPreloadDataProgress {
}
type InfoCardSection {
	info: TextInfo
	rarityText: String
	rarityContentDescription: String
	rarity: Unknown
}
type HeaderSection {
	title: String
	description: String
}
type PinCtaViewState {
	isPinned: Boolean
	isLoading: Boolean
}
type NumberTextState {
	label: String
	accessibilityLabel: String
}
type OnPostClick {
}
type ProgressViewState {
	current: String
}
type CaptionSection {
	caption: String
	contentDescription: String
}
type EligibleCommunityViewState {
	community: CommunityViewState
	progress: CommunityProgressViewState
	contentDescription: String
}
type OnPinCtaClick {
	isPinned: Boolean
}
type NftInfoViewState {
	rewardId: String
	description: String
	backgroundGradient: [Unknown]
	avatarWithCardImageUrl: String
}
type HorizontalCard {
	avatarImageUrl: String
	title: String
	description: String
	nftInfo: Unknown
	clickAction: Unknown
}
type IconSection {
	url: String
	thumbnailUrl: String
	isNew: Boolean
	animateSparklesIfNew: Boolean
	contentDescription: String
}
type User {
	rank: String
	avatar: Unknown
	username: String
	usernamePrefixed: String
	score: String
	positionChangeIconUrl: String
	positionChange: Unknown
	isCurrentUser: Boolean
}
type Content {
	sections: Unknown
	cta: Unknown
	pinCta: PinCtaViewState
	additionalAction: Unknown
}
type OnTabClick {
}
type TabViewState {
	id: String
	title: String
	isActive: Boolean
}
type CommunityProgressViewState {
	done: String
}
type EndFooter {
	text: String
}
type OnRewardCardClick {
	clickAction: Unknown
}
type OnUserClick {
}
type TextInfo {
	label: String
	value: String
	contentDescription: String
}
type LeaderboardDependencies {
}
type OnLearnMoreClick {
	learnMoreUrl: String
}
type Error {
	screenTitle: String
}
type OnScrollPositionChange {
}
type Loaded {
	thumbnailImageUrl: Unknown
	imageUrl: String
	title: String
	description: String
}
type BackgroundGradient {
	colors: Unknown
}
type Args {
	trophyId: String
	description: String
	backgroundGradient: [Unknown]
	avatarWithCardImageUrl: String
}
type Loading {
	thumbnailImageUrl: Unknown
	title: String
}
type ClaimAvatarViewState {
	background: BackgroundGradient
	title: String
	description: String
	claimButtonState: Unknown
	avatarWithCardImageUrl: String
	animationStage: Unknown
}
type Failure {
	username: String
}
type StreaksProgressed {
	animatedText: Unknown
	contentDescription: String
}
type PublicAchievementViewState {
	id: String
	imageUrl: String
	name: String
	repeatLabel: String
	contentDescription: String
}
type OnAchievementClick {
	viewState: PublicAchievementViewState
}
type Loading {
	numAchievements: String
}
type OnAchievementClick {
	achievementState: Unknown
}
type OnAchievementClick {
	achievementState: Unknown
}
type Progress {
}
type Content {
	achievementClickHandlingEnabled: Boolean
	achievements: Unknown
	username: String
}
type Args {
}
type ProgressViewState {
}
type UserImage {
	url: String
}
type OnboardingSectionViewState {
	id: String
	direction: Unknown
	title: Unknown
	hasNftBadge: Boolean
}
type Carousel {
	state: AchievementsCategoryViewState
}
type AchievementCategoryScreenDependencies {
	args: Args
}
type AchievementsOnboardingViewState {
	avatar: Unknown
	sections: Unknown
}
type OnUnlockMomentsEnabledChange {
	enabled: Boolean
}
type OnSectionClick {
}
type Content {
	title: String
	achievements: Unknown
	timeline: AchievementsTimelineViewState
	hasShareButton: Boolean
}
type Content {
	sections: Unknown
}
type AchievementsCategoryViewState {
	id: String
	subtitle: String
	categoryPill: TextIconPillViewState
	achievements: Unknown
	timeline: AchievementsTimelineViewState
	contentDescription: String
}
type TextIconPillViewState {
	iconUrl: String
	text: String
}
type AchievementSettingsState {
	unlockMomentsEnabled: Boolean
	showOnboardingEntrypoint: Boolean
}
type Snoovatar {
	url: String
}
type SubredditId {
	id: String
}
type OnAchievementEnabledChanged {
	settingId: Boolean
}
type AchievementToggleViewState {
	settingId: String
	title: String
	description: String
	enabled: Boolean
}
type OnAchievementsEnabledChanged {
	enabled: Boolean
}
type Content {
	achievementsEnabled: Boolean
	achievements: Unknown
}
type Model {
	trophies: Unknown
	message: String
}
type DeepLinkData {
	deepLink: Unknown
	correlationId: String
	listener: Unknown
}
type Valid {
	userId: String
	address: Address
	userProfileImageUrl: String
}
type HandleFile {
	intentAction: String
	intentData: Unknown
}
type VaultAlreadyExist {
	state: Unknown
}
type VaultDrawerInfo {
	displayVault: Boolean
	displaySecureVaultWarning: Boolean
	userHasVault: Boolean
}
type InProgress {
	bytesDownloaded: Int
	totalBytesToDownload: Int
}
type Created {
	address: Address
}
type PerformanceTrackingData {
	actionInfo: ActionInfo
	post: Post
	subreddit: Subreddit
	media: Media
}
type FrameMetrics {
}
type Subreddit {
	subredditName: String
}
type WikiScreenParams {
	subredditName: String
	wikiPage: String
}
type Success {
	title: String
	richTextElements: Unknown
	isToc: Boolean
	authorName: String
	revisedAt: String
}
type OnRichTextLinkClicked {
	richTextLink: RichTextLink
}
type Error {
	status: Unknown
}
type WikiViewState {
	isRefreshing: Boolean
	wikiLoadingState: Unknown
	toolBarColor: Unknown
}
type PostFlairTemplateItem {
	id: String
	type: String
	richtext: String
	flairRichTextItems: [Unknown]
	text: String
	textColor: String
	backgroundColor: String
}
type ZeroStateSubredditInfoResult {
	flairs: Unknown
}
type WikiPageModel {
	isToc: Boolean
	contentRichText: [Unknown]
	authorName: String
	revisedAt: String
	status: Unknown
	subredditId: String
}
type Media {
	autoplayEnabled: Boolean
}
type Post {
	kindWithId: String
	type: String
}
type ActionInfo {
	screenName: String
	position: Int
}
type TrendingResponse {
	trendingSearches: [Unknown]
}
type TrendingSearchResultDataModel {
	links: [Unknown]
}
type SearchSuggestionsKey {
	query: String
	includeUsers: Boolean
	searchCorrelation: Unknown
	includeOver18: Boolean
	searchQueryKey: SearchQueryKey
}
type TypeaheadResultState {
	requestState: Unknown
	results: Unknown
	query: String
	error: Unknown
}
type TypeaheadSuggestionKey {
	query: String
	over18: Boolean
}
type TrendingSearchDataModel {
	queryText: String
	displayText: String
	backupSubredditOccurences: Int
	subredditOccurrences: Int
	results: Unknown
	subredditWhiteListed: Boolean
}
type SelectedScopeItem {
	scopeName: String
	scopeIconUrl: String
	hasIcon: Boolean
	searchScope: Unknown
	selectedFlairItem: Unknown
}
type SearchShortcutItem {
	searchShortcutItemType: Unknown
	searchShortcutItemLabelPrefix: String
	subredditName: String
	searchSortType: Unknown
	sortTimeFrame: Unknown
}
type OnTrendingSearchViewed {
	id: String
	displayQuery: String
	promoted: Boolean
}
type OnRecentSearchViewed {
	id: Int
}
type OnAdVisibilityChanged {
	id: String
	viewWidthPx: Boolean
}
type RecentItemViewState {
	type: Unknown
	id: Int
	position: String
	subredditName: String
	flair: String
	iconUrl: String
	isUser: Boolean
	shouldDisplayAsNsfw: Boolean
	shouldDisplayAsQuarantined: Boolean
}
type ZeroStateResults {
	trendingItems: [Unknown]
	recentItems: [Unknown]
}
type OnRecentSearchClicked {
	id: Int
}
type TrendingItemViewState {
	id: String
	queryString: String
	postTitle: String
	thumbnailUrl: String
	isPromoted: Boolean
	isBlankAd: Boolean
}
type OnRecentSearchDismissed {
	id: Int
}
type OnTrendingSearchClicked {
	id: String
	queryString: String
	promoted: Boolean
}
type OnQuerySubmitted {
	query: String
}
type FlairItemData {
	textType: String
	text: String
	textColor: String
	richText: String
	backgroundColor: String
	id: String
	elements: Unknown
}
type RedditScopedSearchScreenDependencies {
	args: Unknown
}
type ScopedSearchViewState {
	scopedSearchSuggestionItems: Unknown
	flairView: Unknown
	selectedScopeItem: Unknown
	flairComposeEnabled: Boolean
}
type OnDismissScopeEvent {
	scopeName: String
	searchScope: Unknown
}
type OnClickFlairEvent {
	id: String
}
type OnClickScopedSuggestionItemEvent {
	searchSortType: Unknown
	sortTimeFilter: Unknown
}
type Count {
}
type SelectedFlairItem {
	text: String
	textColor: String
	richText: String
	backgroundColor: String
	elements: Unknown
}
type Error {
	error: Unknown
}
type RedditEmbedWebViewInternalState {
	headers: Unknown
}
type OnRefreshAuth {
	webView: Unknown
}
type OnBannerClicked {
	bannerType: Unknown
}
type Custom {
	styles: Unknown
}
type Unknown {
	t: Unknown
}
type Params {
	accessoryIds: [Unknown]
	styles: Unknown
	snoovatarSource: SnoovatarSourceInfo
	hasNftAccessories: Boolean
	runwayItemName: String
	backgroundSelection: Unknown
	inventoryItemAnalytics: SnoovatarInventoryItemAnalyticsData
	listingAnalytics: SnoovatarStorefrontListingAnalyticsData
	actionInfoAnalytics: ActionInfoAnalytics
}
type SavedSnoovatar {
	username: String
	snoovatarUrl: String
}
type ActionInfoAnalytics {
	reason: String
	pageType: String
}
type Params {
	outfitId: String
	snoovatarSource: Unknown
	inventoryItemAnalytics: SnoovatarInventoryItemAnalyticsData
	listingAnalytics: SnoovatarStorefrontListingAnalyticsData
}
type OnTypeaheadItemViewed {
	id: TypeaheadResultItemId
}
type Params {
	subreddit: String
	subredditKindWithId: String
	file: Unknown
}
type OnBannerDismissed {
	bannerType: Unknown
}
type Params {
	subreddit: String
	subredditKindWithId: String
	file: Unknown
}
type TypeaheadQueryPromptItemId {
	itemId: String
}
type Params {
	subreddit: String
	subredditKindWithId: String
}
type Progress {
}
type OnQuerySubmitted {
	query: String
}
type WebEmbedWebViewDependencies {
	webView: Unknown
}
type TypeaheadResultItemId {
	itemId: String
	index: String
}
type Params {
	subreddit: String
	subredditKindWithId: String
}
type QueryFormationResultList {
	displayQuery: String
	displayNsfwBanner: Boolean
	requestState: Unknown
	sections: Unknown
	displayCovidBanner: Boolean
	displayNoInternetBanner: Unknown
}
type Complete {
	mediaUrl: String
}
type OnTypeaheadResultClicked {
	id: TypeaheadResultItemId
}
type OnQueryPromptClicked {
}
type Update {
	voteDirection: Unknown
}
type Ready {
	bitmap: Unknown
}
type BuildingBitmap {
	onReady: Unknown
}
type ZIndex {
}
type RenderableAssetUiModel {
	id: String
	zIndex: String
}
type RenderableUiModel {
	assets: Unknown
	styles: Unknown
}
type RenderableStyleUiModel {
	name: String
	rgb: String
}
type RedditCustomTabsParams {
	toolbarColor: Int
	shareState: Int
	initialHeightInPx: Int
	resizeUponScrolling: Boolean
	cornerRadiusInDp: Int
}
type WaitingForResponses {
	renderOptions: Unknown
	glideRequests: Unknown
	readyComponents: Unknown
	onReady: Unknown
}
type Dp {
}
type Ready {
	model: Unknown
	drawable: Unknown
}
type Dp {
}
type AvatarBuilderShowcaseUiState {
	showcase: Showcase
}
type OnDeepLinkClick {
	url: String
}
type OnSearchFromHistoryRequested {
	searchHistoryRecord: SearchHistoryRecord
}
type OnSearchQueryChanged {
	query: String
}
type OnRemoveSearchHistoryRecord {
	searchHistoryRecord: SearchHistoryRecord
}
type OnSearchRequested {
	query: String
}
type SearchInStorefrontViewState {
	query: String
	searchHistory: Unknown
}
type Loaded {
	items: Unknown
}
type Loaded {
	contentItems: [Unknown]
}
type Params {
	link: Unknown
}
type Params {
	link: Unknown
	direction: Unknown
	notifyPositiveAction: Boolean
}
type CommunityVisibilityViewState {
	isEmployee: Boolean
	matureTopicSelected: Boolean
	matureCommunitySelected: Boolean
	visibility: Unknown
	loadingState: Boolean
	communityVisibilityDescription: Unknown
}
type Params {
	name: String
	description: String
	visibility: Unknown
	isNsfw: Boolean
	topics: [Unknown]
}
type MatureCommunityCheckedChange {
	checked: Boolean
}
type ImageInputViewState {
	url: String
	fileName: String
	imageSelected: Boolean
}
type CommunityStyleViewState {
	banner: ImageInputViewState
	avatar: ImageInputViewState
}
type GotCreatorKitResult {
	result: Unknown
}
type VisibilityChanged {
	visibility: Unknown
}
type TopicSelected {
	topic: ChildTopic
}
type TopicUnselected {
	topic: ChildTopic
}
type CommunityTopicSelectionViewState {
	topics: [Unknown]
	selectedTopicsViewState: SelectedTopicsViewState
	nextButtonEnabled: Boolean
}
type CommunityNameChanged {
	communityName: String
}
type CommunityDescriptionChanged {
	communityDescription: String
}
type CommunityInfoViewState {
	communityName: InputFieldViewState
	communityDescription: InputFieldViewState
	nextButtonEnabled: Boolean
}
type RequiresMainThread {
	value: Boolean
}
type SelectedTopicsViewState {
	selectedTopics: [Unknown]
	userMessage: Unknown
}
type CommentsLoadPerformanceTrackerParams {
	isPullToRefresh: Boolean
}
type InputFieldViewState {
	value: String
	isValid: Boolean
	errorMessage: String
}
type AwardImagesUiModel {
	defaultUrl: String
	icon: String
	xsmall: String
	small: String
	medium: String
	large: String
}
type CommentAwardsUiModel {
	showAwards: Boolean
	awards: [Unknown]
	isHighlightedForAwards: Boolean
	awardSpecialTreatments: Unknown
	allowAwardAnimations: Boolean
	isHighlightEnabled: Boolean
}
type ModmailConversationActionSheet {
	actions: Unknown
}
type RemoteTypeaheadByTypeResult {
	subreddits: [Unknown]
	profiles: [Unknown]
	queryTags: [Unknown]
}
type TypeaheadSubreddit {
	id: String
	name: String
	prefixedName: String
	type: String
	publicDescriptionText: String
	isQuarantined: Boolean
	subscribersCount: Int
	isNsfw: Boolean
	isSubscribed: Boolean
	iconImg: String
	primaryColor: String
	eligibleMoments: [Unknown]
}
type TypeaheadProfile {
	id: String
	name: String
	prefixedName: String
	totalKarma: String
	isSubscribed: Boolean
	isNsfw: Boolean
	legacyPrimaryColor: String
	createdUtc: Int
}
type InstallReferrerResult {
	appStore: String
	latestInstallTimestamp: Int
	latestRawReferrer: String
	latestClickTimestamp: Int
}
type AwardUiModel {
	id: String
	type: Unknown
	name: String
	images: AwardImagesUiModel
	description: String
	count: Int
	noteworthy: Boolean
	animate: Boolean
	coinPrice: Int
	imageFormat: Unknown
	allowAwardAnimations: Boolean
	startsAtUtcSeconds: Int
	endsAtUtcSeconds: Int
	isReaction: Boolean
	awardingsByCurrentUser: [Unknown]
	staticImages: AwardImagesUiModel
	totalAwardCount: String
}
type TruncatedAwards {
	modAward: AwardUiModel
	awards: Unknown
}
type NotificationShownEvent {
	hasInboxType: Boolean
	isMessageType: Boolean
}
type RedditSessionState {
	id: Unknown
	deviceId: String
	sessionId: String
	sessionIdShort: String
	sessionCreatedTimestamp: Int
	loId: String
	pushNotificationId: String
	googleAdId: String
	amazonAdId: String
}
type ModToolsAction {
	id: Unknown
	iconRes: String
	tagsRes: Int
	shortDescRes: Int
	isNew: Boolean
	isExternalLink: Boolean
	ignoreColorFilter: Boolean
	analyticsLogAction: Unknown
	navigationAction: Unknown
	subActions: [Unknown]
}
type ModToolsSubAction {
	id: Unknown
	stringRes: String
	analyticsLogAction: Unknown
	navigationAction: Unknown
}
type Report {
	message: Message
}
type Delete {
	message: Message
}
type Copy {
	message: Message
	text: Unknown
}
type MessageFeatures {
	isA11yLinkFixEnabled: Boolean
	isA11yLinkAnnotationEnabled: Boolean
	isImageThumbnailsEnabled: Boolean
	isMessageModsDistinguishEnabled: Boolean
	isMessageAdminDistinguishEnabled: Boolean
	isDisplayRemovedImagesEnabled: Boolean
	isGifAutoplayEnabled: Boolean
	isReduceMotionEnabled: Boolean
	isThreadMessageKeyEnabled: Boolean
	isThreadsOutOfBoundsFixEnabled: Boolean
	isReactionOptimizationForLowNetworkEnabled: Boolean
	isCacheReactionsEnabled: Boolean
	isAnimateMessagesContentInList: Boolean
	isAnimateSendingBtnInBottomBarEnabled: Boolean
	isAnimateYourMessageFromBelowEnabled: Boolean
	isShowLoadingShimmersUiEnabled: Boolean
}
type Share {
	message: Message
}
type RecapPillState {
	isPillVisible: Boolean
}
type AddClick {
}
type HeaderItem {
	title: String
	subtitle: String
}
type EmoteClick {
	emote: Emote
}
type AddIcon {
}
type EmoteLongClick {
	emote: Emote
}
type EmoteItem {
	emote: Emote
	isEnabled: Boolean
	isDeletable: Boolean
}
type SessionModeOperator {
	mode: Unknown
	createSession: Unknown
	cleanupState: Unknown
	afterEnterSessionMode: Unknown
	beforeExitSessionMode: Unknown
}
type CountryCodesNamesUiModel {
	isoCode: String
	name: String
}
type MeasurementDetails {
	completedAt: Int
	executionTime: Int
}
type EventCommunityPicker {
	title: String
	subtitle: String
	iconUrl: String
	communityPickerEntries: [Unknown]
}
type CommunityPickerEntry {
	iconUrl: String
	subreddit: Subreddit
	description: String
	name: String
}
type Subreddit {
	name: String
	id: String
	description: String
	isSubscribed: Boolean
	iconUrl: String
	primaryColor: String
}
type InputParams {
	queryItems: [Unknown]
	topicItems: [Unknown]
}
type TypeaheadResultSectionViewState {
	titleId: [Unknown]
	isCollapsable: Boolean
	isOpen: Boolean
	onToggle: Unknown
}
type TypeaheadResultItemViewState {
	id: TypeaheadResultItemId
	prefixedName: String
	isUser: Boolean
	metricsCountText: String
	metricsCountTextAccessibility: String
	description: String
	iconUrl: String
	isQuarantined: Boolean
	isNsfw: Boolean
	markAsNsfw: Boolean
	primaryColor: Int
}
type UserDisplayItem {
	userId: String
	userName: String
	userIconUrl: String
	actionedAt: String
	reason: String
}
type BranchUrlQueryParameter {
	name: String
	value: String
	timestamp: Unknown
	isDeepLink: Boolean
	validityWindow: Int
}
type DistributionCampaign {
	id: String
	name: String
	listings: Unknown
}
type DistributionListing {
	id: String
	name: String
	foregroundImageUrl: String
	backgroundImageUrl: String
	totalQuantity: Int
	soldQuantity: Int
	status: Unknown
	inventoryItemId: String
	outfitId: String
}
type RecentNoteResult {
	noteItem: Unknown
	totalLogs: Int
}
type StreaksTimelineHeader {
	title: String
	items: [Unknown]
	contentDescription: String
}
type TextIconCategoryPill {
	text: String
	iconUrl: String
}
type TimelineReward {
}
type TimelineItem {
	label: String
	isReached: Boolean
	isCurrent: Boolean
	reward: TimelineReward
}
type UserLogsCountsResult {
	noteCount: Int
	approvalCount: Int
	removalCount: Int
	banCount: Int
	muteCount: Int
	inviteCount: Int
	spamCount: Int
	contentChangeCount: Int
	modActionCount: Int
	allCount: Int
}
type UserLogsResult {
	startCursor: String
	endCursor: String
	hasNextPage: Boolean
	hasPreviousPage: Boolean
	noteItems: Unknown
}
type ImmutableAnalyticsSession {
	sessionId: String
	sessionCreatedTimestamp: Int
	isLoggedOut: Boolean
	isIncognito: Boolean
	isLoggedIn: Boolean
	loId: String
	accountId: String
	accountCreatedUtc: Int
	googleAdId: String
	amazonAdId: String
}
type NotificationViewState {
	id: String
	title: String
	body: String
	avatarViewState: AvatarViewState
	notificationTypeIconRes: Boolean
	createdTimeInString: String
	actionViewState: ActionViewState
	isInboxA11yEnabled: Boolean
	isOverflowVisible: Boolean
	notificationContainerContentDescription: String
	accessibilityCustomActions: [Unknown]
	invertColors: Boolean
}
type SectionHeaderViewState {
	title: String
}
type NotificationUpsellViewState {
	notificationName: String
	title: String
	body: String
}
type InboxBannerViewState {
	bannerNotification: InboxBannerNotification
}
type AccessibilityCustomActionState {
	text: String
	event: Unknown
}
type ChatMessage {
	roomId: String
	eventId: String
}
type Comment {
	postId: String
	commentKindWithId: String
}
type Post {
	postId: String
}
type ActionViewState {
	icon: Unknown
	rplIcon: Icon
}
type AvatarViewState {
	avatarUrl: String
	isAvatarNsfw: Boolean
	isSubreddit: Boolean
}
type ModLogDisplayItem {
	id: String
	moderatorType: Unknown
	moderatorName: String
	timeAgo: String
	actionName: String
	description: String
	content: String
	linkable: Unknown
	accessibilityContent: String
}
type Redditor {
	redditorId: String
	redditorName: String
}
type PopulatedImage {
	thumbnailUrl: String
}
type EmbeddedVideoViewState {
	mediaPreview: CellMediaSourceElement
	videoUrl: String
}
type Show {
	suggestedQuery: String
	ctaTextFormatted: String
	showDivider: Boolean
}
type BannersViewState {
	showSafeSearchBanner: Boolean
	isSafeSearchActive: Boolean
	showNsfwBanner: Boolean
	showCovidBanner: Boolean
	showElectionBanner: Boolean
	ctaText: String
	primaryText: String
	secondaryText: String
	bottomSheetViewStates: Unknown
}
type PromotedTrendingHeroPostViewState {
	id: Id
	title: String
	ctaTitle: String
	ctaAction: String
	authorName: String
	prefixedAuthorName: String
	communityIconPath: String
	mediaViewState: Unknown
	adAttributionOverflowSetting: HeaderOverflowItemUiState
	postInfo: SearchPostInfo
}
type VideoViewState {
	videoMetadata: VideoMetadata
	previewImageUrl: String
	shouldAutoPlay: Boolean
	playerUiOverrides: ViewModelOverride
}
type ImageViewState {
	mediaPreview: CellMediaSourceElement
}
type TranslationViewState {
	showTranslationToggle: Boolean
	translationToggled: Boolean
}
type TrendingHeroPostImagePreview {
	url: String
}
type Id {
	post: String
	uniqueId: String
}
type TrendingHeroPostViewState {
	id: Id
	title: String
	subtitle: String
	subtitleAccessibility: String
	image: Unknown
	communityIcon: Unknown
	showTranslationInProgressShimmer: Boolean
	searchPostInfo: SearchPostInfo
	telemetry: SearchTelemetryPayload
	searchPostBehaviors: Unknown
	isDividerFixEnabled: Boolean
	behaviors: SearchPostBehaviors
}
type PopulatedGalleryImage {
	thumbnailUrl: String
	numImages: String
}
type PostContainerViewState {
	icon: Unknown
	prefixedCommunityName: String
	authorName: String
	age: String
	title: String
	markAsQuarantined: Boolean
	markAsNsfw: Boolean
	markAsSpoiler: Boolean
	upvoteCount: String
	commentCount: String
	allowAuthorClicks: Boolean
	linkFlairText: String
	linkFlairTextColor: String
	linkFlairBackgroundColor: String
	showFlair: Boolean
	showUsername: Boolean
	authorSnoovatarUrl: String
	shouldBlurNSFWAvatar: Boolean
	showTranslationInProgressShimmer: Boolean
}
type LinkPostViewState {
	id: Id
	title: String
	subredditIcon: Unknown
	subredditName: String
	prefixedSubredditName: String
	authorUsername: String
	authorId: String
	authorSnoovatarUrl: String
	timeSincePosted: String
	timeSincePostedAccessibility: String
	isNSFW: Boolean
	isSpoiler: Boolean
	isQuarantined: Boolean
	upvoteCountLabel: String
	upvoteCountAccessibilityLabel: String
	commentCountLabel: String
	commentCountAccessibilityLabel: String
	postType: Unknown
	thumbnail: Unknown
	crossPostParent: LinkPostViewState
	showUsername: Boolean
	shouldBlurNSFWAvatar: Boolean
	showTranslationInProgressShimmer: Boolean
	listComponentId: String
	listElementId: String
	searchPostBehaviors: Unknown
	searchPostInfo: SearchPostInfo
	telemetry: SearchTelemetryPayload
	isDividerFixEnabled: Boolean
}
type SnoovatarStorefrontListingAnalyticsData {
	listingId: String
	listingCoinsPrice: Int
	listingCurrency: String
	listingQuantity: Int
	listingNftStatus: String
}
type EditableOptionUiModel {
	optionId: Int
	hintText: String
	currentText: String
	selected: Boolean
}
type JoinFollowButtonViewState {
	joinButton: Unknown
	onSubscribeEvent: Unknown
}
type TextOptionUiModel {
	optionId: Int
	text: String
	selected: Boolean
}
type SnoovatarInventoryItemAnalyticsData {
	outfitId: String
	inventoryItemId: String
	inventoryItemName: String
	contractAddress: String
	rarity: String
	walletAddress: String
	tokenId: String
}
type SearchComment {
	id: String
	parentId: String
	createdAt: Int
	lastEditedAt: Int
	score: Boolean
	content: Content
	author: SearchPerson
	authorIsOP: Boolean
	postInfo: PostInfo
}
type SearchPerson {
	id: String
	username: String
	prefixedName: String
	createdAt: Int
	totalKarma: Boolean
	isFollowed: Boolean
	acceptsFollowers: Boolean
	resizedIcons: [Unknown]
	legacyIconUrl: String
}
type QueryModifiers {
	includeSpellcheck: Boolean
}
type SearchTranslationContent {
	originalContent: String
	translatedContent: String
	showTranslation: Boolean
	showTranslationInProgressShimmer: Boolean
}
type SearchCommunity {
	id: String
	communityIcon: String
	displayNamePrefixed: String
	userIsSubscriber: Boolean
	subscribers: Int
	publicDescription: String
	over18: Boolean
	kindWithId: String
	displayName: String
	quarantined: Boolean
	showTranslation: Boolean
	translatedDescription: String
	showTranslationInProgressShimmer: Boolean
}
type Content {
	markdown: String
	richtextJson: String
	mediaMetadata: Unknown
	showTranslation: Boolean
	translatedRichTextJson: String
}
type FilterValues {
	query: Unknown
	sortType: Unknown
	timeRange: Unknown
	safeSearch: Boolean
	postTypes: [Unknown]
	postIDs: [Unknown]
	pane: String
	filterValuesMap: Unknown
}
type SearchTopComponent {
	navigation: [Unknown]
	filterBar: [Unknown]
}
type SearchQueryData {
	results: [Unknown]
	endCursor: String
	treatment: String
	localModifiers: [Unknown]
	globalModifiers: [Unknown]
	appliedState: Unknown
	appliedSort: String
	appliedTimeRange: String
	queryTags: [Unknown]
	suggestedQueries: [Unknown]
	ctaTextsFormatted: [Unknown]
	componentData: Unknown
	topComponent: SearchTopComponent
}
type PostInfo {
	postId: String
	postKindWithId: String
	postTitle: String
	createdUtc: Int
	score: Int
	flairSafeBackgroundColor: String
	flairSafeTextColor: String
	flairRichText: String
	flairText: String
	postAuthorId: String
	postAuthor: String
	postAuthorSnoovatarUrl: String
	postAuthorIsNSFW: Boolean
	quarantine: Boolean
	over18: Boolean
	spoiler: Boolean
	subredditDetail: Unknown
	subredditId: String
	subreddit: String
	subredditNamePrefixed: String
	isAuthorSuspended: Boolean
	isAuthorDeleted: Boolean
	showTranslation: Boolean
	translatedPostTitle: String
	showTranslationInProgressShimmer: Boolean
	isTranslatable: Boolean
	crosspostRootId: String
	isVideo: Boolean
	preview: Unknown
	postHint: String
	url: String
	media: Unknown
	gallery: Unknown
	mediaMetadata: Unknown
	promoted: Boolean
	eventCorrelationId: String
	poll: Unknown
	isSelf: Boolean
	language: String
	domain: String
}
type SearchPostInfo {
	id: String
	kindWithId: String
	createdUtc: Int
	title: String
	url: String
	isSpoiler: Boolean
	postHint: String
	isNsfw: Boolean
	isScoreHidden: Boolean
	score: Boolean
	permalink: String
	isSelfPost: Boolean
	isTranslatable: Boolean
	subredditId: String
	subredditName: String
	subredditNamePrefixed: String
	subredditDetail: Unknown
	isSubredditNsfw: Boolean
	isQuarantined: Boolean
	isSubscribed: Boolean
	subredditIcon: String
	subredditPath: String
	authorName: String
	authorId: String
	authorIsNSFW: Boolean
	authorSnoovatarUrl: String
	authorIconUrl: String
	crossPostParent: SearchPostInfo
	crossPostParentList: [Unknown]
	thumbnail: String
	preview: Unknown
	gallery: Unknown
	rtjson: Unknown
	translatedTitle: SearchTranslationContent
	selfText: String
	media: Unknown
	mediaMetadata: Unknown
	isPromoted: Unknown
	domain: String
	followed: Boolean
	isCreatedFromAdsUi: Boolean
	isBlankAd: Boolean
	adImpressionId: String
	adSubcaption: String
	adSubcaptionStrikeThrough: String
	leadGenerationInformation: AdLeadGenerationInformation
	promoLayout: Unknown
	callToAction: String
	ctaMediaColor: String
	appStoreData: AppStoreData
	events: [Unknown]
	encryptedTrackingPayload: String
	outboundLink: Unknown
	shouldOpenExternally: Boolean
	promotedCommunityPost: Unknown
	galleryItemPosition: [Unknown]
	eventCollaborators: Unknown
	eventRemindeesCount: Int
	eventAdmin: Boolean
	eventStartUtc: Int
	eventEndUtc: Int
	eventType: Unknown
}
type Enabled {
	selectedBackground: Unknown
	selectableBackgrounds: Unknown
}
type Manual {
	outfitId: String
	inventoryId: String
	name: String
	backgroundUrl: String
}
type Auto {
	outfitId: String
	inventoryId: String
	name: String
	backgroundUrl: String
}
type ChildTopic {
	id: String
	displayName: String
	sensitivity: Unknown
}
type DraftCommunity {
	name: String
	description: String
	bannerUrl: String
	avatarUrl: String
	topics: [Unknown]
	visibility: Unknown
}
type Topic {
	id: String
	displayName: String
	icon: String
	sensitivity: Unknown
	children: Unknown
}
type UnloadPixelDataModel {
	payload: String
	url: String
	uniqueId: Int
	timestampInMilliseconds: Int
}
type DynamicConfigEntry {
	name: String
	value: String
	typename: String
}
type DisclaimerTextUiModel {
	richTextItems: Unknown
}
type AnnouncementPresentationModel {
	id: String
	title: String
	bodyText: String
	iconUrl: String
}
type FullBleedVideoEventProperties {
	videoNavigationSession: Unknown
	feedId: String
	servingPosition: Int
	actionPosition: Unknown
}
type MediaEventProperties {
	width: String
	mediaType: Unknown
}
type SubredditEventProperties {
	id: String
	name: String
}
type EventProperties {
	linkId: String
	subredditEventProperties: SubredditEventProperties
	postEventProperties: PostEventProperties
	pageEventProperties: PageEventProperties
	mediaEventProperties: MediaEventProperties
	fullBleedVideoEventProperties: FullBleedVideoEventProperties
	correlationId: String
}
type PageEventProperties {
	pageType: String
	position: Int
}
type PostEventProperties {
	kindWithId: String
	nsfw: Boolean
	promoted: Boolean
	domain: String
}
type BoolValue {
	value: Boolean
}
type StringValue {
	value: String
}
type FloatValue {
}
type IntValue {
}
type MapValue {
	value: Unknown
}
type DynamicConfigOverrideEntry {
	name: String
	keyName: String
	value: String
}
type PromotedUserPostCollectionUiModel {
	linkId: String
	uniqueId: String
	promoted: Boolean
	adPromotedUserPosts: Unknown
	postsViaText: String
	subredditName: String
	subredditImageUrl: String
}
type PromotedUserPostCollectionItemModel {
	linkId: String
	uniqueId: String
	postId: String
	title: String
	upvotesText: String
	upvotesCount: Int
	commentsText: String
	commentsCount: Int
	postImageUrl: String
	postImageWidth: Unknown
}
type LeadGenModalDependencies {
	onSubmitted: Unknown
	retrieveData: Unknown
	publicEncryptionKey: String
}
type LeadGenScreenDependencies {
	onSubmitted: Unknown
	retrieveData: Unknown
	publicEncryptionKey: String
}
type InputFieldResources {
}
type ComposeCtaViewHolder {
}
type Time {
	calculateLoopCount: Unknown
}
type AdPromotedCommunityPostSection {
	uiModel: PromotedCommunityPostUiModel
	isClassicView: Boolean
}
type Enabled {
	loopingStrategy: Unknown
}
type SplitInstallState {
	bytesDownloaded: Int
	totalBytesToDownload: Int
	status: Unknown
}
type BrandLiftSurveyDependencies {
	view: Unknown
	getContext: Unknown
}
type TopicsListElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	title: String
	schemeName: String
	topics: Unknown
}
type AnnouncementStatus {
	id: Boolean
	impressionCount: Int
}
type Standard {
	message: String
	type: Unknown
}
type TokenRequestFailure {
	errorMessage: String
	nonce: String
	isRetryable: Boolean
	cause: Unknown
}
type ChallengeConsumerFailure {
	errorMessage: String
	cause: Unknown
}
type NonceCreationFailure {
	errorMessage: String
	requestBody: String
	cause: Unknown
}
type ChallengeRequestFailure {
	errorMessage: String
	requestFailure: Unknown
}
type Other {
	message: String
	cause: Unknown
}
type Post {
	id: String
	type: String
	title: String
	nsfw: Boolean
	spoiler: Boolean
	url: String
	domain: String
	createdTimestamp: Int
	promoted: Boolean
	authorId: String
	score: Int
	upvoteRatio: Unknown
	commentType: String
	numberComments: Int
	subredditId: String
	subredditName: String
	recommendationSource: String
	recommendationSourceSubredditId: String
	recommendationSourceSubredditName: String
	language: String
	postSetCount: Int
	translationLanguage: String
	translationState: Boolean
	pinned: Boolean
}
type OverflowMenuUiModel {
	showDebugMenu: Unknown
	iconColor: Unknown
	showHideOption: Boolean
}
type Metric {
	clientTimestamp: Int
	uuid: String
	app: Unknown
}
type Common {
	clientTimestamp: Int
	uuid: String
	user: Unknown
	session: Unknown
	app: Unknown
	screen: Unknown
	platform: Unknown
	request: Unknown
	referrer: Unknown
}
type AdsNavigatorModel {
	isPromoted: Boolean
	linkId: String
	uniqueId: String
	adPreview: AdPreview
	adAnalyticsInfo: AdAnalyticsInfo
	placementType: Unknown
	outboundLink: String
	isVideo: Boolean
	subredditPrimaryColor: String
	analyticsPageType: String
	navigateToHybridPageIfVideo: Boolean
	adImpressionId: String
	isAppInstallAd: Boolean
	isSpotlightVideoAd: Boolean
	isPromotedUserPost: Boolean
	campaignId: String
	leadGenInfo: LeadGenData
	shouldOpenExternally: Boolean
	isPromotedCommunityPost: Boolean
	selectedCarouselIndex: Int
	excludedExperiments: [Unknown]
}
type AdFreeFormUiModel {
	image: CellMediaSourceElement
	linkId: String
	uniqueId: String
	isRead: Unknown
	title: String
	previewText: String
	shouldShowBorder: Boolean
	shouldShowPreviewText: Boolean
	shouldUseIncreasedPaddingUnderTitle: Boolean
}
type VideoAdPresentationModel {
	isVideo: Boolean
	mediaHasRedditVideo: Boolean
	previewHasMp4Variant: Boolean
	adPreview: AdPreview
	duration: Int
}
type AdCarouselItemPresentationModel {
	outboundUrl: String
	adEvents: [Unknown]
	mediaId: String
}
type AdsLinkPresentationModel {
	kindWithId: String
	title: String
	uniqueId: String
	promoted: Boolean
	isCreatedFromAdsUi: Boolean
	type: Unknown
	domain: String
	callToAction: String
	ctaMediaColor: String
	appStoreData: AppStoreData
	adEvents: [Unknown]
	encryptedTrackingPayload: String
	additionalEventMetadata: [Unknown]
	isBlankAd: Boolean
	adImpressionId: String
	url: String
	thumbnail: String
	author: String
	authorIconUrl: String
	authorSnoovatarUrl: String
	formattedScore: String
	score: String
	commentCount: Int
	promotedCommunityPost: AdsLinkPresentationModel
	promotedUserPosts: [Unknown]
	subredditCanonicalName: String
	subredditDisplayName: String
	subredditId: String
	subredditIconImage: String
	subredditKeyColor: String
	subredditOver18: Boolean
	postHint: String
	subredditDetailPrimaryColor: String
	outboundLink: AdOutboundLink
	isVideoOrGifType: Boolean
	videoAdPresentationModel: VideoAdPresentationModel
	isSpotlightVideoAd: Boolean
	isPromotedUserPost: Boolean
	subCaption: String
	subCaptionStrikethrough: String
	leadGenInformation: AdsLeadGenInformationPresentationModel
	promoLayoutType: Unknown
	event: LinkEventPresentationModel
	followed: Boolean
	shouldOpenExternally: Boolean
	carouselItems: [Unknown]
	selectedCarouselItemIndex: Int
	disclaimerText: String
	excludedExperiments: Unknown
}
type FloatingCtaData {
	userName: String
	outboundDisplayText: String
	buttonText: String
	avatarUrl: String
}
type PromotedCommunityPostUiModel {
	promotedCommunityPostType: Unknown
	linkId: String
	uniqueId: String
	promotedPostLinkId: String
	title: String
	postImageUrl: String
	postImageWidth: Int
	postImageHeight: Int
	upvoteText: String
	commentText: String
	classicUpvoteCommentLabel: String
	subredditName: String
	subredditImageUrl: String
	subredditImageWidth: Int
	subredditImageHeight: Int
	subredditBackgroundColor: String
	textPostMaxLine: Boolean
}
type LinkEventPresentationModel {
	eventStartUtc: Int
	eventEndUtc: Int
	eventType: Unknown
	isEventAdmin: Boolean
	remindeesCount: Int
	collaborators: [Unknown]
}
type AdsLeadGenInformationPresentationModel {
	disclaimerText: String
	prompt: String
	campaignId: String
	userInformationFields: [Unknown]
	postId: String
	advertiserLegalName: String
	publicEncryptionKey: String
	formId: String
}
type GalleryItemCtaParams {
	isPromotedPost: Boolean
	displayAddress: String
	callToAction: String
	caption: String
	subCaption: String
	subCaptionStrikethrough: String
	appStoreData: AppStoreData
	promoLayoutType: Unknown
	isCreatedFromAdsUi: Boolean
	outboundUrl: String
}
type CarouselItem {
	index: Boolean
}
type SingleValueOverride {
	value: String
}
type PartialMapOverride {
	overriddenValues: Unknown
}
type DynamicConfigValue {
	name: String
	type: Unknown
	value: Unknown
}
type DynamicConfigOverrideValue {
	name: String
	keyName: String
	value: String
}
type AppShortcutNavigationActivityDependencies {
	getActivity: Unknown
}
type AnnouncementDataModel {
	id: String
	isHidden: Boolean
	impressionCount: Int
}
type AmaStatusBarUiModel {
	startTimeMillis: Int
	endTimeMillis: Int
	relativeTimeString: String
	isFollowed: Boolean
	isEventAdmin: Boolean
	promoted: Boolean
	buttonLoading: Unknown
	remindeeCountString: String
}
type CarouselContent {
	carouselItems: Unknown
	applyEvolutionChanges: Boolean
}
type ConversationAdLoaderResult {
	conversationAdViewState: Unknown
	adLink: Unknown
}
type VideoContent {
	videoMetadata: VideoMetadata
	callToAction: String
	isVideoExpanded: Boolean
}
type CommentScreenAdUiModel {
	adAnalyticsInfo: AdAnalyticsInfo
	content: Unknown
	title: String
	adCtaUiModel: Unknown
	amaStatusBar: AmaStatusBarUiModel
	headerUiModel: Unknown
	thumbnailUiModel: Unknown
	contentDescription: String
	conversationAdEvolutionState: Unknown
	shouldAddTopSpacing: Boolean
	shouldLogHeaderWhitespaceClick: Boolean
	disclaimerTextUiModel: DisclaimerTextUiModel
}
type PromotedCommunityPost {
	promotedCommunityPostUiModel: PromotedCommunityPostUiModel
}
type PlaceholderCommentScreenAdUiModel {
	shouldAddTopSpacing: Boolean
}
type ConversationAdLoadParams {
	kindWithId: String
	subreddit: String
	promoted: Boolean
	removed: Boolean
	pageType: String
	isFullBleedPlayer: Boolean
	performanceTraceId: String
	isSingleCommentThread: Boolean
}
type OtherError {
	errorMessage: Unknown
	cause: Unknown
}
type ShoppingMetadata {
	caption: String
	subCaption: String
	subCaptionStrikeThrough: String
}
type HttpError {
	errorMessage: String
	code: String
	url: String
}
type RedditChallengeDto {
	challenge: String
}
type Prepared {
	provider: Unknown
	timestamp: Int
}
type Unprepared {
	error: Unknown
}
type CommunityAchievements {
	achievementClickHandlingEnabled: Boolean
	title: String
	achievements: Unknown
}
type CommunityAchievement {
	id: String
	imageUrl: String
	title: String
}
type UserAchievements {
	username: String
	achievementsCount: String
}
type Loaded {
	mediaPlayer: Unknown
}
type ScheduleParams {
	delaySeconds: Int
}
type AnalyticsErrorResponse {
	data: [Unknown]
}
type AnalyticsError {
	eventUuid: String
	errorValue: String
	errorType: String
	errorKey: String
	validatorType: String
	regex: String
	clientKeyName: String
	endpointTimestamp: Int
}
type AdLeadGenerationInformation {
	disclaimerText: String
	prompt: String
	campaignId: String
	postId: String
	publicEncryptionKey: String
	userInformationFields: [Unknown]
	formId: String
	advertiserLegalName: String
	privacyPolicyUrl: String
}
type LeadGenUserInfoContactData {
	email: String
	firstName: String
	lastName: String
	companyEmail: String
	company: String
	phoneNumber: String
	postalCode: String
	jobTitle: String
}
type LeadGenUserInfoField {
	isRequired: Boolean
	fieldName: Unknown
}
type Params {
	pageType: String
}
type NsfwBottomSheetDependencies {
	getActivityRouter: Unknown
	navigateBack: Unknown
	params: Params
}
type PostDetailAdLoaderResult {
	convoPlacementAd: Unknown
	convoPlacementAdPresentationModel: Unknown
	commentTreeAds: Unknown
	commentTeeAdPresentationModels: Unknown
}
type Entry {
	uniqueId: String
	linkId: String
	eventType: Unknown
	timeMs: Int
	metadata: Unknown
}
type TaxonomyFeedTopicClickEvent {
	topic: Unknown
}
type TaxonomyFeedTopicViewEvent {
	topic: Unknown
}
type TopicsListTelemetryEvent {
	trackingEvent: Unknown
}
type OnTopicClick {
	topic: Unknown
	schemeName: String
}
type PostDetailAdError {
	message: String
	error: Unknown
}
type CommentPresentationModelWrapper {
	isCommentAd: Boolean
	uniqueId: String
	depth: Boolean
}
type PostDetailAdLoadParams {
	kindWithId: String
	pageType: String
	subreddit: String
	promoted: Boolean
	removed: Boolean
	isFullBleedPlayer: Boolean
	performanceTraceId: String
	sortType: Unknown
	isSingleCommentThread: Boolean
}
type PostDetailAd {
	associatedCommentKindWithId: String
	link: Unknown
}
type AdImageResolution {
	url: String
	width: String
}
type AdImage {
	source: AdImageResolution
}
type AppStoreData {
	appName: String
	appIcon: String
	appRating: String
	downloadCount: String
	category: String
}
type AdVariants {
	obfuscated: AdVariant
	gif: AdVariant
	mp4: AdVariant
}
type AdPreviewImage {
	resolutions: [Unknown]
	source: AdImageResolution
	variants: AdVariants
}
type AdPreview {
	images: [Unknown]
}
type AdOutboundLink {
	url: String
	expiration: Int
	created: Int
}
type AdVariant {
	resolutions: [Unknown]
	source: AdImageResolution
}
type AdAttributionInformation {
	interests: [Unknown]
	locations: [Unknown]
	targetingCriteria: [Unknown]
	accountGenderCategory: Unknown
}
type AdEvent {
	url: String
	type: String
}
type ReferringAdData {
	linkId: String
	impressionId: String
	uniqueId: String
}
type AgeGatingBottomSheetViewState {
	birthday: String
}
type AdAttributionUiModel {
	businessName: String
	showProductAdDisclaimer: Boolean
	userTargetingCriteria: Unknown
	placementTargetingCriteria: Unknown
	otherTargetingCriteria: Unknown
}
type TermsCheckboxViewState {
	checked: Boolean
}
type TargetingSectionUiModel {
	text: String
	textBubbles: Unknown
}
type Args {
	uniqueId: String
	linkId: String
	elementOverlapBottomPaddingPx: Int
	placementType: Unknown
}
type Content {
	attributionUiModel: AdAttributionUiModel
}
type LeadGenModalViewState {
	inputFields: [Unknown]
	submitButton: Unknown
	advertiserIcon: Unknown
	termsCheckbox: TermsCheckboxViewState
	disclaimerText: Unknown
}
type Args {
	uniqueId: String
	linkId: String
	elementOverlapBottomPaddingPx: Int
	placementType: Unknown
}
type AdBusiness {
	businessName: String
}
type SubmitAgeRequest {
	accountID: String
	birthDate: String
}
type AdAnalyticMetadataV2 {
	v2AnalyticMetadateField: Unknown
	value: Unknown
	timestamp: Int
}
type Params {
	birthdayInitial: Int
	pageType: String
}
type AdAttributionScreenViewState {
	elementOverlapBottomPaddingPx: Int
	screenState: Unknown
}
type AdPixelUrls {
	uniqueId: Int
	eventType: Unknown
	url: String
	finalUrl: String
}
type LastAdClickedInfo {
	adId: String
	timestampClickOccurred: Int
	pageWhereClickOccurred: String
	adImpressionId: String
	elapsedTimeWhenClickOccurred: Int
	placementType: Unknown
}
type AgeConfirmationBottomSheetParams {
	birthdayMs: Int
	pageType: String
}
type Error {
	birthday: String
}
type AgeConfirmationBottomSheetDependencies {
	getActivityRouter: Unknown
	navigateBack: Unknown
	params: AgeConfirmationBottomSheetParams
}
type PostEligibilityWithExpiration {
	postEligibility: PostAdEligibilityStatus
	expirationTime: Unknown
}
type Success {
	birthday: String
}
type Initial {
	birthday: String
}
type Loading {
	birthday: String
}
type WebUrlClicked {
	url: String
}
type AgeGatingBottomSheetDependencies {
	getActivityRouter: Unknown
	navigateBack: Unknown
	params: Params
}
type AdActionParameters {
	analyticsPageType: String
	isFullBleedPlayerAd: Boolean
	parentPostId: String
	wasEligibleForPlaceholder: Boolean
	postType: Unknown
	isAdsVideoNotGifLink: Boolean
	isAdsVideo: Boolean
	shouldHandlePcpEvent: Boolean
	author: String
	galleryItemsCount: Int
	selectedGalleryItemMediaId: String
	selectedGalleryItemId: String
	selectedGalleryItemAdEvents: [Unknown]
	performanceTraceId: String
	isIncognitoUser: Boolean
	isLoggedOutUser: Boolean
	correlationId: String
	pageRequestId: String
}
type OnDateSet {
}
type CommentTreeAdLoaderResult {
	commentTreeAds: Unknown
	commentTreeAdPresentationModels: Unknown
}
type AdVisibilityItemInfo {
	uniqueId: String
	promoted: Boolean
	index: AdElement
}
type OnBrowserLoadedParams {
	linkId: String
	analyticsPageType: String
	adImpressionId: String
	timestamp: Int
	adPlacementType: Unknown
}
type CommentTreeAdLoadParams {
	kindWithId: String
	pageType: String
	sortType: Unknown
}
type OnAdGalleryCardViewed {
	linkKindWithId: String
	uniqueId: String
}
type AdSpotlightVideoSection {
	data: AdSpotlightVideoElement
	shouldAutoPlay: Boolean
	analyticsPageType: String
	dispatcherProvider: Unknown
	reduceAdsRpsM1Enabled: Boolean
	isAdVisibilityOptimizationEnabled: Boolean
	videoLoopingState: Unknown
}
type AdPostSection {
	linkId: String
	uniqueId: String
	adPayload: AdPayload
	sections: Unknown
	isFeedToPdpTransitionAnimationEnabled: Boolean
	isAdScreenVisibilityTrackingEnabled: Boolean
	isAdsCtaImprovementAttachedStyleEnabled: Boolean
}
type AdBrandLiftSurveySection {
	linkId: String
	uniqueId: String
	surveyURL: String
	hasLoadedAlready: Boolean
	brandLiftDelegate: Unknown
	isRblPrivacyFixEnabled: Boolean
}
type AdGallerySection {
	data: AdGalleryElement
	title: Unknown
	disclaimerText: Unknown
	footers: Unknown
	applyInset: Boolean
	calculateGalleryHeight: Unknown
	enableSwipeFix: Boolean
	adsCtaImprovementState: Unknown
}
type AdFreeFormSection {
	uiModel: AdFreeFormUiModel
	variant: Unknown
}
type AdCallToActionSection {
	model: Unknown
	linkId: String
	uniqueId: String
}
type AdPromotedUserPostCollectionSection {
	data: AdPromotedUserPostCollectionElement
	uiModel: PromotedUserPostCollectionUiModel
}
type OnClickAdSupplementaryText {
	linkId: String
	uniqueId: String
	promoted: Boolean
	richTextLink: RichTextLink
}
type OnPromotedTitleRendered {
	uniqueId: String
	isPromoted: Boolean
}
type VideoAdScreenPresentationModel {
	domain: String
	progress: Boolean
	videoLoopingState: Unknown
}
type Params {
	linkId: String
	outboundUrlToUse: String
	preview: AdPreview
	isHybridAppInstall: Boolean
}
type VideoAdScreenDependencies {
	view: Unknown
	params: Params
}
type OnPostUnitVisibilityChanged {
	videoVisibilityChanged: VideoAdVisibilityChanged
}
type OnSizeChanged {
}
type Success {
	overflowMenuUiModel: OverflowMenuUiModel
	videoData: PromotedHybridVideoData
	videoInput: Unknown
	overflowMenuActionHandler: Unknown
	videoHeight: Boolean
}
type PromotedHybridVideoData {
	videoMetadata: VideoMetadata
	videoWidth: Boolean
	enforceSingleVideoPlayback: Unknown
	resizeMode: Unknown
	earlyDetachFixEnabled: Boolean
}
type StartAt {
	startTimestamp: Int
}
type NoteUpdated {
	content: String
}
type AppendLinkToNote {
	title: String
	url: String
}
type AmaBottomSheetScreenDependencies {
	args: AmaBottomSheetArgs
}
type AmaDateTimePickerDependencies {
	params: AmaDateTimePickerParams
	timePickedTarget: Unknown
}
type SetDateAndTime {
	state: SetDateAndTimeState
}
type AmaDateTimePickerParams {
	startTimestamp: Int
}
type AmaBottomSheetArgs {
	type: Unknown
	linkId: String
	amaLinkId: String
	promoted: Boolean
	uniqueId: String
	feedIndex: Int
	analyticsPageType: String
}
type EndWithNote {
	note: String
}
type OnboardingPageModel {
}
type AmaEditDateTimeParams {
	linkId: String
	publishedTimestamp: Int
	startTimestamp: Int
}
type AmaEditDateTimeDependencies {
	params: AmaEditDateTimeParams
	amaEventTarget: Unknown
}
type AmaCollaboratorsArgs {
	linkId: String
}
type AddUser {
	collaborator: Collaborator
}
type Collaborator {
	id: String
	avatar: String
	userName: String
}
type Loaded {
	currentCollaborators: Unknown
	searchCollaborators: Unknown
	searchQuery: String
	searching: Boolean
}
type RemoveUser {
	collaborator: Collaborator
}
type AmaCollaboratorsScreenDependencies {
	args: AmaCollaboratorsArgs
}
type AmaOnboardingParams {
	promptForImageLink: Boolean
}
type Search {
	query: String
}
type AmaEditDateTimeViewState {
	state: SetDateAndTimeState
	shouldClose: Boolean
}
type Ama {
	amaLinkWithId: String
	amaUniqueId: String
	isAmaLinkPromoted: Boolean
}
type PcpAma {
	parentLinkWithId: String
	parentUniqueId: String
	amaLinkWithId: String
}
type Params {
	channelId: String
}
type AmaStatusBarViewState {
	startTimeMillis: Int
	endTimeMillis: Int
	relativeTimeString: String
	promoted: Boolean
	isFollowed: Boolean
	isEventAdmin: Boolean
	buttonLoading: Boolean
	hideButtons: Boolean
	rsvpCountString: String
	isStatusBarForAmaInPdp: Boolean
}
type Filter {
	value: Unknown
}
type AmaCarouselItemViewState {
	startTimeMillis: Int
	endTimeMillis: Int
	timeString: String
	title: String
	subredditName: String
	subredditIcon: String
	imageSrc: String
}
type Params {
	subredditId: String
	countryCode: String
	languageCode: String
}
type AccountInfoResultParams {
	username: String
}
type Shown {
	commentCount: Boolean
}
type AmaCarouselViewState {
	posts: Unknown
}
type SetDateAndTimeState {
	startDate: String
	hasStartDateMissingError: Boolean
	startTime: String
	hasStartTimeMissingError: Boolean
	timeZone: String
}
type AmaStatusBarCondensedViewState {
	startTimeMillis: Int
	endTimeMillis: Int
	relativeTimeString: String
}
type PostSubmitParams {
	subreddit: String
	title: String
	bodyText: String
	isGif: Boolean
	flairText: String
	flairId: String
	isNsfw: Boolean
	isSpoiler: Boolean
	isBrand: Boolean
	workId: String
	targetLanguage: String
	correlationId: String
	isClubContent: Boolean
}
type UploadVideoResult {
	error: String
	success: Unknown
	throwable: Unknown
}
type SubmitImageResult {
	success: Unknown
	toastsSuccess: Unknown
	error: Unknown
	throwable: Unknown
}
type VideoParams {
	requestId: String
	videoThumbnailPath: String
	videoFilePath: String
	continuation: Unknown
}
type UploadGalleryResult {
	success: [Unknown]
	error: Unknown
	throwable: Unknown
}
type SubmitVideoResult {
	uploadError: String
	submitError: Unknown
	toastSuccess: Unknown
	success: Unknown
	throwable: Unknown
}
type Link {
	linkId: String
	subreddit: String
	postId: String
	title: String
	languageCode: String
	isNsfw: Boolean
	domain: String
	createdAt: Int
	url: String
	authorId: String
	subredditId: String
	subredditName: String
}
type SubmitVideoPostParams {
	postSubmitParams: PostSubmitParams
	videoParams: VideoParams
}
type UploadImageResult {
	success: Unknown
	error: Unknown
	throwable: Unknown
}
type SelectedFilter {
	value: Unknown
}
type Params {
	subredditId: String
	publicDescription: String
	isNsfw: Boolean
	privacyType: Unknown
	isTopListingAllowed: Boolean
	isDiscoveryAllowed: Boolean
	languageId: String
	allowedPostType: Unknown
	allowImages: Boolean
	allowVideos: Boolean
	allowPolls: Boolean
	welcomeMessage: String
	isWelcomeMessageEnabled: Boolean
	isArchivePostsEnabled: Boolean
	allowedMediaInComments: [Unknown]
	amaPostPermissions: Unknown
}
type RemoteHostComments {
}
type ShareScreenReaderUsageSwitchCheckedChange {
	checked: Boolean
}
type OverrideFontScaleSwitchCheckedChange {
	checked: Boolean
}
type MediaAndAnimationsSettingsViewState {
	titleRes: Boolean
	reduceMotionSwitchChecked: Boolean
	autoplayVideoPreviewsOptions: Unknown
	autoplayVideoPreviewsSelectedOption: Unknown
	autoplayAnimatedImagesSwitchChecked: Boolean
	showAnimationsDisabledViaSystemSettingsMessage: Boolean
}
type FontSizeSettingsViewState {
	overrideFontScaleSwitchChecked: Boolean
	fontScaleOverrideSliderValue: Boolean
	fontScaleOverrideSliderValueRange: Unknown
}
type ScreenReaderTrackingSettingsViewState {
	shareScreenReaderUsageSwitchChecked: Boolean
}
type AutoplayVideoPreviewsSelection {
	selectedOption: Unknown
}
type FontScaleOverrideSliderValueChange {
}
type AutoplayAnimatedImagesSwitchCheckedChange {
	checked: Boolean
}
type ReduceMotionSwitchCheckedChange {
	checked: Boolean
}
type LeadGenData {
	userIconUrl: String
	title: String
	campaignId: String
	postId: String
	disclaimerRichText: String
	advertiserLegalName: String
	userInputFields: [Unknown]
	impressionId: String
	publicEncryptionKey: String
	formId: String
	submitButtonText: String
	emailHintText: String
	emailErrorMessage: String
	sourceScreen: String
	leadGenAdEvent: AdEvent
	uniqueId: String
	adAnalyticsInfo: AdAnalyticsInfo
}
type AdEventParams {
	postId: String
	placementType: Unknown
	pageType: String
	clickDestination: Unknown
	adImpressionId: String
	clickCorrelationId: String
	pageDuration: Int
	durationFromClickToWebpageLoaded: Int
	failureReason: Unknown
	analyticsPageType: String
	viewType: String
	parentPostId: String
}
type AdPageEventProperties {
	pageType: String
	position: Int
}
type FangornAdDebugInfo {
	clientPosition: Int
	adRenderSurface: Unknown
}
type AdClickLocationEventParams {
	linkId: String
	uniqueId: String
	promoted: Boolean
	clickLocation: Unknown
	pageType: String
	adImpressionId: String
	subredditId: String
	placementType: Unknown
	feedIndex: Int
	galleryItemPosition: Int
	galleryItemCount: Int
	feedCorrelationId: String
	mediaDimensions: Size
	authorId: String
	viewType: String
	countryCode: String
	postType: String
	clickCorrelationId: String
	pageRequestId: String
}
type AdFullBleedVideoEventProperties {
	videoNavigationSession: AdVideoNavigationSession
	feedId: String
	servingPosition: Int
}
type CommentsPageAdEventParams {
	parentPostId: String
	adUnitWidth: Int
	adUnitHeight: Int
	wasEligibleForPlaceholder: Boolean
	placeholderProcessingTime: Int
	adUnitLoadTime: Int
	adUnitProcessTime: Int
	position: Int
}
type AdSubredditEventProperties {
	id: String
	name: String
}
type AdAnalyticsInfo {
	linkId: String
	uniqueId: String
	adEvents: [Unknown]
	encryptedTrackingPayload: String
	additionalEventMetadata: [Unknown]
	isComment: Boolean
	isBlank: Boolean
	isPromoted: Boolean
	impressionId: String
	fangornAdDebugInfo: FangornAdDebugInfo
}
type AdPostEventProperties {
	kindWithId: String
	nsfw: Boolean
	promoted: Boolean
	domain: String
}
type AdEventProperties {
	linkId: String
	subredditEventProperties: AdSubredditEventProperties
	postEventProperties: AdPostEventProperties
	pageEventProperties: AdPageEventProperties
	mediaEventProperties: AdMediaEventProperties
	fullBleedVideoEventProperties: AdFullBleedVideoEventProperties
	correlationId: String
}
type AdVideoNavigationSession {
	referringPageType: String
	source: Unknown
	id: String
}
type AdMediaEventProperties {
	width: Unknown
	url: String
}
type UserLinkKey {
	username: String
	sort: Unknown
	after: String
	sortTimeFrame: Unknown
}
type LinkKey {
	type: Unknown
	sort: Unknown
	sortTimeFrame: Unknown
	after: String
	subredditName: String
	multiredditPath: String
	geoFilter: String
	categoryId: String
}
type LinkListingKey {
	path: String
}
type VideoAdVisibilityChanged {
	adInfo: AdAnalyticsInfo
}
type PromotedUserPostCollectionClicked {
	postId: String
}
type Enabled {
	ctaTreatment: Unknown
	hasFullSizeImage: Boolean
}
type AdVisibilityChanged {
	viewVisiblePercent: AdAnalyticsInfo
	isPlaceholderView: Boolean
	screenDensity: Boolean
}
type AdAttributionClicked {
	elementOverlapBottomPaddingPx: Int
}
type AdClickLocationAction {
	clickLocation: Unknown
	galleryItemPosition: Int
}
type HybridVideoPlayerUrlFinishedLoading {
	clickDestination: Unknown
}
type SupplementaryTextLinkClicked {
	richTextLink: RichTextLink
}
type AmaStatusBarRemindMeClicked {
	isFollowed: Boolean
}
type AdContext {
	distance: String
	layout: Unknown
	clientSignalSession: ClientSignalSession
	feedSlotSignalSession: FeedSlotSignalSession
}
type TitleRendered {
}
type CtaClicked {
	clickLocation: Unknown
	carouselIndex: Int
}
type ClientSignalSession {
	sessionSlotAds: Int
	sessionSlotAll: Int
	sessionStartTime: Int
}
type CarouselItemClicked {
	carouselIndex: Unknown
}
type PromotedCommunityPostClicked {
	shouldSendV2Event: Boolean
}
type FeedSlotSignalSession {
	postsSeenCount: Int
	adsSeenCount: Int
	feedCorrelationId: String
}
type ThumbnailSizeChanged {
}
type CarouselItemViewed {
}
type CarouselItemHidden {
}
type AdViewVisibilityChanged {
	viewVisiblePercent: Unknown
	screenDensity: Unknown
	parentPostId: String
	correlationId: String
	boundAdAnalyticInfo: AdAnalyticsInfo
	isPlaceholderView: Boolean
	isVideoContent: Boolean
	v2AnalyticsPageType: String
}
type HybridVideoPlayerOpened {
	adInfo: AdAnalyticsInfo
}
type Enabled {
	attachedStyle: Boolean
}
type AmaPostCreationViewState {
	startTime: AmaStartTimeViewState
	selfieState: Unknown
}
type Show {
	imageUrl: String
}
type AmaStartTimeViewState {
	timeZone: String
	startTime: String
}
type Title {
	element: PinnedPostsTitleElement
	translatedContent: TranslatedContent
}
type PinnedPostsTitleElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	title: String
	createdAt: String
}
type TitleWithCustomPost {
	element: Unknown
	title: String
	customPostElement: Unknown
	translatedContent: TranslatedContent
}
type DeeplinkFallbackActivityDependencies {
	getActivity: Unknown
}
type TitleWithThumbnail {
	element: PinnedPostsTitleWithThumbnailElement
	translatedContent: TranslatedContent
}
type PinnedPostsElement {
	linkId: String
	posts: Unknown
	isExpanded: Boolean
	clickedPostIds: Unknown
	subredditName: String
	subredditId: String
}
type PromotedUserPostItemUiModel {
	id: String
	title: String
	formattedUpvote: String
	upvote: String
	hasOneComment: Boolean
	thumbnail: String
	authorIconUrl: String
	authorSnoovatarUrl: String
	doublePaddingSizeId: String
}
type PinnedPostsHeaderElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	isInitiallyExpanded: Boolean
}
type PinnedPostsTitleWithThumbnailElement {
	linkId: String
	uniqueId: String
	promoted: Boolean
	title: String
	createdAt: String
	isNsfw: Boolean
	thumbnailUrl: String
	attribution: String
}
type AdPixel {
	url: String
	payload: String
	adUniqueId: Int
	eventType: Unknown
	timestampEventOccurredAtInMillis: Int
	adImpressionId: String
}
type TranslatedContent {
	originalTitle: String
	originalThumbnail: String
	translatedTitle: String
	translatedThumbnail: String
	showTranslation: Boolean
	showShimmer: Boolean
}
type AchievementsBadgePillViewState {
	badgeUrl: String
	text: String
	accessibilityLabel: String
	surface: Unknown
}
type OnPinnedPostsGroupToggledEvent {
	element: PinnedPostsElement
	expanded: Boolean
}
type LeaderboardEntrypointViewState {
	showCoachmark: Boolean
}
type PaymentProduct {
	productMetadata: Unknown
	orderMetadata: Unknown
	postId: String
	subredditId: String
}
type DevvitAppError {
	errorCode: String
	errorMessage: String
}
type PaymentCompleted {
	orderId: String
}
type PaymentFailed {
	orderId: Unknown
	reason: Unknown
}
type ResolvedTags {
	expiryModel: AccessoryExpiryModel
	isNft: Boolean
	otherTags: [Unknown]
}
type Outfits {
	allOutfits: Unknown
}
type Snoovatar {
	styles: Unknown
	accessoryIds: [Unknown]
}
type InterestTopicWithSubreddits {
	id: String
	title: String
	name: String
	subreddits: [Unknown]
}
type BuilderSeedModel {
	currentSnoovatar: SnoovatarModel
	seedSnoovatar: SeedSnoovatarModel
	redirectPage: Unknown
	storefrontInitialState: Unknown
	analyticsReferrer: DeepLinkInfo
}
type FilteredAccessories {
	accessories: [Unknown]
}
type SeedSnoovatarModel {
	snoovatar: SnoovatarModel
	source: Unknown
	sourceAuthorId: String
	sourceAuthorUsername: String
}
type InterestTopicSubreddit {
	prefixedName: String
	id: String
	publicDescriptionText: String
	communityIcon: String
	primaryColor: String
	subscribersCount: Int
	detectedLanguage: String
}
type ProductInfoAnalyticsData {
	id: String
	environment: Unknown
	price: String
}
type SelectedSnoovatar {
	styles: Unknown
	accessoryIds: [Unknown]
}
type UriImageModel {
	model: String
	imageSize: Unknown
	contentDescription: String
	ioDispatcher: Unknown
	contentScale: Unknown
}
type Hostname {
	installID: String
	appName: String
	actorName: String
	runtimeHost: String
}
type SvgIconModel {
	model: String
	imageSize: Unknown
	contentDescription: String
	ioDispatcher: Unknown
}
type EconSubscription {
	id: String
	startedAtSeconds: Int
	expiresAtSeconds: Int
	ifCanceledExpiresAtSeconds: Int
	renewInterval: Unknown
	isCanceled: Boolean
	source: String
}
type TrialPeriod {
	unit: DurationUnit
}
type BillingPeriod {
	unit: DurationUnit
}
type Subscriptions {
	econSubscriptions: Unknown
}
type LocalisedSubscriptionProduct {
	productId: String
	externalProductId: String
	name: String
	description: String
	basePrice: String
	baseCurrency: String
	localCurrency: String
	billingPeriod: BillingPeriod
	trialPeriod: TrialPeriod
	isRenewable: Boolean
	environment: Environment
	skuDetails: Unknown
}
type MergedBrowseAllRow {
	layout: JsonBrowseAllRow
}
type MergedOutfitsSection {
	layout: Unknown
	data: [Unknown]
	dataCursor: String
}
type Category {
	id: String
	data: [Unknown]
}
type SelectionChoiceModel {
	label: String
	choiceId: String
	isSelected: Boolean
}
type SelectionFieldBottomSheetArgs {
	title: String
	fieldId: String
	isMultiselectField: Boolean
	fieldValues: Unknown
}
type ImageUploadingParams {
	openImagePicker: Unknown
	onImageRemoved: Unknown
	imageStates: Unknown
}
type UploadedSuccessfully {
	imageFile: String
}
type Uploading {
	imageFile: String
}
type MergedAnnouncementBannerRow {
	layout: JsonAnnouncementBannerRow
}
type MergedArtistRows {
	layout: JsonArtistRows
	data: [Unknown]
}
type GqlDynamicStorefront {
	priceBounds: [Unknown]
	utilityTypes: [Unknown]
	storefrontStatus: StorefrontStatus
	components: [Unknown]
}
type MergedCategoriesRow {
	layout: JsonCategoriesRow
	data: [Unknown]
}
type MergedArtistsCarousel {
	layout: JsonArtistsCarousel
	data: [Unknown]
}
type ActionModel {
	label: String
	shortDescription: String
	iconName: String
	extras: Unknown
	modAction: Boolean
}
type DetailScreenLinkInfoNavigationData {
	linkId: String
	uniqueId: String
	promoted: Boolean
}
type UserContext {
	isSubscriber: Boolean
	isModerator: Boolean
}
type UserSocialLinkDataModel {
	id: String
	username: String
	url: String
	position: String
	handle: String
	type: String
}
type AccountMutationsDataModel {
	parentAccountId: String
	hasBeenVisited: Boolean
}
type GamificationLevelDataModel {
	name: String
	number: String
}
type AccountDataModel {
	accountId: String
	name: String
	createdUtc: Int
	isEmployee: Boolean
	isFriend: Boolean
	isSuspended: Boolean
	suspensionExpiration: Int
	hideFromRobots: Boolean
	linkKarma: Boolean
	isPremiumSubscriber: Boolean
	premiumExpirationUtc: Int
	premiumSinceUtc: Int
	isMod: Boolean
	hasVerifiedEmail: Boolean
	email: String
	inboxCount: Boolean
	hasModMail: Boolean
	hideAds: Boolean
	coins: String
	showMyActiveCommunities: Boolean
	outboundClickTracking: Boolean
	forcePasswordReset: Boolean
	inChat: Boolean
	featuresJson: String
	canCreateSubreddit: Boolean
	canEditName: Boolean
	linkedIdentities: [Unknown]
	hasPasswordSet: Boolean
	acceptChats: Boolean
	acceptPrivateMessages: Boolean
	snoovatarUrl: String
	acceptFollowers: Boolean
	hasSubscribedToPremium: Boolean
	phoneCountryCode: String
	phoneMaskedNumber: String
	accountType: String
	gamificationLevel: GamificationLevelDataModel
	userPublicContributorTier: String
	profileExemptedExperiments: [Unknown]
	isProfileContentFiltered: Boolean
}
type SubredditJoinState {
	userIsSubscriber: Boolean
	userIsPaidSubscriber: Boolean
	isPaidSubscriptionEnabled: Boolean
}
type UserSubredditDataModel {
	username: String
	bannerImg: String
	userIsBanned: Boolean
	description: String
	userIsMuted: Boolean
	displayName: String
	headerImg: String
	title: String
	userIsModerator: Boolean
	over18: Boolean
	iconImg: String
	displayNamePrefixed: String
	subscribers: Boolean
	keyColor: String
	kindWithId: String
	isDefaultBanner: Boolean
	url: String
	userIsContributor: Boolean
	publicDescription: String
	subredditType: String
	userIsSubscriber: Boolean
	showInDefaultSubreddits: Boolean
	iconSize: MediaSize
	bannerSize: MediaSize
	allowedPostTypes: [Unknown]
}
type SubredditCommunityStatusDataModel {
	subredditId: String
	descMarkdown: String
	descRichText: String
	emojiName: String
	emojiUrl: String
}
type HideUpsellPathUpdate {
	subredditId: String
	shouldHideUpsellPath: Boolean
}
type SubredditMutationsDataModel {
	parentSubredditId: String
	hasBeenVisited: Boolean
}
type Processing {
	ownerId: String
	mediaId: String
	authorName: String
	deleted: Boolean
	thumbnail: String
}
type SubredditExtraDataModel {
	parentExtraSubredditId: String
	isTitleSafe: Boolean
}
type Failed {
	ownerId: String
	mediaId: String
	authorName: String
	deleted: Boolean
}
type Unknown {
	ownerId: String
	mediaId: String
	authorName: String
	deleted: Boolean
}
type Valid {
	ownerId: String
	mediaId: String
	authorName: String
	deleted: Boolean
	url: String
	thumbnail: String
}
type SubredditTopicDataModel {
	id: String
	name: String
	displayName: String
	subredditId: String
}
type Mp4PreviewParams {
	isVideo: Boolean
	redditVideoDashUrl: String
	hasMp4Url: Boolean
	mp4Resolutions: [Unknown]
	mp4Url: String
	isImgurLink: Boolean
	imgurMp4Url: String
}
type DetailScreenContextNavigationData {
	navigationSource: Unknown
	feedCorrelationId: String
	doesNotRequireNsfwDialog: Boolean
	screenReferrer: Unknown
	analyticsPageType: String
	comment: String
	commentContext: Unknown
	context: Unknown
	navigationSession: Unknown
	scrollTarget: PostDetailScrollTarget
	sourcePage: String
	listingType: Unknown
	isFromPdpCommentSearch: Boolean
	deactivatePostCommentSearchListener: Unknown
	forceStayInPdp: Boolean
}
type SubredditChannelDataModel {
	id: String
	subredditName: String
	label: String
	type: Unknown
	isRestricted: Boolean
	permalink: String
	chatRoomId: String
	richtext: String
}
type RecentSubredditDataModel {
	subredditId: String
	recentSubredditKindWithId: String
	displayName: String
	displayNamePrefixed: String
	iconImg: String
	keyColor: String
	description: String
	publicDescription: String
	descriptionHtml: String
	url: String
	subscribers: Int
	accountsActive: Int
	bannerImg: String
	over18: Boolean
	subredditType: String
	lastVisited: Int
	createdUtc: Int
	advertiserCategory: String
	audienceTarget: String
	contentCategory: String
	quarantined: Boolean
	quarantineMessage: String
	quarantineMessageHtml: String
	allowChatPostCreation: Boolean
	isChatPostFeatureEnabled: Boolean
	isModerator: Boolean
	communityIconUrl: String
	submitType: String
	allowImages: Boolean
	spoilersEnabled: Boolean
	allowPolls: Boolean
	allowVideos: Boolean
	isMyReddit: Boolean
	isMuted: Boolean
	isContributor: Boolean
}
type SubredditPinnedPostsDataModel {
	parentPinnedPostsSubredditId: String
	pinnedPosts: [Unknown]
	clickedPinnedPosts: [Unknown]
}
type SubredditDataModel {
	subredditId: String
	subredditKindWithId: String
	displayName: String
	displayNamePrefixed: String
	iconImg: String
	keyColor: String
	bannerImg: String
	headerImg: String
	title: String
	description: String
	descriptionRtJson: String
	publicDescription: String
	descriptionHtml: String
	publicDescriptionHtml: String
	subscribers: Int
	accountsActive: Int
	createdUtc: Int
	subredditType: String
	url: String
	over18: Boolean
	wikiEnabled: Boolean
	whitelistStatus: String
	newModMailEnabled: Boolean
	restrictPosting: Boolean
	submitType: String
	allowImages: Boolean
	allowVideos: Boolean
	allowGifs: Boolean
	allowChatPostCreation: Boolean
	isChatPostFeatureEnabled: Boolean
	spoilersEnabled: Boolean
	userIsBanned: Boolean
	userIsSubscriber: Boolean
	userIsContributor: Boolean
	userIsModerator: Boolean
	userHasFavorited: Boolean
	notificationLevel: Unknown
	userPostEditingAllowed: Boolean
	updatedTimestampUtc: Int
	primaryColorKey: String
	communityIconUrl: String
	bannerBackgroundImageUrl: String
	mobileBannerImageUrl: String
	isRedditPickDefault: Boolean
	userFlairTemplateId: String
	userSubredditFlairEnabled: Boolean
	canAssignUserFlair: Boolean
	userFlairEnabled: Boolean
	userFlairBackgroundColor: String
	userFlairTextColor: String
	userFlairText: String
	userFlairRichTextJson: String
	postFlairEnabled: Boolean
	canAssignLinkFlair: Boolean
	advertiserCategory: String
	audienceTarget: String
	contentCategory: String
	quarantined: Boolean
	quarantineMessage: String
	quarantineMessageHtml: String
	quarantineMessageRtJson: String
	allowPolls: Boolean
	shouldShowMediaInCommentsSetting: Boolean
	allowedMediaInCommentsJson: String
	isMiniModelEntry: Boolean
	isMyReddit: Boolean
	isMuted: Boolean
	isChannelsEnabled: Boolean
	isYearInReviewEligible: Boolean
	isYearInReviewEnabled: Boolean
	detectedLanguage: String
	isWelcomePageEnabled: Boolean
	isWelcomePageEnabledOnJoin: Boolean
	userIsPaidSubscriber: Boolean
	isPaidSubscriptionEnabled: Boolean
	isCommunityGoldModSettingEnabled: Boolean
	communityLeaderboardEnabled: Boolean
	isEligibleForArena: Boolean
}
type Entry {
	appSlug: String
	subredditId: String
	analyticsDetails: CustomPostAnalyticsDelegateDetails
}
type SubredditFilterState {
	userIsPaidSubscriber: Boolean
	isPaidSubscriptionEnabled: Boolean
}
type CatalogScope {
	catalogModel: CatalogModel
}
type SubscriptionBillingPeriod {
	unit: DurationUnit
}
type OnTranslationPinnedPostInProgress {
	linkKindWithId: String
	modificationPinnedPosts: [Unknown]
}
type OnRevertOriginalPinnedPostSuccess {
	linkKindWithId: String
	modificationPinnedPosts: [Unknown]
}
type SubscriptionPrice {
	amountInSmallestUnit: Currency
}
type SubscriptionProduct {
	id: String
	price: SubscriptionPrice
	billingPeriod: SubscriptionBillingPeriod
	description: String
	environment: Environment
	externalId: String
	images: [Unknown]
	isRenewable: Boolean
	name: String
	tier: SubscriptionTrialPeriod
}
type FilterableMetaData {
	previousItems: [Unknown]
	uniqueIds: Unknown
	onItemFiltered: Unknown
}
type OnTranslationPinnedPostSuccess {
	linkKindWithId: String
	modificationPinnedPosts: [Unknown]
}
type SubscriptionTrialPeriod {
	unit: DurationUnit
}
type TranslationModificationPinnedPost {
	linkKindWithId: String
	title: String
	translatedThumbnail: Unknown
}
type SubredditInfo {
	id: String
	parentIds: [Unknown]
}
type Key {
	postId: String
}
type Value {
	version: String
	state: Unknown
	ui: Unknown
	rerenderTimes: [Unknown]
}
type FullScreenDevPlatformParams {
	linkId: String
	webViewLink: String
	webViewId: String
}
type FullScreenDevPlatformEntryParams {
	linkId: String
	webViewLink: String
	webViewId: String
}
type AutoNightSettings {
	whenNighttime: Boolean
	whenBatterySaver: Boolean
}
type CropImageScreenArg {
	sourcePath: String
	destinationFile: Unknown
}
type StartParameters {
	fromSignUp: Boolean
	editMode: Boolean
	selectedTopicId: String
	onboardingFlowType: Unknown
}
type SharedImageTransitionParams {
	transitionName: String
	thumbUrl: String
}
type ClaimOnboardingData {
	claimItemId: String
}
type DetailScreenArgs {
	link: Unknown
	subredditId: String
	subreddit: String
	postType: String
	linkKindWithId: String
	uniqueId: String
	promoted: Boolean
}
type SubredditScreenArg {
	subredditName: String
	kindWithId: String
}
type AwardingInfo {
	awardingId: String
	awarderId: String
	awarderUsername: String
}
type AwardTarget {
	id: String
	authorName: String
	authorId: String
	type: Unknown
	awards: [Unknown]
}
type AwardParams {
	awardName: String
	awardId: String
	awardIconUrl: String
	awardIconMediumUrl: String
	awardIconFormat: Unknown
	awardPrice: String
	isAnonymous: Boolean
	awardType: Unknown
	awardSubType: Unknown
	isTemporaryAward: Boolean
	isFreeAward: Boolean
	awardCount: String
}
type FilterBoundDomainModel {
	model: PriceFilterBound
	localizedPriceIsUsd: Boolean
}
type Success {
	data: AvatarBuilderCatalog
}
type Success {
	shareUrl: String
}
type Error {
	t: Unknown
}
type Success {
	imageUrl: String
}
type Success {
	marketingEvents: Unknown
	identity: Identity
}
type Success {
	accessoryIds: [Unknown]
	imageUrl: String
}
type Fail {
	errors: [Unknown]
}
type Fail {
	errors: [Unknown]
}
type Fail {
	errors: [Unknown]
}
type Fail {
	errors: [Unknown]
}
type AccountResponse {
	account: Unknown
	isFromCache: Boolean
}
type LoggedIn {
	username: String
	online: Boolean
	snoovatarUrl: String
	userImageUrl: String
	isDefaultSnoovatar: Boolean
}
type ActiveInCommunity {
	id: String
	subredditNamePrefixed: String
	subredditName: String
	memberCount: String
	description: String
	isNsfw: Boolean
}
type CustomPostSection {
	data: Unknown
	customPosts: Unknown
	presentationContext: CustomPostPresentationContext
}
type NetworkFailure {
	message: String
}
type NsfwSetting {
	type: Unknown
	enabled: Boolean
}
type Response {
	data: Unknown
	errors: [Unknown]
}
type DetailScreenParams {
	shouldActivateReply: Boolean
}
type Lottie {
	name: String
}
type WebViewVisibilityState {
	linkId: String
	webViewId: String
}
type ImageModel {
	filePath: String
	size: Int
	width: Int
	height: Int
	date: Int
}
type SubredditQueryModel {
	subreddit: SubredditDataModel
	mutations: SubredditMutationsDataModel
	extras: SubredditExtraDataModel
}
type RecentSubredditQueryModel {
	subreddit: RecentSubredditDataModel
	mutations: SubredditMutationsDataModel
}
type AccountSubredditQueryModel {
	account: AccountDataModel
	subreddit: UserSubredditDataModel
	mutations: AccountMutationsDataModel
}
type FolderModel {
	name: String
	bucketId: String
}
type SubredditListItemQueryModel {
	subredditId: String
	subredditKindWithId: String
	displayName: String
	displayNamePrefixed: String
	primaryColorKey: String
	keyColor: String
	communityIconUrl: String
	iconImg: String
	subredditType: String
	userHasFavorited: Boolean
	over18: Boolean
	userIsSubscriber: Boolean
	userIsModerator: Boolean
	isMyReddit: Boolean
}
type ProductInfoUiModel {
	name: String
	description: String
	appName: Unknown
	basePrice: BasePrice
	terms: String
	image: String
	metadata: Unknown
}
type FieldError {
	field: String
	message: String
}
type Error {
	message: String
	code: String
}
type VideoUploadResponse {
	websocketUrl: String
	fieldErrors: [Unknown]
	errors: [Unknown]
	post: PostCreated
}
type DataSourceInput {
	title: String
	bodyText: String
	subreddit: String
	resubmit: Boolean
	sendReplies: Boolean
	flairInput: FlairInput
	videoInput: Unknown
	videoGifInput: Unknown
	isNsfw: Boolean
	isSpoiler: Boolean
	isBrand: Boolean
	videoReact: VideoReactInput
	postPermissions: PostPermissionInput
	targetLanguage: String
	correlationId: String
	isClubContent: Boolean
}
type PremiumSubscriptionSummary {
	hasSubscribedToPremium: Boolean
	hasActivePremiumSubscription: Boolean
	expiresAt: Int
	startedAt: Int
}
type Generic {
	e: Unknown
}
type AvatarExplainerJsonLayout {
	sections: [Unknown]
	metadata: JsonLayoutMetadata
}
type DataFetchInput {
	listingsQueries: [Unknown]
	artistsQueries: [Unknown]
}
type StorefrontJsonLayout {
	sections: [Unknown]
	metadata: JsonLayoutMetadata
}
type RandomSnoovatarJson {
	encodedImage: String
	accessoryIds: [Unknown]
}
type MarketingEventJson {
	startsAt: String
	endsAt: String
	name: String
	text: String
	tags: [Unknown]
	mobileAssetUrls: [Unknown]
}
type JsonLayoutMetadata {
	id: String
	telemetry: JsonTelemetryMetadata
}
type JsonTelemetryMetadata {
	header: String
	description: String
}
type Loaded {
}
type GetParams {
	correlationId: String
	contextSubredditId: String
	postTitle: String
	postBodyMarkdown: String
}
type JsonBrowseAllBody {
	title: String
	image: String
}
type JsonCategoryDescriptor {
	id: String
	title: String
	subtitle: String
	description: String
	image: String
	utilities: [Unknown]
	data: JsonListingsQueryDescriptor
}
type DeepLink {
	type: String
	deeplink: String
	announcementCategoryDetails: AnnouncementCategoryDetails
}
type JsonOutfitsGallery {
	id: String
	hidden: Boolean
	body: JsonOutfitsBody
}
type JsonAnnouncementBannerRow {
	id: String
	hidden: Boolean
	body: JsonAnnouncementBannerBody
	startAt: String
	endAt: String
}
type JsonListingsFilters {
	ids: [Unknown]
	artistIds: [Unknown]
	theme: String
	status: String
	priceLowerBound: Int
	priceUpperBound: Int
	totalInventoryLowerBound: Int
	totalInventoryUpperBound: Int
	percentInventoryRemainingLowerBound: Int
	percentInventoryRemainingUpperBound: Int
	tags: [Unknown]
	textMatch: String
	releasedWithinDays: Int
}
type ImageBody {
	url: String
}
type JsonListingsQueryDescriptor {
	filters: JsonListingsFilters
	sort: String
}
type UploadQueued {
	requestId: String
}
type Space {
	type: String
	body: SpaceBody
}
type TextAppearanceJson {
	font: Unknown
	alignment: Unknown
}
type TextBody {
	content: String
	appearance: TextAppearanceJson
}
type Image {
	type: String
	body: ImageBody
}
type Button {
	type: String
	body: ButtonBody
}
type ButtonBody {
	title: String
	deeplink: String
	appearance: ButtonAppearanceJson
}
type SpaceBody {
}
type TranscodingCompleteEvent {
	key: String
	success: Boolean
}
type ButtonAppearanceJson {
	size: Unknown
	style: Unknown
}
type UploadFailed {
	requestId: String
}
type UploadNotStarted {
	requestId: String
}
type UploadInProgress {
	requestId: String
}
type JsonOutfitsBody {
	title: String
	cta: String
	data: JsonListingsQueryDescriptor
}
type PostGalleryParams {
	subreddit: String
	apiType: String
	showErrorList: Boolean
	title: String
	text: String
	isSpoiler: Boolean
	isNsfw: Boolean
	flairId: String
	flairText: String
	items: [Unknown]
	validateOnSubmit: Boolean
}
type PostPublished {
	requestId: String
}
type PostQueued {
	requestId: String
}
type JsonBrowseAllRow {
	id: String
	hidden: Boolean
	body: JsonBrowseAllBody
}
type JsonArtistsQueryDescriptor {
	filters: JsonArtistsFilters
}
type JsonArtistsFilters {
	ids: [Unknown]
	withAvailableListingsOnly: Boolean
}
type JsonUtilityBadge {
	icon: String
	description: String
}
type Text {
	type: String
	body: TextBody
}
type Body {
	id: String
	type: String
	text: String
}
type UploadProgress {
	requestId: String
}
type JsonArtistsCarouselBody {
	title: String
	cta: String
	data: JsonArtistsQueryDescriptor
}
type UploadError {
	requestId: String
	exception: Unknown
}
type Title {
	id: String
	type: String
	text: String
}
type PostFailed {
	requestId: String
}
type JsonArtistRows {
	id: String
	hidden: Boolean
	body: JsonArtistsBody
}
type JsonArtistsBody {
	cta: String
	data: JsonArtistsQueryDescriptor
}
type JsonArtistsCarousel {
	id: String
	hidden: Boolean
	body: JsonArtistsCarouselBody
}
type JsonCategoriesRow {
	id: String
	hidden: Boolean
	body: JsonCategoriesBody
}
type JsonOutfitsRow {
	id: String
	hidden: Boolean
	body: JsonOutfitsBody
}
type SupplementalImage {
	id: String
	type: String
	url: String
}
type UploadComplete {
	requestId: String
}
type JsonCategoriesBody {
	title: String
	cta: String
	size: Unknown
	content: [Unknown]
}
type AnnouncementCategoryDetails {
	id: String
	title: String
	subtitle: String
	description: String
	imageUrl: String
}
type BannerDetails {
	type: String
	contents: [Unknown]
}
type JsonAnnouncementBannerBody {
	bannerImageUrl: String
	size: Unknown
	destination: Unknown
}
type FullBleedImage {
	id: String
	type: String
	url: String
}
type SubTitle {
	id: String
	type: String
	text: String
}
type AccountStoreKey {
	userName: String
	forceRefresh: Boolean
}
type SubredditPreloadParams {
	subredditName: String
}
type MarkdownConvertedResponse {
	output: String
}
type InterestTopics {
	schemeName: String
	topics: [Unknown]
}
type Params {
	screen: Unknown
	uri: String
	isGif: Boolean
	linkModel: LinkDownloadModel
	imageWidth: Int
	imageHeight: Int
}
type DownloadFileParams {
	screen: Unknown
	uri: String
	showOnCompleteNotification: Boolean
	resultCallback: Unknown
}
type LinkDownloadModel {
	subreddit: String
	author: String
	quarantine: Boolean
	over18: Boolean
	subredditType: String
}
type LogFileInfo {
	filePath: String
	format: Unknown
}
type ResponseEffect {
	effect: Unknown
	metadata: BusMetadata
	onUIEvent: Unknown
}
type ShowToast {
	model: ToastPresentationModel
}
type MockedFeedElement {
	listingType: Unknown
	position: String
}
type CustomPostPrivacyInfoViewState {
	appName: String
	author: String
	status: Unknown
	enableAppDetailsPageBtn: Boolean
}
type InitAppDetails {
	linkId: String
}
type CustomPostIsVisible {
	isVisible: Boolean
}
type CustomPostData {
	bundle: Unknown
	config: Unknown
	cached: Unknown
	linkId: String
	authorId: String
	subredditId: String
	subredditName: String
	fullScreenWebViewUrl: String
	fullScreenWebViewId: String
	isFullScreenWebView: Boolean
}
type BlockEffect {
	effect: Unknown
	onUIEvent: Unknown
	onRender: Unknown
	eventCode: Unknown
	metadata: BusMetadata
}
type SizeChanged {
}
type CustomPostViewState {
	uiRoot: Unknown
	error: Unknown
	isInitialRender: Boolean
	allowRetryAfterError: Boolean
	retryEvent: Unknown
}
type DevPlatformAppInfo {
	appSlug: String
	appName: String
	author: String
}
type SizeInfo {
}
type CustomPostPresentationContext {
	location: Unknown
	feedType: String
}
type ContextActionParams {
	host: String
	thingId: String
	contextType: Unknown
	actionDescription: Unknown
	inputResponses: Unknown
}
type OnboardingSnoovatar {
	id: String
	name: String
	styles: Unknown
	accessoryIds: [Unknown]
	outfitImageURL: String
}
type GenericError {
	message: String
}
type Params {
	username: String
	currentPassword: String
	newPassword: String
}
type CountryCodesNames {
	isoCode: String
	name: String
}
type ContentLanguage {
	translatedDisplayName: String
	isoCode: String
}
type AwardResponse {
	awardSucceeded: Boolean
	awardings: [Unknown]
	errors: [Unknown]
	treatmentTags: [Unknown]
}
type Verified {
	verifyResult: Unknown
}
type PremiumSubscriptionPackage {
	id: String
	sku: String
	formattedPrice: String
	globalProduct: GlobalProductPurchasePackage
	globalProductOffer: GlobalProductOffer
	skuDetails: Unknown
}
type Error {
	throwable: Unknown
}
type Packages {
	isEligibleForFreeTrial: Unknown
	monthly: PremiumSubscriptionPackage
	annual: PremiumSubscriptionPackage
	annualSavingsPercentage: String
	annualSavingsPercentageNumber: Int
	globalProductOffer: GlobalProductOffer
}
type Purchased {
	purchase: Unknown
}
type Params {
	skuDetails: Unknown
	correlationId: String
	offer: GlobalProductOffer
	purchasePackage: GlobalProductPurchasePackage
}
type CurrentUserAwarding {
	awardingId: String
}
type UseCaseInput {
	destination: Unknown
	analyticsReferrer: DeepLinkInfo
}
type AvatarUpdate {
	initialAvatarUpdate: BatchUpdate
	authorUsername: String
	source: Unknown
}
type Enabled {
	isSoldOut: Boolean
}
type ModelUnchanged {
	model: SnoovatarModel
}
type UnavailableAccessoriesDetected {
	model: SnoovatarModel
	unavailableAccessories: [Unknown]
}
type ListingsPaginatedRequest {
	loadSize: String
	listingsFilters: StorefrontListingsFilterModel
	listingsSort: Unknown
}
type UIEventDetails {
	event: Unknown
}
type RenderPostDetails {
	blockRenderEventType: Unknown
	actionId: String
	actionData: Unknown
}
type Images {
	marketing: ImageUrls
	purchaseSuccess: ImageUrls
}
type ImageUrl {
	url: String
}
type ImageUrls {
	mdpi: ImageUrl
	hdpi: ImageUrl
	xhdpi: ImageUrl
	xxhdpi: ImageUrl
	xxxhdpi: ImageUrl
}
type DevvitSpanBatch {
	spans: [Unknown]
}
type DevvitTruncatableString {
	value: String
}
type RequestDetails {
	type: Unknown
	renderPostDetails: RenderPostDetails
	uiEventDetails: UIEventDetails
}
type Strings {
}
type GetAvailableEmotesParams {
	subredditKindWithId: String
	userKindWithId: String
	subredditName: String
	source: Unknown
}
type UploadFailures {
	recoverableFailedFiles: [Unknown]
}
type UploadComplete {
	subredditName: String
	uploadedFileCount: String
	uploadFailures: UploadFailures
}
type FileUploadComplete {
	subredditName: String
	emote: Emote
}
type UploadError {
	subredditName: String
	throwable: Unknown
}
type Enabled {
	sets: [Unknown]
	source: Unknown
}
type FileUploadError {
	subredditName: String
	throwable: Unknown
}
type Root {
	metrics: Metrics
}
type CustomPostBlockDescriptor {
	type: Unknown
	stackDirection: Unknown
	actionType: Unknown
}
type CustomPostAnalyticsDelegateDetails {
	linkId: String
	appSlug: String
	appId: String
	appName: String
	blockDescriptor: CustomPostBlockDescriptor
	customPostPresentationContext: CustomPostPresentationContext
	subredditId: String
}
type TimerMapKey {
	installId: String
	actor: String
}
type KeyCounterMapKey {
	installId: String
	actor: String
}
type Metrics {
	init: InitRuntimeMetric
}
type InitRuntimeMetric {
	start: Int
	end: Int
}
type Loaded {
	postViewState: PostViewState
	voteViewState: VoteViewState
	commentViewState: CommentViewState
	shareViewState: ShareViewState
	link: Unknown
}
type BusEvent {
	eventCode: BusMetadata
	event: Unknown
}
type Loading {
	postViewState: PostViewState
}
type BusError {
	eventCode: BusMetadata
}
type BusMetadata {
	thingId: String
	subredditId: String
	hostname: String
	actionId: String
	appName: String
	appVersion: String
	isFullScreenWebView: Boolean
}
type FullBleedScreenDependencies {
	params: FullScreenDevPlatformParams
}
type PostViewState {
	webViewUrl: String
	webViewId: String
	title: String
}
type DevvitAppError {
	errorCode: String
	errorMessage: String
}
type ApiError {
	errorCodes: Unknown
}
type ProductPaymentBottomSheetScreenDependencies {
	params: ProductInfoParameters
	bottomSheetNavigationEvent: Unknown
	onDismiss: Unknown
}
type Production {
	balance: Boolean
	showTerms: Boolean
	productInfo: ProductInfoUiModel
	isEmployeeSandboxEnabled: Boolean
}
type NavigateToGoldPurchase {
	params: GoldPurchaseParameters
}
type NavigateToProductPurchase {
	params: ProductPurchaseParameters
}
type DismissSheet {
	completed: Boolean
}
type GoldPurchase {
	params: GoldPurchaseParameters
}
type Sandbox {
	showTerms: Boolean
	productInfo: ProductInfoUiModel
}
type ProductInfo {
	navigationDirection: Unknown
	params: ProductInfoParameters
}
type ProductInfoLoaded {
	analyticsData: ProductInfoAnalyticsData
}
type Loaded {
	goldBalance: Int
	productInfo: ProductInfo
}
type ProductPurchaseParameters {
	product: PaymentProduct
	environment: Unknown
	checkoutItem: CheckoutItem
	sandboxSuccess: Boolean
	correlationId: String
	productInfoAnalyticsData: ProductInfoAnalyticsData
}
type InProgress {
	newLoadingTextEnabled: Boolean
}
type ProductPurchase {
	params: ProductPurchaseParameters
}
type ProductInfoParameters {
	product: PaymentProduct
	correlationId: String
}
type Key {
	hostname: String
	thingId: String
}
type AppBundleRepositoryError {
	message: String
	retry: Boolean
}
type ImageIsUploading {
	imageFile: String
}
type ImageSuccessfullyUploaded {
	imageFile: String
	imageUrl: String
}
type SubredditInfoChildData {
	name: String
}
type SubredditInfoData {
	children: [Unknown]
}
type SubredditInfoChild {
	data: SubredditInfoChildData
}
type SubredditInfoResponse {
	data: SubredditInfoData
}
type RuntimePoolEntry {
	id: String
	bundleHostname: String
	runtime: Unknown
}
type TopUpGold {
	subredditId: String
	postId: String
	correlationId: String
	customGoldPurchaseUiModel: CustomGoldPurchaseUiModel
}
type CheckoutItem {
	goldAmount: String
}
type OrderBy {
	start: Unknown
}
type ProductInfo {
	id: String
	name: String
	description: String
	environment: Unknown
	appName: Unknown
	basePrice: BasePrice
	terms: String
	image: String
	metadata: Unknown
}
type BasePrice {
	amount: String
}
type BuyGoldToPurchaseProduct {
	purchaseParameters: ProductPurchaseParameters
	subredditId: String
	postId: String
	correlationId: String
	customGoldPurchaseUiModel: CustomGoldPurchaseUiModel
}
type AvatarUri {
	uri: String
}
type StackConfigWrapper {
	stackConfig: Unknown
}
type Unknown
